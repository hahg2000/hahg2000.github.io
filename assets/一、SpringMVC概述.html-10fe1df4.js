import{_ as l,W as p,X as o,Y as n,Z as s,$ as t,a2 as e,C as i}from"./framework-0bc3c581.js";const c={},r=e('<h1 id="一、springmvc概述" tabindex="-1"><a class="header-anchor" href="#一、springmvc概述" aria-hidden="true">#</a> 一、SpringMVC概述</h1><h2 id="_1-1-springmvc简介" tabindex="-1"><a class="header-anchor" href="#_1-1-springmvc简介" aria-hidden="true">#</a> 1.1 SpringMVC简介</h2><p>SpringMVC 也叫 Spring web mvc ，属于表现层的框架。SpringMVC 是 Spring 框架的一部分，是在 Spring3.0 后发布的。</p><img src="https://raw.githubusercontent.com/hahg2000/SSMPic/main/springmvc-概述.png" style="zoom:50%;"><p>由以上 Spring 的结构图可以看出，Spring 由四大部分组成：Dao 部分（ DAO 与 ORM ）、AOP 部分、Web 部分（ JEE 与 Web），及 IoC 容器部分（Core）。</p><h2 id="_1-2-第一个springmvc程序" tabindex="-1"><a class="header-anchor" href="#_1-2-第一个springmvc程序" aria-hidden="true">#</a> 1.2 第一个SpringMVC程序</h2><p>项目：primary</p><p>完成功能：用户提交一个请求，服务端处理器在接收到这个请求后，给出一条欢迎信息，在响应页面中显示该信息。</p><h3 id="_1-2-1-导入jar包" tabindex="-1"><a class="header-anchor" href="#_1-2-1-导入jar包" aria-hidden="true">#</a> 1.2.1 导入Jar包</h3><p>在创建好web项目后，首先要导入 Jar 包。SpringMVC 需要的基本 Jar 包，是在原 Spring 的 Jar 包（Spring 中事务部分所用到的 Spring 的所有 Jar 包）基础上，增加了两个 Jar 包。</p><ul><li>Spring-context-support：包含支持UI模版，邮件服务，缓存Cache等方面的类。</li><li>Spring-webmvc：对SpringMVC的实现。</li></ul><p>总体 Jar 包如下图：</p><img src="https://raw.githubusercontent.com/hahg2000/SSMPic/main/springMVCJar包.png" style="zoom:80%;"><h3 id="_1-2-2-创建处理器" tabindex="-1"><a class="header-anchor" href="#_1-2-2-创建处理器" aria-hidden="true">#</a> 1.2.2 创建处理器</h3><p>创建处理器类，处理器类需要实现 Controller 接口。</p><p>自动生成的代码如下：</p>',16),u=n("div",{class:"language-java line-numbers-mode","data-ext":"java"},[n("pre",{java:"",class:"language-java"},[n("code",null,[n("span",{class:"token keyword"},"public"),s(),n("span",{class:"token keyword"},"class"),s(),n("span",{class:"token class-name"},"MyController"),s(),n("span",{class:"token keyword"},"implements"),s(),n("span",{class:"token class-name"},"Controller"),n("span",{class:"token punctuation"},"{"),s(`

	`),n("span",{class:"token annotation punctuation"},"@Override"),s(`
	`),n("span",{class:"token keyword"},"public"),s(),n("span",{class:"token class-name"},"ModelAndView"),s(),n("span",{class:"token function"},"handleRequest"),n("span",{class:"token punctuation"},"("),n("span",{class:"token class-name"},"HttpServletRequest"),s(" request"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token class-name"},"HttpServletResponse"),s(" response"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token keyword"},"throws"),s(),n("span",{class:"token class-name"},"Exception"),s(),n("span",{class:"token punctuation"},"{"),s(`
		`),n("span",{class:"token comment"},"// TODO Auto-generated method stub"),s(`
		`),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token keyword"},"null"),n("span",{class:"token punctuation"},";"),s(`
	`),n("span",{class:"token punctuation"},"}"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"highlight-lines"},[n("br"),n("br"),n("br"),n("div",{class:"highlight-line"}," "),n("br"),n("br"),n("br"),n("br")]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),d=e(`<p>根据第 4 行可知，该方法需要返回 ModelAndView 对象，所以我们需要 new 一个出来，并且需要存入一些数据：</p><ul><li>使用 addObject 方法向其 Model 中添加数据：Model 的底层为一个 Map。另外需要注意的是，addObject() 方法的返回值为 ModelAndView，则说明可以使用链式编程方式来添加数据；</li><li>使用 setViewName 方法设置跳转的页面。</li></ul><p>下面代码往 Model 添加了两个数据；并且设置了 “ /WEB-INF/jsp/welcome.jsp ” 的跳转页面。</p><p><strong>注：WEB-INF 文件夹下的文件不能通过地址栏直接访问。</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyController</span> <span class="token keyword">implements</span> <span class="token class-name">Controller</span><span class="token punctuation">{</span>

	<span class="token annotation punctuation">@Override</span>
	<span class="token keyword">public</span> <span class="token class-name">ModelAndView</span> <span class="token function">handleRequest</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
		<span class="token class-name">ModelAndView</span> mv <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ModelAndView</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		mv<span class="token punctuation">.</span><span class="token function">addObject</span><span class="token punctuation">(</span><span class="token string">&quot;message1&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;hello&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addObject</span><span class="token punctuation">(</span><span class="token string">&quot;message2&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;world&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		mv<span class="token punctuation">.</span><span class="token function">setViewName</span><span class="token punctuation">(</span><span class="token string">&quot;/WEB-INF/jsp/welcome.jsp&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">return</span> mv<span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 welcome.jsp 文件中输出这两个信息内容：</p><div class="language-jsp line-numbers-mode" data-ext="jsp"><pre class="language-jsp"><code>&lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=utf-8&quot;
    pageEncoding=&quot;utf-8&quot;%&gt;
&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
&lt;meta charset=&quot;utf-8&quot;&gt;
&lt;title&gt;Insert title here&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
	\${message1} 
	\${message2}
&lt;/body&gt;
&lt;/html&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_1-2-3-注册处理器" tabindex="-1"><a class="header-anchor" href="#_1-2-3-注册处理器" aria-hidden="true">#</a> 1.2.3 注册处理器</h3><p>由于定义处理器的类名是自定义的，所以需要在 Spring 容器里注册它。约束头使用的是最全约束。</p><ul><li>class 属性：处理器的全限定性类名；</li><li>id 属性：是一个请求 URI。表示当客户端提交该请求时，会访问 class 指定的这个处理器。</li></ul><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token prolog">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://www.springframework.org/schema/beans<span class="token punctuation">&quot;</span></span>
	<span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">&quot;</span></span>
	<span class="token attr-name"><span class="token namespace">xmlns:</span>aop</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://www.springframework.org/schema/aop<span class="token punctuation">&quot;</span></span>
	<span class="token attr-name"><span class="token namespace">xmlns:</span>context</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://www.springframework.org/schema/context<span class="token punctuation">&quot;</span></span>
	<span class="token attr-name"><span class="token namespace">xmlns:</span>tx</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://www.springframework.org/schema/tx<span class="token punctuation">&quot;</span></span>
	<span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>
        http://www.springframework.org/schema/beans 
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/aop 
        http://www.springframework.org/schema/aop/spring-aop.xsd
        http://www.springframework.org/schema/context 
        http://www.springframework.org/schema/context/spring-context-4.3.xsd
        http://www.springframework.org/schema/tx 
        http://www.springframework.org/schema/tx/spring-tx.xsd
        <span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
	
	<span class="token comment">&lt;!-- 注册处理器 --&gt;</span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>/my.do<span class="token punctuation">&quot;</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>com.hahg.handlers.MyController<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_1-2-4-注册中央调度器" tabindex="-1"><a class="header-anchor" href="#_1-2-4-注册中央调度器" aria-hidden="true">#</a> 1.2.4 注册中央调度器</h3><p>因为中央调度器也是一个 Servlet ，所以需要在 web.xml 注册。</p><ul><li>注册需要使用得到 &lt;servlet/&gt; 标签里的四个子标签： <ul><li>子标签 &lt;servlet-name/&gt; 来指定该 Servlet 的名字；</li><li>子标签 &lt;servlet-class/&gt; 来指定该 Servlet 的类型；</li><li>子标签 &lt;init-param/&gt; 来指定 Spring 容器配置文件的位置；若不使用该标签，则在默认位置查找。</li><li>子标签 &lt;load-on-startup/&gt; 来指定 Servlet 的加载时机，当值大于等于0时，表示容器 <strong>在启动时就加载并初始化这个 Servlet</strong>，数值越小，该 Servlet 的优先级就越高，其被创建的也就越早；当值小于 0 或者没有指定时，则表示该Servlet 在 <strong>真正被使用时才会去创建</strong>。</li></ul></li></ul><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">&gt;</span></span>springMVC<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-class</span><span class="token punctuation">&gt;</span></span>org.springframework.web.servlet.DispatcherServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-class</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>init-param</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">&gt;</span></span>contextConfigLocation<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">&gt;</span></span>classpath:springmvc.xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>init-param</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>load-on-startup</span><span class="token punctuation">&gt;</span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>load-on-startup</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 DispatcherServlet 的父类 FrameworkServlet 的源码中的注释可知：默认的加载位置为 WEB-INF 文件夹里的 &quot; Servlet名字-servlet.xml &quot; 文件。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">/* &lt;p&gt;Passes a &quot;contextConfigLocation&quot; servlet init-param to the context instance,
 * parsing it into potentially multiple file paths which can be separated by any
 * number of commas and spaces, like &quot;test-servlet.xml, myServlet.xml&quot;.
 * If not explicitly specified, the context implementation is supposed to build a
 * default location from the namespace of the servlet.
 * &lt;p&gt;The default namespace is &quot;&#39;servlet-name&#39;-servlet&quot;, e.g. &quot;test-servlet&quot; for a
 * servlet-name &quot;test&quot; (leading to a &quot;/WEB-INF/test-servlet.xml&quot; default location
 * with XmlWebApplicationContext). The namespace can also be set explicitly via
 * the &quot;namespace&quot; servlet init-param.
 */</span>
 
 <span class="token comment">/* 翻译
 * 将“contextConfigLocation” servlet的init param传递给上下文实例，
 * 将其解析为可能的多个文件路径，这些路径可以由任意数量的逗号和空格分隔，
 * 如“test-servlet.xml，myServlet.xml”。
 * 如果没有显式指定，上下文实现应该从servlet的名称空间构建一个默认位置。
 * 默认名称空间是 &quot; &#39;servlet-name&#39;-servlet &quot;，
 * 例如，servlet名称为&quot;test&quot;的&quot;test servlet&quot;
 *（指向带有XmlWebApplicationContext的&quot;/WEB-INF/test-servlet.xml&quot;默认位置）。
   还可以通过“namespace”servlet init param显式设置名称空间。
 */</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>还需要使用一个标签 &lt;servlet-mapping/&gt; 来指定 Servlet 的映射配置： <ul><li>子标签 &lt;servlet-name/&gt; ：来指明需要配置 Servlet 的名字；</li><li>子标签 &lt;url-pattern/&gt; ：来指明访问哪个网址时，使用这个 Servlet。</li></ul></li></ul><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-mapping</span><span class="token punctuation">&gt;</span></span>
  	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">&gt;</span></span>springMVC<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">&gt;</span></span>
  	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">&gt;</span></span>*.do<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-mapping</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_1-2-5-运行结果" tabindex="-1"><a class="header-anchor" href="#_1-2-5-运行结果" aria-hidden="true">#</a> 1.2.5 运行结果</h3><p>运行结果如下，在地址栏输入 */my.do ，就成功地交给 MyController 类处理，并跳转到 welcome.jsp 显示信息。</p><figure><img src="https://raw.githubusercontent.com/hahg2000/SSMPic/main/第一个SpringMVC运行结果.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="_1-2-6-使用视图解析器" tabindex="-1"><a class="header-anchor" href="#_1-2-6-使用视图解析器" aria-hidden="true">#</a> 1.2.6 使用视图解析器</h3><p>SpringMVC 框架 <strong>为了避免对于请求资源路径与扩展名上的冗余</strong>，在视图解析器 InternalResouceViewResolver 中引入了请求的前辍与后辍。</p><p>而 ModelAndView 中只需给出要跳转页面的文件名即可，对于具体的文件路径与文件扩展名，视图解析器会 <strong>自动完成拼接</strong>。</p><p>首先先在 Spring 容器里注册它：</p><ul><li>其 bean 标签不需要 id 属性，class 属性的值为 【org.springframework.web.servlet.view.InternalResourceViewResolver】；</li><li>里面需要配置两个属性： <ul><li>第一个为 prefix，其 value 值为需要拼接的 <strong>文件路径</strong>；</li><li>第二个为 suffix，其 value 值为需要拼接的 <strong>文件扩展名</strong>。</li></ul></li></ul><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>org.springframework.web.servlet.view.InternalResourceViewResolver<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>prefix<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>/WEB-INF/jsp/<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>suffix<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>.jsp<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后在处理器 MyController 里，改变 setViewName 方法里的参数</p>`,29),m=n("div",{class:"language-java line-numbers-mode","data-ext":"java"},[n("pre",{java:"",class:"language-java"},[n("code",null,[n("span",{class:"token keyword"},"public"),s(),n("span",{class:"token keyword"},"class"),s(),n("span",{class:"token class-name"},"MyController"),s(),n("span",{class:"token keyword"},"implements"),s(),n("span",{class:"token class-name"},"Controller"),n("span",{class:"token punctuation"},"{"),s(`

	`),n("span",{class:"token annotation punctuation"},"@Override"),s(`
	`),n("span",{class:"token keyword"},"public"),s(),n("span",{class:"token class-name"},"ModelAndView"),s(),n("span",{class:"token function"},"handleRequest"),n("span",{class:"token punctuation"},"("),n("span",{class:"token class-name"},"HttpServletRequest"),s(" request"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token class-name"},"HttpServletResponse"),s(" response"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token keyword"},"throws"),s(),n("span",{class:"token class-name"},"Exception"),s(),n("span",{class:"token punctuation"},"{"),s(`
		`),n("span",{class:"token class-name"},"ModelAndView"),s(" mv "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"new"),s(),n("span",{class:"token class-name"},"ModelAndView"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
		mv`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"addObject"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"message1"'),n("span",{class:"token punctuation"},","),n("span",{class:"token string"},'"hello"'),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"addObject"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"message2"'),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token string"},'"world"'),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
		`),n("span",{class:"token comment"},'/* mv.setViewName("/WEB-INF/jsp/welcome.jsp"); */'),s(`
		mv`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"setViewName"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"welcome"'),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
		`),n("span",{class:"token keyword"},"return"),s(" mv"),n("span",{class:"token punctuation"},";"),s(`
	`),n("span",{class:"token punctuation"},"}"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"highlight-lines"},[n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("div",{class:"highlight-line"}," "),n("br"),n("br"),n("br")]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),k=e(`<h3 id="_1-2-7-回顾开发流程" tabindex="-1"><a class="header-anchor" href="#_1-2-7-回顾开发流程" aria-hidden="true">#</a> 1.2.7 回顾开发流程</h3><ol><li>首先在 web.xml <strong>注册中央调度器</strong> —— web.xml；</li><li>其次在 src <strong>注册处理器</strong>，实现 Controller 接口，表明要跳转的页面 —— MyController.java；</li><li>然后在 <strong>创建需要跳转的页面</strong>，实现相应的功能 —— welcome.jsp；</li><li>最后在 Spring 容器里 <strong>注册处理器</strong> —— springmvc.xml。</li></ol><h3 id="_1-2-8-执行流程分析" tabindex="-1"><a class="header-anchor" href="#_1-2-8-执行流程分析" aria-hidden="true">#</a> 1.2.8 执行流程分析</h3><p>写完了这个程序，有几个问题需要解决：</p><p>问1：为何在网址上输入 bean 的 id 值就可以映射到相应的处理器里？</p><p>问2：在 handleRequest 方法里使用了 mv.addObject 方法来添加数据，这个数据为何可以在 welcome.jsp 里提取出来？</p><p>问3：为何在 handleRequest 方法里返回了 ModelAndView 对象，就可以跳转到 setViewName 方法里设置的页面？</p><h4 id="_1-回答问题2" tabindex="-1"><a class="header-anchor" href="#_1-回答问题2" aria-hidden="true">#</a> （1）回答问题2</h4><p>那先回答最简单的问题开始——问题3。</p><p>其实在视图解析的过程中会将 addObject 方法里添加的数据来调用 request.setAttribute 方法。</p><p>所以也可以在 jsp 里像下面这样写来展示数据。</p><div class="language-jsp line-numbers-mode" data-ext="jsp"><pre class="language-jsp"><code>&lt;body&gt;
	\${message1} 
	\${message2}&lt;br/&gt;
	\${requestScope.message1}
	\${requestScope.message2}
&lt;/body&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-回答其他问题" tabindex="-1"><a class="header-anchor" href="#_2-回答其他问题" aria-hidden="true">#</a> （2）回答其他问题</h4><p>下面是 SpringMVC 的执行流程</p><img src="https://raw.githubusercontent.com/hahg2000/SSMPic/main/springmvc执行流程.png" style="zoom:80%;"><p>问1：为何在网址上输入 bean 的 id 值就可以映射到相应的处理器里？</p><p>答1：是 HandleMapping 先根据 &lt;url-pattern/&gt; 所填写的网址进行比对，然后根据 Spring 容器找到需要执行的控制器的类名，再将这些数据给 HandleAdapt ，让其在 src 找到需要执行的类并执行它。</p><p>问3：为何在 handleRequest 方法里返回了 ModelAndView 对象，就可以跳转到 setViewName 方法里设置的页面？</p><p>答3：因为在 ViewResoler 视图解析器中，对 ModelAndView 对象进行解析，解析出了 View 的名字和其携带的数据，下一步并将这个 View 的名字去交给 View 视图类去寻找对应的 View 页面，并将携带的数据填充进页面里。</p><h3 id="_1-2-9-中央处理器的默认配置" tabindex="-1"><a class="header-anchor" href="#_1-2-9-中央处理器的默认配置" aria-hidden="true">#</a> 1.2.9 中央处理器的默认配置</h3><p>在我们没有配置上图流程中的类时，SpringMVC 会自动加载默认配置。</p><p>配置文件位置如下图，在【org.springframework.web.servlet】包里。</p><figure><img src="https://raw.githubusercontent.com/hahg2000/SSMPic/main/DispatcherServlet默认配置.jpg" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="_1-3-再解-url-pattern" tabindex="-1"><a class="header-anchor" href="#_1-3-再解-url-pattern" aria-hidden="true">#</a> 1.3 再解 &lt;url-pattern/&gt;</h2><h3 id="_1-3-1-不能写" tabindex="-1"><a class="header-anchor" href="#_1-3-1-不能写" aria-hidden="true">#</a> 1.3.1 不能写 /*</h3><p>这里的 url-pattern 不能写为/*，因为 DispatcherServlet 会将向动态页面的跳转请求，<span style="color:red;">即向 JSP 页面的跳转请求也当作是一个普通的 Controller 请求。</span></p><p>中央调度器会调用处理器映射器为其查找相应的处理器，当然是找不到的，所以在这种情况下，所有的JSP页面跳转均会报404错误。</p><h3 id="_1-3-2-最好不写为" tabindex="-1"><a class="header-anchor" href="#_1-3-2-最好不写为" aria-hidden="true">#</a> 1.3.2 最好不写为 /</h3><p>最好也不要写为 /，<span style="color:red;">因为 DispatcherServlet 会将向静态资源的获取请求，例如.css、.js、.jpg、.png 等资源的获取请求，当作是一个普通的Controller请求。</span></p><p>中央调度器会调用处理器映射器为其查找相应的处理器，当然也是找不到的，所以在这种情况下，所有的静态资源获取请求也均会报404错误。</p><h3 id="_1-3-3-不得不写为" tabindex="-1"><a class="header-anchor" href="#_1-3-3-不得不写为" aria-hidden="true">#</a> 1.3.3 不得不写为 /</h3><p>有一种情况就不得不写为 /，那就是项目使用的设计风格是 RESTful 。简单来说，RESTful 风格就是把请求参数变成请求路径的一种风格。举例如下：</p><div class="language-http line-numbers-mode" data-ext="http"><pre class="language-http"><code>// 普通格式
<span class="token header"><span class="token header-name keyword">http</span><span class="token punctuation">:</span><span class="token header-value">//localhost:8080/primary/findStudentById?id=1</span></span>
// RESTful 风格
<span class="token header"><span class="token header-name keyword">http</span><span class="token punctuation">:</span><span class="token header-value">//localhost:8080/primary/findStudentById/1</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,33),g={href:"http://my.do",target:"_blank",rel:"noopener noreferrer"},v=n("h3",{id:"_1-3-4-静态资源的访问",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_1-3-4-静态资源的访问","aria-hidden":"true"},"#"),s(" 1.3.4 静态资源的访问")],-1),h=n("p",null,"那不得不写 / 时，项目又不可能完全不导入静态资源，该怎么办呢？这时有三个解决方案。",-1),b=n("h4",{id:"_1-使用tomcat默认的servlet",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_1-使用tomcat默认的servlet","aria-hidden":"true"},"#"),s(" （1）使用Tomcat默认的Servlet")],-1),_=n("p",null,"在 web.xml 添加多个 <servlet-mapping/> 标签，其子标签 <servlet-name/> 填写 default，<url-pattern/> 填写不需要拦截的资源。",-1),q=n("div",{class:"language-xml line-numbers-mode","data-ext":"xml"},[n("pre",{xml:"",class:"language-xml"},[n("code",null,[n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),s("servlet-mapping")]),n("span",{class:"token punctuation"},">")]),s(`
    `),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),s("servlet-name")]),n("span",{class:"token punctuation"},">")]),s("default"),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"</"),s("servlet-name")]),n("span",{class:"token punctuation"},">")]),s(`
    `),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),s("url-pattern")]),n("span",{class:"token punctuation"},">")]),s("*.jpg"),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"</"),s("url-pattern")]),n("span",{class:"token punctuation"},">")]),s(`
`),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"</"),s("servlet-mapping")]),n("span",{class:"token punctuation"},">")]),s(`
`),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),s("servlet-mapping")]),n("span",{class:"token punctuation"},">")]),s(`
    `),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),s("servlet-name")]),n("span",{class:"token punctuation"},">")]),s("default"),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"</"),s("servlet-name")]),n("span",{class:"token punctuation"},">")]),s(`
    `),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),s("url-pattern")]),n("span",{class:"token punctuation"},">")]),s("*.png"),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"</"),s("url-pattern")]),n("span",{class:"token punctuation"},">")]),s(`
`),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"</"),s("servlet-mapping")]),n("span",{class:"token punctuation"},">")]),s(`
`),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),s("servlet-mapping")]),n("span",{class:"token punctuation"},">")]),s(`
    `),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),s("servlet-name")]),n("span",{class:"token punctuation"},">")]),s("default"),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"</"),s("servlet-name")]),n("span",{class:"token punctuation"},">")]),s(`
    `),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),s("url-pattern")]),n("span",{class:"token punctuation"},">")]),s("*.js"),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"</"),s("url-pattern")]),n("span",{class:"token punctuation"},">")]),s(`
`),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"</"),s("servlet-mapping")]),n("span",{class:"token punctuation"},">")]),s(`
`),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),s("servlet-mapping")]),n("span",{class:"token punctuation"},">")]),s(`
    `),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),s("servlet-name")]),n("span",{class:"token punctuation"},">")]),s("default"),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"</"),s("servlet-name")]),n("span",{class:"token punctuation"},">")]),s(`
    `),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),s("url-pattern")]),n("span",{class:"token punctuation"},">")]),s("*.css"),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"</"),s("url-pattern")]),n("span",{class:"token punctuation"},">")]),s(`
`),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"</"),s("servlet-mapping")]),n("span",{class:"token punctuation"},">")]),s(`
`)])]),n("div",{class:"highlight-lines"},[n("br"),n("br"),n("div",{class:"highlight-line"}," "),n("br"),n("br"),n("div",{class:"highlight-line"}," "),n("br"),n("br"),n("br"),n("br"),n("div",{class:"highlight-line"}," "),n("br"),n("br"),n("br"),n("br"),n("br")]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),x=e(`<p>这里可能会发现在文件里没有注册名字为 default 的 Servlet，这是因为在 Tomcat 的 web.xml 文件中，已经注册过了名字为 default 的 Servlet。</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token comment">&lt;!-- 安装路径\\Apache Software Foundation\\Tomcat 9.0\\conf\\web.xml     --&gt;</span>

<span class="token comment">&lt;!-- The default servlet for all web applications, that serves static     --&gt;</span>
<span class="token comment">&lt;!-- resources.  It processes all requests that are not mapped to other   --&gt;</span>
<span class="token comment">&lt;!-- servlets with servlet mappings (defined either here or in your own   --&gt;</span>
<span class="token comment">&lt;!-- web.xml file). --&gt;</span>
<span class="token comment">&lt;!-- 翻译
所有web应用程序的默认servlet，用于提供静态资源。
它处理所有未映射到具有servlet映射（在这里或您自己的web.xml文件中定义）
的其他servlet的请求。
--&gt;</span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">&gt;</span></span>default<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-class</span><span class="token punctuation">&gt;</span></span>org.apache.catalina.servlets.DefaultServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-class</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>init-param</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">&gt;</span></span>debug<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">&gt;</span></span>0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>init-param</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>init-param</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">&gt;</span></span>listings<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">&gt;</span></span>false<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>init-param</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>load-on-startup</span><span class="token punctuation">&gt;</span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>load-on-startup</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-使用-mvc-default-servlet-handler" tabindex="-1"><a class="header-anchor" href="#_2-使用-mvc-default-servlet-handler" aria-hidden="true">#</a> （2）使用&lt;mvc:default-servlet-handler/&gt;</h4><p>只需要在 springmvc.xml 中添加 mvc 约束 和 &lt;mvc:default-servlet-handler/&gt; 标签即可。</p><p>&lt;mvc:default-servlet-handler/&gt; 会将对静态资源的访问请求添加到 SimpleUrlHandlerMapping 的 urlMap 中，key 就是请求的 URI，而 value 则为默认 Servlet 请求处理器 <strong>DefaultServletHttpRequestHandler 对象</strong>。</p><p>而该处理器调用了 <strong>Tomcat 的 DefaultServlet</strong> 来处理静态资源的访问请求。简单来说，底层实现原理和第（1）点一样。</p><h4 id="_3-使用-mvc-resources" tabindex="-1"><a class="header-anchor" href="#_3-使用-mvc-resources" aria-hidden="true">#</a> （3）使用 &lt;mvc:resources/&gt;</h4><p>在 Spring3.0.4 版本后，Spring 中定义了专门用于处理静态资源访问请求的处理器 ResourceHttpRequestHandler。并且添加了 &lt;mvc:resources/&gt; 标签，专门用于解决静态资源无法访问问题。</p><p>需要在 springmvc.xml 中添加如下形式的配置：</p><ul><li>location 表示静态资源所在目录。当然，这里目录的根目录是 WEB-INF 。</li><li>mapping 表示对该资源的请求。注意，后面是两个星号 **。</li><li>该配置会把对该静态资源的访问请求添加到 SimpleUrlHandlerMapping 的 urlMap 中，key 就是真正与 mapping 的 URI匹配的 URI，而value则为静态资源处理器对象 ResourceHttpRequestHandler。</li></ul><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token comment">&lt;!-- &lt;mvc:default-servlet-handler/&gt; --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>resources</span> <span class="token attr-name">location</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>/img/<span class="token punctuation">&quot;</span></span> <span class="token attr-name">mapping</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>/img/**<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_1-4-绝对路径与相对路径-回顾" tabindex="-1"><a class="header-anchor" href="#_1-4-绝对路径与相对路径-回顾" aria-hidden="true">#</a> 1.4 绝对路径与相对路径（回顾）</h2>`,12),f={href:"http://show.do",target:"_blank",rel:"noopener noreferrer"},w=e(`<p>对于浏览器请求的提交方式，还可以有表单提交、超链接提交、Ajax 提交等。</p><p>与地址栏提交不同的时，这些提交方式均需要将请求写在页面文件中。</p><p>下面以超链接提交方式来讲解有关路径问题。</p><h3 id="_1-4-1-问题演示" tabindex="-1"><a class="header-anchor" href="#_1-4-1-问题演示" aria-hidden="true">#</a> 1.4.1 问题演示</h3><p>项目：accessPath。</p><p>在项目 primary 基础上修改。只需要在 index.jsp 页面中添加一个超链接。通过 index.jsp 页面的超链接，可以完成对 /WEB-INF/jsp/welcome.jsp 页面的正确访问。</p><p>但问题也就出现了：为什么在 springmvc.xml 中注册处理器时其 id 属性值是以斜杠开头，而index.jsp页面中的链接却没有以斜杠开头呢？</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token comment">&lt;!-- index.jsp --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>my.do<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>跳转到 welcome.jsp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span>
<span class="token comment">&lt;!--  springmvc.xml --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>/my.do<span class="token punctuation">&quot;</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>com.hahg.handlers.MyController<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>若在index.jsp的超链接前添加上斜杠，在访问时会报404错误，找不到相应资源。那这是为什么呢？这里面就涉及到访问路径问题了。</p><h3 id="_1-4-2-访问路径与资源名称" tabindex="-1"><a class="header-anchor" href="#_1-4-2-访问路径与资源名称" aria-hidden="true">#</a> 1.4.2 访问路径与资源名称</h3><p>通常的URL资源访问路径由两部分构成：<strong>访问路径</strong> 与 <strong>资源名称</strong>。</p>`,11),y={href:"http://xn--show-f96g.do",target:"_blank",rel:"noopener noreferrer"},S=n("li",null,"而访问路径，则是通过该路径则可以定位到指定的资源，即在 URL 资源访问路径中除了资源名称以外的其它部分。",-1),j=n("li",null,"一般情况下，在URL访问路径中，最后一部分为资源名称，而其它部分则为访问路径。",-1),M=e('<img src="https://raw.githubusercontent.com/hahg2000/SSMPic/main/访问路径示例1.png" style="zoom:80%;"><figure><img src="https://raw.githubusercontent.com/hahg2000/SSMPic/main/访问路径示例2.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="_1-4-3-绝对路径" tabindex="-1"><a class="header-anchor" href="#_1-4-3-绝对路径" aria-hidden="true">#</a> 1.4.3 绝对路径</h3><p>根据 <span style="color:red;">&quot; 访问路径是否可以独立完成资源准确定位 &quot; </span>的判别标准，可以将访问路径分为 <strong>绝对路径</strong> 与 <strong>相对路径</strong>。</p><p>绝对路径，是指根据给出的访问路径可以准确定位到资源的路径。</p>',5),C={href:"http://127.0.0.1:8080/primary/index.js",target:"_blank",rel:"noopener noreferrer"},V=e('<h3 id="_1-4-4-相对路径" tabindex="-1"><a class="header-anchor" href="#_1-4-4-相对路径" aria-hidden="true">#</a> 1.4.4 相对路径</h3><p><span style="color:red;">相对路径，是指仅根据访问路径无法准确定位资源的路径。相对路径必须要结合其参照路径才可组成可以准确定位资源的绝对路径。</span></p><p>参照路径的不同，所形成的可以准确定位资源的绝对路径也是不同的。在进行资源访问时，必须要将相对路径转换为绝对路径才可完成资源的准确定位。</p><hr><p>例如，你要告诉对方你现在的位置，你说：我在人民公园的正门门口。这就是个相对地址。因为很多城市都有人民公园，每个人民公园也都有正门。当对方不知道你在哪个城市时，他是无法准确定位你的。当然，你只所以不说是哪个城市，是因为这里存在一个默认的参照路径：与听者在同一个城市。听者会将你所说的相对地址，自动转换为一个绝对地址：听者城市+人民公园正门门口。</p><hr><p>在 Web 应用中，相对路径的写法有两种：一种是以斜杠开头的相对路径，一种是不以斜杠开头的相对路径。根据相对路径是否以斜杠开头，且出现的文件所处位置的不同，其默认的参照路径是不同的。<span style="color:red;">这也是相对路径容易出错的地方：确定参照路径。</span></p><h4 id="_1-以斜杠开头的相对路径" tabindex="-1"><a class="header-anchor" href="#_1-以斜杠开头的相对路径" aria-hidden="true">#</a> （1）以斜杠开头的相对路径</h4><p>以斜杠开头的相对路径，根据<span style="color:red;">路径所在文件所处位置</span>的不同，分为两种：<strong>前台路径</strong> 与 <strong>后台路径</strong>。</p><h5 id="a、前台路径" tabindex="-1"><a class="header-anchor" href="#a、前台路径" aria-hidden="true">#</a> A、前台路径</h5><p>所谓前台路径是指，由浏览器解析执行的代码中所包含的路径。分为</p><ul><li>html 及 jsp 中的静态部分： <ul><li>&lt;img src=&quot; &quot;/&gt;</li><li>&lt;a href=&quot; &quot;&gt; &lt;/a&gt;、&lt;form action=&quot;&quot;&gt; &lt;/form&gt;等；</li></ul></li><li>像 css 中的 background:img(“ ”) 等；像 js 中的 window.location.href=” ” 等，都属于前台路径。</li></ul><hr>',13),E={href:"http://127.0.0.1:8080/",target:"_blank",rel:"noopener noreferrer"},R=n("h5",{id:"b、后台路径",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#b、后台路径","aria-hidden":"true"},"#"),s(" B、后台路径")],-1),A=n("p",null,[s("所谓后台路径是指，由"),n("span",{style:{color:"red"}},"服务器解析执行的代码及文件中所包含的路径"),s("。")],-1),I=n("p",null,"例如，java 代码中的路径、jsp 文件动态部分（java代码块）中的路径、xml 文件中的路径（xml文件是要被java代码加载入内存，并由 java 代码解析的）等。",-1),B={href:"http://127.0.0.1:8080/primary/",target:"_blank",rel:"noopener noreferrer"},W=n("hr",null,null,-1),F=n("p",null,[n("strong",null,"举例 1："),s(" 注册处理器 Controller")],-1),N=n("li",null,"注册处理器所填的 id，是要去浏览器必须提交如下绝对路径才能访问到 MyController 这个类；",-1),P=n("li",null,"而绝对路径 = 参照路径 + 相对路径，由上可知该代码出现在 xml 文件里，所以是后台路径；",-1),H={href:"http://127.0.0.1:8080/primary/",target:"_blank",rel:"noopener noreferrer"},O={href:"http://127.0.0.1:8080/primary/my.do",target:"_blank",rel:"noopener noreferrer"},T=e(`<div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token comment">&lt;!-- 注册处理器 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>/my.do<span class="token punctuation">&quot;</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>com.hahg.handlers.MyController<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>举例 2：</strong> 使用 a 标签访问处理器</p>`,2),D=n("li",null,[n("p",null,"这个路径出现在 JSP 页面，所以是前台路径")],-1),J=n("strong",null,"当前 Web 服务器的根",-1),U={href:"http://127.0.0.1:8080",target:"_blank",rel:"noopener noreferrer"},L={href:"http://localhost:8080",target:"_blank",rel:"noopener noreferrer"},z=n("strong",null,"以斜杆开头",-1),$={href:"http://localhost:8080/my.do",target:"_blank",rel:"noopener noreferrer"},X=n("strong",null,"没有以斜杆开头",-1),Y={href:"http://localhost:8080/primary/%EF%BC%8C",target:"_blank",rel:"noopener noreferrer"},G={href:"http://localhost:8080/primary/my.do%EF%BC%8C%E8%AF%A5%E8%B7%AF%E5%BE%84%E6%98%AF%E5%8F%AF%E4%BB%A5%E8%AE%BF%E9%97%AE%E5%88%B0%E5%A4%84%E7%90%86%E5%99%A8%E7%9A%84%E3%80%82",target:"_blank",rel:"noopener noreferrer"},Z=e(`<div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
	<span class="token comment">&lt;!-- 
	访问失败
	&lt;a href=&quot;/my.do&quot;&gt;点击跳转&lt;/a&gt; 
	--&gt;</span>
	
	<span class="token comment">&lt;!-- 访问成功 --&gt;</span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>my.do<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>点击跳转<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span> 
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>举例 3：</strong> 图片访问路径</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>纱路<span class="token punctuation">&quot;</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>img/纱路.jpg<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>	
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol><li>这是前台路径，前台路径的参照路径是 <strong>当前 Web 服务器的根</strong></li><li>若加斜杆，则在服务器的根目录找 img 文件夹下的文件，由下图可知，根目录里没有我们要找的东西。</li></ol><img src="https://raw.githubusercontent.com/hahg2000/SSMPic/main/tomcat服务器的根目录.png" style="zoom:75%;"><ol start="3"><li>而我们要找的资源在 webapps 文件夹下我们自己项目文件夹里，如下图所示。</li></ol><img src="https://raw.githubusercontent.com/hahg2000/SSMPic/main/tomcat项目里的内容.png" style="zoom:80%;"><ol start="4"><li>由第 3 点可知，因为访问路径需要在前面加上项目名，所以就使用不加斜杆的写法。</li></ol><p><strong>举例 4：</strong> a 标签的进行转发到本页面的问题</p>`,9),K=n("strong",null,"模块信息",-1),Q={href:"http://my.do",target:"_blank",rel:"noopener noreferrer"},nn=e(`<div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token comment">&lt;!-- 注册处理器 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>/test/my.do<span class="token punctuation">&quot;</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>com.hahg.handlers.MyController<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>而在 a 标签里的访问路径是不需要加上斜杆的，第一次点就没有问题。</li></ol><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>test/my.do<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>点击跳转<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span> 
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3),sn={start:"3"},an=n("strong",null,"当前的访问路径",-1),tn={href:"http://localhost:8080/primary/test/",target:"_blank",rel:"noopener noreferrer"},en=e(`<div class="language-ini line-numbers-mode" data-ext="ini"><pre class="language-ini"><code>// 第二次地址栏中出错显示的地址
http://localhost:8080/primary/test/test/my.do

// 第一次地址栏正确显示的地址
http://localhost:8080/primary/test/my.do
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>**举例 4：**举例 3 问题的解决方案</p>`,2),ln={href:"http://localhost:8080/primary/",target:"_blank",rel:"noopener noreferrer"},pn=e(`<div class="language-jsp line-numbers-mode" data-ext="jsp"><pre class="language-jsp"><code>&lt;!-- 访问成功 --&gt;
&lt;a href=&quot;\${pageContext.request.contextPath}/test/my.do&quot;&gt;点击跳转&lt;/a&gt; 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>使用 &lt;base/&gt; 标签，base 标签会在当前页面不以斜杆开头的路径加上 basePath 路径，使其变为绝对路径。</li></ol><div class="language-jsp line-numbers-mode" data-ext="jsp"><pre class="language-jsp"><code>&lt;head&gt;
	&lt;meta charset=&quot;UTF-8&quot;&gt;
	&lt;title&gt;Insert title here&lt;/title&gt;
	&lt;%  
	String path = request.getContextPath();
	String basePath = request.getScheme()+&quot;://&quot;+request.getServerName()+&quot;:&quot;+request.getServerPort()+path+&quot;/&quot;;
	%&gt;
	&lt;base href=&quot;&lt;%=basePath%&gt;&quot;&gt;
&lt;/head&gt;

&lt;body&gt;
	&lt;!-- 访问成功 --&gt;
	&lt;a href=&quot;test/my.do&quot;&gt;点击跳转&lt;/a&gt;
&lt;/body&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>举例 5：</strong> 重定向特例，在 Servlet 中执行重定向代码时，其参照路径是前台路径，即 <strong>当前 Web 服务器的根</strong> 。</p><p>所以不应该加上斜杆，因为重定向的第二次请求是由浏览器发出的。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
		<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;执行Servlet&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">/* 
    * 执行成功
    * request.getRequestDispatcher(&quot;/index.jsp&quot;).forward(request, response); 
    */</span>

    <span class="token comment">// 执行成功</span>
    response<span class="token punctuation">.</span><span class="token function">sendRedirect</span><span class="token punctuation">(</span><span class="token string">&quot;index.jsp&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-不以斜杠开头的相对路径" tabindex="-1"><a class="header-anchor" href="#_2-不以斜杠开头的相对路径" aria-hidden="true">#</a> （2）不以斜杠开头的相对路径</h4><p>不以斜杠开头的相对路径，无论是前台路径，还是后台路径，其参照路径都是当前资源的访问路径，而不是当前资源的保存路径。</p>`,8);function on(cn,rn){const a=i("ExternalLinkIcon");return p(),o("div",null,[r,u,d,m,k,n("p",null,[s("在这种 RESTful 风格的项目下，不能使用有后缀名的请求，例如 "),n("a",g,[s("my.do"),t(a)]),s(" 。所以必须写为 /")]),v,h,b,_,q,x,n("p",null,[s("前面对于 "),n("a",f,[s("show.do"),t(a)]),s(" 请求的提交是通过地址栏直接提交请求的。")]),w,n("ul",null,[n("li",null,[s("资源名称指的是要访问资源的直接名称，如 show.jsp，或与要访问资源存在映射关系的间接名称，"),n("a",y,[s("如show.do"),t(a)]),s("。")]),S,j]),M,n("p",null,[s("例如，你要告诉对方你现在的位置，你说：我现在在北京故宫游客A入口处。这就是个绝对地址，听者根据你所述地址，可以准确的找到你。而对于计算机中Web应用的绝对路径，则是指带访问协议的路径。例如下面的路径就是一个带有 http 访问协议的绝对路径。【 "),n("a",C,[s("http://127.0.0.1:8080/primary/index.js"),t(a)]),s(" 】")]),V,n("p",null,[n("strong",null,[s("前台路径的参照路径是 Web 服务器的根路径，即 "),n("a",E,[s("http://127.0.0.1:8080/"),t(a)])])]),R,A,I,n("p",null,[n("strong",null,[s("后台路径的参照路径是Web应用的根路径。如 "),n("a",B,[s("http://127.0.0.1:8080/primary/"),t(a)])])]),W,F,n("ol",null,[N,P,n("li",null,[s("由上可知，后台路径的参照路径为 Web 应用的根路径，即 "),n("a",H,[s("http://127.0.0.1:8080/primary/"),t(a)])]),n("li",null,[s("所以只有在地址栏输入： "),n("a",O,[s("http://127.0.0.1:8080/primary/my.do"),t(a)]),s(" ，处理器才可以访问到。")])]),T,n("ol",null,[D,n("li",null,[n("p",null,[s("由上可知，前台路径的参照路径是 "),J,s("，即 "),n("a",U,[s("http://127.0.0.1:8080"),t(a)]),s(" 或者 "),n("a",L,[s("http://localhost:8080"),t(a)]),s(" ；")])]),n("li",null,[n("p",null,[s("而第 4 行所填的路径是 "),z,s("，所以当前超链接的访问路径是 "),n("a",$,[s("http://localhost:8080/my.do"),t(a)]),s(" ，而由举例 1 可知该路径不能访问到处理器；")])]),n("li",null,[n("p",null,[s("而第 8 行所填的路径 "),X,s("，所以其参照路径是当前的访问路径："),n("a",Y,[s("http://localhost:8080/primary/，"),t(a)])]),n("p",null,[s("所以当前超链接的访问路径是 "),n("a",G,[s("http://localhost:8080/primary/my.do，该路径是可以访问到处理器的。"),t(a)])])])]),Z,n("ol",null,[n("li",null,[s("在实际使用中，处理器的 id 一般前面会加上 "),K,s('，例如：" / ooo / jjj / xxx / '),n("a",Q,[s("my.do"),t(a)]),s(' " ，这里为了方便演示就只加上了一层模块信息。')])]),nn,n("ol",sn,[n("li",null,[s("但是点击第二次就会报错，根据地址栏的地址可知，是因为不加上斜杆是以 "),an,s(' 为参照路径，而第二次的参照路径是第一次的访问路径，即 " '),n("a",tn,[s("http://localhost:8080/primary/test/"),t(a)]),s(' "，所以就会多出一个 " /test "。')])]),en,n("ol",null,[n("li",null,[s("在前面加上项目根目录的访问路径，即 “ "),n("a",ln,[s("http://localhost:8080/primary/"),t(a)]),s(" ”。")])]),pn])}const dn=l(c,[["render",on],["__file","一、SpringMVC概述.html.vue"]]);export{dn as default};
