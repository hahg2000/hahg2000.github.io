import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as a,c as n,f as e}from"./app-BVqESlQI.js";const t={},o=e(`<h1 id="第-8-章-高效文件处理、正则表达式、文件名匹配" tabindex="-1"><a class="header-anchor" href="#第-8-章-高效文件处理、正则表达式、文件名匹配"><span>第 8 章：高效文件处理、正则表达式、文件名匹配</span></a></h1><h2 id="高效文件处理" tabindex="-1"><a class="header-anchor" href="#高效文件处理"><span>高效文件处理</span></a></h2><p>下面是个简单的基准测试，读取一个由数字构成的文本文件，并打印它们的和。</p><div class="language-haskell line-numbers-mode" data-ext="haskell" data-title="haskell"><pre class="language-haskell"><code><span class="token comment">-- file: ch08/SumFile.hs</span>
<span class="token hvariable">main</span> <span class="token operator">=</span> <span class="token keyword">do</span>
    <span class="token hvariable">contents</span> <span class="token operator">&lt;-</span> <span class="token builtin">getContents</span>
    <span class="token builtin">print</span> <span class="token punctuation">(</span><span class="token hvariable">sumFile</span> <span class="token hvariable">contents</span><span class="token punctuation">)</span>
  <span class="token keyword">where</span> <span class="token hvariable">sumFile</span> <span class="token operator">=</span> <span class="token builtin">sum</span> <span class="token operator">.</span> <span class="token builtin">map</span> <span class="token builtin">read</span> <span class="token operator">.</span> <span class="token builtin">words</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>尽管读写文件时，默认使用 <code>String</code> 类型，但它并不高效，所以这样简单的程序效率会很糟糕。</p><p>一个 <code>String</code> 代表一个元素类型为 <code>Char</code> 的列表；列表的每个元素被单独分配内存，并有一定的写入开销。对那些要读取文本及二进制数据的程序来说，这些因素会影响内存消耗和执行效率。在这个简单的测试中，即使是 <code>Python</code> 那样的解释型语言的表现也会大大好于使用 <code>String</code> 的 <code>Haskell</code> 代码。</p><p><code>bytestring</code> 库是 <code>String</code> 类型的一个快速、经济的替代品。在保持 <code>Haskell</code> 代码的表现力和简洁的同时，使用 <code>bytestring</code> 编写的代码在内存占用和执行效率经常可以达到或超过 <code>C</code> 代码。</p><p>这个库提供两个模块。每个都定义了与 <code>String</code> 类型上函数对应的替代物。</p><blockquote><ul><li><code>Data.ByteString</code> 定义了一个名为 <code>ByteString</code> 的严格类型，其将一个字符串或二进制数据或文本用一个数组表示。</li><li><code>Data.ByteString.Lazy</code> 模块定义了一个惰性类型，同样命名为 <code>ByteString</code> 。其将字符串数据表示为一个由 <code>块</code> 组成的列表，每个块是大小为 64KB 的数组。</li></ul></blockquote><p>这两种 <code>ByteString</code> 适用于不同的场景。对于大体积的文件流(几百 MB 至几 TB)，最好使用惰性的 <code>ByteString</code> 。其块的大小被调整得对现代 CPU 的 L1 缓存特别友好，并且在流中已经被处理过块可以被垃圾收集器快速丢弃。</p><p>对于不在意内存占用而且需要随机访问的数据，最好使用严格的 <code>ByteString</code> 类型。</p><h3 id="二进制-i-o-和有限载入" tabindex="-1"><a class="header-anchor" href="#二进制-i-o-和有限载入"><span>二进制 I/O 和有限载入</span></a></h3><p>让我们来开发一个小函数以说明 <code>ByteString</code> API 的一些用法。我们将检测一个文件是否是 ELF object 文件：这种文件类型几乎被所有现代类 Unix 系统作为可执行文件。</p><p>这个简单的问题可以通过查看文件头部的四个字节解决，看他们是否匹配某个特定的字节序列。表示某种文件类型的字节序列通常被称为 <code>魔法数</code> 。</p><div class="language-haskell line-numbers-mode" data-ext="haskell" data-title="haskell"><pre class="language-haskell"><code><span class="token comment">-- file: ch08/ElfMagic.hs</span>
<span class="token import-statement"><span class="token keyword">import</span> <span class="token keyword">qualified</span> Data<span class="token punctuation">.</span>ByteString<span class="token punctuation">.</span>Lazy <span class="token keyword">as</span> L</span>

<span class="token hvariable">hasElfMagic</span> <span class="token operator">::</span> <span class="token constant">L<span class="token punctuation">.</span>ByteString</span> <span class="token operator">-&gt;</span> <span class="token constant">Bool</span>
<span class="token hvariable">hasElfMagic</span> <span class="token hvariable">content</span> <span class="token operator">=</span> <span class="token constant">L</span><span class="token punctuation">.</span><span class="token builtin">take</span> <span class="token number">4</span> <span class="token hvariable">content</span> <span class="token operator">==</span> <span class="token hvariable">elfMagic</span>
    <span class="token keyword">where</span> <span class="token hvariable">elfMagic</span> <span class="token operator">=</span> <span class="token constant">L</span><span class="token punctuation">.</span><span class="token builtin">pack</span> <span class="token punctuation">[</span><span class="token number">0x7f</span><span class="token punctuation">,</span> <span class="token number">0x45</span><span class="token punctuation">,</span> <span class="token number">0x4c</span><span class="token punctuation">,</span> <span class="token number">0x46</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们使用 Haskell 的 <code>有限载入</code> 语法载入 <code>ByteString</code> 模块， 像上面 <code>import qualified</code> 那句那样。这样可以把一个模块关联到另一个我们选定的名字。</p><p>例如，使用到惰性 <code>ByteString</code> 模块的 <code>take</code> 函数时，要写成 <code>L.take</code> ，因为我们将这个模块载入到了 <code>L</code> 这个名字下。若没有明确指明使用哪个版本的函数，如此处的 <code>take</code> ，编译器会报错。</p><p>我们将一直使用有限载入语法使用 <code>ByteString</code> 模块，因为其中提供的很多函数与 <code>Prelude</code> 模块中的函数重名。</p><div class="hint-container note"><p class="hint-container-title">Note</p><p>有限载入使得可以方便地切换两种 <code>ByteString</code> 类型。只需要在代码的头部改变 <code>import</code> 声明；剩余的代码可能无需任何修改。你可以方便地比较两种类型，以观察哪种类型更符合你程序的需要。</p></div><p>无论是否使用有限载入，始终可以使用模块的全名来识别某些混淆。例如 <code>Data.ByteString.Lazy.length</code> 和 <code>L.length</code> 表示相同的函数， <code>Prelude.sum</code> 和 <code>sum</code> 也是如此。</p><p><code>ByteString</code> 模块为二进制 I/O 而设计。Haskell 中表达字节的类型是 <code>Word8</code> ；如果需要按名字引用它，需要将其从 <code>Data.Word</code> 模块载入。</p><p><code>L.pack</code> 函数接受一个由 <code>Word8</code> 组成的列表，并将其装入一个惰性 <code>ByteString</code> （ <code>L.unpack</code> 函数的作用恰好相反。）。 <code>hasElfMagic</code> 函数简单地将一个 <code>ByteString</code> 的前四字节与一个魔法数相比较。</p><p>我们使用了典型的 Haskell 风格编写 <code>hasElfMagic</code> 函数，其并不执行 I/O。这里是如何在真正的文件上使用它。</p><div class="language-haskell line-numbers-mode" data-ext="haskell" data-title="haskell"><pre class="language-haskell"><code><span class="token comment">-- file: ch08/ElfMagic.hs</span>
<span class="token hvariable">isElfFile</span> <span class="token operator">::</span> <span class="token constant">FilePath</span> <span class="token operator">-&gt;</span> <span class="token constant">IO</span> <span class="token constant">Bool</span>
<span class="token hvariable">isElfFile</span> <span class="token hvariable">path</span> <span class="token operator">=</span> <span class="token keyword">do</span>
  <span class="token hvariable">content</span> <span class="token operator">&lt;-</span> <span class="token constant">L</span><span class="token punctuation">.</span><span class="token builtin">readFile</span> <span class="token hvariable">path</span>
  <span class="token builtin">return</span> <span class="token punctuation">(</span><span class="token hvariable">hasElfMagic</span> <span class="token hvariable">content</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>L.readFile</code> 函数是 <code>readFile</code> 的惰性 <code>ByteString</code> 等价物。它是惰性执行的，将文件读取为数据是需要的。它也很高效，立即读取 64KB 大小的块。对我们的任务而言，惰性 <code>ByteString</code> 是一个好选择，我们可以安全的将这个函数应用在任意大小的文件上。</p><h3 id="文本-i-o" tabindex="-1"><a class="header-anchor" href="#文本-i-o"><span>文本 I/O</span></a></h3><p>方便起见， <code>bytestring</code> 库提供两个具有有限文本 I/O 功能的模块，<code>Data.ByteString.Char8</code> 和 <code>Data.ByteSring.Lazy.Char8</code> 。它们将每个字符串的元素暴露为 <code>Char</code> 而非 <code>Word8</code> 。</p><div class="hint-container warning"><p class="hint-container-title">Warning</p><p>这些模块中的函数适用于单字节大小的 <code>Char</code> 值，所以他们仅适用于 <code>ASCII</code> 及某些欧洲字符集。大于 255 的值将被截断。</p></div><p>这两个面向字符的 <code>bytestring</code> 模块提供了用于文本处理的函数。以下文件包含了一家知名互联网公司在 2008 年中期每个月的股价。</p><p>如何在这一系列记录中找到最高收盘价呢？收盘价位于以逗号分隔的第四列。以下函数从单行数据中获取收盘价。</p><div class="language-haskell line-numbers-mode" data-ext="haskell" data-title="haskell"><pre class="language-haskell"><code><span class="token comment">-- file: ch08/HighestClose.hs</span>
<span class="token import-statement"><span class="token keyword">import</span> <span class="token keyword">qualified</span> Data<span class="token punctuation">.</span>ByteString<span class="token punctuation">.</span>Lazy<span class="token punctuation">.</span>Char8 <span class="token keyword">as</span> L</span>

<span class="token hvariable">closing</span> <span class="token operator">=</span> <span class="token hvariable">readPrice</span> <span class="token operator">.</span> <span class="token punctuation">(</span><span class="token operator">!!</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">.</span> <span class="token hvariable">L<span class="token punctuation">.</span>split</span> <span class="token char string">&#39;,&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个函数使用 <code>point-free</code> 风格编写，我们要从右向左阅读。 <code>L.split</code> 函数将一个惰性 <code>ByteString</code> 按某个分隔符切分为一个由 <code>ByteString</code> 组成的列表。 <code>(!!)</code> 操作符检索列表中的第 k 个元素。 <code>readPrice</code> 函数将一个表示小数的字符串转换为一个数。</p><div class="language-haskell line-numbers-mode" data-ext="haskell" data-title="haskell"><pre class="language-haskell"><code><span class="token operator">-</span> <span class="token hvariable">file</span><span class="token operator">:</span> <span class="token hvariable">ch08</span><span class="token operator">/</span><span class="token hvariable">HighestClose<span class="token punctuation">.</span>hs</span>
<span class="token hvariable">readPrice</span> <span class="token operator">::</span> <span class="token constant">L<span class="token punctuation">.</span>ByteString</span> <span class="token operator">-&gt;</span> <span class="token constant">Maybe</span> <span class="token constant">Int</span>
<span class="token hvariable">readPrice</span> <span class="token hvariable">str</span> <span class="token operator">=</span>
    <span class="token keyword">case</span> <span class="token constant">L</span><span class="token punctuation">.</span><span class="token builtin">readInt</span> <span class="token hvariable">str</span> <span class="token keyword">of</span>
      <span class="token constant">Nothing</span>             <span class="token operator">-&gt;</span> <span class="token constant">Nothing</span>
      <span class="token constant">Just</span> <span class="token punctuation">(</span><span class="token hvariable">dollars</span><span class="token punctuation">,</span><span class="token hvariable">rest</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span>
        <span class="token keyword">case</span> <span class="token constant">L</span><span class="token punctuation">.</span><span class="token builtin">readInt</span> <span class="token punctuation">(</span><span class="token constant">L</span><span class="token punctuation">.</span><span class="token builtin">tail</span> <span class="token hvariable">rest</span><span class="token punctuation">)</span> <span class="token keyword">of</span>
          <span class="token constant">Nothing</span>           <span class="token operator">-&gt;</span> <span class="token constant">Nothing</span>
          <span class="token constant">Just</span> <span class="token punctuation">(</span><span class="token hvariable">cents</span><span class="token punctuation">,</span><span class="token hvariable">more</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span>
            <span class="token constant">Just</span> <span class="token punctuation">(</span><span class="token hvariable">dollars</span> <span class="token operator">*</span> <span class="token number">100</span> <span class="token operator">+</span> <span class="token hvariable">cents</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们使用 <code>L.readInt</code> 函数来解析一个整数。当发现数字时，它会将一个整数和字符串的剩余部分一起返回。 <code>L.readInt</code> 在解析失败时返回 <code>Nothing</code> ，这导致我们的函数稍有些复杂。</p><p>查找最高收盘价的函数很容易编写。</p><div class="language-haskell line-numbers-mode" data-ext="haskell" data-title="haskell"><pre class="language-haskell"><code><span class="token comment">-- file: ch08/HighestClose.hs</span>
<span class="token hvariable">highestClose</span> <span class="token operator">=</span> <span class="token builtin">maximum</span> <span class="token operator">.</span> <span class="token punctuation">(</span><span class="token constant">Nothing</span><span class="token operator">:</span><span class="token punctuation">)</span> <span class="token operator">.</span> <span class="token builtin">map</span> <span class="token hvariable">closing</span> <span class="token operator">.</span> <span class="token constant">L</span><span class="token punctuation">.</span><span class="token builtin">lines</span>

<span class="token hvariable">highestCloseFrom</span> <span class="token hvariable">path</span> <span class="token operator">=</span> <span class="token keyword">do</span>
    <span class="token hvariable">contents</span> <span class="token operator">&lt;-</span> <span class="token constant">L</span><span class="token punctuation">.</span><span class="token builtin">readFile</span> <span class="token hvariable">path</span>
    <span class="token builtin">print</span> <span class="token punctuation">(</span><span class="token hvariable">highestClose</span> <span class="token hvariable">contents</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>不能对空列表使用 <code>maximum</code> 函数，所以我们耍了点小把戏。</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>ghci<span class="token operator">&gt;</span> maximum <span class="token punctuation">[</span><span class="token number">3,6</span>,2,9<span class="token punctuation">]</span>
<span class="token number">9</span>
ghci<span class="token operator">&gt;</span> maximum <span class="token punctuation">[</span><span class="token punctuation">]</span>
*** Exception: Prelude.maximum: empty list
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们想在没有股票数据时也不抛出异常，所以用 <code>(Nothing:)</code> 这个表达式来确保输入到 <code>maximum</code> 函数的由 <code>Maybe Int</code> 值构成的列表总是非空。</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>ghci<span class="token operator">&gt;</span> maximum <span class="token punctuation">[</span>Nothing, Just <span class="token number">1</span><span class="token punctuation">]</span>
Just <span class="token number">1</span>
ghci<span class="token operator">&gt;</span> maximum <span class="token punctuation">[</span>Nothing<span class="token punctuation">]</span>
Nothing
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们的函数工作正常吗？</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>ghci<span class="token operator">&gt;</span> :load HighestClose
<span class="token punctuation">[</span><span class="token number">1</span> of <span class="token number">1</span><span class="token punctuation">]</span> Compiling Main             <span class="token punctuation">(</span> HighestClose.hs, interpreted <span class="token punctuation">)</span>
Ok, modules loaded: Main.
ghci<span class="token operator">&gt;</span> highestCloseFrom <span class="token string">&quot;prices.csv&quot;</span>
Loading package array-0.1.0.0 <span class="token punctuation">..</span>. linking <span class="token punctuation">..</span>. done.
Loading package bytestring-0.9.0.1 <span class="token punctuation">..</span>. linking <span class="token punctuation">..</span>. done.
Just <span class="token number">2741</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>因为我们把逻辑和 I/O 分离开了，所以即使不创建一个空文件也可以测试无数据的情况。</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>ghci<span class="token operator">&gt;</span> highestClose L.empty
Nothing
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="匹配文件名" tabindex="-1"><a class="header-anchor" href="#匹配文件名"><span>匹配文件名</span></a></h2><p>很多面向操作系统的编程语言提供了检测某个文件名是否匹配给定模式的库函数，或者返回一个匹配给定模式的文件列表。在其他语言中，这个函数通常叫做 <code>fmatch</code> 。尽管 Haskell 标准库提供了很多有用的系统编程设施，但是并没有提供这类用于匹配文件名的函数。所以我们可以自己开发一个。</p><p>我们需要处理的模式种类通常称为 glob 模式（我们将使用这个术语），通配符模式，或称 shell 风格模式。它们仅是一些简单规则。你可能已经了解了，但是这里将做一个简要的回顾。</p><div class="hint-container note"><p class="hint-container-title">Note</p><ul><li>对某个模式的匹配从字符串头部开始，在字符串尾部结束。</li><li>多数文本字符匹配自身。例如，文本 <code>foo</code> 作为模式匹配其自身 <code>foo</code> ，且在一个输入字符串中仅匹配 <code>foo</code> 。</li><li><code>*</code> (星号) 意味着 &quot;匹配所有&quot;; 其将匹配所有文本，包括空字符串。 例如，模式 <code>foo*</code> 将匹配任意以 <code>foo</code> 开头的字符串，比如 <code>foo</code> 自身，<code>foobar</code> ， 或 <code>foo.c</code> 。 模式 <code>quux*.c</code> 将匹配任何以 <code>quux</code> 开头且以 <code>.c</code> 结束的字符串，如 <code>quuxbaz.c</code> 。</li><li><code>?</code> (问号) 匹配任意单个字符。模式 <code>pic??.jpg</code> 将匹配类似 <code>picaa.jpg</code> 或 <code>pic01.jpg</code> 的文件名。</li><li><code>[</code> (左方括号) 将开始定义一个字符类，以 ] 结束。其意思是 &quot;匹配在这个字符类中的任意字符&quot;。 <code>[!</code> 开启一个否定的字符类，其意为 &quot;匹配不在这个字符类中的任意字符&quot;。</li></ul><p>用 <code>-</code> (破折号) 连接的两个字符，是一种表示范围的速记方法，表示：&quot;匹配这个围内的任意字符&quot;。</p><p>字符类有一个附加的条件；其不可为空。在 <code>[</code> 或 <code>[!</code> 后的字符是这个字符类的一部分，所以我们可以编写包含 <code>]</code> 的字符类，如 <code>[]aeiou]</code> 。模式 <code>pic[0-9].[pP][nN][gG]</code> 将匹配由字符串 <code>pic</code> 开始，跟随单个数字，最后是字符串 <code>.png</code> 的任意大小写形式。</p></div><p>尽管 Haskell 的标准库没有提供匹配 glob 模式的方法，但它提供了一个良好的正则表达式库。Glob 模式仅是一个从正则表达式中切分出来的略有不同的子集。很容易将 glob 模式转换为正则表达式，但在此之前，我们首先要了解怎样在 Haskell 中使用正则表达式。</p><h2 id="haskell-中的正则表达式" tabindex="-1"><a class="header-anchor" href="#haskell-中的正则表达式"><span>Haskell 中的正则表达式</span></a></h2><p>在这一节，我们将假设读者已经熟悉 Python、Perl 或 Java 等其他语言中的正则表达式。</p><p>为了简洁，此后我们将 &quot;regular expression&quot; 简写为 regexp。</p><p>我们将以与其他语言对比的方式介绍 Haskell 如何处理 regexp，而非从头讲解何为 regexp。Haskell 的正则表达式库比其他语言具备更加强大的表现力，所以我们有很多可以聊的。</p><p>在我们对 regexp 库的探索开始时，只需使用 <code>Text.Regex.Posix</code> 工作。一般通过在 <code>ghci</code> 进行交互是探索一个模块最方便的办法。</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>ghci<span class="token operator">&gt;</span> :module +Text.Regex.Posix
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>[scarletsky注：如果遇到 <code>Could not find module Text.Regex.Posix</code> 的错误，那么你需要安装对应的包。</p><pre><code>cabal 用户可以用 \`$ cabal install regex-posix &amp;&amp; cabal exec ghci\`

stack 用户可以用 \`$ stack install regex-posix &amp;&amp; stack exec ghci\`
</code></pre><p>]</p><p>可能正则表达式匹配函数是我们平时需要使用的唯一的函数，其以中缀运算符 <code>(=~)</code> (<code>从 Perl 中借鉴</code>) 表示。要克服的第一个障碍是 Haskell 的 regexp 库重度使用了多态。其结果就是， <code>(=~)</code> 的类型签名非常难懂，所以我们在此对其不做解释。</p><p><code>=~</code> 操作符的参数和返回值都使用了类型类。第一个参数 (<code>=~</code> 左侧) 是要被匹配的文本；第二个参数 (<code>=~</code> 右侧) 是准备匹配的正则表达式。对每个参数我们都可以使用 <code>String</code> 或者 <code>ByteString</code> 。</p><h3 id="结果的多种类型" tabindex="-1"><a class="header-anchor" href="#结果的多种类型"><span>结果的多种类型</span></a></h3><p><code>=~</code> 操作符的返回类型是多态的，所以 Haskell 编译器需要一通过一些途径知道我们想获得哪种类型的结果。实际编码中，可以通过我们如何使用匹配结果推导出它的类型。但是当我们通过 <code>ghci</code> 进行探索时，缺少类型推导的线索。如果不指明匹配结果的类型，ghci 将因其无法获得足够信息对匹配结果进行类型推导而报错。</p><p>当 <code>ghci</code> 无法推断目标的类型时，我们要告诉它想要哪种类型。若想知道正则匹配是否通过时，需要将结果类型指定为 <code>Bool</code> 型。</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>ghci<span class="token operator">&gt;</span> <span class="token string">&quot;my left foot&quot;</span> <span class="token operator">=~</span> <span class="token string">&quot;foo&quot;</span> :: Bool
Loading package array-0.1.0.0 <span class="token punctuation">..</span>. linking <span class="token punctuation">..</span>. done.
Loading package containers-0.1.0.1 <span class="token punctuation">..</span>. linking <span class="token punctuation">..</span>. done.
Loading package bytestring-0.9.0.1 <span class="token punctuation">..</span>. linking <span class="token punctuation">..</span>. done.
Loading package mtl-1.1.0.0 <span class="token punctuation">..</span>. linking <span class="token punctuation">..</span>. done.
Loading package regex-base-0.93.1 <span class="token punctuation">..</span>. linking <span class="token punctuation">..</span>. done.
Loading package regex-posix-0.93.1 <span class="token punctuation">..</span>. linking <span class="token punctuation">..</span>. done.
True
ghci<span class="token operator">&gt;</span> <span class="token string">&quot;your right hand&quot;</span> <span class="token operator">=~</span> <span class="token string">&quot;bar&quot;</span> :: Bool
False
ghci<span class="token operator">&gt;</span> <span class="token string">&quot;your right hand&quot;</span> <span class="token operator">=~</span> <span class="token string">&quot;(hand|foot)&quot;</span> :: Bool
True
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 <code>regexp</code> 库内部，有一种类型类名为 <code>RegexContext</code> ，其描述了目标类型的行为。基础库定义了很多这个类型类的实例。 <code>Bool</code> 型是这种类型类的一个实例，所以我们取回了一个可用的结果. 另一个实例是 <code>Int</code> ，可以描述正则表达式匹配了多少次。</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>ghci<span class="token operator">&gt;</span> <span class="token string">&quot;a star called henry&quot;</span> <span class="token operator">=~</span> <span class="token string">&quot;planet&quot;</span> :: Int
<span class="token number">0</span>
ghci<span class="token operator">&gt;</span> <span class="token string">&quot;honorificabilitudinitatibus&quot;</span> <span class="token operator">=~</span> <span class="token string">&quot;[aeiou]&quot;</span> :: Int
<span class="token number">13</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果指定结果类型为 <code>String</code> ，将得到第一个匹配的子串，或者表示无匹配的空字符串。</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>ghci<span class="token operator">&gt;</span> <span class="token string">&quot;I, B. Ionsonii, uurit a lift&#39;d batch&quot;</span> <span class="token operator">=~</span> <span class="token string">&quot;(uu|ii)&quot;</span> :: String
<span class="token string">&quot;ii&quot;</span>
ghci<span class="token operator">&gt;</span> <span class="token string">&quot;hi ludi, F. Baconis nati, tuiti orbi&quot;</span> <span class="token operator">=~</span> <span class="token string">&quot;Shakespeare&quot;</span> :: String
<span class="token string">&quot;&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>另一个合法的返回值类型是 <code>[[Srtring]]</code> ，将返回由所有匹配的的字符串组成的列表。</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>ghci<span class="token operator">&gt;</span> <span class="token string">&quot;I, B. Ionsonii, uurit a lift&#39;d batch&quot;</span> <span class="token operator">=~</span> <span class="token string">&quot;(uu|ii)&quot;</span> :: <span class="token punctuation">[</span><span class="token punctuation">[</span>String<span class="token punctuation">]</span><span class="token punctuation">]</span>
<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">&quot;ii&quot;</span>,<span class="token string">&quot;ii&quot;</span><span class="token punctuation">]</span>,<span class="token punctuation">[</span><span class="token string">&quot;uu&quot;</span>,<span class="token string">&quot;uu&quot;</span><span class="token punctuation">]</span><span class="token punctuation">]</span>
ghci<span class="token operator">&gt;</span> <span class="token string">&quot;hi ludi, F. Baconis nati, tuiti orbi&quot;</span> <span class="token operator">=~</span> <span class="token string">&quot;Shakespeare&quot;</span> :: <span class="token punctuation">[</span><span class="token punctuation">[</span>String<span class="token punctuation">]</span><span class="token punctuation">]</span>
<span class="token punctuation">[</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container warning"><p class="hint-container-title">Warning</p><p>注意 String 类型的结果</p><p>指定结果为普通的字符串时，要当心。因为 (<code>=~</code>) 在表示 &quot;无匹配&quot; 时会返回空字符串，很明显这导致了难以处理可以匹配空字符串的正则表达式。这情况出现时，就需要使用另一种不同的结果类型，比如 [[String]]。</p></div><p>以上是一些 &quot;简单&quot;的结果类型，不过还没说完。在继续讲解之前，我们先来定义一个在之后的例子中共同使用的模式串。可以在 <code>ghci</code> 中将这个模式串定义为一个变量，以便节省一些输入操作。</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>ghci<span class="token operator">&gt;</span> <span class="token builtin class-name">let</span> pat <span class="token operator">=</span> <span class="token string">&quot;(foo[a-z]*bar|quux)&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>当模式匹配了字符串时，可以获取很多关于上下文的信息。如果指定 <code>(String,String,String)</code> 类型的元组作为结果类型，可以获取字符串中首次匹配之前的部分，首次匹配的子串，和首次匹配之后的部分。</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>ghci<span class="token operator">&gt;</span> <span class="token string">&quot;before foodiebar after&quot;</span> <span class="token operator">=~</span> pat :: <span class="token punctuation">(</span>String,String,String<span class="token punctuation">)</span>
<span class="token punctuation">(</span><span class="token string">&quot;before &quot;</span>,<span class="token string">&quot;foodiebar&quot;</span>,<span class="token string">&quot; after&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>若匹配失败，整个字符串会作为 &quot;首次匹配之前&quot; 的部分返回，元组的其他两个元素将为空字符串。</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>ghci<span class="token operator">&gt;</span> <span class="token string">&quot;no match here&quot;</span> <span class="token operator">=~</span> pat :: <span class="token punctuation">(</span>String,String,String<span class="token punctuation">)</span>
<span class="token punctuation">(</span><span class="token string">&quot;no match here&quot;</span>,<span class="token string">&quot;&quot;</span>,<span class="token string">&quot;&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>使用四元组作为返回结果时，元组的第四个元素是一个包含了模式中所有分组的列表。</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>ghci<span class="token operator">&gt;</span> <span class="token string">&quot;before foodiebar after&quot;</span> <span class="token operator">=~</span> pat :: <span class="token punctuation">(</span>String,String,String,<span class="token punctuation">[</span>String<span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token punctuation">(</span><span class="token string">&quot;before &quot;</span>,<span class="token string">&quot;foodiebar&quot;</span>,<span class="token string">&quot; after&quot;</span>,<span class="token punctuation">[</span><span class="token string">&quot;foodiebar&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>也可以获得关于匹配结果的数字信息。二元组类型的结果可以表示首次匹配在字符串中的偏移，以及匹配结果的长度。如果使用由这种二元组构成的列表作为结果类型，我们将得到所有字符串中所有匹配的此类信息。</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>ghci<span class="token operator">&gt;</span> <span class="token string">&quot;before foodiebar after&quot;</span> <span class="token operator">=~</span> pat :: <span class="token punctuation">(</span>Int,Int<span class="token punctuation">)</span>
<span class="token punctuation">(</span><span class="token number">7,9</span><span class="token punctuation">)</span>
ghci<span class="token operator">&gt;</span> getAllMatches  <span class="token punctuation">(</span><span class="token string">&quot;i foobarbar a quux&quot;</span> <span class="token operator">=~</span> pat<span class="token punctuation">)</span> :: <span class="token punctuation">[</span><span class="token punctuation">(</span>Int,Int<span class="token punctuation">)</span><span class="token punctuation">]</span>
<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token number">2,9</span><span class="token punctuation">)</span>,<span class="token punctuation">(</span><span class="token number">14,4</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>二元组的首个元素（表示偏移的那个），其值为 <code>-1</code> 时，表示匹配失败。当指定返回值为列表时，空表表示失败。</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>ghci<span class="token operator">&gt;</span> <span class="token string">&quot;eleemosynary&quot;</span> <span class="token operator">=~</span> pat :: <span class="token punctuation">(</span>Int,Int<span class="token punctuation">)</span>
<span class="token punctuation">(</span>-1,0<span class="token punctuation">)</span>
ghci<span class="token operator">&gt;</span> getAllMatches <span class="token punctuation">(</span><span class="token string">&quot;mondegreen&quot;</span> <span class="token operator">=~</span> pat<span class="token punctuation">)</span> :: <span class="token punctuation">[</span><span class="token punctuation">(</span>Int,Int<span class="token punctuation">)</span><span class="token punctuation">]</span>
<span class="token punctuation">[</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以上并非 <code>RegexContext</code> 类型类的内置实例的完整清单。完整的清单可以在 <code>Text.Regex.Base.Context</code> 模块的文档中找到。</p><p>使函数具有多态返回值的能力对于一个静态类型语言来说是个不同寻常的特性。</p><h2 id="进一步了解正则表达式" tabindex="-1"><a class="header-anchor" href="#进一步了解正则表达式"><span>进一步了解正则表达式</span></a></h2><h3 id="不同类型字符串的混合与匹配" tabindex="-1"><a class="header-anchor" href="#不同类型字符串的混合与匹配"><span>不同类型字符串的混合与匹配</span></a></h3><p>之前提到过， <code>=~</code> 操作符的输入和返回值都使用了类型类。我们可以在正则表达式和要匹配的文本中使用 <code>String</code> 或者严格的 <code>ByteString</code> 类型。</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>ghci<span class="token operator">&gt;</span> :module +Data.ByteString.Char8
ghci<span class="token operator">&gt;</span> :type pack <span class="token string">&quot;foo&quot;</span>
pack <span class="token string">&quot;foo&quot;</span> :: ByteString
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们可以尝试不同的 <code>String</code> 和 <code>ByteString</code> 组合。</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>ghci<span class="token operator">&gt;</span> pack <span class="token string">&quot;foo&quot;</span> <span class="token operator">=~</span> <span class="token string">&quot;bar&quot;</span> :: Bool
False
ghci<span class="token operator">&gt;</span> <span class="token string">&quot;foo&quot;</span> <span class="token operator">=~</span> pack <span class="token string">&quot;bar&quot;</span> :: Int
<span class="token number">0</span>
ghci<span class="token operator">&gt;</span> getAllMatches <span class="token punctuation">(</span>pack <span class="token string">&quot;foo&quot;</span> <span class="token operator">=~</span> pack <span class="token string">&quot;o&quot;</span><span class="token punctuation">)</span> :: <span class="token punctuation">[</span><span class="token punctuation">(</span>Int, Int<span class="token punctuation">)</span><span class="token punctuation">]</span>
<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token number">1,1</span><span class="token punctuation">)</span>,<span class="token punctuation">(</span><span class="token number">2,1</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>不过，我们需要注意，文本匹配的结果必须与被匹配的字符串类型一致。让我们实践一下，看这是什么意思。</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>ghci<span class="token operator">&gt;</span> packChars <span class="token string">&quot;good food&quot;</span> <span class="token operator">=~</span> <span class="token string">&quot;.ood&quot;</span> :: <span class="token punctuation">[</span><span class="token punctuation">[</span>ByteString<span class="token punctuation">]</span><span class="token punctuation">]</span>
<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">&quot;good&quot;</span><span class="token punctuation">]</span>,<span class="token punctuation">[</span><span class="token string">&quot;food&quot;</span><span class="token punctuation">]</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>上面的例子中，我们使用 <code>packChars</code> 将一个 <code>String</code> 转换为 <code>ByteString</code> 。这种情况可以通过类型检查，因为 <code>ByteString</code> 也是一种合法的结果类型。但是如果输入字符串类型为 <code>String</code> 类型，在尝试获得 <code>ByteString</code> 类型结果时将会失败。</p><p>[译注：原文中使用的 <code>pack</code> 会出现类型错误， 新代码中需要使用 <code>Data.ByteString.Internal</code> 模块中的 <code>packChars</code>]</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>ghci<span class="token operator">&gt;</span> <span class="token string">&quot;good food&quot;</span> <span class="token operator">=~</span> <span class="token string">&quot;.ood&quot;</span> :: <span class="token punctuation">[</span><span class="token punctuation">[</span>ByteString<span class="token punctuation">]</span><span class="token punctuation">]</span>

<span class="token operator">&lt;</span>interactive<span class="token operator">&gt;</span>:55:13:
    No instance <span class="token keyword">for</span> <span class="token punctuation">(</span>RegexContext Regex <span class="token punctuation">[</span>Char<span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token punctuation">[</span>ByteString<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
      arising from a use of ‘<span class="token operator">=~</span>’
    In the expression: <span class="token string">&quot;good food&quot;</span> <span class="token operator">=~</span> <span class="token string">&quot;.ood&quot;</span> :: <span class="token punctuation">[</span><span class="token punctuation">[</span>ByteString<span class="token punctuation">]</span><span class="token punctuation">]</span>
    In an equation <span class="token keyword">for</span> ‘it’:
        it <span class="token operator">=</span> <span class="token string">&quot;good food&quot;</span> <span class="token operator">=~</span> <span class="token string">&quot;.ood&quot;</span> :: <span class="token punctuation">[</span><span class="token punctuation">[</span>ByteString<span class="token punctuation">]</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>将结果类型指定为与被匹配字符串相同的 <code>String</code> 类型就可以轻松地解决这个问题。</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>ghci<span class="token operator">&gt;</span> <span class="token string">&quot;good food&quot;</span> <span class="token operator">=~</span> <span class="token string">&quot;.ood&quot;</span> :: <span class="token punctuation">[</span><span class="token punctuation">[</span>String<span class="token punctuation">]</span><span class="token punctuation">]</span>
<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">&quot;good&quot;</span><span class="token punctuation">]</span>,<span class="token punctuation">[</span><span class="token string">&quot;food&quot;</span><span class="token punctuation">]</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>对于正则表达式不存在这个限制。正则表达式可以是 <code>String</code> 或 <code>ByteString</code> ，而不必在意输入或结果是何种类型。</p><h3 id="你要知道的其他一些事情" tabindex="-1"><a class="header-anchor" href="#你要知道的其他一些事情"><span>你要知道的其他一些事情</span></a></h3><p>查阅 <code>Haskell</code> 的库文档，会发现很多和正则表达式有关的模块。<code>Text.Regex.Base</code> 下的模块定义了供其他所有正则表达式库使用的通用 API 。可以同时安装许多不同实现的正则表达式模块。写作本书时， GHC 自带一个实现， <code>Text.Regex.Posix</code> 。正如其名字，这个模块提供了 <code>POSIX</code> 语义的正则表达式实现。</p><div class="hint-container note"><p class="hint-container-title">Note</p><p>Perl 风格和 POSIX 风格的正则表达式</p><p>如果你此前用过其他语言，如 Perl，Python，或 Java，并且使用过其中的正则表达式， 你应该知道 Text.Regex.Posix 模块处理的 POSIX 风格的正则表达式与 Perl 风格的正则表达式有一些显著的不同。</p><p>当有多个匹配结果候选时，Perl 的正则表达式引擎表现为左侧最小匹配，而 POSIX 引擎会选择贪婪匹配（最长匹配）。当使用正则表达式 (foo|fo*) 匹配字符串 foooooo 时，Perl 风格引擎将返回 foo (最左的匹配)，而 POSIX 引擎将返回的结果将包含整个字符串 (贪婪匹配)。</p><p>POSIX 正则表达式比 Perl 风格的正则表达式缺少一些格式语法。它们也缺少一些 Perl 风格正则表达式的功能，比如零宽度断言和对贪婪匹配的控制。</p></div><p>Hackage 上也有其他 Haskell 正则表达式包可供下载。其中一些比内置的 POSIX 引擎拥有更好的执行效率 (如 regex-tdfa); 另外一些提供了大多数程序员熟悉的 Perl 风格正则匹配 (如 regex-pcre)。它们都按照我们这节提到的 API 编写。</p><h2 id="translate-a-glob-pattern-into-a-regular-expression" tabindex="-1"><a class="header-anchor" href="#translate-a-glob-pattern-into-a-regular-expression"><span>将 glob 模式翻译为正则表达式</span></a></h2><p>我们已经看到了用正则表达式匹配文本的多种方法，现在让我们将注意力回到 glob 模式。我们要编写一个函数，接收一个 glob 模式作为输入，返回其对应的正则表达式。glob 模式和正则表达式都以文本字符串表示，所以这个函数的类型应该已经清楚了。</p><div class="language-haskell line-numbers-mode" data-ext="haskell" data-title="haskell"><pre class="language-haskell"><code><span class="token comment">-- file: ch08/GlobRegex.hs</span>
<span class="token keyword">module</span> <span class="token constant">GlobRegex</span>
    <span class="token punctuation">(</span>
      <span class="token hvariable">globToRegex</span>
    <span class="token punctuation">,</span> <span class="token hvariable">matchesGlob</span>
    <span class="token punctuation">)</span> <span class="token keyword">where</span>

<span class="token import-statement"><span class="token keyword">import</span> Text<span class="token punctuation">.</span>Regex<span class="token punctuation">.</span>Posix</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">=~</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token hvariable">globToRegex</span> <span class="token operator">::</span> <span class="token constant">String</span> <span class="token operator">-&gt;</span> <span class="token constant">String</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们生成的正则表达式必须被锚定，所以它要对一个字符串从头到尾完整匹配。</p><div class="language-haskell line-numbers-mode" data-ext="haskell" data-title="haskell"><pre class="language-haskell"><code><span class="token comment">-- file: ch08/GlobRegex.hs</span>
<span class="token hvariable">globToRegex</span> <span class="token hvariable">cs</span> <span class="token operator">=</span> <span class="token char string">&#39;^&#39;</span> <span class="token operator">:</span> <span class="token hvariable">globToRegex&#39;</span> <span class="token hvariable">cs</span> <span class="token operator">++</span> <span class="token string">&quot;$&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>回想一下， <code>String</code> 仅是 <code>[Char]</code> 的同义词，一个由字符组成的数组。 <code>:</code> 操作符将一个值加入某个列表头部，此处是将字符 <code>^</code> 加入 <code>globToRegex&#39;</code> 函数返回的列表头部。</p><div class="hint-container note"><p class="hint-container-title">Note</p><p>在定义之前使用一个值</p><p>Haskell 在使用某个值或函数时，并不需要其在之前的源码中被声明。在某个值首次被使用之后才定义它是很平常的。Haskell 编译器并不关心这个层面上的顺序。这使我们可以用最符合逻辑的方式灵活地组织代码，而不是为使编译器作者更轻松而遵守某种顺序。</p><p>Haskell 模块的作者们经常利用这种灵活性，将&quot;更重要的&quot;代码放在源码文件更靠前的位置，将繁琐的实现放在后面。这也是我们实现 <code>globToRegex&#39;</code> 函数及其辅助函数的方法。</p></div><p><code>globToRegex&#39;</code> 将使用正则表达式做大部分的翻译工作。我们将使用 Haskell 的模式匹配特性轻松地穷举出需要处理的每一种情况</p><div class="language-haskell line-numbers-mode" data-ext="haskell" data-title="haskell"><pre class="language-haskell"><code><span class="token comment">-- file: ch08/GlobRegex.hs</span>

<span class="token hvariable">globToRegex&#39;</span> <span class="token operator">::</span> <span class="token constant">String</span> <span class="token operator">-&gt;</span> <span class="token constant">String</span>
<span class="token hvariable">globToRegex&#39;</span> <span class="token string">&quot;&quot;</span> <span class="token operator">=</span> <span class="token string">&quot;&quot;</span>

<span class="token hvariable">globToRegex&#39;</span> <span class="token punctuation">(</span><span class="token char string">&#39;*&#39;</span><span class="token operator">:</span><span class="token hvariable">cs</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token string">&quot;.*&quot;</span> <span class="token operator">++</span> <span class="token hvariable">globToRegex&#39;</span> <span class="token hvariable">cs</span>

<span class="token hvariable">globToRegex&#39;</span> <span class="token punctuation">(</span><span class="token char string">&#39;?&#39;</span><span class="token operator">:</span><span class="token hvariable">cs</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token char string">&#39;.&#39;</span> <span class="token operator">:</span> <span class="token hvariable">globToRegex&#39;</span> <span class="token hvariable">cs</span>

<span class="token hvariable">globToRegex&#39;</span> <span class="token punctuation">(</span><span class="token char string">&#39;[&#39;</span><span class="token operator">:</span><span class="token char string">&#39;!&#39;</span><span class="token operator">:</span><span class="token hvariable">c</span><span class="token operator">:</span><span class="token hvariable">cs</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token string">&quot;[^&quot;</span> <span class="token operator">++</span> <span class="token hvariable">c</span> <span class="token operator">:</span> <span class="token hvariable">charClass</span> <span class="token hvariable">cs</span>
<span class="token hvariable">globToRegex&#39;</span> <span class="token punctuation">(</span><span class="token char string">&#39;[&#39;</span><span class="token operator">:</span><span class="token hvariable">c</span><span class="token operator">:</span><span class="token hvariable">cs</span><span class="token punctuation">)</span>     <span class="token operator">=</span> <span class="token char string">&#39;[&#39;</span>  <span class="token operator">:</span>  <span class="token hvariable">c</span> <span class="token operator">:</span> <span class="token hvariable">charClass</span> <span class="token hvariable">cs</span>
<span class="token hvariable">globToRegex&#39;</span> <span class="token punctuation">(</span><span class="token char string">&#39;[&#39;</span><span class="token operator">:</span><span class="token hvariable">_</span><span class="token punctuation">)</span>        <span class="token operator">=</span> <span class="token builtin">error</span> <span class="token string">&quot;unterminated character class&quot;</span>

<span class="token hvariable">globToRegex&#39;</span> <span class="token punctuation">(</span><span class="token hvariable">c</span><span class="token operator">:</span><span class="token hvariable">cs</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token hvariable">escape</span> <span class="token hvariable">c</span> <span class="token operator">++</span> <span class="token hvariable">globToRegex&#39;</span> <span class="token hvariable">cs</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们的第一条规则是，如果触及 glob 模式的尾部（也就是说当输入为空字符串时），我们返回 $ ，正则表达式中表示&quot;匹配行尾&quot;的符号。我们按照这样一系列规则将模式串由 glob 语法转化为正则表达式语法。最后一条规则匹配所有字符，首先将可转义字符进行转义。</p><p><code>escape</code> 函数确保正则表达式引擎不会将普通字符串解释为构成正则表达式语法的字符。</p><div class="language-haskell line-numbers-mode" data-ext="haskell" data-title="haskell"><pre class="language-haskell"><code><span class="token comment">-- file: ch08/GlobRegex.hs</span>
<span class="token hvariable">escape</span> <span class="token operator">::</span> <span class="token constant">Char</span> <span class="token operator">-&gt;</span> <span class="token constant">String</span>
<span class="token hvariable">escape</span> <span class="token hvariable">c</span> <span class="token operator">|</span> <span class="token hvariable">c</span> <span class="token operator">\`elem\`</span> <span class="token hvariable">regexChars</span> <span class="token operator">=</span> <span class="token char string">&#39;\\\\&#39;</span> <span class="token operator">:</span> <span class="token punctuation">[</span><span class="token hvariable">c</span><span class="token punctuation">]</span>
         <span class="token operator">|</span> <span class="token builtin">otherwise</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token hvariable">c</span><span class="token punctuation">]</span>
    <span class="token keyword">where</span> <span class="token hvariable">regexChars</span> <span class="token operator">=</span> <span class="token string">&quot;\\\\+()^$.{}]|&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>charClass</code> 辅助函数仅检查一个字符类是否正确地结束。这个并不改变其输入，直到遇到一个 <code>]</code> 字符，其将控制流交还给 <code>globToRegex&#39;</code></p><div class="language-haskell line-numbers-mode" data-ext="haskell" data-title="haskell"><pre class="language-haskell"><code><span class="token comment">-- file: ch08/GlobRegex.hs</span>
<span class="token hvariable">charClass</span> <span class="token operator">::</span> <span class="token constant">String</span> <span class="token operator">-&gt;</span> <span class="token constant">String</span>
<span class="token hvariable">charClass</span> <span class="token punctuation">(</span><span class="token char string">&#39;]&#39;</span><span class="token operator">:</span><span class="token hvariable">cs</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token char string">&#39;]&#39;</span> <span class="token operator">:</span> <span class="token hvariable">globToRegex&#39;</span> <span class="token hvariable">cs</span>
<span class="token hvariable">charClass</span> <span class="token punctuation">(</span><span class="token hvariable">c</span><span class="token operator">:</span><span class="token hvariable">cs</span><span class="token punctuation">)</span>   <span class="token operator">=</span> <span class="token hvariable">c</span> <span class="token operator">:</span> <span class="token hvariable">charClass</span> <span class="token hvariable">cs</span>
<span class="token hvariable">charClass</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>       <span class="token operator">=</span> <span class="token builtin">error</span> <span class="token string">&quot;unterminated character class&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现在我们已经完成了 <code>globToRegex</code> 函数及其辅助函数的定义，让我们在 ghci 中装载并且实验一下。</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>ghci<span class="token operator">&gt;</span> :load GlobRegex.hs
<span class="token punctuation">[</span><span class="token number">1</span> of <span class="token number">1</span><span class="token punctuation">]</span> Compiling GlobRegex        <span class="token punctuation">(</span> GlobRegex.hs, interpreted <span class="token punctuation">)</span>
Ok, modules loaded: GlobRegex.
ghci<span class="token operator">&gt;</span> :module +Text.Regex.Posix
ghci<span class="token operator">&gt;</span> globToRegex <span class="token string">&quot;f??.c&quot;</span>
Loading package array-0.1.0.0 <span class="token punctuation">..</span>. linking <span class="token punctuation">..</span>. done.
Loading package containers-0.1.0.1 <span class="token punctuation">..</span>. linking <span class="token punctuation">..</span>. done.
Loading package bytestring-0.9.0.1 <span class="token punctuation">..</span>. linking <span class="token punctuation">..</span>. done.
Loading package mtl-1.1.0.0 <span class="token punctuation">..</span>. linking <span class="token punctuation">..</span>. done.
Loading package regex-base-0.93.1 <span class="token punctuation">..</span>. linking <span class="token punctuation">..</span>. done.
Loading package regex-posix-0.93.1 <span class="token punctuation">..</span>. linking <span class="token punctuation">..</span>. done.
<span class="token string">&quot;^f..<span class="token entity" title="\\\\">\\\\</span>.c$&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>果然，看上去像是一个合理的正则表达式。可以使用她来匹配某个字符串码？</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>ghci<span class="token operator">&gt;</span> <span class="token string">&quot;foo.c&quot;</span> <span class="token operator">=~</span> globToRegex <span class="token string">&quot;f??.c&quot;</span> :: Bool
True
ghci<span class="token operator">&gt;</span> <span class="token string">&quot;test.c&quot;</span> <span class="token operator">=~</span> globToRegex <span class="token string">&quot;t[ea]s*&quot;</span> :: Bool
True
ghci<span class="token operator">&gt;</span> <span class="token string">&quot;taste.txt&quot;</span> <span class="token operator">=~</span> globToRegex <span class="token string">&quot;t[ea]s*&quot;</span> :: Bool
True
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>奏效了！现在让我们在 ghci 里玩耍一下。我们可以临时定义一个 <code>fnmatch</code> 函数，并且试用它。</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>ghci<span class="token operator">&gt;</span> <span class="token builtin class-name">let</span> fnmatch pat name  <span class="token operator">=</span>  name <span class="token operator">=~</span> globToRegex pat :: Bool
ghci<span class="token operator">&gt;</span> :type fnmatch
fnmatch :: <span class="token punctuation">(</span>RegexLike Regex source1<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> String -<span class="token operator">&gt;</span> source1 -<span class="token operator">&gt;</span> Bool
ghci<span class="token operator">&gt;</span> fnmatch <span class="token string">&quot;d*&quot;</span> <span class="token string">&quot;myname&quot;</span>
False
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>[译注：在 ghc 7.10.1+ 中需要使用 <code>FlexibleContexts</code> 扩展，即 <code>ghci -XFlexibleContexts</code> ，否则定义 <code>fnmatch</code> 时会报错，也可以给 <code>name</code> 指定一个特定类型如 <code>String</code> ]</p><p>但是 <code>fnmatch</code> 没有真正的 &quot;Haskell 味道&quot;。目前为止，最常见的 Haskell 风格是赋予函数具有描述性的，&quot;驼峰式&quot; 命名。将单词连接为驼峰状，首字母小写后面每个单词的首字母大写。例如，&quot;file name matches&quot; 这几个词将转换为 <code>fileNameMatch</code> 这个名字。 &quot;驼峰式&quot; 这种说法来自与大写字母形成的&quot;驼峰&quot;。在我们的库中，将使用 <code>matchesGlob</code> 这个函数名。</p><div class="language-haskell line-numbers-mode" data-ext="haskell" data-title="haskell"><pre class="language-haskell"><code><span class="token comment">-- file: ch08/GlobRegex.hs</span>
<span class="token hvariable">matchesGlob</span> <span class="token operator">::</span> <span class="token constant">FilePath</span> <span class="token operator">-&gt;</span> <span class="token constant">String</span> <span class="token operator">-&gt;</span> <span class="token constant">Bool</span>
<span class="token hvariable">name</span> <span class="token operator">\`matchesGlob\`</span> <span class="token hvariable">pat</span> <span class="token operator">=</span> <span class="token hvariable">name</span> <span class="token operator">=~</span> <span class="token hvariable">globToRegex</span> <span class="token hvariable">pat</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>你可能注意到目前为止我们使用的都是短变量名。从经验来看，描述性的名字在更长的函数定义中更有用，它们有助于可读性。对一个仅有两行的函数来说，长变量名价值较小。</p><h3 id="练习" tabindex="-1"><a class="header-anchor" href="#练习"><span>练习</span></a></h3><ol><li>使用 <code>ghci</code> 探索当你向 <code>globToRegex</code> 传入一个畸形的模式时会发生什么，如 &quot;[&quot; 。编写一个小函数调用 <code>globToRegex</code> ，向其传入一个畸形的模式。发生了什么？</li><li>Unix 的文件系统的文件名通常是对大小写敏感的（如：&quot;G&quot; 和 &quot;g&quot; 不同），Windows 文件系统则不是。为 <code>globToRegex</code> 和 <code>matchesGlob</code> 函数添加一个参数，以控制它们是否大小写敏感。</li></ol><h2 id="重要的题外话-编写惰性函数" tabindex="-1"><a class="header-anchor" href="#重要的题外话-编写惰性函数"><span>重要的题外话：编写惰性函数</span></a></h2><p>在命令式语言中， <code>globToRegex</code> 通常是个被我们写成循环的函数。举个例子，Python 标准库中的 fnmatch 模块包括了一个名叫 translate 的函数与我们的 <code>globToRegex</code> 函数做了完全相同的工作。它就被写成一个循环。</p><p>如果你了解过函数式编程语言比如 <code>Scheme</code> 或 <code>ML</code> ，可能有个概念已经深入你的脑海，&quot;模拟一个循环的方法是使用尾递归&quot;。</p><p>观察 <code>globToRegex&#39;</code> ，可以发现其不是一个尾递归函数。至于原因，重新检查一下它的最后一组规则（它的其他规则也类似）。</p><div class="language-haskell line-numbers-mode" data-ext="haskell" data-title="haskell"><pre class="language-haskell"><code><span class="token comment">-- file: ch08/GlobRegex.hs</span>
<span class="token hvariable">globToRegex&#39;</span> <span class="token punctuation">(</span><span class="token hvariable">c</span><span class="token operator">:</span><span class="token hvariable">cs</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token hvariable">escape</span> <span class="token hvariable">c</span> <span class="token operator">++</span> <span class="token hvariable">globToRegex&#39;</span> <span class="token hvariable">cs</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>其递归地执行自身，并以递归执行的结果作为 (++) 函数的参数。因为递归执行并不是这个函数的最后一个操作，所以 <code>globToRegex&#39;</code> 不是尾递归函数。</p><p>为何我们的函数没有定义成尾递归的？答案是 Haskell 的非严格求值策略。在我们开始讨论它之前，先快速的了解一下为什么，传统编程语言中，这类递归定义是我们要避免的。这里有一个简化的 <code>(++)</code> 操作符定义。它是递归的，但不是尾递归的。</p><div class="language-haskell line-numbers-mode" data-ext="haskell" data-title="haskell"><pre class="language-haskell"><code><span class="token comment">-- file: ch08/append.hs</span>
<span class="token punctuation">(</span><span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">::</span> <span class="token punctuation">[</span><span class="token hvariable">a</span><span class="token punctuation">]</span> <span class="token operator">-&gt;</span> <span class="token punctuation">[</span><span class="token hvariable">a</span><span class="token punctuation">]</span> <span class="token operator">-&gt;</span> <span class="token punctuation">[</span><span class="token hvariable">a</span><span class="token punctuation">]</span>

<span class="token punctuation">(</span><span class="token hvariable">x</span><span class="token operator">:</span><span class="token hvariable">xs</span><span class="token punctuation">)</span> <span class="token operator">++</span> <span class="token hvariable">ys</span> <span class="token operator">=</span> <span class="token hvariable">x</span> <span class="token operator">:</span> <span class="token punctuation">(</span><span class="token hvariable">xs</span> <span class="token operator">++</span> <span class="token hvariable">ys</span><span class="token punctuation">)</span>
<span class="token punctuation">[</span><span class="token punctuation">]</span>     <span class="token operator">++</span> <span class="token hvariable">ys</span> <span class="token operator">=</span> <span class="token hvariable">ys</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在严格求值语言中，如果我们执行 &quot;foo&quot; ++ &quot;bar&quot;，将马上构建并返回整个列表。非严格求值将这项工作延后很久执行，直到其结果在某处被用到。</p><p>如果我们需要 &quot;foo&quot; ++ &quot;bar&quot; 这个表达式结果中的一个元素，函数定义中的第一个模式被匹配，返回表达式 x : (xs ++ ys)。因为 (😃 构造器是非严格的，xs ++ ys 的求值被延迟到当我们需要生成更多结果中的元素时。当生成了结果中的更多元素，我们不再需要 x ，垃圾收集器可以将其回收。因为我们按需要计算结果中的元素，且不保留已经计算出的结果，编译器可以用常数空间对我们的代码求值。</p><h2 id="利用我们的模式匹配器" tabindex="-1"><a class="header-anchor" href="#利用我们的模式匹配器"><span>利用我们的模式匹配器</span></a></h2><p>有一个函数可以匹配 glob 模式很好，但我们希望可以在实际中使用它。在类 Unix 系统中，glob 函数返回一个由匹配给定 glob 模式串的文件和目录组成的列表。让我们用 Haskell 构造一个类似的函数。按 Haskell 的描述性命名规范，我们将这个函数称为 <code>namesMatching</code> 。</p><div class="language-haskell line-numbers-mode" data-ext="haskell" data-title="haskell"><pre class="language-haskell"><code><span class="token comment">-- file: ch08/Glob.hs</span>
<span class="token keyword">module</span> <span class="token constant">Glob</span> <span class="token punctuation">(</span><span class="token hvariable">namesMatching</span><span class="token punctuation">)</span> <span class="token keyword">where</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>我们将 <code>namesMatching</code> 指定为我们的 Glob 模块中唯一对用户可见的名字。</p><div class="language-haskell line-numbers-mode" data-ext="haskell" data-title="haskell"><pre class="language-haskell"><code><span class="token comment">-- file: ch08/Glob.hs</span>
<span class="token import-statement"><span class="token keyword">import</span> System<span class="token punctuation">.</span>Directory</span> <span class="token punctuation">(</span><span class="token hvariable">doesDirectoryExist</span><span class="token punctuation">,</span> <span class="token hvariable">doesFileExist</span><span class="token punctuation">,</span>
                      <span class="token hvariable">getCurrentDirectory</span><span class="token punctuation">,</span> <span class="token hvariable">getDirectoryContents</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>System.FilePath 抽象了操作系统路径名称的惯例。(&lt;/&gt;) 函数将两个部分组合为一个路径。</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>ghci<span class="token operator">&gt;</span> :m +System.FilePath
ghci<span class="token operator">&gt;</span> <span class="token string">&quot;foo&quot;</span> <span class="token operator">&lt;</span>/<span class="token operator">&gt;</span> <span class="token string">&quot;bar&quot;</span>
Loading package filepath-1.1.0.0 <span class="token punctuation">..</span>. linking <span class="token punctuation">..</span>. done.
<span class="token string">&quot;foo/bar&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>dropTrailingPathSeparator</code> 函数的名字完美地描述了其作用。</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>ghci<span class="token operator">&gt;</span> dropTrailingPathSeparator <span class="token string">&quot;foo/&quot;</span>
<span class="token string">&quot;foo&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><code>splitFileName</code> 函数以路径中的最后一个斜线将路径分割为两部分。</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>ghci<span class="token operator">&gt;</span> splitFileName <span class="token string">&quot;foo/bar/Quux.hs&quot;</span>
<span class="token punctuation">(</span><span class="token string">&quot;foo/bar/&quot;</span>,<span class="token string">&quot;Quux.hs&quot;</span><span class="token punctuation">)</span>
ghci<span class="token operator">&gt;</span> splitFileName <span class="token string">&quot;zippity&quot;</span>
<span class="token punctuation">(</span><span class="token string">&quot;&quot;</span>,<span class="token string">&quot;zippity&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>配合 <code>Systems.FilePath</code> 和 <code>Systems.Directory</code> 两个模块，我们可以编写一个在类 Unix 和 Windows 系统上都可以运行的可移植的 <code>namesMatching</code> 函数。</p><div class="language-haskell line-numbers-mode" data-ext="haskell" data-title="haskell"><pre class="language-haskell"><code><span class="token comment">-- file: ch08/Glob.hs</span>
<span class="token import-statement"><span class="token keyword">import</span> System<span class="token punctuation">.</span>FilePath</span> <span class="token punctuation">(</span><span class="token hvariable">dropTrailingPathSeparator</span><span class="token punctuation">,</span> <span class="token hvariable">splitFileName</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token operator">&lt;/&gt;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个模块中，我们将模拟一个 &quot;for&quot; 循环；首次尝试在 Haskell 中处理异常；当然还会用到我们刚写的 <code>matchesGlob</code> 函数。</p><div class="language-haskell line-numbers-mode" data-ext="haskell" data-title="haskell"><pre class="language-haskell"><code><span class="token comment">-- file: ch08/Glob.hs</span>
<span class="token import-statement"><span class="token keyword">import</span> Control<span class="token punctuation">.</span>Exception</span> <span class="token punctuation">(</span><span class="token hvariable">handle</span><span class="token punctuation">,</span> <span class="token constant">SomeException</span><span class="token punctuation">)</span>
<span class="token import-statement"><span class="token keyword">import</span> Control<span class="token punctuation">.</span>Monad</span> <span class="token punctuation">(</span><span class="token hvariable">forM</span><span class="token punctuation">)</span>
<span class="token import-statement"><span class="token keyword">import</span> GlobRegex</span> <span class="token punctuation">(</span><span class="token hvariable">matchesGlob</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>目录和文件存在于各种带有副作用的活动的&quot;真实世界&quot;，我们的 glob 模式处理函数的返回值类型中将必须带有 IO 。</p><p>如果的输入字符串中不包含模式字符，我们简单的在文件系统中检查输入的名字是否已经建立。（注意，此处使用 Haskell 的 guard 语法可以编写精细整齐的定义。&quot;if&quot; 语句也可以做到，但是在美学上不能令人满意。 ）</p><div class="language-haskell line-numbers-mode" data-ext="haskell" data-title="haskell"><pre class="language-haskell"><code><span class="token comment">-- file: ch08/Glob.hs</span>
<span class="token hvariable">isPattern</span> <span class="token operator">::</span> <span class="token constant">String</span> <span class="token operator">-&gt;</span> <span class="token constant">Bool</span>
<span class="token hvariable">isPattern</span> <span class="token operator">=</span> <span class="token builtin">any</span> <span class="token punctuation">(</span><span class="token operator">\`elem\`</span> <span class="token string">&quot;[?*&quot;</span><span class="token punctuation">)</span>

<span class="token hvariable">namesMatching</span> <span class="token hvariable">pat</span>
  <span class="token operator">|</span> <span class="token builtin">not</span> <span class="token punctuation">(</span><span class="token hvariable">isPattern</span> <span class="token hvariable">pat</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token keyword">do</span>
    <span class="token hvariable">exists</span> <span class="token operator">&lt;-</span> <span class="token hvariable">doesNameExist</span> <span class="token hvariable">pat</span>
    <span class="token builtin">return</span> <span class="token punctuation">(</span><span class="token keyword">if</span> <span class="token hvariable">exists</span> <span class="token keyword">then</span> <span class="token punctuation">[</span><span class="token hvariable">pat</span><span class="token punctuation">]</span> <span class="token keyword">else</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>doesNameExist</code> 是一个我们将要简要定义的函数的名字。</p><p>如果字符串是一个 glob 模式呢？继续定义我们的函数。</p><div class="language-haskell line-numbers-mode" data-ext="haskell" data-title="haskell"><pre class="language-haskell"><code><span class="token comment">-- file: ch08/Glob.hs</span>
  <span class="token operator">|</span> <span class="token builtin">otherwise</span> <span class="token operator">=</span> <span class="token keyword">do</span>
    <span class="token keyword">case</span> <span class="token hvariable">splitFileName</span> <span class="token hvariable">pat</span> <span class="token keyword">of</span>
      <span class="token punctuation">(</span><span class="token string">&quot;&quot;</span><span class="token punctuation">,</span> <span class="token hvariable">baseName</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token keyword">do</span>
          <span class="token hvariable">curDir</span> <span class="token operator">&lt;-</span> <span class="token hvariable">getCurrentDirectory</span>
          <span class="token hvariable">listMatches</span> <span class="token hvariable">curDir</span> <span class="token hvariable">baseName</span>
      <span class="token punctuation">(</span><span class="token hvariable">dirName</span><span class="token punctuation">,</span> <span class="token hvariable">baseName</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token keyword">do</span>
          <span class="token hvariable">dirs</span> <span class="token operator">&lt;-</span> <span class="token keyword">if</span> <span class="token hvariable">isPattern</span> <span class="token hvariable">dirName</span>
                  <span class="token keyword">then</span> <span class="token hvariable">namesMatching</span> <span class="token punctuation">(</span><span class="token hvariable">dropTrailingPathSeparator</span> <span class="token hvariable">dirName</span><span class="token punctuation">)</span>
                  <span class="token keyword">else</span> <span class="token builtin">return</span> <span class="token punctuation">[</span><span class="token hvariable">dirName</span><span class="token punctuation">]</span>
          <span class="token keyword">let</span> <span class="token hvariable">listDir</span> <span class="token operator">=</span> <span class="token keyword">if</span> <span class="token hvariable">isPattern</span> <span class="token hvariable">baseName</span>
                        <span class="token keyword">then</span> <span class="token hvariable">listMatches</span>
                        <span class="token keyword">else</span> <span class="token hvariable">listPlain</span>
          <span class="token hvariable">pathNames</span> <span class="token operator">&lt;-</span> <span class="token hvariable">forM</span> <span class="token hvariable">dirs</span> <span class="token operator">$</span> <span class="token operator">\\</span><span class="token hvariable">dir</span> <span class="token operator">-&gt;</span> <span class="token keyword">do</span>
                           <span class="token hvariable">baseNames</span> <span class="token operator">&lt;-</span> <span class="token hvariable">listDir</span> <span class="token hvariable">dir</span> <span class="token hvariable">baseName</span>
                           <span class="token builtin">return</span> <span class="token punctuation">(</span><span class="token builtin">map</span> <span class="token punctuation">(</span><span class="token hvariable">dir</span> <span class="token operator">&lt;/&gt;</span><span class="token punctuation">)</span> <span class="token hvariable">baseNames</span><span class="token punctuation">)</span>
          <span class="token builtin">return</span> <span class="token punctuation">(</span><span class="token builtin">concat</span> <span class="token hvariable">pathNames</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们使用 <code>splitFileName</code> 将字符串分割为目录名和文件名。如果第一个元素为空，说明我们正在当前目录寻找符合模式的文件。否则，我们必须检查目录名，观察其是否包含模式。若不含模式，我们建立一个只由目录名一个元素组成的列表。如果含有模式，我们列出所有匹配的目录。</p><div class="hint-container note"><p class="hint-container-title">Note</p><p>注意事项</p><p><code>System.FilePath</code> 模块稍有点诡异。上面的情况就是一个例子。 <code>splitFileName</code> 函数在其返回值的目录名部分的结尾保留了一个斜线。</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>ghci<span class="token operator">&gt;</span> :module +System.FilePath
ghci<span class="token operator">&gt;</span> splitFileName <span class="token string">&quot;foo/bar&quot;</span>
Loading package filepath-1.1.0.0 <span class="token punctuation">..</span>. linking <span class="token punctuation">..</span>. done.
<span class="token punctuation">(</span><span class="token string">&quot;foo/&quot;</span>,<span class="token string">&quot;bar&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果忘记（或不够了解）要去掉这个斜线，我们将在 <code>namesMatching</code> 函数中进行无止尽的递归匹配，看看后面演示的 <code>splitFileName</code> 的行为你就会明白。</p><div class="language-haskell line-numbers-mode" data-ext="haskell" data-title="haskell"><pre class="language-haskell"><code><span class="token hvariable">ghci</span><span class="token operator">&gt;</span> <span class="token hvariable">splitFileName</span> <span class="token string">&quot;foo/&quot;</span>
<span class="token punctuation">(</span><span class="token string">&quot;foo/&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>你或许能够想象是什么促使我们加入这份注意事项。</p></div><p>最终，我们将每个目录中的匹配收集起来，得到一个由列表组成的列表，然后将它们连接为一个单独的由文件名组成的列表。</p><p>上面那个函数中出现的陌生的 <code>forM</code> 函数，其行为有些像 &quot;for&quot; 循环：它将其第二个参数（一个动作）映射到其第一个参数（一个列表），并返回由其结果组成的列表。</p><p>我们还剩余一些零散的目标需要完成。首先是上面用到过的 <code>doesNameExist</code> 函数的定义。 <code>System.Directory</code> 函数无法检查一个名字是否已经在文件系统中建立。它强制我们明确要检查的是一个文件还是目录。这个 API 设计的很丑陋，所以我们必须在一个函数中完成两次检验。出于效率考虑，我们首先检查文件名，因为文件比目录更常见。</p><div class="language-haskell line-numbers-mode" data-ext="haskell" data-title="haskell"><pre class="language-haskell"><code><span class="token comment">-- file: ch08/Glob.hs</span>
<span class="token hvariable">doesNameExist</span> <span class="token operator">::</span> <span class="token constant">FilePath</span> <span class="token operator">-&gt;</span> <span class="token constant">IO</span> <span class="token constant">Bool</span>

<span class="token hvariable">doesNameExist</span> <span class="token hvariable">name</span> <span class="token operator">=</span> <span class="token keyword">do</span>
    <span class="token hvariable">fileExists</span> <span class="token operator">&lt;-</span> <span class="token hvariable">doesFileExist</span> <span class="token hvariable">name</span>
    <span class="token keyword">if</span> <span class="token hvariable">fileExists</span>
      <span class="token keyword">then</span> <span class="token builtin">return</span> <span class="token constant">True</span>
      <span class="token keyword">else</span> <span class="token hvariable">doesDirectoryExist</span> <span class="token hvariable">name</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>还有两个函数需要定义，返回值都是由某个目录下的名字组成的列表。 <code>listMatches</code> 函数返回由某目录下全部匹配给定 glob 模式的文件名组成的列表。</p><div class="language-haskell line-numbers-mode" data-ext="haskell" data-title="haskell"><pre class="language-haskell"><code><span class="token comment">-- file: ch08/Glob.hs</span>
<span class="token hvariable">listMatches</span> <span class="token operator">::</span> <span class="token constant">FilePath</span> <span class="token operator">-&gt;</span> <span class="token constant">String</span> <span class="token operator">-&gt;</span> <span class="token constant">IO</span> <span class="token punctuation">[</span><span class="token constant">String</span><span class="token punctuation">]</span>
<span class="token hvariable">listMatches</span> <span class="token hvariable">dirName</span> <span class="token hvariable">pat</span> <span class="token operator">=</span> <span class="token keyword">do</span>
    <span class="token hvariable">dirName&#39;</span> <span class="token operator">&lt;-</span> <span class="token keyword">if</span> <span class="token builtin">null</span> <span class="token hvariable">dirName</span>
                <span class="token keyword">then</span> <span class="token hvariable">getCurrentDirectory</span>
                <span class="token keyword">else</span> <span class="token builtin">return</span> <span class="token hvariable">dirName</span>
    <span class="token hvariable">handle</span> <span class="token punctuation">(</span><span class="token builtin">const</span> <span class="token punctuation">(</span><span class="token builtin">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">::</span><span class="token punctuation">(</span><span class="token constant">SomeException</span><span class="token operator">-&gt;</span><span class="token constant">IO</span> <span class="token punctuation">[</span><span class="token constant">String</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
           <span class="token operator">$</span> <span class="token keyword">do</span> <span class="token hvariable">names</span> <span class="token operator">&lt;-</span> <span class="token hvariable">getDirectoryContents</span> <span class="token hvariable">dirName&#39;</span>
                <span class="token keyword">let</span> <span class="token hvariable">names&#39;</span> <span class="token operator">=</span> <span class="token keyword">if</span> <span class="token hvariable">isHidden</span> <span class="token hvariable">pat</span>
                             <span class="token keyword">then</span> <span class="token builtin">filter</span> <span class="token hvariable">isHidden</span> <span class="token hvariable">names</span>
                             <span class="token keyword">else</span> <span class="token builtin">filter</span> <span class="token punctuation">(</span><span class="token builtin">not</span> <span class="token operator">.</span> <span class="token hvariable">isHidden</span><span class="token punctuation">)</span> <span class="token hvariable">names</span>
                <span class="token builtin">return</span> <span class="token punctuation">(</span><span class="token builtin">filter</span> <span class="token punctuation">(</span><span class="token operator">\`matchesGlob\`</span> <span class="token hvariable">pat</span><span class="token punctuation">)</span> <span class="token hvariable">names&#39;</span><span class="token punctuation">)</span>

<span class="token hvariable">isHidden</span> <span class="token punctuation">(</span><span class="token char string">&#39;.&#39;</span><span class="token operator">:</span><span class="token hvariable">_</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token constant">True</span>
<span class="token hvariable">isHidden</span> <span class="token hvariable">_</span>       <span class="token operator">=</span> <span class="token constant">False</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>listPlain</code> 接收的函数名若存在，则返回由这个文件名组成的单元素列表，否则返回空列表。</p><div class="language-haskell line-numbers-mode" data-ext="haskell" data-title="haskell"><pre class="language-haskell"><code><span class="token comment">-- file: ch08/Glob.hs</span>
<span class="token hvariable">listPlain</span> <span class="token operator">::</span> <span class="token constant">FilePath</span> <span class="token operator">-&gt;</span> <span class="token constant">String</span> <span class="token operator">-&gt;</span> <span class="token constant">IO</span> <span class="token punctuation">[</span><span class="token constant">String</span><span class="token punctuation">]</span>
<span class="token hvariable">listPlain</span> <span class="token hvariable">dirName</span> <span class="token hvariable">baseName</span> <span class="token operator">=</span> <span class="token keyword">do</span>
    <span class="token hvariable">exists</span> <span class="token operator">&lt;-</span> <span class="token keyword">if</span> <span class="token builtin">null</span> <span class="token hvariable">baseName</span>
              <span class="token keyword">then</span> <span class="token hvariable">doesDirectoryExist</span> <span class="token hvariable">dirName</span>
              <span class="token keyword">else</span> <span class="token hvariable">doesNameExist</span> <span class="token punctuation">(</span><span class="token hvariable">dirName</span> <span class="token operator">&lt;/&gt;</span> <span class="token hvariable">baseName</span><span class="token punctuation">)</span>
    <span class="token builtin">return</span> <span class="token punctuation">(</span><span class="token keyword">if</span> <span class="token hvariable">exists</span> <span class="token keyword">then</span> <span class="token punctuation">[</span><span class="token hvariable">baseName</span><span class="token punctuation">]</span> <span class="token keyword">else</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>仔细观察 <code>listMatches</code> 函数的定义，将发现一个名为 <code>handle</code> 的函数。之前，我们从 <code>Control.Exception</code> 模块中将其载入。正如其暗示的那样，这个函数让我们初次体验了 Haskell 中的异常处理。把它扔进 ghci 中看我们会发现什么。</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>ghci<span class="token operator">&gt;</span> :module +Control.Exception
ghci<span class="token operator">&gt;</span> :type handle
handle :: <span class="token punctuation">(</span>Exception -<span class="token operator">&gt;</span> IO a<span class="token punctuation">)</span> -<span class="token operator">&gt;</span> IO a -<span class="token operator">&gt;</span> IO a
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看出 <code>handle</code> 接受两个参数。首先是一个函数，其接受一个异常值，且有副作用（其返回值类型带有 IO 标签）；这是一个异常处理器。第二个参数是可能会抛出异常的代码。</p><p>关于异常处理器，异常处理器的类型限制其必须返回与抛出异常的代码相同的类型。所以它只能选择或是抛出一个异常，或像在我们的例子中返回一个由字符串组成的列表。</p><p><code>const</code> 函数接受两个参数；无论第二个参数是什么，其始终返回第一个参数。</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>ghci<span class="token operator">&gt;</span> :type const
const :: a -<span class="token operator">&gt;</span> b -<span class="token operator">&gt;</span> a
ghci<span class="token operator">&gt;</span> :type <span class="token builtin class-name">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
<span class="token builtin class-name">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> :: <span class="token punctuation">(</span>Monad m<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> m <span class="token punctuation">[</span>a<span class="token punctuation">]</span>
ghci<span class="token operator">&gt;</span> :type handle <span class="token punctuation">(</span>const <span class="token punctuation">(</span>return <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">))</span>
handle <span class="token punctuation">(</span>const <span class="token punctuation">(</span>return <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">))</span> :: IO <span class="token punctuation">[</span>a<span class="token punctuation">]</span> -<span class="token operator">&gt;</span> IO <span class="token punctuation">[</span>a<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们使用 <code>const</code> 编写异常处理器忽略任何向其传入的异常。取而代之，当我们捕获异常时，返回一个空列表。</p><p>本章不会再展开任何异常处理相关的话题。然而还有更多可说，我们将在第 19 章异常处理时重新探讨这个主题。</p><h3 id="练习-1" tabindex="-1"><a class="header-anchor" href="#练习-1"><span>练习</span></a></h3><ol><li>尽管我们已经编写了一个可移植 <code>namesMatching</code> 函数，这个函数使用了我们的大小写敏感的 <code>globToRegex</code> 函数。尝试在不改变其类型签名的前提下，使 <code>namesMatching</code> 在 Unix 下大小写敏感，在 Windows 下大小写不敏感。</li></ol><p>提示：查阅一下 <code>System.FilePath</code> 的文档，其中有一个变量可以告诉我们程序是运行在类 Unix 系统上还是在 Windows 系统上。</p><ol start="2"><li>如果你在使用类 Unix 系统，查阅 <code>System.Posix.Files</code> 模块的文档，看是否能找到一个 <code>doesNameExist</code> 的替代品。</li><li><code>*</code> 通配符，仅匹配一个单独目录中的名字。很多 shell 可以提供扩展通配符语法， <code>**</code> ，其将在所有目录中进行递归匹配。举个例子，<code>**.c</code> 意为 &quot;在当前目录及其任意深度的子目录下匹配一个 <code>.c</code> 结尾的文件名&quot;。实现 <code>**</code> 通配符匹配。</li></ol><h2 id="通过-api-设计进行错误处理" tabindex="-1"><a class="header-anchor" href="#通过-api-设计进行错误处理"><span>通过 API 设计进行错误处理</span></a></h2><p>向 <code>globToRegex</code> 传入一个畸形的正则表达式未必会是一场灾难。用户的表达式可能会有输入错误，这时我们更希望得到有意义的报错信息。</p><p>当这类问题出现时，调用 <code>error</code> 函数会有很激烈的反应（其结果在 Q: 1 这个练习中探索过。）。 <code>error</code> 函数会抛出一个异常。纯函数式的 <code>Haskell</code> 代码无法处理异常，所以控制流会突破我们的纯函数代码直接交给处于距离最近一层 <code>IO</code> 中并且安装有合适的异常处理器的调用者。如果没有安装异常处理器， <code>Haskell</code> 运行时的默认动作是终结我们的程序（如果是在 ghci 中，则会打出一条令人不快的错误信息。）</p><p>所以，调用 <code>error</code> 有点像是拉下了战斗机的座椅弹射手柄。我们从一个无法优雅处理的灾难性场景中逃离，而等我们着地时会撒出很多燃烧着的残骸。</p><p>我们已经确定了 <code>error</code> 是为灾难情场景准备的，但我们仍旧在 <code>globToRegex</code> 中使用它。畸形的输入将被拒绝，但不会导致大问题。处理这种情况有更好的方式吗？</p><p><code>Haskell</code> 的类型系统和库来救你了！我们可以使用内置的 <code>Either</code> 类型，在 <code>globToRegex</code> 函数的类型签名中描述失败的可能性。</p><div class="language-haskell line-numbers-mode" data-ext="haskell" data-title="haskell"><pre class="language-haskell"><code><span class="token comment">-- file: ch08/GlobRegexEither.hs</span>
<span class="token keyword">type</span> <span class="token constant">GlobError</span> <span class="token operator">=</span> <span class="token constant">String</span>

<span class="token hvariable">globToRegex</span> <span class="token operator">::</span> <span class="token constant">String</span> <span class="token operator">-&gt;</span> <span class="token constant">Either</span> <span class="token constant">GlobError</span> <span class="token constant">String</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>globToRegex</code> 的返回值将为两种情况之一，或者为 <code>Left &quot;出错信息&quot;</code> 或者为 <code>Right &quot;一个合法正则表达式&quot;</code> 。这种返回值类型，强制我们的调用者处理可能出现的错误。（你会发现这是 <code>Haskell</code> 代码中 <code>Either</code> 类型最广泛的用途。）</p><h3 id="练习-2" tabindex="-1"><a class="header-anchor" href="#练习-2"><span>练习</span></a></h3><ol><li>编写一个使用上面那种类型签名的 <code>globToRegex</code> 版本。</li><li>改变 <code>namesMatching</code> 的类型签名，使其可以处理畸形的正则表达式，并使用它重写 <code>globToRegex</code> 函数。</li></ol><div class="hint-container tip"><p class="hint-container-title">Tip</p><p>你会发现牵扯到的工作量大得惊人。别怕，我们将在后面的章节介绍更多简单老练的处理错误的方式。</p></div><h2 id="让我们的代码工作" tabindex="-1"><a class="header-anchor" href="#让我们的代码工作"><span>让我们的代码工作</span></a></h2><p><code>namesMatching</code> 函数本身并不是很令人兴奋，但它是一个很有用的构建模块。将它与稍多点的函数组合在一起，就会让我们做出有趣的东西。</p><p>这里有个例子。定义一个 <code>renameWith</code> 函数，并不简单的重命名一个文件，取而代之，对文件名执行一个函数，并将返回值作为新的文件名。</p><div class="language-haskell line-numbers-mode" data-ext="haskell" data-title="haskell"><pre class="language-haskell"><code><span class="token comment">-- file: ch08/Useful.hs</span>
<span class="token import-statement"><span class="token keyword">import</span> System<span class="token punctuation">.</span>FilePath</span> <span class="token punctuation">(</span><span class="token hvariable">replaceExtension</span><span class="token punctuation">)</span>
<span class="token import-statement"><span class="token keyword">import</span> System<span class="token punctuation">.</span>Directory</span> <span class="token punctuation">(</span><span class="token hvariable">doesFileExist</span><span class="token punctuation">,</span> <span class="token hvariable">renameDirectory</span><span class="token punctuation">,</span> <span class="token hvariable">renameFile</span><span class="token punctuation">)</span>
<span class="token import-statement"><span class="token keyword">import</span> Glob</span> <span class="token punctuation">(</span><span class="token hvariable">namesMatching</span><span class="token punctuation">)</span>

<span class="token hvariable">renameWith</span> <span class="token operator">::</span> <span class="token punctuation">(</span><span class="token constant">FilePath</span> <span class="token operator">-&gt;</span> <span class="token constant">FilePath</span><span class="token punctuation">)</span>
           <span class="token operator">-&gt;</span> <span class="token constant">FilePath</span>
           <span class="token operator">-&gt;</span> <span class="token constant">IO</span> <span class="token constant">FilePath</span>

<span class="token hvariable">renameWith</span> <span class="token hvariable">f</span> <span class="token hvariable">path</span> <span class="token operator">=</span> <span class="token keyword">do</span>
    <span class="token keyword">let</span> <span class="token hvariable">path&#39;</span> <span class="token operator">=</span> <span class="token hvariable">f</span> <span class="token hvariable">path</span>
    <span class="token hvariable">rename</span> <span class="token hvariable">path</span> <span class="token hvariable">path&#39;</span>
    <span class="token builtin">return</span> <span class="token hvariable">path&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们再一次通过一个辅助函数使用 <code>System.Directory</code> 中难看的文件/目录函数</p><div class="language-haskell line-numbers-mode" data-ext="haskell" data-title="haskell"><pre class="language-haskell"><code><span class="token comment">-- file: ch08/Useful.hs</span>
<span class="token hvariable">rename</span> <span class="token operator">::</span> <span class="token constant">FilePath</span> <span class="token operator">-&gt;</span> <span class="token constant">FilePath</span> <span class="token operator">-&gt;</span> <span class="token constant">IO</span> <span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token hvariable">rename</span> <span class="token hvariable">old</span> <span class="token hvariable">new</span> <span class="token operator">=</span> <span class="token keyword">do</span>
    <span class="token hvariable">isFile</span> <span class="token operator">&lt;-</span> <span class="token hvariable">doesFileExist</span> <span class="token hvariable">old</span>
    <span class="token keyword">let</span> <span class="token hvariable">f</span> <span class="token operator">=</span> <span class="token keyword">if</span> <span class="token hvariable">isFile</span> <span class="token keyword">then</span> <span class="token hvariable">renameFile</span> <span class="token keyword">else</span> <span class="token hvariable">renameDirectory</span>
    <span class="token hvariable">f</span> <span class="token hvariable">old</span> <span class="token hvariable">new</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>System.FilePath</code> 模块提供了很多有用的函数用于操作文件名。这些函数洽好漏过了我们的 <code>renameWith</code> 和 <code>namesMatching</code> 函数，所以我们可以通过将他们组合起来的方式来快速的创建新函数。例如，这个简洁的函数修改了 C++ 源码文件的后缀名。</p><div class="language-haskell line-numbers-mode" data-ext="haskell" data-title="haskell"><pre class="language-haskell"><code><span class="token comment">-- file: ch08/Useful.hs</span>
<span class="token hvariable">cc2cpp</span> <span class="token operator">=</span>
  <span class="token builtin">mapM</span> <span class="token punctuation">(</span><span class="token hvariable">renameWith</span> <span class="token punctuation">(</span><span class="token builtin">flip</span> <span class="token hvariable">replaceExtension</span> <span class="token string">&quot;.cpp&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">=&lt;&lt;</span> <span class="token hvariable">namesMatching</span> <span class="token string">&quot;*.cc&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>cc2cpp</code> 函数使用了几个我们已经见过多次的函数。 <code>flip</code> 函数接受另一个函数作为参数，交换其参数的顺序（可以在 ghci 中调查 replaceExtension 的类型以了解详情）。 <code>=&lt;&lt;</code> 函数将其右侧动作的结果喂给其左侧的动作。</p><h3 id="练习-3" tabindex="-1"><a class="header-anchor" href="#练习-3"><span>练习</span></a></h3><ol><li>Glob 模式解释起来很简单，用 <code>Haskell</code> 可以很容易的直接写出其匹配器，正则表达式则不然。试一下编写正则匹配。</li></ol>`,204),p=[o];function l(c,i){return a(),n("div",null,p)}const u=s(t,[["render",l],["__file","8.html.vue"]]),k=JSON.parse('{"path":"/%E5%AD%A6%E4%B9%A0/Haskell%E4%B8%AD%E6%96%87%E6%96%87%E6%A1%A3/8.html","title":"第 8 章：高效文件处理、正则表达式、文件名匹配","lang":"zh-CN","frontmatter":{"description":"第 8 章：高效文件处理、正则表达式、文件名匹配 高效文件处理 下面是个简单的基准测试，读取一个由数字构成的文本文件，并打印它们的和。 尽管读写文件时，默认使用 String 类型，但它并不高效，所以这样简单的程序效率会很糟糕。 一个 String 代表一个元素类型为 Char 的列表；列表的每个元素被单独分配内存，并有一定的写入开销。对那些要读取文本...","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/%E5%AD%A6%E4%B9%A0/Haskell%E4%B8%AD%E6%96%87%E6%96%87%E6%A1%A3/8.html"}],["meta",{"property":"og:site_name","content":"博客演示"}],["meta",{"property":"og:title","content":"第 8 章：高效文件处理、正则表达式、文件名匹配"}],["meta",{"property":"og:description","content":"第 8 章：高效文件处理、正则表达式、文件名匹配 高效文件处理 下面是个简单的基准测试，读取一个由数字构成的文本文件，并打印它们的和。 尽管读写文件时，默认使用 String 类型，但它并不高效，所以这样简单的程序效率会很糟糕。 一个 String 代表一个元素类型为 Char 的列表；列表的每个元素被单独分配内存，并有一定的写入开销。对那些要读取文本..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-02-24T04:33:47.000Z"}],["meta",{"property":"article:author","content":"Mr.Hope"}],["meta",{"property":"article:modified_time","content":"2024-02-24T04:33:47.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"第 8 章：高效文件处理、正则表达式、文件名匹配\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-02-24T04:33:47.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr.Hope\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":2,"title":"高效文件处理","slug":"高效文件处理","link":"#高效文件处理","children":[{"level":3,"title":"二进制 I/O 和有限载入","slug":"二进制-i-o-和有限载入","link":"#二进制-i-o-和有限载入","children":[]},{"level":3,"title":"文本 I/O","slug":"文本-i-o","link":"#文本-i-o","children":[]}]},{"level":2,"title":"匹配文件名","slug":"匹配文件名","link":"#匹配文件名","children":[]},{"level":2,"title":"Haskell 中的正则表达式","slug":"haskell-中的正则表达式","link":"#haskell-中的正则表达式","children":[{"level":3,"title":"结果的多种类型","slug":"结果的多种类型","link":"#结果的多种类型","children":[]}]},{"level":2,"title":"进一步了解正则表达式","slug":"进一步了解正则表达式","link":"#进一步了解正则表达式","children":[{"level":3,"title":"不同类型字符串的混合与匹配","slug":"不同类型字符串的混合与匹配","link":"#不同类型字符串的混合与匹配","children":[]},{"level":3,"title":"你要知道的其他一些事情","slug":"你要知道的其他一些事情","link":"#你要知道的其他一些事情","children":[]}]},{"level":2,"title":"将 glob 模式翻译为正则表达式","slug":"translate-a-glob-pattern-into-a-regular-expression","link":"#translate-a-glob-pattern-into-a-regular-expression","children":[{"level":3,"title":"练习","slug":"练习","link":"#练习","children":[]}]},{"level":2,"title":"重要的题外话：编写惰性函数","slug":"重要的题外话-编写惰性函数","link":"#重要的题外话-编写惰性函数","children":[]},{"level":2,"title":"利用我们的模式匹配器","slug":"利用我们的模式匹配器","link":"#利用我们的模式匹配器","children":[{"level":3,"title":"练习","slug":"练习-1","link":"#练习-1","children":[]}]},{"level":2,"title":"通过 API 设计进行错误处理","slug":"通过-api-设计进行错误处理","link":"#通过-api-设计进行错误处理","children":[{"level":3,"title":"练习","slug":"练习-2","link":"#练习-2","children":[]}]},{"level":2,"title":"让我们的代码工作","slug":"让我们的代码工作","link":"#让我们的代码工作","children":[{"level":3,"title":"练习","slug":"练习-3","link":"#练习-3","children":[]}]}],"git":{"createdTime":1708749227000,"updatedTime":1708749227000,"contributors":[{"name":"hahg2000","email":"61403802+hahg2000@users.noreply.github.com","commits":1}]},"readingTime":{"minutes":31.39,"words":9417},"filePathRelative":"学习/Haskell中文文档/8.md","localizedDate":"2024年2月24日","excerpt":"\\n<h2>高效文件处理</h2>\\n<p>下面是个简单的基准测试，读取一个由数字构成的文本文件，并打印它们的和。</p>\\n<div class=\\"language-haskell\\" data-ext=\\"haskell\\" data-title=\\"haskell\\"><pre class=\\"language-haskell\\"><code><span class=\\"token comment\\">-- file: ch08/SumFile.hs</span>\\n<span class=\\"token hvariable\\">main</span> <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">do</span>\\n    <span class=\\"token hvariable\\">contents</span> <span class=\\"token operator\\">&lt;-</span> <span class=\\"token builtin\\">getContents</span>\\n    <span class=\\"token builtin\\">print</span> <span class=\\"token punctuation\\">(</span><span class=\\"token hvariable\\">sumFile</span> <span class=\\"token hvariable\\">contents</span><span class=\\"token punctuation\\">)</span>\\n  <span class=\\"token keyword\\">where</span> <span class=\\"token hvariable\\">sumFile</span> <span class=\\"token operator\\">=</span> <span class=\\"token builtin\\">sum</span> <span class=\\"token operator\\">.</span> <span class=\\"token builtin\\">map</span> <span class=\\"token builtin\\">read</span> <span class=\\"token operator\\">.</span> <span class=\\"token builtin\\">words</span>\\n</code></pre></div>","autoDesc":true}');export{u as comp,k as data};
