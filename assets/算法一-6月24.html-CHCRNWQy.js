import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as s,c as a,f as t}from"./app-Chw2KLnS.js";const p={},e=t(`<h1 id="算法一-6月24" tabindex="-1"><a class="header-anchor" href="#算法一-6月24"><span>算法一-6月24</span></a></h1><h2 id="一、正则表达式匹配" tabindex="-1"><a class="header-anchor" href="#一、正则表达式匹配"><span>一、正则表达式匹配</span></a></h2><h3 id="_1-略解" tabindex="-1"><a class="header-anchor" href="#_1-略解"><span>（1）略解</span></a></h3><p>原链接：https://mp.weixin.qq.com/s/Khts_1iw--oWPxe0f4AoMg</p><blockquote><p>题目：给你一个字符串 s 和一个字符规律 p，请你来实现一个支持 <code>&#39;.&#39;</code> 和 <code>&#39;*&#39;</code> 的正则表达式匹配。</p><ul><li><code>.</code> 匹配任意单个字符</li><li><code>*</code> 匹配零个或多个前面的那一个元素</li></ul></blockquote><p>简单来说：就是实现 <code>.</code> 和 <code>*</code> 的功能。普通的两个字符串比较，涉及到 KMP 算法。</p><p>可以使用动态规划，其符合 <strong>最优子结构性质</strong> ，因为 s 匹配 p，按照规则得到的 s 子串和 p 子串肯定也匹配。</p><ul><li>状态定义：<code>f(i,j)</code> 代表 <code>s</code> 中以 <code>i</code> 下标为结尾的子串和 <code>p</code> 中的以 <code>j</code> 下标为结尾的子串是否匹配。</li><li>状态转移：也就是我们要考虑 <code>f(i,j)</code> 如何求得，前面说到了 <code>p</code> 有三种字符，所以这里的状态转移也要分三种情况讨论：</li></ul><ol><li>如果字符规律的下一个字符， <code>p[j]</code> 为普通字符，则在 s 子串匹配 p 子串的基础上，再判断 p 子串的下一个字符和 s 子串的下一个字符是否相等。即 <code>f(i,j) = f(i - 1, j - 1) &amp;&amp; s[i] == p[j]</code> 。在表格上就是取左上对角的值。</li><li>如果 <code>p[j]</code> 为 <code>.</code> ，则代表 s 串的某个字符无论是什么，都可以匹配。即 <code>f(i,j) = f(i - 1, j - 1) &amp;&amp; p[j] == &#39;.&#39;</code> 。在表格上就是取左上对角的值。</li><li><code>p[j]</code> 为 <code>*</code>：必须先读得上一个字符，即 <code>p[j - 1]</code> 的字符，例如为字符 a。然后根据 <code>a*</code> 实际匹配 <code>s</code> 中 <code>a</code> 的个数是 0 个 或者多个。 <ul><li>当是 0 个的时候，则这两个字符串没有用，<code>f[i][j]</code> 等于 <code>f[i][j-2]</code> 。</li><li>当是多个的时候，则只需要判断 <code>s[i]</code> 和 <code>p[j-1]</code> 是否相等，以及在加入 <code>s[i]</code> 字符之前的情况，即 <code>f[i-1][j]</code>。</li></ul></li></ol><hr><p>第 1 点和第 2 点写出代码，两个条件合并了，因为结构类似：</p><ul><li><code>s[i] == p[j]</code> 相当于普通字符比较相等</li><li><code>p[j] == &#39;.&#39;</code> 相当于 <code>p[j]</code> 是 <code>.</code> 字符</li></ul><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">&gt;=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> p<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token char">&#39;*&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> f<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> p<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">||</span> p<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">&#39;.&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>第 3 点写出代码：</p><ul><li>或条件的左边，代码第 2 行：当 <code>*</code> 匹配 0 个字符，直接取 <code>f[i][j - 2]</code> 的值</li><li>或条件的右边：当 <code>*</code> 匹配 多个字符，需要满足两个条件 <ul><li><code>f[i - 1][j]</code> ：代表 s 子串加上 <code>s[i]</code> 之前是否匹配，只有之前匹配了才有机会加多一个字符来看是否匹配 p 串。</li><li><code>(s[i] == p[j - 1] || p[j - 1] == &#39;.&#39;)</code> ：判断 <code>p[j-1]</code> 与 <code>s[i]</code> 是否匹配，若匹配了，则 <code>f[i][j]</code> 才匹配。</li></ul></li></ul><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>p<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">&#39;*&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> 
  f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>j <span class="token operator">-</span> <span class="token number">2</span> <span class="token operator">&gt;=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">||</span> 
    <span class="token punctuation">(</span>i <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">&gt;=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> f<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> p<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">||</span> p<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">&#39;.&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-详解" tabindex="-1"><a class="header-anchor" href="#_2-详解"><span>（2）详解</span></a></h3><p>动态规划的核心就是填表格。下面假设 s 串为 <code>aab</code> ，p 串为 <code>c*a*b </code> 。下面是空表。</p><table><thead><tr><th></th><th>p</th><th>_</th><th>c</th><th>*</th><th>a</th><th>*</th><th>b</th></tr></thead><tbody><tr><td><strong>s</strong></td><td></td><td>0</td><td>1</td><td>2</td><td>3</td><td>4</td><td>5</td></tr><tr><td><strong>_</strong></td><td>0</td><td>√</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td><strong>a</strong></td><td>1</td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td><strong>a</strong></td><td>2</td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td><strong>b</strong></td><td>3</td><td></td><td></td><td></td><td></td><td></td><td></td></tr></tbody></table><p>为了好写循环代码，所以在两个字符串之前都加上一个空格。 <code>s[0]</code> 和 <code>p[0]</code> 都相当于空串。</p><p>然后 s 串的第一个字符不动， p 串从第二个字符开始循环，即字符串不变，字符规律在变。</p><ol><li>第 2 个字符是 c ，但其后面是 <code>*</code> 号，则进入下一个循环</li><li>第 3 个字符是 <code>*</code> ，由于 s 串是第 1 个字符，是空串，不等于 c，所以继续看去掉 <code>c*</code> 两个字符后是否匹配，很明显 <code>f[0][2] = f[0][0] = true</code>。所以表格填充成如下：</li></ol><table><thead><tr><th></th><th>p</th><th>_</th><th>c</th><th>*</th><th>a</th><th>*</th><th>b</th></tr></thead><tbody><tr><td><strong>s</strong></td><td></td><td>0</td><td>1</td><td>2</td><td>3</td><td>4</td><td>5</td></tr><tr><td><strong>_</strong></td><td>0</td><td>√</td><td>x</td><td>√</td><td></td><td></td><td></td></tr><tr><td><strong>a</strong></td><td>1</td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td><strong>a</strong></td><td>2</td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td><strong>b</strong></td><td>3</td><td></td><td></td><td></td><td></td><td></td><td></td></tr></tbody></table><ol start="3"><li>以此类推，得出后面 <code>a*</code> 的匹配状态，然后 b 不等于 空串，所以不匹配，则第一行的填表结果如下。</li></ol><table><thead><tr><th></th><th>p</th><th>_</th><th>c</th><th>*</th><th>a</th><th>*</th><th>b</th></tr></thead><tbody><tr><td><strong>s</strong></td><td></td><td>0</td><td>1</td><td>2</td><td>3</td><td>4</td><td>5</td></tr><tr><td><strong>_</strong></td><td>0</td><td>√</td><td>x</td><td>√</td><td>x</td><td>√</td><td>x</td></tr><tr><td><strong>a</strong></td><td>1</td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td><strong>a</strong></td><td>2</td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td><strong>b</strong></td><td>3</td><td></td><td></td><td></td><td></td><td></td><td></td></tr></tbody></table><ol start="4"><li>然后开始填写第 2 行，s [1] 为 a 字符。 <ol><li>a 不等于 p[0] 空串，不匹配，所以 <code>f[1][0] = false</code>；</li><li>p[1] 的下一个是 <code>*</code> 号，则跳过；</li><li>p[2] 是 <code>*</code> 号，然后比较 p[1] 和 s[1] ，p 的第 1 个字符——c 不等于 s 的第 1 个字符——a，所以不匹配。得出下面表格结果。</li></ol></li></ol><table><thead><tr><th></th><th>p</th><th>_</th><th>c</th><th>*</th><th>a</th><th>*</th><th>b</th></tr></thead><tbody><tr><td><strong>s</strong></td><td></td><td>0</td><td>1</td><td>2</td><td>3</td><td>4</td><td>5</td></tr><tr><td><strong>_</strong></td><td>0</td><td>√</td><td>x</td><td>√</td><td>x</td><td>√</td><td>x</td></tr><tr><td><strong>a</strong></td><td>1</td><td>x</td><td>x</td><td>x</td><td></td><td></td><td></td></tr><tr><td><strong>a</strong></td><td>2</td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td><strong>b</strong></td><td>3</td><td></td><td></td><td></td><td></td><td></td><td></td></tr></tbody></table><ol start="5"><li>然后看 p 的第 3 个字符，因为 p 的第 3 个字符 是 <code>*</code> 号，所以 p[3] 跳过； <ol><li>看 p 的第 4 个字符，是 <code>*</code> 号，然后看 p 的第 3 个字符 是否等于 s 的第 1 个字符 ，两个都是 a 字符，所以相等；</li><li>接着看 <code>f[i-1][j]</code> 是否匹配，即看该格的上面是否是对勾，<code>f[0][4]</code> 是对勾所以 <code>f[1][4]</code> 也是对勾。结果如下表所示。</li></ol></li></ol><table><thead><tr><th></th><th>p</th><th>_</th><th>c</th><th>*</th><th>a</th><th>*</th><th>b</th></tr></thead><tbody><tr><td><strong>s</strong></td><td><strong>f(i,j)</strong></td><td><strong>0</strong></td><td><strong>1</strong></td><td><strong>2</strong></td><td><strong>3</strong></td><td><strong>4</strong></td><td><strong>5</strong></td></tr><tr><td><strong>_</strong></td><td><strong>0</strong></td><td>√</td><td>x</td><td>√</td><td>x</td><td>√</td><td>x</td></tr><tr><td><strong>a</strong></td><td><strong>1</strong></td><td>x</td><td>x</td><td>x</td><td>x</td><td>√</td><td>x</td></tr><tr><td><strong>a</strong></td><td><strong>2</strong></td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td><strong>b</strong></td><td><strong>3</strong></td><td></td><td></td><td></td><td></td><td></td><td></td></tr></tbody></table><ol start="6"><li>然后一点点将表格填写完整，最后得出两个字符串匹配。</li></ol><table><thead><tr><th></th><th>p</th><th>_</th><th>c</th><th>*</th><th>a</th><th>*</th><th>b</th></tr></thead><tbody><tr><td><strong>s</strong></td><td></td><td>0</td><td>1</td><td>2</td><td>3</td><td>4</td><td>5</td></tr><tr><td><strong>_</strong></td><td>0</td><td>√</td><td>x</td><td>√</td><td>x</td><td>√</td><td>x</td></tr><tr><td><strong>a</strong></td><td>1</td><td>x</td><td>x</td><td>x</td><td>x</td><td>√</td><td>x</td></tr><tr><td><strong>a</strong></td><td>2</td><td>x</td><td>x</td><td>x</td><td>x</td><td>√</td><td>x</td></tr><tr><td><strong>b</strong></td><td>3</td><td>x</td><td>x</td><td>x</td><td>x</td><td>x</td><td>√</td></tr></tbody></table><h3 id="_3-总结" tabindex="-1"><a class="header-anchor" href="#_3-总结"><span>（3）总结</span></a></h3><p>动态规划算法不难理解，但需要找到状态如何转移。</p><p>全部代码：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">isMatch</span><span class="token punctuation">(</span><span class="token class-name">String</span> ss<span class="token punctuation">,</span> <span class="token class-name">String</span> pp<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 技巧：往原字符头部插入空格，这样得到 char 数组是从 1 开始，而且可以使得 f[0][0] = true，可以将 true 这个结果滚动下去</span>
  <span class="token keyword">int</span> n <span class="token operator">=</span> ss<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> m <span class="token operator">=</span> pp<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  ss <span class="token operator">=</span> <span class="token string">&quot; &quot;</span> <span class="token operator">+</span> ss<span class="token punctuation">;</span>
  pp <span class="token operator">=</span> <span class="token string">&quot; &quot;</span> <span class="token operator">+</span> pp<span class="token punctuation">;</span>

  <span class="token comment">// 将字符串转化为字符数组</span>
  <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> s <span class="token operator">=</span> ss<span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> p <span class="token operator">=</span> pp<span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// f(i,j) 代表 s 中的 1~i 字符和 p 中的 1~j 字符 是否匹配</span>
  <span class="token keyword">boolean</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> f <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">boolean</span><span class="token punctuation">[</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>m <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

  <span class="token comment">// 初始化第1个数</span>
  f<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>

  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> m<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// 如果下一个字符是 &#39;*&#39;，则代表当前字符不能被单独使用，跳过</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&lt;=</span> m <span class="token operator">&amp;&amp;</span> p<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">&#39;*&#39;</span><span class="token punctuation">)</span>
        <span class="token keyword">continue</span><span class="token punctuation">;</span>

      <span class="token comment">// 对应了 p[j] 为普通字符和 &#39;.&#39; 的两种情况</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">&gt;=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> p<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token char">&#39;*&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> f<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> p<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">||</span> p<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">&#39;.&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>

      <span class="token comment">// 对应了 p[j] 为 &#39;*&#39; 的情况，一种情况是不看这两个字符，另一种是看p[j-1]与s[i]是否相等</span>
      <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>p<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">&#39;*&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>j <span class="token operator">-</span> <span class="token number">2</span> <span class="token operator">&gt;=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
          <span class="token operator">||</span> <span class="token punctuation">(</span>i <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">&gt;=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> f<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> p<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">||</span> p<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">&#39;.&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> f<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="二、回文数" tabindex="-1"><a class="header-anchor" href="#二、回文数"><span>二、回文数</span></a></h2><p>原文链接：https://mp.weixin.qq.com/s?__biz=MzU4NDE3MTEyMA==&amp;mid=2247484130&amp;idx=2&amp;sn=4bc0ec832d90ca5cf6dbdea95560d6a9&amp;chksm=fd9ca9fdcaeb20ebe1c29592afb103ee4120ea5aa32c1036d5f3142757c8a2431705ef2e6b57&amp;scene=178&amp;cur_album_id=1715134171561410565#rd</p><p>判断一个整数是否是回文数。回文数是指正序（从左向右）和倒序（从右向左）读都是一样的整数。</p><p>示例 1:</p><ul><li><p>输入: 121</p></li><li><p>输出: true</p></li></ul><p>示例 2:</p><ul><li>输入: -121</li><li>输出: false</li><li>解释: 从左向右读, 为 -121 。 从右向左读, 为 121- 。因此它不是一个回文数。</li></ul><p>示例 3:</p><ul><li>输入: 10</li><li>输出: false</li><li>解释: 从右向左读, 为 01 。因此它不是一个回文数。</li></ul><h3 id="_1-略解-1" tabindex="-1"><a class="header-anchor" href="#_1-略解-1"><span>（1）略解</span></a></h3><p>最简单的一种解法就是将数字转换为字符串，然后跟原来的进行比较。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
  <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isPalindrome</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">String</span> s <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">StringBuilder</span> sb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>
    sb<span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> sb<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>另一种非字符串解法，就是 <strong>让数字完全翻转</strong>。新的整数的数字是从旧的整数的个位开始的。</p><ul><li>第 3 行：如果是负数，其必不是回文数</li><li>第 4 行：原来的是 <code>int</code> 数据类型，其范围为 -2<sup>31</sup> (-2147483648) ~ 2<sup>31</sup>-1 (2147483647) ，如果反转了，有溢出风险，所以使用 <code>long</code> 数据类型。 2<sup>64</sup> (-9223372036854775808)~ 2<sup>64</sup>-1(9223372036854775807)</li><li>第 6 ~ 9 行：然后不断的对 x 取余得出个位数，然后将反转的数左移（乘10）并加上个位数。</li></ul><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
  <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isPalindrome</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token keyword">long</span> ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> t <span class="token operator">=</span> x<span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>x <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      ans <span class="token operator">=</span> ans <span class="token operator">*</span> <span class="token number">10</span> <span class="token operator">+</span> x <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">;</span>
      x <span class="token operator">/=</span> <span class="token number">10</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> ans <span class="token operator">-</span> t <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果不能使用 <code>long</code> 数据类型的话，则需要使用到回文数的特性，左右部分相等。收集右半部分和反转整数一个思路。</p><ul><li>第 4 行：如果是负数或者末尾是 0 的话，肯定不是回文数。</li><li>第 6 行： x 是否大于 t 来作为左右分隔的条件，这样不用计左右部分数字的个数，不过可能会导致 t 的数字个数会比 x 的数字个数 <strong>多一位</strong>。</li><li>第 12 行：判断的时候不仅要比较 x 和 t，还要比较 x 和去掉一位的 t 。</li></ul><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
  <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isPalindrome</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 对于 负数 和 x0、x00、x000 格式的数，直接返回 flase</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> <span class="token punctuation">(</span>x <span class="token operator">%</span> <span class="token number">10</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> x <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> t <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>x <span class="token operator">&gt;</span> t<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      t <span class="token operator">=</span> t <span class="token operator">*</span> <span class="token number">10</span> <span class="token operator">+</span> x <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">;</span>
      x <span class="token operator">/=</span> <span class="token number">10</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 回文长度的两种情况：直接比较 &amp; 忽略中心点（t 的最后一位）进行比较</span>
    <span class="token keyword">return</span> x <span class="token operator">==</span> t <span class="token operator">||</span> x <span class="token operator">==</span> t <span class="token operator">/</span> <span class="token number">10</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="三、工程模拟题" tabindex="-1"><a class="header-anchor" href="#三、工程模拟题"><span>三、工程模拟题</span></a></h2><p>原题链接：https://mp.weixin.qq.com/s?__biz=MzU4NDE3MTEyMA==&amp;mid=2247484130&amp;idx=3&amp;sn=9b23784134bdce0cc003b9b28d273e7f&amp;chksm=fd9ca9fdcaeb20eb0faa62eb5543208f2152147b4c3369824f0a2e87d0fb56553ba8f66d11b1&amp;cur_album_id=1715134171561410565&amp;scene=189#wechat_redirect</p><blockquote><p>请你来实现一个 atoi 函数，使其能将字符串转换成整数。</p><p>首先，该函数会根据需要丢弃无用的开头空格字符。</p><p>接下来的转化规则如下：</p><ul><li>如果第一个非空字符为正或者负号时，则将该符号与之后面尽可能多的连续数字字符组合起来，形成一个有符号整数。</li><li>假如第一个非空字符是数字，则直接将其与之后连续的数字字符组合起来，形成一个整数。</li><li>该字符串在有效的整数部分之后也可能会存在多余的字符，那么这些字符可以被忽略，它们对函数不应该造成影响。</li></ul><p>假如该字符串中的第一个非空格字符不是一个有效整数字符、字符串为空或字符串仅包含空白字符时，则你的函数不需要进行转换，即无法进行有效转换。</p><p>在任何情况下，若函数不能进行有效的转换时，请返回 0 。</p><p>提示：</p><ul><li><code>0 &lt;= s.length &lt;= 200</code></li><li><code>s</code> 由英文字母（大写和小写）、数字、<code>&#39; &#39;</code>、<code>&#39;+&#39;</code>、<code>&#39;-&#39;</code> 和 <code>&#39;.&#39;</code> 组成</li></ul></blockquote><p>示例 1：</p><ul><li>输入: &quot;42&quot;</li><li>输出: 42</li></ul><p>示例 2：</p><ul><li>输入: &quot;-42&quot;</li><li>输出: -42</li><li>解释: 第一个非空白字符为 &#39; - &#39;，它是一个负号。我们尽可能将负号与后面所有连续出现的数字组合起来，最后得到 -42。</li></ul><p>示例 3：</p><ul><li><p>输入：&quot; 4193ssss &quot;</p></li><li><p>输出: 4193</p></li><li><p>解释: 转换截止于数字 &#39; 3 &#39; ，因为它的下一个字符不为数字</p></li></ul><p>示例 4：</p><ul><li><p>输入：“ w3029 ”</p></li><li><p>输出: 0</p></li><li><p>解释: 第一个非空字符是 &#39;w&#39;, 但它不是数字或正、负号。因此无法执行有效的转换</p></li></ul><p>示例 5:</p><ul><li>输入: &quot;-91283472332&quot;</li><li>输出: -2147483648</li><li>解释: 数字 <code>&quot;-91283472332&quot;</code> 超过 32 位有符号整数范围。 因此返回 <code>INT_MIN (−231)</code></li></ul><h3 id="_1-略解-2" tabindex="-1"><a class="header-anchor" href="#_1-略解-2"><span>（1）略解</span></a></h3><p>首先对题目进行分析：</p><ol><li>去掉字符串的前导空格</li><li>第一个字符只能是 <code>-</code> 、<code>+</code> 和 数字</li><li>然后继续向后匹配字符，直到遇到非数字字符。其过程需要注意数字是否越界。</li></ol><p>下面为代码：</p><ul><li>第 11 ~ 16 行：去掉字符串的前导空格</li><li>第 18 ~ 28 行：判断第一个字符</li><li>第 30 ~ 41 行：判断当前数字是否超过最大值，不能直接将当前数字与 <code>Integer.MAX_VALUE</code> 比较，因为如果当前数字超过最大值会程序报错，不会进行比较。所以需要将思维逆转，将 <code>Integer.MAX_VALUE</code> 降一位再进行比较。 <code>ans * 10 + cur &gt; Integer.MAX_VALUE 相当于 ans &gt; Integer.MAX_VALUE - cur / 10</code></li></ul><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
  <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">myAtoi</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// n 代表整个字符的长度</span>
    <span class="token keyword">int</span> n <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> chars <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token comment">// 当前取到的字符的下标</span>
    <span class="token keyword">int</span> idx <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>       

    <span class="token comment">// 去除前导空格，如果去完前导空格后无字符了，返回 0</span>
    <span class="token comment">// 不断地将下标移动到后面，直到遇到不是空格为止</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>idx <span class="token operator">&lt;</span> n <span class="token operator">&amp;&amp;</span> chars<span class="token punctuation">[</span>idx<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">&#39; &#39;</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
      idx<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>idx <span class="token operator">==</span> n<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>

    <span class="token comment">// 检查第一个字符：可以为正负号/数字</span>
    <span class="token comment">// isNeg代表该数是负数</span>
    <span class="token keyword">boolean</span> isNeg <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>chars<span class="token punctuation">[</span>idx<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">&#39;-&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      idx<span class="token operator">++</span><span class="token punctuation">;</span>
      isNeg <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>chars<span class="token punctuation">[</span>idx<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">&#39;+&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      idx<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token class-name">Character</span><span class="token punctuation">.</span><span class="token function">isDigit</span><span class="token punctuation">(</span>chars<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> 

    <span class="token keyword">int</span> ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>idx <span class="token operator">&lt;</span> n <span class="token operator">&amp;&amp;</span> <span class="token class-name">Character</span><span class="token punctuation">.</span><span class="token function">isDigit</span><span class="token punctuation">(</span>chars<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// 将当前的字符转换为数字</span>
      <span class="token keyword">int</span> cur <span class="token operator">=</span> chars<span class="token punctuation">[</span>idx<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token char">&#39;0&#39;</span><span class="token punctuation">;</span>
      <span class="token comment">// 防止 ans = ans * 10 + cur 溢出</span>
      <span class="token comment">// 等价变形为 ans &gt; (Integer.MAX_VALUE - cur) / 10 进行预判断</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>ans <span class="token operator">&gt;</span> <span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token constant">MAX_VALUE</span> <span class="token operator">-</span> cur<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 如果是负数则返回最小值，否则返回最大值</span>
        <span class="token keyword">return</span> isNeg <span class="token operator">?</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token constant">MIN_VALUE</span> <span class="token operator">:</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token constant">MAX_VALUE</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      ans <span class="token operator">=</span> ans <span class="token operator">*</span> <span class="token number">10</span> <span class="token operator">+</span> cur<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 返回最终结果数字</span>
    <span class="token keyword">return</span> isNeg <span class="token operator">?</span> <span class="token operator">-</span>ans <span class="token operator">:</span> ans<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="四、z字形变换" tabindex="-1"><a class="header-anchor" href="#四、z字形变换"><span>四、Z字形变换</span></a></h2><p>原题链接：https://mp.weixin.qq.com/s?__biz=MzU4NDE3MTEyMA==&amp;mid=2247484130&amp;idx=4&amp;sn=9dee24011b1ff7814aac348d94c00460&amp;chksm=fd9ca9fdcaeb20eb81af16d22fdfb514e9e7bd75cd5af07da157a51275e97223c265240ae6b6&amp;cur_album_id=1715134171561410565&amp;scene=189#wechat_redirect</p><p>将一个给定字符串 <code>s</code> 根据给定的行数 <code>numRows</code> ，以 <strong>先从上往下</strong>、<strong>再从左到右</strong> 进行 <code>Z</code> 字形排列。</p><p>比如输入字符串为 <code>PAYPALISHIRING</code> 行数为 3 时，排列如下。然后 <strong>先从左到右</strong>、<strong>再从上往下</strong>，组成一个新的字符串，<code>PAHNAPLSIIGYIR</code> 。</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>P     A     H     N
A  P  L  S  I  I  G
Y     I     R  
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>请你实现这个将字符串进行指定行数变换的函数：<code>String convert(string s, int numRows)</code> ；</p><ul><li>输入：s = <code>PAYPALISHIRING</code>, numRows = 4</li><li>输出：<code>PINALSIGYAHRPI</code></li><li>解释：</li></ul><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>P       I       N
A    L  S    I  G
Y  A    H  R
P       I 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_1-略解-3" tabindex="-1"><a class="header-anchor" href="#_1-略解-3"><span>（1）略解</span></a></h3><p>第一种解法就是直接计算每一个字符的偏移量，很直接，但比较麻烦。</p><ol><li>每个字符到达下一个字符，会有两种方向，从上到下，或者从下到上。例如第 2 行，从 A 到 L，从下到上，经过 YPA 三个字符；从 L 到 S ，从上到下，经过 I 一个字符。</li><li>需要计算不同行的两个方向所经过的字符数。除了第 1 行和最后 1 行，因为这两行的偏移量不会变。</li></ol><p>每下面一行，两个相邻的字符的上面都会同时多出一个字符。即原来的从上到下偏移量 + 2，从下到上的偏移量，也是如此。所以 <code>当前偏移量 = 当前行数 * 2 - 1</code></p><table><thead><tr><th>行数</th><th>从上到下的字符数</th><th>从下到上的字符数</th></tr></thead><tbody><tr><td>2</td><td>1</td><td>3</td></tr><tr><td>3</td><td>3</td><td>1</td></tr></tbody></table><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>P       I       N
A    L  S    I  G
Y  A    H  R
P       I 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li>然后因为当前字符的下一个字符的方向都不一致，所以需要定义一个标记来进行反转方向。</li></ol><hr><p>下面为具体代码：</p><ol><li>第 11 ~ 18 行：对象第 1 行和最后 1 行，偏移量是固定的，都是 <code>(总行数 - 1) * 2 - 1</code></li><li>第 25 ~ 33 行：算出两个方向的偏移量</li><li>第 35 ~ 41 行：轮流加上两个方向的偏移量就可以取到正确的字符</li></ol><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">convert</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">,</span> <span class="token keyword">int</span> r<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// n代表字符串的长度</span>
  <span class="token keyword">int</span> n <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// 如果字符串只有1个字符或者只有排列1行，则直接返回原字符串</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">||</span> r <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> s<span class="token punctuation">;</span>

  <span class="token class-name">StringBuilder</span> sb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> r<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 对于第1行和最后1行，偏移量是固定的</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> i <span class="token operator">==</span> r <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">int</span> j <span class="token operator">=</span> i<span class="token punctuation">;</span>
      <span class="token keyword">int</span> rowOffset <span class="token operator">=</span> <span class="token punctuation">(</span>r <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
      <span class="token keyword">while</span> <span class="token punctuation">(</span>j <span class="token operator">&lt;</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        j <span class="token operator">+=</span> rowOffset <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      <span class="token comment">// 对于其他行，需要获取到当前字符到下一个字符的偏移量</span>
      <span class="token comment">// 到下一个字符有2个方向，一个是从当前字符向上然后向下</span>
      <span class="token comment">// 另一个是从当前字符向下然后向上</span>
      <span class="token keyword">int</span> j <span class="token operator">=</span> i<span class="token punctuation">;</span>

      <span class="token comment">// 获取当前行是正数第几行</span>
      <span class="token keyword">int</span> topRow <span class="token operator">=</span> i<span class="token punctuation">;</span>
      <span class="token comment">// 算出从当前字符向上到向下需要跨过多少字符</span>
      <span class="token keyword">int</span> topOffset <span class="token operator">=</span> topRow <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>

      <span class="token comment">// 获取当前行是倒数第几行</span>
      <span class="token keyword">int</span> bottomRow <span class="token operator">=</span> r <span class="token operator">-</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
      <span class="token comment">// 算出从当前字符向下到向上需要跨过多少字符</span>
      <span class="token keyword">int</span> bottomOffset <span class="token operator">=</span> bottomRow <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>

      <span class="token comment">// 因为方向每次都需要反转，所以需要设置标记</span>
      <span class="token keyword">boolean</span> flag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
      <span class="token keyword">while</span> <span class="token punctuation">(</span>j <span class="token operator">&lt;</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        j <span class="token operator">+=</span> flag <span class="token operator">?</span> bottomOffset <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">:</span> topOffset <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
        flag <span class="token operator">=</span> <span class="token operator">!</span>flag<span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> sb<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-略解2" tabindex="-1"><a class="header-anchor" href="#_2-略解2"><span>（2）略解2</span></a></h3><p>我们可以找规律直接算出下一个字符的下标。</p><ul><li><p>对于第 1 行：P——0；I——6；N——12。首项为 0，公差为 6 —— 2 * ( r - 1 )</p></li><li><p>对于最后 1 行：P——3；I——9。首项为 r-1，公差为 6 —— 2 * ( r - 1 )</p></li></ul><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>P       I       N
A    L  S    I  G
Y  A    H  R
P       I 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后找中间行的规律：</p><ul><li>对于第 2 行：A——1；L——5；S——7；I——11；G——13</li><li>对于第 3 行：Y——2；A——4；H——8；R——10</li></ul><p>根据第 1 点的题解可以知道下一个字符有两个方向，在数学方面就是 <strong>等差数列交替排列</strong>。</p><p>可以看到第 2 行： 1(A) + 6 = 7(S) ；7(S) + 6 = 13(G)。5(L) + 6 = 11(I)。</p><p>第 3 行：2(Y) + 6 = 8(H) 。4(A) + 6 = 10(R)</p><p>两个等差数列的公差都是 6，即 2 * ( r - 1 )，然后就要计算出两个等差数列的首项。</p><ul><li>第 1 个等差数列很明显首项是 i</li><li>第 2 个等差数列的首先需要计算一下：第 1 行的第 2 个字符（I）的下标是 2r - 2 ，而第 2 个等差数列的首项字符下标是在该基础上退后 i 个字符 ，例如第 2 行，回退 1 个字符（L）。所以得出第 2 个等差数列的首项是 <code>2 * r - i - 2</code></li></ul><p>得出下面代码：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">convert</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">,</span> <span class="token keyword">int</span> r<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// n为s字符串的长度</span>
  <span class="token keyword">int</span> n <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">||</span> r <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> s<span class="token punctuation">;</span>

  <span class="token class-name">StringBuilder</span> sb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  
  <span class="token comment">// 对每一行进行遍历</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> r<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 第1行和最后1行的情况</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> i <span class="token operator">==</span> r <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">int</span> pos <span class="token operator">=</span> i<span class="token punctuation">;</span>
      <span class="token comment">// 计算出偏移量</span>
      <span class="token keyword">int</span> offset <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">*</span> <span class="token punctuation">(</span>r <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">while</span> <span class="token punctuation">(</span>pos <span class="token operator">&lt;</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>pos<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        pos <span class="token operator">+=</span> offset<span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      <span class="token comment">// 得出两个等差数列的首项</span>
      <span class="token keyword">int</span> pos1 <span class="token operator">=</span> i<span class="token punctuation">,</span> pos2 <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">*</span> r <span class="token operator">-</span> i <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">;</span>
      <span class="token comment">// 得出两个等差数列的公差</span>
      <span class="token keyword">int</span> offset <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">*</span> <span class="token punctuation">(</span>r <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      
      <span class="token comment">// 当两个下标都同时超出字符串长度，证明已经到当前行的末尾</span>
      <span class="token keyword">while</span> <span class="token punctuation">(</span>pos1 <span class="token operator">&lt;</span> n <span class="token operator">||</span> pos2 <span class="token operator">&lt;</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>pos1 <span class="token operator">&lt;</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>pos1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          pos1 <span class="token operator">+=</span> offset<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>pos2 <span class="token operator">&lt;</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>pos2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          pos2 <span class="token operator">+=</span> offset<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> sb<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="五、找出两个数组合并后的中位数" tabindex="-1"><a class="header-anchor" href="#五、找出两个数组合并后的中位数"><span>五、找出两个数组合并后的中位数</span></a></h2><p>原题链接：https://mp.weixin.qq.com/s?__biz=MzU4NDE3MTEyMA==&amp;mid=2247484130&amp;idx=5&amp;sn=de027e77fd0cc185bd5d753bab38f5d0&amp;chksm=fd9ca9fdcaeb20eb2d70190b3240d69ebc61c0d463c55ceb83eff76a4f624adcac00740faca7&amp;cur_album_id=1715134171561410565&amp;scene=189#wechat_redirect</p><blockquote><p>给定两个大小为 m 和 n 的正序（从小到大）数组 nums1 和 nums2。</p><p>请你找出并返回这两个正序数组的中位数。</p><p>示例 1：</p><ul><li>输入：nums1 = [1,3] nums2 = [2]</li><li>输出：2.00000</li><li>解释：合并数组 = [1,2,3] ，中位数 2</li></ul><p>示例 2：</p><ul><li>输入：nums1 = [1,2], nums2 = [3,4]</li><li>输出：2.50000</li><li>解释：合并数组 = [1,2,3,4] ，中位数 (2 + 3) / 2 = 2.5</li></ul><p>提示：</p><ul><li>nums1.length == m</li><li>nums2.length == n</li><li>0 &lt;= m &lt;= 1000</li><li>0 &lt;= n &lt;= 1000</li><li>1 &lt;= m + n &lt;= 2000</li><li>10<sup>6</sup> &lt;= nums1[i], nums2[i] &lt;= 10<sup>6</sup></li></ul></blockquote><h3 id="_1-略解1" tabindex="-1"><a class="header-anchor" href="#_1-略解1"><span>（1）略解1</span></a></h3><p>最简单的就使用暴力解决，合并数组后，使用 Java 自带的排序方法进行排序，然后直接取中位数即可。</p><p>这里代码为了不判断总数组的长度为奇数还是偶数，<strong>都取中间两个数然后求平均</strong>。数组长度为奇数的话，两个数都是同一个数，所以没有影响。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
  <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">findMedianSortedArrays</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums1<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums2<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token comment">// n为第一个数组的长度；m为第二个数组的长度</span>
    <span class="token keyword">int</span> n <span class="token operator">=</span> nums1<span class="token punctuation">.</span>length<span class="token punctuation">,</span> m <span class="token operator">=</span> nums2<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
    
    <span class="token comment">// 新建一个两个数组总长度的数组</span>
    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>n <span class="token operator">+</span> m<span class="token punctuation">]</span><span class="token punctuation">;</span>
    
    <span class="token keyword">int</span> idx <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token comment">//依次放入数组中</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">:</span> nums1<span class="token punctuation">)</span> arr<span class="token punctuation">[</span>idx<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">:</span> nums2<span class="token punctuation">)</span> arr<span class="token punctuation">[</span>idx<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>
    
    <span class="token comment">// 然后对总数组进行排序</span>
    <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token comment">// 对于长度为奇数或者偶数，都进行取两个数求平均操作</span>
    <span class="token keyword">int</span> l <span class="token operator">=</span> arr<span class="token punctuation">[</span><span class="token punctuation">(</span>n <span class="token operator">+</span> m<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> r <span class="token operator">=</span> arr<span class="token punctuation">[</span><span class="token punctuation">(</span>n <span class="token operator">+</span> m <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>l <span class="token operator">+</span> r<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2.0</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>时间复杂度：合并两个数组的复杂度是 O(n+m) ，对合并数组进行排序的复杂度是 O( (n+m)log(n+m) ) 。整体复杂度是 O( (n+m)log(n+m) )</li></ul><p>但如果时间复杂度需要下降到 O( log(n+m) )，则不能再使用这个方法。</p><h3 id="_2-略解2-1" tabindex="-1"><a class="header-anchor" href="#_2-略解2-1"><span>（2）略解2</span></a></h3><p>第 2 种方法使用的是递归，不断缩小数组的范围，最后找到中位数。下面是该方法的步骤：</p><ol><li>找到两个数组的中位数</li><li>比较两个数组的中位数，如果 A 数组的中位数大于 B 数组的中位数，则代表两个数组合并后的中位数，在 A 数组里或者 B 数组的中位数右边</li></ol><p>第 2 点：假设一种极端的情况，A 的中位数左边全部小于 B 数组的中位数，两个数组一合并后，B 数组的原来的中位数左边数字数量一定小于右边的数量，所以新的中位数就会右移。</p><ol start="3"><li>继续在剩下的数字里找中位数</li></ol><p>第 3 点：假设找到的总数组的中位数下标是 k，在剩余数组找中位数的时候，需要减取被剔除数字的数量，即 k - (x)。</p><hr><p>具体实现如下面代码：</p><p>需要明确几个变量：</p><ul><li><code>i</code> ：在递归中会改变，用于表示 nums1 数组的起始位置</li><li><code>j</code> ：在递归中会改变，用于表示 nums2 数组的起始位置</li><li><code>k</code> ：在递归中会改变，用于表示剩余数字里中位数在第几位置</li><li><code>si</code> ：在递归中会改变，代表当前 n1 数组的中位数下标</li><li><code>sj</code> ：在递归中会改变，代表当前 n2 数组的中位数下标</li><li>时间复杂度：k 从两个数组之和开始减少，每次递归 k 的规模都减少一半，复杂度为 O( log(m+n) )</li></ul><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">double</span> <span class="token function">findMedianSortedArrays</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums1<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums2<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 计算出两个数组的长度</span>
  <span class="token keyword">int</span> tot <span class="token operator">=</span> nums1<span class="token punctuation">.</span>length <span class="token operator">+</span> nums2<span class="token punctuation">.</span>length<span class="token punctuation">;</span>

  <span class="token comment">// 如果总长度是偶数</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>tot <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 找到第1个中位数</span>
    <span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token function">find</span><span class="token punctuation">(</span>nums1<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> nums2<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> tot <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 找到第2个中位数</span>
    <span class="token keyword">int</span> right <span class="token operator">=</span> <span class="token function">find</span><span class="token punctuation">(</span>nums1<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> nums2<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> tot <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>left <span class="token operator">+</span> right<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2.0</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token function">find</span><span class="token punctuation">(</span>nums1<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> nums2<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> tot <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// i代表第一个数组的起始下标；j代表第二个数组的起始下标；k代表中位数的在第几位</span>
<span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">find</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> n1<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> n2<span class="token punctuation">,</span> <span class="token keyword">int</span> j<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// n1.length - i为真实的n1长度；n2.length - j为真实的n2长度</span>
  <span class="token comment">// 如果n1的长度大于n2的长度，则两个数组进行调换</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>n1<span class="token punctuation">.</span>length <span class="token operator">-</span> i <span class="token operator">&gt;</span> n2<span class="token punctuation">.</span>length <span class="token operator">-</span> j<span class="token punctuation">)</span>
    <span class="token keyword">return</span> <span class="token function">find</span><span class="token punctuation">(</span>n2<span class="token punctuation">,</span> j<span class="token punctuation">,</span> n1<span class="token punctuation">,</span> i<span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&gt;=</span> n1<span class="token punctuation">.</span>length<span class="token punctuation">)</span>
    <span class="token keyword">return</span> n2<span class="token punctuation">[</span>j <span class="token operator">+</span> k <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>k <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>n1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> n2<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token comment">// si代表当前n1数组的中位数下标；sj代表当前n2数组的中位数下标</span>
    <span class="token keyword">int</span> si <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token punctuation">(</span>k <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> n1<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">,</span> sj <span class="token operator">=</span> j <span class="token operator">+</span> k <span class="token operator">-</span> <span class="token punctuation">(</span>k <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 如果n1中间的值大于n2中间的值，说明中位数在n1里面或者n2的右半部分</span>
    <span class="token comment">// 所以继续查找，n1的起始位置不变，一样是i，n2的起始位置变成中间下标</span>
    <span class="token comment">// k需要减取n2的左半部分</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>n1<span class="token punctuation">[</span>si <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&gt;</span> n2<span class="token punctuation">[</span>sj <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token function">find</span><span class="token punctuation">(</span>n1<span class="token punctuation">,</span> i<span class="token punctuation">,</span> n2<span class="token punctuation">,</span> sj<span class="token punctuation">,</span> k <span class="token operator">-</span> <span class="token punctuation">(</span>sj <span class="token operator">-</span> j<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      <span class="token comment">// 如果n1中间的值小于等于n2中间的值，同理</span>
      <span class="token keyword">return</span> <span class="token function">find</span><span class="token punctuation">(</span>n1<span class="token punctuation">,</span> si<span class="token punctuation">,</span> n2<span class="token punctuation">,</span> j<span class="token punctuation">,</span> k <span class="token operator">-</span> <span class="token punctuation">(</span>si <span class="token operator">-</span> i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-详解2" tabindex="-1"><a class="header-anchor" href="#_3-详解2"><span>（3）详解2</span></a></h3><p>假设现在 A 数组：<code>[ 1, 2, 7, 11, 12 ]</code> ；B 数组：<code>[ 3, 4, 6, 9, 10, 13 ]</code></p><ul><li>数组总长度为 5 + 6 = 11，所以执行 <code>find(nums1, 0, nums2, 0, 6);</code> ，i = 0，j = 0，k = 6</li><li>然后比较两个数组的中位数，si = 3，sj = 3，7（n1[si-1]）&gt; 6 （n2[sj-1]），所以中位数在 A 数组里和 B 数组的右边，现在 B 数组为 <code>[ 9, 10, 13 ]</code> ，k = 3 。继续执行 <code>find(n1, 0, n2, 3, 3);</code> ，i = 0，j = 3，k = 3</li><li>这时 A 数组长度大于 B 数组长度，所以进行调换。i = 3，A 数组 <code>[ 9, 10, 13 ]</code> ，j = 0， B 数组 <code>[ 1, 2, 7, 11, 12 ]</code> ，k = 3</li><li>然后继续比较两个数组的中位数，si = 4，sj = 2，，9（n1[si-1]）&gt; 2（n2[sj-1]） ，所以中位数在剩余的 A 数组里和 B 数组的右边，现在 B 数组为 <code>[ 7, 11, 12 ]</code> ，k = 1。继续执行 <code>find(n1, 3, n2, 2, 1);</code></li><li>k = 1 ，就直接执行 <code>Math.min(n1[i], n2[j]);</code> ，这句代码的意思就是在两个剩余数组中找第 1 小的数，A 数组中最小数为 9 ，B 数组中最小数为 7，所以中位数为 7 。</li></ul><p>图片版：</p><img src="https://raw.githubusercontent.com/hahg2000/picture/vue/找出两个数组的中位数.png" style="zoom:67%;"><h3 id="_4-总结" tabindex="-1"><a class="header-anchor" href="#_4-总结"><span>（4）总结</span></a></h3><p>第 2 个方法核心是不断地找 <strong>一定不是中位数的数</strong>，例如第 1 次比较，就排除了 B 数组里的一半，然后依次类推，直到排除数字的数量足够。</p><h2 id="六、找出不含重复字符的最长子串" tabindex="-1"><a class="header-anchor" href="#六、找出不含重复字符的最长子串"><span>六、找出不含重复字符的最长子串</span></a></h2><p>原题链接：https://mp.weixin.qq.com/s?__biz=MzU4NDE3MTEyMA==&amp;mid=2247484130&amp;idx=6&amp;sn=6a6fd8a208ccd7f0b7d706a3ff5900d7&amp;chksm=fd9ca9fdcaeb20eb43980e8c841294d8b366fdbc128dacf140a93740221691ba241fe4593501&amp;cur_album_id=1715134171561410565&amp;scene=189#wechat_redirect</p><blockquote><p>给定一个字符串，请你找出其中不含有重复字符的「最长子串」的长度。</p><p>示例 1:</p><ul><li>输入: s = &quot;abcabcbb&quot;</li><li>输出: 3</li><li>解释: 因为无重复字符的最长子串是 &quot;abc&quot;，所以其长度为 3</li></ul><p>示例 2:</p><ul><li>输入: s = &quot;bbbbb&quot;</li><li>输出: 1</li><li>解释: 因为无重复字符的最长子串是 &quot;b&quot;，所以其长度为 1</li></ul><p>提示：</p><ul><li>0 &lt;= s.length &lt;= 5 * 10<sup>4</sup></li><li><code>s</code> 由英文字母、数字、符号和空格组成</li></ul></blockquote><h3 id="_1-略解1-1" tabindex="-1"><a class="header-anchor" href="#_1-略解1-1"><span>（1）略解1</span></a></h3><p>题目要求的是子串，所以可以设置两个指针，分别指向子串的头和尾。</p><p>因为需要无重复字符，所以当尾指针往后移动时，需要查看当前子串是否有重复字符。如果有重复字符，就需要将头指针向后移动，直到无重复字符。</p><p>为什么要移动头指针，因为移动头指针一定会消除子串的重复字符。这种方法称为滑动窗口。</p><p>这时需要用到 Java 里的哈希表来得知当前子串是否有重复字符。我们需要使用到哈希表的三个方法：</p><ul><li><code>map.getOrDefault(key, 0)</code> ：参数 1 是 key 值，参数 2 是没有找到 key 时的默认 value 值。获取指定 key 的 value 值</li><li><code>map.get(key)</code> ：与上面的作用一致，只是不会返回默认值</li><li><code>map.put(key, value)</code> ：将 key 和 value 放入哈希表中。</li></ul><p>具体代码如下</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">lengthOfLongestSubstring</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 创建一个key为字符类型，value为整性类型的哈希表</span>
  <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Character</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  
  <span class="token keyword">int</span> ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token comment">// i为头指针，j为尾指针</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 取出j所指向的字符</span>
    <span class="token keyword">char</span> r <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token comment">// 将字符存入哈希表中 </span>
    map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span> map<span class="token punctuation">.</span><span class="token function">getOrDefault</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token comment">// 判断当前字符是否重复</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// 取出i所指向的字符</span>
      <span class="token keyword">char</span> l <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token comment">// 将重复的字符去掉，即该字符的数量减1</span>
      map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token comment">// 将i头指针向后移动</span>
      i<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    <span class="token comment">// 将当前没有重复字符子串的长度记录</span>
    ans <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span> j <span class="token operator">-</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> ans<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-详解1" tabindex="-1"><a class="header-anchor" href="#_2-详解1"><span>（2）详解1</span></a></h3><p>假设现在有一个字符：<code>ewqrtewdrtyrit</code> （瞎打的），请找出这个字符不含重复字符的最长子串的长度。</p><ul><li>第 1 个记录的子串是：<code>ewqrt</code> ，其长度为 5</li><li>尾指针向右移动一位，然后遇到了重复字符 e ，所以头指针向右移动一位，第 2 个记录的子串为：<code>wqrte</code> ，其长度为 5</li><li>尾指针向右移动一位，然后遇到了重复字符 w，所以头指针向右移动一位，第 3 个记录的子串为：<code>qrtew</code> ，其长度为 5</li><li>尾指针向右移动一位，没有重复字符，第 4 个记录的子串 <code>qrtewd</code> ，其长度为 6</li><li>尾指针向右移动一位，然后遇到了重复字符 r，所以头指针向右移动两位，第 5 个记录的子串 <code>tewdr</code> ，其长度为 5</li><li>尾指针向右移动一位，然后遇到了重复字符 t，所以头指针向右移动一位，第 6 个记录的子串 <code>ewdrt</code>，其长度为 5</li><li>尾指针向右移动一位，没有重复字符，第 7 个记录的子串 <code>ewdrty</code> ，其长度为 6</li><li>尾指针向右移动一位，然后遇到了重复字符 r，所以头指针向右移动四位，第 8 个记录的子串为 <code>tyr</code>，其长度为 3</li><li>尾指针向右移动一位，没有重复字符，第 9 个记录的子串 <code>tyri</code> ，其长度为 4</li><li>尾指针向右移动一位，然后遇到了重复字符 t，所以头指针向右移动一位，第 10 个记录的子串 <code>yrit</code> ，其长度为 4</li><li>所以不含重复字符的最长子串是 <code>qrtewd</code> 和 <code>ewdrty</code> ，长度为 6</li></ul><h2 id="七、两数相加" tabindex="-1"><a class="header-anchor" href="#七、两数相加"><span>七、两数相加</span></a></h2><p>原题链接：https://mp.weixin.qq.com/s?__biz=MzU4NDE3MTEyMA==&amp;mid=2247484130&amp;idx=7&amp;sn=af1309aebca76e2a70ed93b1a8f57e20&amp;chksm=fd9ca9fdcaeb20eb9b5ffcdb3af2e7f279bf876225117804538f3a896b92e9e9fa49ac708415&amp;cur_album_id=1715134171561410565&amp;scene=189#wechat_redirect</p><blockquote><p>给你两个非空的链表，表示两个非负的整数。它们每位数字都是按照逆序的方式存储的，并且每个节点只能存储一位数字。</p><p>请你将两个数相加，并以相同形式返回一个表示和的链表。</p><p>示例 1：</p><ul><li><p>输入：l1 = [2,4,3]， l2 = [5,6,4]</p></li><li><p>输出：[7,0,8]</p></li><li><p>解释：342 + 465 = 807</p></li></ul><p>示例 2：</p><p>输入：l1 = [0]， l2 = [0]</p><p>输出：[0]</p><p>提示：</p><ul><li>每个链表中的节点数在范围 [1, 100] 内</li><li>0 &lt;= Node.val &lt;= 9</li><li>题目数据保证列表表示的数字不含前导零</li></ul></blockquote><h3 id="_1-略解-4" tabindex="-1"><a class="header-anchor" href="#_1-略解-4"><span>（1）略解</span></a></h3><p>这道题是模拟题，模拟人工竖式做加法的过程，这里需要用到链表，因为 Java 里没有自带链表类型，所以需要自己定义链表类。</p><p>链表类需要三个东西：</p><ul><li>构造方法，初始化当前节点的值</li><li><code>val</code> 属性，其类型为整型，存放需要相加的数字</li><li><code>next</code> 属性，其类型为 <code>ListNode</code> ，用于指向下一个链表</li></ul><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ListNode</span> <span class="token punctuation">{</span>
  <span class="token keyword">int</span> val<span class="token punctuation">;</span>
  <span class="token class-name">ListNode</span> next<span class="token punctuation">;</span>
  <span class="token class-name">ListNode</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span> val <span class="token operator">=</span> x<span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后具体代码，就是让两数相加，然后用一个变量代表进位的数，用一个变量不断移动来扩展链表。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">ListNode</span> <span class="token function">addTwoNumbers</span><span class="token punctuation">(</span><span class="token class-name">ListNode</span> l1<span class="token punctuation">,</span> <span class="token class-name">ListNode</span> l2<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 答案所存放的链表</span>
  <span class="token class-name">ListNode</span> dummy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// 用来扩展链表的尾指针</span>
  <span class="token class-name">ListNode</span> tmp <span class="token operator">=</span> dummy<span class="token punctuation">;</span>
  <span class="token comment">// 存放进位的数</span>
  <span class="token keyword">int</span> t <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  
  <span class="token keyword">while</span> <span class="token punctuation">(</span>l1 <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">||</span> l2 <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 如果l1或者l2为空，代表当前位置没有数字，则初始化为零</span>
    <span class="token keyword">int</span> a <span class="token operator">=</span> l1 <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">?</span> l1<span class="token punctuation">.</span>val <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> b <span class="token operator">=</span> l2 <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">?</span> l2<span class="token punctuation">.</span>val <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span>
    
    <span class="token comment">// 将加起来的数临时存放到变量t里</span>
    t <span class="token operator">=</span> a <span class="token operator">+</span> b <span class="token operator">+</span> t<span class="token punctuation">;</span>
    <span class="token comment">// 尾指针的下一个数是变量t的个位数</span>
    tmp<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span>t <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 将变量t除以10，变回</span>
    t <span class="token operator">/=</span> <span class="token number">10</span><span class="token punctuation">;</span>
    <span class="token comment">// 尾指针移动下一个节点</span>
    tmp <span class="token operator">=</span> tmp<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
    
    <span class="token comment">// 如果当前节点不为空，则代表下一位一定有数字</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>l1 <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> l1 <span class="token operator">=</span> l1<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>l2 <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> l2 <span class="token operator">=</span> l2<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  
  <span class="token comment">// 如果退出循环后依然有进位，则再新建一个节点</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>t <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> tmp<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>
  
  <span class="token comment">// 最后返回去掉虚拟头节点的链表</span>
  <span class="token keyword">return</span> dummy<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-虚拟头节点" tabindex="-1"><a class="header-anchor" href="#_2-虚拟头节点"><span>（2）虚拟头节点</span></a></h3><p>做有关链表的题目，有个常用技巧：添加一个虚拟头结点（哨兵），帮助简化边界情况的判断，例如第 1 次进入方法时。</p><p>第 1 次进入方法，如果没有设置虚拟头节点，则要额外单独计算第 1 位的值。因为两个数组至少有 1 个节点，所以计算第 1 位的值不需要判空。</p><p>可见下面代码，额外计算第 1 位的值，会产生很多相同代码，但因为需要第 5 行的初始化，所以不能省略。如果添加一个虚拟头节点，第 1 位就是 0，不用计算就能得出，然后真实的第 1 位就可以在循环中计算。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">ListNode</span> <span class="token function">addTwoNumbers</span><span class="token punctuation">(</span><span class="token class-name">ListNode</span> l1<span class="token punctuation">,</span> <span class="token class-name">ListNode</span> l2<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 额外的单独计算第 1 位的值</span>
  <span class="token keyword">int</span> t <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  t <span class="token operator">=</span> l1<span class="token punctuation">.</span>val <span class="token operator">+</span> <span class="token number">12.</span>val<span class="token punctuation">;</span>
  <span class="token class-name">ListNode</span> dummy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token class-name">ListNode</span> tmp <span class="token operator">=</span> dummy<span class="token punctuation">;</span>
  t <span class="token operator">/=</span> <span class="token number">10</span><span class="token punctuation">;</span>
  tmp <span class="token operator">=</span> tmp<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
  l1 <span class="token operator">=</span> l1<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
  l2 <span class="token operator">=</span> l2<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
  
  <span class="token keyword">while</span> <span class="token punctuation">(</span>l1 <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">||</span> l2 <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> a <span class="token operator">=</span> l1 <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">?</span> l1<span class="token punctuation">.</span>val <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> b <span class="token operator">=</span> l2 <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">?</span> l2<span class="token punctuation">.</span>val <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span>
    t <span class="token operator">=</span> a <span class="token operator">+</span> b <span class="token operator">+</span> t<span class="token punctuation">;</span>
    tmp<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span>t <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    t <span class="token operator">/=</span> <span class="token number">10</span><span class="token punctuation">;</span>
    tmp <span class="token operator">=</span> tmp<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>l1 <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> l1 <span class="token operator">=</span> l1<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>l2 <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> l2 <span class="token operator">=</span> l2<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>t <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> tmp<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>
  
  <span class="token comment">// 更改返回的值</span>
  <span class="token keyword">return</span> dummy<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>时间复杂度：m 和 n 分别代表两条链表的长度，则遍历到的最远位置为 max(m,n)， 复杂度为 O( max(m,n) )</li><li>空间复杂度：创建了 max(m,n) + 1 个节点（含哨兵），复杂度为 O( max(m,n) )</li></ul><p><strong>该文档完成时间：</strong> 2022年6月24日</p>`,162),o=[e];function c(l,i){return s(),a("div",null,o)}const r=n(p,[["render",c],["__file","算法一-6月24.html.vue"]]),k=JSON.parse(`{"path":"/%E5%AD%A6%E4%B9%A0/%E7%AE%97%E6%B3%95/%E7%AE%97%E6%B3%95%E4%B8%80-6%E6%9C%8824.html","title":"算法一-6月24","lang":"zh-CN","frontmatter":{"description":"算法一-6月24 一、正则表达式匹配 （1）略解 原链接：https://mp.weixin.qq.com/s/Khts_1iw--oWPxe0f4AoMg 题目：给你一个字符串 s 和一个字符规律 p，请你来实现一个支持 '.' 和 '*' 的正则表达式匹配。 . 匹配任意单个字符 * 匹配零个或多个前面的那一个元素 简单来说：就是实现 . 和 * ...","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/%E5%AD%A6%E4%B9%A0/%E7%AE%97%E6%B3%95/%E7%AE%97%E6%B3%95%E4%B8%80-6%E6%9C%8824.html"}],["meta",{"property":"og:site_name","content":"博客演示"}],["meta",{"property":"og:title","content":"算法一-6月24"}],["meta",{"property":"og:description","content":"算法一-6月24 一、正则表达式匹配 （1）略解 原链接：https://mp.weixin.qq.com/s/Khts_1iw--oWPxe0f4AoMg 题目：给你一个字符串 s 和一个字符规律 p，请你来实现一个支持 '.' 和 '*' 的正则表达式匹配。 . 匹配任意单个字符 * 匹配零个或多个前面的那一个元素 简单来说：就是实现 . 和 * ..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-02-24T04:33:47.000Z"}],["meta",{"property":"article:author","content":"hahg"}],["meta",{"property":"article:modified_time","content":"2024-02-24T04:33:47.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"算法一-6月24\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-02-24T04:33:47.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"hahg\\"}]}"]]},"headers":[{"level":2,"title":"一、正则表达式匹配","slug":"一、正则表达式匹配","link":"#一、正则表达式匹配","children":[{"level":3,"title":"（1）略解","slug":"_1-略解","link":"#_1-略解","children":[]},{"level":3,"title":"（2）详解","slug":"_2-详解","link":"#_2-详解","children":[]},{"level":3,"title":"（3）总结","slug":"_3-总结","link":"#_3-总结","children":[]}]},{"level":2,"title":"二、回文数","slug":"二、回文数","link":"#二、回文数","children":[{"level":3,"title":"（1）略解","slug":"_1-略解-1","link":"#_1-略解-1","children":[]}]},{"level":2,"title":"三、工程模拟题","slug":"三、工程模拟题","link":"#三、工程模拟题","children":[{"level":3,"title":"（1）略解","slug":"_1-略解-2","link":"#_1-略解-2","children":[]}]},{"level":2,"title":"四、Z字形变换","slug":"四、z字形变换","link":"#四、z字形变换","children":[{"level":3,"title":"（1）略解","slug":"_1-略解-3","link":"#_1-略解-3","children":[]},{"level":3,"title":"（2）略解2","slug":"_2-略解2","link":"#_2-略解2","children":[]}]},{"level":2,"title":"五、找出两个数组合并后的中位数","slug":"五、找出两个数组合并后的中位数","link":"#五、找出两个数组合并后的中位数","children":[{"level":3,"title":"（1）略解1","slug":"_1-略解1","link":"#_1-略解1","children":[]},{"level":3,"title":"（2）略解2","slug":"_2-略解2-1","link":"#_2-略解2-1","children":[]},{"level":3,"title":"（3）详解2","slug":"_3-详解2","link":"#_3-详解2","children":[]},{"level":3,"title":"（4）总结","slug":"_4-总结","link":"#_4-总结","children":[]}]},{"level":2,"title":"六、找出不含重复字符的最长子串","slug":"六、找出不含重复字符的最长子串","link":"#六、找出不含重复字符的最长子串","children":[{"level":3,"title":"（1）略解1","slug":"_1-略解1-1","link":"#_1-略解1-1","children":[]},{"level":3,"title":"（2）详解1","slug":"_2-详解1","link":"#_2-详解1","children":[]}]},{"level":2,"title":"七、两数相加","slug":"七、两数相加","link":"#七、两数相加","children":[{"level":3,"title":"（1）略解","slug":"_1-略解-4","link":"#_1-略解-4","children":[]},{"level":3,"title":"（2）虚拟头节点","slug":"_2-虚拟头节点","link":"#_2-虚拟头节点","children":[]}]}],"git":{"createdTime":1708749227000,"updatedTime":1708749227000,"contributors":[{"name":"hahg2000","email":"61403802+hahg2000@users.noreply.github.com","commits":1}]},"readingTime":{"minutes":26.97,"words":8092},"filePathRelative":"学习/算法/算法一-6月24.md","localizedDate":"2024年2月24日","excerpt":"\\n<h2>一、正则表达式匹配</h2>\\n<h3>（1）略解</h3>\\n<p>原链接：https://mp.weixin.qq.com/s/Khts_1iw--oWPxe0f4AoMg</p>\\n<blockquote>\\n<p>题目：给你一个字符串 s 和一个字符规律 p，请你来实现一个支持 <code>'.'</code> 和 <code>'*'</code> 的正则表达式匹配。</p>\\n<ul>\\n<li><code>.</code> 匹配任意单个字符</li>\\n<li><code>*</code> 匹配零个或多个前面的那一个元素</li>\\n</ul>\\n</blockquote>\\n<p>简单来说：就是实现 <code>.</code> 和 <code>*</code> 的功能。普通的两个字符串比较，涉及到 KMP 算法。</p>","autoDesc":true}`);export{r as comp,k as data};
