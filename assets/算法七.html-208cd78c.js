const l=JSON.parse('{"key":"v-9954ef04","path":"/%E5%AD%A6%E4%B9%A0/%E7%AE%97%E6%B3%95/%E7%AE%97%E6%B3%95%E4%B8%83.html","title":"算法七","lang":"zh-CN","frontmatter":{"description":"算法七 四十九、石子游戏 力扣链接：https://leetcode.cn/problems/stone-game-vi/ Alice 和 Bob 轮流玩一个游戏，Alice 先手。 一堆石子里总共有 n 个石子，轮到某个玩家时，他可以 移出 一个石子并得到这个石子的价值。Alice 和 Bob 对石子价值有 不一样的的评判标准 。双方都知道对方的评判标准。 给你两个长度为 n 的整数数组 aliceValues 和 bobValues 。aliceValues[i] 和 bobValues[i] 分别表示 Alice 和 Bob 认为第 i 个石子的价值。 所有石子都被取完后，得分较高的人为胜者。如果两个玩家得分相同，那么为平局。两位玩家都会采用 最优策略 进行游戏。 请你推断游戏的结果，用如下的方式表示： 如果 Alice 赢，返回 1 。如果 Bob 赢，返回 -1 。如果游戏平局，返回 0 。 示例 1： 输入：aliceValues = [1,3], bobValues = [2,1] 输出：1 解释： 如果 Alice 拿石子 1 （下标从 0开始），那么 Alice 可以得到 3 分。 Bob 只能选择石子 0 ，得到 2 分。 Alice 获胜。 示例 2： 输入：aliceValues = [1,2], bobValues = [3,1] 输出：0 解释： Alice 拿石子 0 ， Bob 拿石子 1 ，他们得分都为 1 分。 打平。 提示： n == aliceValues.length == bobValues.length 1 &lt;= n &lt;= 105 1 &lt;= aliceValues[i], bobValues[i] &lt;= 100","head":[["meta",{"property":"og:url","content":"https://hahg2000.github.io/%E5%AD%A6%E4%B9%A0/%E7%AE%97%E6%B3%95/%E7%AE%97%E6%B3%95%E4%B8%83.html"}],["meta",{"property":"og:title","content":"算法七"}],["meta",{"property":"og:description","content":"算法七 四十九、石子游戏 力扣链接：https://leetcode.cn/problems/stone-game-vi/ Alice 和 Bob 轮流玩一个游戏，Alice 先手。 一堆石子里总共有 n 个石子，轮到某个玩家时，他可以 移出 一个石子并得到这个石子的价值。Alice 和 Bob 对石子价值有 不一样的的评判标准 。双方都知道对方的评判标准。 给你两个长度为 n 的整数数组 aliceValues 和 bobValues 。aliceValues[i] 和 bobValues[i] 分别表示 Alice 和 Bob 认为第 i 个石子的价值。 所有石子都被取完后，得分较高的人为胜者。如果两个玩家得分相同，那么为平局。两位玩家都会采用 最优策略 进行游戏。 请你推断游戏的结果，用如下的方式表示： 如果 Alice 赢，返回 1 。如果 Bob 赢，返回 -1 。如果游戏平局，返回 0 。 示例 1： 输入：aliceValues = [1,3], bobValues = [2,1] 输出：1 解释： 如果 Alice 拿石子 1 （下标从 0开始），那么 Alice 可以得到 3 分。 Bob 只能选择石子 0 ，得到 2 分。 Alice 获胜。 示例 2： 输入：aliceValues = [1,2], bobValues = [3,1] 输出：0 解释： Alice 拿石子 0 ， Bob 拿石子 1 ，他们得分都为 1 分。 打平。 提示： n == aliceValues.length == bobValues.length 1 &lt;= n &lt;= 105 1 &lt;= aliceValues[i], bobValues[i] &lt;= 100"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-12-02T11:02:51.000Z"}],["meta",{"property":"article:modified_time","content":"2023-12-02T11:02:51.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"算法七\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-12-02T11:02:51.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"四十九、石子游戏","slug":"四十九、石子游戏","link":"#四十九、石子游戏","children":[{"level":3,"title":"（1）贪心算法","slug":"_1-贪心算法","link":"#_1-贪心算法","children":[]}]},{"level":2,"title":"五十、分割等和子集1","slug":"五十、分割等和子集1","link":"#五十、分割等和子集1","children":[{"level":3,"title":"（1）分析","slug":"_1-分析","link":"#_1-分析","children":[]},{"level":3,"title":"（2）转换为背包问题","slug":"_2-转换为背包问题","link":"#_2-转换为背包问题","children":[]},{"level":3,"title":"（3）优化空间","slug":"_3-优化空间","link":"#_3-优化空间","children":[]}]},{"level":2,"title":"五十一、数据流中的第 K 大元素","slug":"五十一、数据流中的第-k-大元素","link":"#五十一、数据流中的第-k-大元素","children":[{"level":3,"title":"（1）冒泡排序","slug":"_1-冒泡排序","link":"#_1-冒泡排序","children":[]},{"level":3,"title":"（2）移动数字","slug":"_2-移动数字","link":"#_2-移动数字","children":[]},{"level":3,"title":"（3）小根堆","slug":"_3-小根堆","link":"#_3-小根堆","children":[]}]},{"level":2,"title":"五十二、分割等和子集2","slug":"五十二、分割等和子集2","link":"#五十二、分割等和子集2","children":[{"level":3,"title":"（1）分析","slug":"_1-分析-1","link":"#_1-分析-1","children":[]},{"level":3,"title":"（2）实现","slug":"_2-实现","link":"#_2-实现","children":[]}]},{"level":2,"title":"五十三、被围绕的区域","slug":"五十三、被围绕的区域","link":"#五十三、被围绕的区域","children":[{"level":3,"title":"（1）普通思维","slug":"_1-普通思维","link":"#_1-普通思维","children":[]},{"level":3,"title":"（2）规律解法","slug":"_2-规律解法","link":"#_2-规律解法","children":[]}]},{"level":2,"title":"五十四、第K个语法符号","slug":"五十四、第k个语法符号","link":"#五十四、第k个语法符号","children":[{"level":3,"title":"（1）普通解法","slug":"_1-普通解法","link":"#_1-普通解法","children":[]},{"level":3,"title":"（2）规律解法","slug":"_2-规律解法-1","link":"#_2-规律解法-1","children":[]},{"level":3,"title":"（3）位置解法","slug":"_3-位置解法","link":"#_3-位置解法","children":[]}]},{"level":2,"title":"五十五、合并两个有序链表","slug":"五十五、合并两个有序链表","link":"#五十五、合并两个有序链表","children":[{"level":3,"title":"（1）核心解法","slug":"_1-核心解法","link":"#_1-核心解法","children":[]},{"level":3,"title":"（2）双指针解法（哨兵技巧）","slug":"_2-双指针解法-哨兵技巧","link":"#_2-双指针解法-哨兵技巧","children":[]}]},{"level":2,"title":"五十六、两两交换链表中的节点","slug":"五十六、两两交换链表中的节点","link":"#五十六、两两交换链表中的节点","children":[{"level":3,"title":"（1）递归解法","slug":"_1-递归解法","link":"#_1-递归解法","children":[]},{"level":3,"title":"（2）迭代解法（哨兵技巧）","slug":"_2-迭代解法-哨兵技巧","link":"#_2-迭代解法-哨兵技巧","children":[]}]},{"level":2,"title":"五十七、搜索旋转排序数组","slug":"五十七、搜索旋转排序数组","link":"#五十七、搜索旋转排序数组","children":[{"level":3,"title":"（1）二分解法","slug":"_1-二分解法","link":"#_1-二分解法","children":[]}]}],"git":{"createdTime":1678594861000,"updatedTime":1701514971000,"contributors":[{"name":"hahg2000","email":"61403802+hahg2000@users.noreply.github.com","commits":2}]},"readingTime":{"minutes":32.67,"words":9800},"filePathRelative":"学习/算法/算法七.md","localizedDate":"2023年3月12日","excerpt":"<h1> 算法七</h1>\\n<h2> 四十九、石子游戏</h2>\\n<p>力扣链接：<a href=\\"https://leetcode.cn/problems/stone-game-vi/\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">https://leetcode.cn/problems/stone-game-vi/</a></p>\\n<blockquote>\\n<p>Alice 和 Bob 轮流玩一个游戏，Alice 先手。</p>\\n<p>一堆石子里总共有 n 个石子，轮到某个玩家时，他可以 <strong>移出</strong> 一个石子并得到这个石子的价值。Alice 和 Bob 对石子价值有 <strong>不一样的的评判标准</strong> 。双方都知道对方的评判标准。</p>\\n<p>给你两个长度为 n 的整数数组 aliceValues 和 bobValues 。aliceValues[i] 和 bobValues[i] 分别表示 Alice 和 Bob 认为第 i 个石子的价值。</p>\\n<p>所有石子都被取完后，得分较高的人为胜者。如果两个玩家得分相同，那么为平局。两位玩家都会采用 <strong>最优策略</strong> 进行游戏。</p>\\n<p>请你推断游戏的结果，用如下的方式表示：</p>\\n<p>如果 Alice 赢，返回 1 。如果 Bob 赢，返回 -1 。如果游戏平局，返回 0 。</p>\\n<p>示例 1：</p>\\n<ul>\\n<li>输入：aliceValues = [1,3], bobValues = [2,1]</li>\\n<li>输出：1</li>\\n<li>解释：\\n<ul>\\n<li>如果 Alice 拿石子 1 （下标从 0开始），那么 Alice 可以得到 3 分。</li>\\n<li>Bob 只能选择石子 0 ，得到 2 分。</li>\\n<li>Alice 获胜。</li>\\n</ul>\\n</li>\\n</ul>\\n<p>示例 2：</p>\\n<ul>\\n<li>输入：aliceValues = [1,2], bobValues = [3,1]</li>\\n<li>输出：0</li>\\n<li>解释：\\n<ul>\\n<li>Alice 拿石子 0 ， Bob 拿石子 1 ，他们得分都为 1 分。</li>\\n<li>打平。</li>\\n</ul>\\n</li>\\n</ul>\\n<p>提示：</p>\\n<ul>\\n<li><code>n == aliceValues.length == bobValues.length</code></li>\\n<li><code>1 &lt;= n &lt;= 105</code></li>\\n<li><code>1 &lt;= aliceValues[i], bobValues[i] &lt;= 100</code></li>\\n</ul>\\n</blockquote>","autoDesc":true}');export{l as data};
