const e=JSON.parse('{"key":"v-89d2e648","path":"/%E5%AD%A6%E4%B9%A0/Haskell%E4%B8%AD%E6%96%87%E6%96%87%E6%A1%A3/2.html","title":"第 2 章：类型和函数","lang":"zh-CN","frontmatter":{"description":"第 2 章：类型和函数 类型是干什么用的？ Haskell 中的每个函数和表达式都带有各自的类型，通常称一个表达式拥有类型 T ，或者说这个表达式的类型为 T 。举个例子，布尔值 True 的类型为 Bool ，而字符串 \\"foo\\" 的类型为 String 。一个值的类型标识了它和该类型的其他值所共有的一簇属性（property），比如我们可以对数字进行相加，对列表进行拼接，诸如此类。","head":[["meta",{"property":"og:url","content":"https://hahg2000.github.io/%E5%AD%A6%E4%B9%A0/Haskell%E4%B8%AD%E6%96%87%E6%96%87%E6%A1%A3/2.html"}],["meta",{"property":"og:title","content":"第 2 章：类型和函数"}],["meta",{"property":"og:description","content":"第 2 章：类型和函数 类型是干什么用的？ Haskell 中的每个函数和表达式都带有各自的类型，通常称一个表达式拥有类型 T ，或者说这个表达式的类型为 T 。举个例子，布尔值 True 的类型为 Bool ，而字符串 \\"foo\\" 的类型为 String 。一个值的类型标识了它和该类型的其他值所共有的一簇属性（property），比如我们可以对数字进行相加，对列表进行拼接，诸如此类。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-07-23T03:26:40.000Z"}],["meta",{"property":"article:modified_time","content":"2023-07-23T03:26:40.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"第 2 章：类型和函数\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-07-23T03:26:40.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"类型是干什么用的？","slug":"why_care_about_types","link":"#why_care_about_types","children":[]},{"level":2,"title":"Haskell 的类型系统","slug":"haskell_s_type_system","link":"#haskell_s_type_system","children":[{"level":3,"title":"强类型","slug":"strong_types","link":"#strong_types","children":[]},{"level":3,"title":"静态类型","slug":"static_types","link":"#static_types","children":[]},{"level":3,"title":"类型推导","slug":"type_inference","link":"#type_inference","children":[]}]},{"level":2,"title":"正确理解类型系统","slug":"what_to_expect_from_type_system","link":"#what_to_expect_from_type_system","children":[]},{"level":2,"title":"一些常用的基本类型","slug":"some_common_basic_types","link":"#some_common_basic_types","children":[]},{"level":2,"title":"调用函数","slug":"function_application","link":"#function_application","children":[]},{"level":2,"title":"复合数据类型：列表和元组","slug":"useful_composite_data_types_lists_and_tuples","link":"#useful_composite_data_types_lists_and_tuples","children":[]},{"level":2,"title":"处理列表和元组的函数","slug":"functions_over_lists_and_tuples","link":"#functions_over_lists_and_tuples","children":[{"level":3,"title":"将表达式传给函数","slug":"passing_an_expression_to_function","link":"#passing_an_expression_to_function","children":[]}]},{"level":2,"title":"函数类型","slug":"function_types","link":"#function_types","children":[]},{"level":2,"title":"纯度","slug":"purity","link":"#purity","children":[]},{"level":2,"title":"Haskell 源码，以及简单函数的定义","slug":"haskell_source_files_and_writing_simple_function","link":"#haskell_source_files_and_writing_simple_function","children":[{"level":3,"title":"变量","slug":"just_what_is_a_variable_anyway","link":"#just_what_is_a_variable_anyway","children":[]},{"level":3,"title":"条件求值","slug":"conditional_evaluation","link":"#conditional_evaluation","children":[]}]},{"level":2,"title":"通过示例了解求值","slug":"understanding_evaluation_by_example","link":"#understanding_evaluation_by_example","children":[{"level":3,"title":"惰性求值","slug":"lazy_evaluation","link":"#lazy_evaluation","children":[]},{"level":3,"title":"一个更复杂的例子","slug":"a_more_involved_example","link":"#a_more_involved_example","children":[]},{"level":3,"title":"递归","slug":"recursion","link":"#recursion","children":[]},{"level":3,"title":"终止递归","slug":"ending_the_recursion","link":"#ending_the_recursion","children":[]},{"level":3,"title":"从递归中返回","slug":"returning_from_the_recursion","link":"#returning_from_the_recursion","children":[]},{"level":3,"title":"学到了什么？","slug":"学到了什么","link":"#学到了什么","children":[]}]},{"level":2,"title":"Haskell 里的多态","slug":"polymorphism_in_haskell","link":"#polymorphism_in_haskell","children":[{"level":3,"title":"对多态函数进行推理","slug":"reasoning_about_polymorphic_functions","link":"#reasoning_about_polymorphic_functions","children":[]},{"level":3,"title":"延伸阅读","slug":"further_reading","link":"#further_reading","children":[]}]},{"level":2,"title":"多参数函数的类型","slug":"the_type_of_a_function_of_more_than_one_argument","link":"#the_type_of_a_function_of_more_than_one_argument","children":[]},{"level":2,"title":"练习","slug":"练习","link":"#练习","children":[]},{"level":2,"title":"为什么要对纯度斤斤计较？","slug":"why_the_fuss_over_purity","link":"#why_the_fuss_over_purity","children":[]},{"level":2,"title":"回顾","slug":"conculsion","link":"#conculsion","children":[]}],"git":{"createdTime":1689997153000,"updatedTime":1690082800000,"contributors":[{"name":"hahg2000","email":"61403802+hahg2000@users.noreply.github.com","commits":2}]},"readingTime":{"minutes":38.9,"words":11670},"filePathRelative":"学习/Haskell中文文档/2.md","localizedDate":"2023年7月22日","excerpt":"<h1> 第 2 章：类型和函数</h1>\\n<h2> 类型是干什么用的？</h2>\\n<p>Haskell 中的每个函数和表达式都带有各自的类型，通常称一个表达式拥有类型\\n<code>T</code> ，或者说这个表达式的类型为 <code>T</code> 。举个例子，布尔值 <code>True</code> 的类型为\\n<code>Bool</code> ，而字符串 <code>\\"foo\\"</code> 的类型为 <code>String</code>\\n。一个值的类型标识了它和该类型的其他值所共有的一簇属性（property），比如我们可以对数字进行相加，对列表进行拼接，诸如此类。</p>\\n","autoDesc":true}');export{e as data};
