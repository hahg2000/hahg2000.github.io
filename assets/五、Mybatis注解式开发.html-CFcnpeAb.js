import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as a,c as s,f as e}from"./app-B9MLl3uI.js";const t={},p=e(`<h1 id="五、mybatis注解式开发" tabindex="-1"><a class="header-anchor" href="#五、mybatis注解式开发"><span>五、Mybatis注解式开发</span></a></h1><p>​ <span style="color:red;">mybatis 的注解，主要是用于替换映射文件。</span>而映射文件中无非存放着增、删、改、查的SQL映射标签。所以，mybatis注解，就是要替换映射文件中的 SQL 标签。</p><p>​ mybatis 官方文档中指出，若要真正想发挥 mybatis 功能，还是要用映射文件。即 mybatis 官方并不建议通过注解方式来使用 mybatis。</p><h2 id="_5-1注解的基础知识" tabindex="-1"><a class="header-anchor" href="#_5-1注解的基础知识"><span>5.1注解的基础知识</span></a></h2><p>以下注解知识的讲解，均使用使用@Overide、@Deprecated（过时）、@SuppressWarnings举例。</p><h3 id="_5-1-1注解的基础语法" tabindex="-1"><a class="header-anchor" href="#_5-1-1注解的基础语法"><span>5.1.1注解的基础语法</span></a></h3><p>A、注解后是没有分号的；</p><p>B、注解首字母是大写的，因为注解与类、接口是同一级别的。一个注解，后台对应着一个 @interface 类。属于同一级别的：类、接口、注解、<strong>枚举</strong>；</p><p>C、在同一语法单元上，同一注解只能使用一次；</p><p>D、在注解与语法单元之间可以隔若干空行、注释等非代码内容。</p><h3 id="_5-1-2注解的注解" tabindex="-1"><a class="header-anchor" href="#_5-1-2注解的注解"><span>5.1.2注解的注解</span></a></h3><p>​ 打开@Deprecated源码，看到其定义上还有三个注解：@Documented、@Retention、@Target。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Documented</span>
<span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span><span class="token class-name">RetentionPolicy</span><span class="token punctuation">.</span><span class="token constant">RUNTIME</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span>value<span class="token operator">=</span><span class="token punctuation">{</span><span class="token constant">CONSTRUCTOR</span><span class="token punctuation">,</span> <span class="token constant">FIELD</span><span class="token punctuation">,</span> <span class="token constant">LOCAL_VARIABLE</span><span class="token punctuation">,</span> <span class="token constant">METHOD</span><span class="token punctuation">,</span> <span class="token constant">PACKAGE</span><span class="token punctuation">,</span> <span class="token constant">MODULE</span><span class="token punctuation">,</span> <span class="token constant">PARAMETER</span><span class="token punctuation">,</span> <span class="token constant">TYPE</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">Deprecated</span> <span class="token punctuation">{</span>
    <span class="token doc-comment comment">/**
     * Returns the version in which the annotated element became deprecated.
     * The version string is in the same format and namespace as the value of
     * the <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token annotation punctuation">@since</span></span></span><span class="token punctuation">}</span> javadoc tag. The default value is the empty
     * string.
     *
     * <span class="token keyword">@return</span> the version string
     * <span class="token keyword">@since</span> 9
     */</span>
    <span class="token class-name">String</span> <span class="token function">since</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * Indicates whether the annotated element is subject to removal in a
     * future version. The default value is <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token boolean">false</span></span></span><span class="token punctuation">}</span>.
     *
     * <span class="token keyword">@return</span> whether the element is subject to removal
     * <span class="token keyword">@since</span> 9
     */</span>
    <span class="token keyword">boolean</span> <span class="token function">forRemoval</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5-1-3注解的属性" tabindex="-1"><a class="header-anchor" href="#_5-1-3注解的属性"><span>5.1.3注解的属性</span></a></h3><p>​ 当某变量被声明了，但却未被使用；或某集合在声明或定义时未加泛型说明等情况发生时，会在代码下给出警告黄线。Ctrl + 1，可在代码上添加一个注解 @SuppressWarnings()。并且发现，不同的情况，其参数是不同的。</p><p>​ 打开其源码，看到其定义与 @Deprecated 是不同的，其接口体中声明了一个方法 String[] value()。那么该注解在使用时必须包含一个属性 value，类型为 String[]。且该参数没有默认值，即必须给出value的值。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token constant">TYPE</span><span class="token punctuation">,</span> <span class="token constant">FIELD</span><span class="token punctuation">,</span> <span class="token constant">METHOD</span><span class="token punctuation">,</span> <span class="token constant">PARAMETER</span><span class="token punctuation">,</span> <span class="token constant">CONSTRUCTOR</span><span class="token punctuation">,</span> <span class="token constant">LOCAL_VARIABLE</span><span class="token punctuation">,</span> <span class="token constant">MODULE</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span><span class="token class-name">RetentionPolicy</span><span class="token punctuation">.</span><span class="token constant">SOURCE</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">SuppressWarnings</span> <span class="token punctuation">{</span>
    <span class="token doc-comment comment">/**
     * The set of warnings that are to be suppressed by the compiler in the
     * annotated element.  Duplicate names are permitted.  The second and
     * successive occurrences of a name are ignored.  The presence of
     * unrecognized warning names is <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span><span class="token punctuation">&gt;</span></span>not<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">&gt;</span></span> an error: Compilers must
     * ignore any warning names they do not recognize.  They are, however,
     * free to emit a warning if an annotation contains an unrecognized
     * warning name.
     *
     * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span> The string <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token string">&quot;unchecked&quot;</span></span></span><span class="token punctuation">}</span> is used to suppress
     * unchecked warnings. Compiler vendors should document the
     * additional warning names they support in conjunction with this
     * annotation type. They are encouraged to cooperate to ensure
     * that the same names work across multiple compilers.
     * <span class="token keyword">@return</span> the set of warnings to be suppressed
     */</span>
    <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>​ 对于注解的属性，需要注意以下几点：</p><ol><li>数组问题该属性在源码定义时被声明为数组，但在具体使用时却只要赋予一个值，此时无需将该值再定义为一个数组后赋给该属性。直接将该值赋给该属性即可。例如，<u>对于声明为字符串数组 String[] 的 value 属性，可以将字符串 String 直接赋给该 value</u>。</li><li>默认值问题若某属性在注解定义时声明了其默认值，则在注解使用时，可以不为其指定属性值。注解会自动使用其默认值。</li><li>value 属性问题若注解在使用时只需使用其 value 属性，其它属性要么有默认值，要么该注解只声明了一个value 属性，此时，在注解使用时 value <strong>属性名称可省略</strong>，而直接在注解的括号中写出该 value 属性的值。</li><li>无属性问题有些注解在定义时，是没有属性的，如 @Deprecated、@Overide 都是没有属性声明的，那么在使用时只需给出注解名称即可。</li><li>根据第 1 和第 3 点 可知，若注解的参数只需要填写 value 的时候可以写成下面三种格式： <ul><li>@Xxxxx ( value = { &quot;……&quot; } )</li><li>@Xxxxx ( value = &quot;……&quot; )</li><li>@Xxxxx ( &quot;……&quot; )</li></ul></li></ol><h2 id="_5-2-mybatis注解" tabindex="-1"><a class="header-anchor" href="#_5-2-mybatis注解"><span>5.2 Mybatis注解</span></a></h2><p>​ 程序举例项目：annotation，在 dynamicMapper 基础上进行修改</p><h3 id="_5-2-1-insert" tabindex="-1"><a class="header-anchor" href="#_5-2-1-insert"><span>5.2.1@Insert</span></a></h3><p>​ 其 value 属性用于指定要执行的 insert 语句。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Insert</span><span class="token punctuation">(</span><span class="token string">&quot;insert into student(name,age,score) values (#{name},#{age},#{score})&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">void</span> <span class="token function">insertStudent</span><span class="token punctuation">(</span><span class="token class-name">Student</span> student<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5-2-2-selectkey" tabindex="-1"><a class="header-anchor" href="#_5-2-2-selectkey"><span>5.2.2 @SelectKey</span></a></h3><p>原始的映射文件中的语句：</p><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>insert</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>insertStudentCatchId<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    insert into student(name,age,score) values (#{name},#{age},#{score})
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>selectKey</span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>int<span class="token punctuation">&quot;</span></span> <span class="token attr-name">keyProperty</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>id<span class="token punctuation">&quot;</span></span> <span class="token attr-name">order</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>AFTER<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
        select @@identity
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>selectKey</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>insert</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>用于替换 XML 中的 &lt;selectKey/&gt;标签，用于返回新插入数据的 id 值。</p><ul><li><p>statement：获取新插入记录主键值的SQL语句；</p></li><li><p>keyProperty：获取的该主键值返回后初始化对象的哪个属性；</p></li><li><p>resultType：返回值类；</p></li><li><p>before：指定主键的生成相对于insert语句的执行先后顺序，该属性不能省略。</p></li></ul><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Insert</span><span class="token punctuation">(</span><span class="token string">&quot;insert into student(name,age,score) values (#{name},#{age},#{score})&quot;</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@SelectKey</span><span class="token punctuation">(</span>before <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">,</span> keyProperty <span class="token operator">=</span> <span class="token string">&quot;id&quot;</span><span class="token punctuation">,</span> 
resultType <span class="token operator">=</span> <span class="token keyword">int</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> statement <span class="token operator">=</span> <span class="token string">&quot;select @@identity&quot;</span> <span class="token punctuation">)</span>
<span class="token keyword">void</span> <span class="token function">insertStudentCatchId</span><span class="token punctuation">(</span><span class="token class-name">Student</span> student<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5-2-3-delete" tabindex="-1"><a class="header-anchor" href="#_5-2-3-delete"><span>5.2.3 @Delete</span></a></h3><p>​ 其 value 属性用于指定要执行的 delete 语句。</p><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>@Delete(value = &quot;delete from student where id=#{xxx} &quot;)
void deleteStudentById(int id);
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5-2-4-update" tabindex="-1"><a class="header-anchor" href="#_5-2-4-update"><span>5.2.4 @Update</span></a></h3><p>​ 其 value 属性用于指定要执行的 update 语句。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Update</span><span class="token punctuation">(</span><span class="token string">&quot;update student set name=#{name}, age=#{age}, score=#{score} where id=#{id}&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">void</span> <span class="token function">updateStudent</span><span class="token punctuation">(</span><span class="token class-name">Student</span> student<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5-2-5-select" tabindex="-1"><a class="header-anchor" href="#_5-2-5-select"><span>5.2.5 @Select</span></a></h3><p>​ 其 value 属性用于指定要执行的 select 语句。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">// 查询所有</span>
<span class="token annotation punctuation">@Select</span><span class="token punctuation">(</span><span class="token string">&quot;select * from student&quot;</span><span class="token punctuation">)</span>
<span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">&gt;</span></span> <span class="token function">selectAllStudents</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 查询指定学生</span>
<span class="token annotation punctuation">@Select</span><span class="token punctuation">(</span><span class="token string">&quot;select id,name,age,score from student where id=#{jjj}&quot;</span><span class="token punctuation">)</span>
<span class="token class-name">Student</span> <span class="token function">selectStudentById</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5-2-6-删除映射文件" tabindex="-1"><a class="header-anchor" href="#_5-2-6-删除映射文件"><span>5.2.6 删除映射文件</span></a></h3><p>​ 由于MyBatis注解替换的是映射文件，所以这里就不需要映射文件了，将其直接删除。</p><h3 id="_5-2-7-修改主配置文件" tabindex="-1"><a class="header-anchor" href="#_5-2-7-修改主配置文件"><span>5.2.7 修改主配置文件</span></a></h3><p>​ 由于没有了映射文件，所以主配置文件中不能使用 &lt;mapper/&gt; 注册 mapper 的位置了。需要使用 &lt;package/&gt; 标签。</p><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mappers</span><span class="token punctuation">&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>package</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>com.hahg.dao<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mappers</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,44),i=[p];function l(o,c){return a(),s("div",null,i)}const r=n(t,[["render",l],["__file","五、Mybatis注解式开发.html.vue"]]),k=JSON.parse('{"path":"/%E5%AD%A6%E4%B9%A0/%E5%90%8E%E7%AB%AF/SSM%E6%A1%86%E6%9E%B6/MyBatis3/%E4%BA%94%E3%80%81Mybatis%E6%B3%A8%E8%A7%A3%E5%BC%8F%E5%BC%80%E5%8F%91.html","title":"五、Mybatis注解式开发","lang":"zh-CN","frontmatter":{"description":"五、Mybatis注解式开发 ​ mybatis 的注解，主要是用于替换映射文件。而映射文件中无非存放着增、删、改、查的SQL映射标签。所以，mybatis注解，就是要替换映射文件中的 SQL 标签。 ​ mybatis 官方文档中指出，若要真正想发挥 mybatis 功能，还是要用映射文件。即 mybatis 官方并不建议通过注解方式来使用 myba...","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/%E5%AD%A6%E4%B9%A0/%E5%90%8E%E7%AB%AF/SSM%E6%A1%86%E6%9E%B6/MyBatis3/%E4%BA%94%E3%80%81Mybatis%E6%B3%A8%E8%A7%A3%E5%BC%8F%E5%BC%80%E5%8F%91.html"}],["meta",{"property":"og:site_name","content":"博客演示"}],["meta",{"property":"og:title","content":"五、Mybatis注解式开发"}],["meta",{"property":"og:description","content":"五、Mybatis注解式开发 ​ mybatis 的注解，主要是用于替换映射文件。而映射文件中无非存放着增、删、改、查的SQL映射标签。所以，mybatis注解，就是要替换映射文件中的 SQL 标签。 ​ mybatis 官方文档中指出，若要真正想发挥 mybatis 功能，还是要用映射文件。即 mybatis 官方并不建议通过注解方式来使用 myba..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-02-24T04:33:47.000Z"}],["meta",{"property":"article:author","content":"hahg"}],["meta",{"property":"article:modified_time","content":"2024-02-24T04:33:47.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"五、Mybatis注解式开发\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-02-24T04:33:47.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"hahg\\"}]}"]]},"headers":[{"level":2,"title":"5.1注解的基础知识","slug":"_5-1注解的基础知识","link":"#_5-1注解的基础知识","children":[{"level":3,"title":"5.1.1注解的基础语法","slug":"_5-1-1注解的基础语法","link":"#_5-1-1注解的基础语法","children":[]},{"level":3,"title":"5.1.2注解的注解","slug":"_5-1-2注解的注解","link":"#_5-1-2注解的注解","children":[]},{"level":3,"title":"5.1.3注解的属性","slug":"_5-1-3注解的属性","link":"#_5-1-3注解的属性","children":[]}]},{"level":2,"title":"5.2 Mybatis注解","slug":"_5-2-mybatis注解","link":"#_5-2-mybatis注解","children":[{"level":3,"title":"5.2.1@Insert","slug":"_5-2-1-insert","link":"#_5-2-1-insert","children":[]},{"level":3,"title":"5.2.2 @SelectKey","slug":"_5-2-2-selectkey","link":"#_5-2-2-selectkey","children":[]},{"level":3,"title":"5.2.3 @Delete","slug":"_5-2-3-delete","link":"#_5-2-3-delete","children":[]},{"level":3,"title":"5.2.4 @Update","slug":"_5-2-4-update","link":"#_5-2-4-update","children":[]},{"level":3,"title":"5.2.5 @Select","slug":"_5-2-5-select","link":"#_5-2-5-select","children":[]},{"level":3,"title":"5.2.6 删除映射文件","slug":"_5-2-6-删除映射文件","link":"#_5-2-6-删除映射文件","children":[]},{"level":3,"title":"5.2.7 修改主配置文件","slug":"_5-2-7-修改主配置文件","link":"#_5-2-7-修改主配置文件","children":[]}]}],"git":{"createdTime":1708749227000,"updatedTime":1708749227000,"contributors":[{"name":"hahg2000","email":"61403802+hahg2000@users.noreply.github.com","commits":1}]},"readingTime":{"minutes":4.73,"words":1419},"filePathRelative":"学习/后端/SSM框架/MyBatis3/五、Mybatis注解式开发.md","localizedDate":"2024年2月24日","excerpt":"\\n<p>​\\t<span style=\\"color:red\\">mybatis 的注解，主要是用于替换映射文件。</span>而映射文件中无非存放着增、删、改、查的SQL映射标签。所以，mybatis注解，就是要替换映射文件中的 SQL 标签。</p>\\n<p>​\\tmybatis 官方文档中指出，若要真正想发挥 mybatis 功能，还是要用映射文件。即 mybatis 官方并不建议通过注解方式来使用 mybatis。</p>\\n<h2>5.1注解的基础知识</h2>\\n<p>以下注解知识的讲解，均使用使用@Overide、@Deprecated（过时）、@SuppressWarnings举例。</p>","autoDesc":true}');export{r as comp,k as data};
