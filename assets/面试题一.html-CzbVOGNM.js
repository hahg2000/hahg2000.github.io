import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as p,o as l,c as o,d as i,w as c,f as a,a as n,b as s}from"./app-BVqESlQI.js";const u={},r=a(`<h1 id="vue面试题一" tabindex="-1"><a class="header-anchor" href="#vue面试题一"><span>Vue面试题一</span></a></h1><p>转载链接：https://github.com/sudheerj/vuejs-interview-questions#what-is-vuejs</p><h2 id="一、什么是vue" tabindex="-1"><a class="header-anchor" href="#一、什么是vue"><span>一、什么是Vue</span></a></h2><p>答：Vue.js 是一个开源的、渐进式框架，用于构建增量型的用户界面。Vue.js 专注于视图图层 <code>view layer</code> ，并易于与现有的项目和其他框架集成。</p><p>英文原文：</p><p><strong>Vue.js</strong> is an open-source, progressive Javascript framework for building user interfaces that aim to be incrementally adoptable. The core library of VueJS is focused on the <code>view layer</code> only, and is easy to pick up and integrate with other libraries or existing projects.</p><h2 id="二、vue的主要特点是什么" tabindex="-1"><a class="header-anchor" href="#二、vue的主要特点是什么"><span>二、Vue的主要特点是什么？</span></a></h2><p>以下是 Vue.js 的一些主要特点：</p><ol><li><strong>Virtual DOM：</strong> 使用类似于 React.js、Ember 等框架的虚拟 DOM。Virtual DOM 是原始 HTML DOM 的轻量级内存树表示，并且在不影响原始 DOM 的情况下进行更新节点。</li><li><strong>组件：</strong> 在 Vue.js 的应用程序中创建可重用的自定义元素。</li><li><strong>模板：</strong> Vue.js 提供基于 HTML 的模板，将 DOM 与 Vue 实例数据绑定</li><li>**路由：**页面之间的导航通过 vue-router 来实现的</li><li>**轻量级：**与其他框架相比，Vue.js 是轻量级的库</li></ol><p>英文原文：Below are the some of major features available with VueJS</p><ol><li><strong>Virtual DOM:</strong> It uses virtual DOM similar to other existing frameworks such as ReactJS, Ember etc. Virtual DOM is a light-weight in-memory tree representation of the original HTML DOM and updated without affecting the original DOM.</li><li><strong>Components:</strong> Used to create reusable custom elements in VueJS applications.</li><li><strong>Templates:</strong> VueJS provides HTML based templates that bind the DOM with the Vue instance data</li><li><strong>Routing:</strong> Navigation between pages is achieved through vue-router</li><li><strong>Light weight:</strong> VueJS is light weight library compared to other frameworks.</li></ol><h2 id="三、vue-js-的生命周期方法有哪些" tabindex="-1"><a class="header-anchor" href="#三、vue-js-的生命周期方法有哪些"><span>三、Vue.js 的生命周期方法有哪些？</span></a></h2><p>大致分为四个大部分：</p><ul><li>创建部分： 在组件被添加到 DOM 之前。 <ul><li><code>beforeCreate</code> ：数据还不是响应式的</li><li><code>created</code> ：数据变为响应式的，但模板和 DOM 没有挂载，无法通过访问 <code>this.$el</code> 来获取组件</li></ul></li><li>挂载部分（插入 DOM）： 可以在第一次挂载之前和之后访问组件 <ul><li><code>beforeMount</code> ：挂载之前触发，<code>this.$el</code> 无法访问</li><li><code>Mounted</code> ：挂载之后触发，可以访问任何东西</li></ul></li><li>更新部分：触发于组件使用的响应式属性改变或者其他原因导致组件重新渲染 <ul><li><code>beforeUpdate</code> ：数据更新之后，重新渲染之前</li><li><code>updated</code> ：渲染页面完成之后</li></ul></li><li>销毁部分： <ul><li><code>beforeDestroy</code> ：用于清理事件和响应式订阅</li><li><code>destroyed</code> ：解除绑定指令，移除了事件监听</li></ul></li></ul><p>英文原文：https://github.com/sudheerj/vuejs-interview-questions#what-are-the-lifecycle-methods-of-vuejs</p><h2 id="四、有哪些条件指令" tabindex="-1"><a class="header-anchor" href="#四、有哪些条件指令"><span>四、有哪些条件指令？</span></a></h2><ul><li><code>v-if</code></li><li><code>v-else-if</code></li><li><code>v-else</code></li><li><code>v-show</code></li></ul><p>英文原文：</p><h2 id="五、v-show和v-if区别" tabindex="-1"><a class="header-anchor" href="#五、v-show和v-if区别"><span>五、v-show和v-if区别</span></a></h2><ol><li>显示方式不同：v-if 切换是改变 DOM 渲染，v-show 切换是改变 CSS 的 <code>display</code> 来切换显示</li><li>切换显示成本不同：v-if 花费成本更高，v-show 成本更低</li><li>配套指令不同：v-if 可以使用 v-else-if 和 v-else</li><li>v-if 支持 <code>&lt;template&gt;</code> ，而 v-show 不支持</li></ol><p>英语原文：Below are some of the main differences between <strong>v-show</strong> and <strong>v-if</strong> directives,</p><ol><li>v-if only renders the element to the DOM if the expression passes whereas v-show renders all elements to the DOM and then uses the CSS display property to show/hide elements based on expression.</li><li>v-if supports v-else and v-else-if directives whereas v-show doesn&#39;t support else directives.</li><li>v-if has higher toggle costs while v-show has higher initial render costs. i.e, v-show has a performance advantage if the elements are switched on and off frequently, while the v-if has the advantage when it comes to initial render time.</li><li>v-if supports \` tab but v-show doesn&#39;t support.</li></ol><h2 id="六、v-for-指令的作用是什么" tabindex="-1"><a class="header-anchor" href="#六、v-for-指令的作用是什么"><span>六、v-for 指令的作用是什么？</span></a></h2><p>答：遍历数组和对象里的元素</p><ul><li>数组用法：<code>( item, index ) in array</code></li><li>对象用法：<code>( value, key, index) of object</code></li></ul><p>英文原文：</p><h2 id="七、什么是vue实例" tabindex="-1"><a class="header-anchor" href="#七、什么是vue实例"><span>七、什么是Vue实例</span></a></h2><p>答： 每个 Vue 应用程序都通过使用 Vue 函数创建 Vue 的实例来工作。通常变量 vm（ViewModel 的缩写）用于引用 Vue 实例。您可以如下创建 vue 实例。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token comment">// option</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="八、如何实现有条件地显示一组元素" tabindex="-1"><a class="header-anchor" href="#八、如何实现有条件地显示一组元素"><span>八、如何实现有条件地显示一组元素</span></a></h2><p>两个方法：</p><ul><li>一个是 <code>&lt;template&gt;</code> 与 <code>v-if</code> 一起使用</li></ul><div class="language-html line-numbers-mode" data-ext="html" data-title="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>condition<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span>Name<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>Address<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>Contact Details<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>另一个是 <code>&lt;div&gt;</code> 与 <code>v-show</code></li></ul><p>英语原文：https://github.com/sudheerj/vuejs-interview-questions#how-do-you-achieve-conditional-group-of-elements</p><h2 id="九、如何使用key属性" tabindex="-1"><a class="header-anchor" href="#九、如何使用key属性"><span>九、如何使用key属性</span></a></h2><p>在下面的代码中，会发现文本框的值会复用，在许多场合不应该这样做。所以要在不需要复用的组件，添加 key 属性，这样 Vue 就会区别出这些文本框。</p>`,37),d=n("div",{class:"language-vue line-numbers-mode","data-ext":"vue","data-title":"vue"},[n("pre",{class:"language-vue"},[n("code",null,[n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),s("template")]),s(),n("span",{class:"token attr-name"},"v-if"),n("span",{class:"token attr-value"},[n("span",{class:"token punctuation attr-equals"},"="),n("span",{class:"token punctuation"},'"'),s("loginType === 'Admin'"),n("span",{class:"token punctuation"},'"')]),n("span",{class:"token punctuation"},">")]),s(`
`),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),s("label")]),n("span",{class:"token punctuation"},">")]),s("Admin"),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"</"),s("label")]),n("span",{class:"token punctuation"},">")]),s(`
`),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),s("input")]),s(),n("span",{class:"token attr-name"},"placeholder"),n("span",{class:"token attr-value"},[n("span",{class:"token punctuation attr-equals"},"="),n("span",{class:"token punctuation"},'"'),s("Enter your ID"),n("span",{class:"token punctuation"},'"')]),s(),n("span",{class:"token attr-name"},"type"),n("span",{class:"token attr-value"},[n("span",{class:"token punctuation attr-equals"},"="),n("span",{class:"token punctuation"},'"'),s("password"),n("span",{class:"token punctuation"},'"')]),n("span",{class:"token punctuation"},">")]),s(`
`),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"</"),s("template")]),n("span",{class:"token punctuation"},">")]),s(`
`),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),s("template")]),s(),n("span",{class:"token attr-name"},"v-else"),n("span",{class:"token punctuation"},">")]),s(`
`),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),s("label")]),n("span",{class:"token punctuation"},">")]),s("Guest"),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"</"),s("label")]),n("span",{class:"token punctuation"},">")]),s(`
`),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),s("input")]),s(),n("span",{class:"token attr-name"},"placeholder"),n("span",{class:"token attr-value"},[n("span",{class:"token punctuation attr-equals"},"="),n("span",{class:"token punctuation"},'"'),s("Enter your name"),n("span",{class:"token punctuation"},'"')]),s(),n("span",{class:"token attr-name"},"disabled"),s(),n("span",{class:"token punctuation"},">")]),s(`
`),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"</"),s("template")]),n("span",{class:"token punctuation"},">")]),s(`

`),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),s("script")]),n("span",{class:"token punctuation"},">")]),n("span",{class:"token script"},[n("span",{class:"token language-javascript"},[s(`
  `),n("span",{class:"token keyword"},"export"),s(),n("span",{class:"token keyword"},"default"),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token function"},"data"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
      `),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token punctuation"},"{"),s(`
        `),n("span",{class:"token literal-property property"},"message"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token string"},"'Hello Vue!'"),n("span",{class:"token punctuation"},","),s(`
        `),n("span",{class:"token literal-property property"},"isShow"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token boolean"},"false"),n("span",{class:"token punctuation"},","),s(`
      `),n("span",{class:"token punctuation"},"}"),s(`
    `),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},","),s(`
    `),n("span",{class:"token literal-property property"},"methods"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token punctuation"},"{"),s(`
      `),n("span",{class:"token function"},"changeShow"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
        `),n("span",{class:"token keyword"},"this"),n("span",{class:"token punctuation"},"."),s("isShow "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token operator"},"!"),n("span",{class:"token keyword"},"this"),n("span",{class:"token punctuation"},"."),s(`isShow
      `),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},","),s(`
    `),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},","),s(`
  `),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},";"),s(`
`)])]),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"</"),s("script")]),n("span",{class:"token punctuation"},">")]),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),v=a(`<h2 id="十、为什么不应该在同一个元素上同时使用-if-和-for-指令" tabindex="-1"><a class="header-anchor" href="#十、为什么不应该在同一个元素上同时使用-if-和-for-指令"><span>十、为什么不应该在同一个元素上同时使用 if 和 for 指令？</span></a></h2><p>建议不要在与 v-for 相同的元素上使用 v-if。因为 v-for 指令的优先级高于 v-if 。所以 vue 在 v-for 渲染出所有列表选项后再执行 v-if 指令。</p><p>例如下面代码：在渲染出了 users 数组后，再判断每一项的 isActive 属性看是否显示出来。</p><div class="language-html line-numbers-mode" data-ext="html" data-title="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span>
    <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>user in users<span class="token punctuation">&quot;</span></span>
    <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>user.isActive<span class="token punctuation">&quot;</span></span>
    <span class="token attr-name">:key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>user.id<span class="token punctuation">&quot;</span></span>
  <span class="token punctuation">&gt;</span></span>
    {{ user.name }}
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>正确的写法是使用计算属性把需要的数据筛选出来，再使用 v-for 渲染。这样写的好处：</p><ul><li>使用 <code>v-for=&quot;user in activeUsers&quot;</code> 之后，我们在渲染的时候只遍历活跃用户，渲染更高效。</li><li>解耦渲染层的逻辑，可维护性 (对逻辑的更改和扩展) 更强。</li></ul><div class="language-html line-numbers-mode" data-ext="html" data-title="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span>
      <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>user in activeUsers<span class="token punctuation">&quot;</span></span>
      <span class="token attr-name">:key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>user.id<span class="token punctuation">&quot;</span></span>
      <span class="token punctuation">&gt;</span></span>
    {{ user.name }}
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  <span class="token literal-property property">computed</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token function-variable function">activeUsers</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>users<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">user</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> user<span class="token punctuation">.</span>isActive
      <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>还有一个是使用另一个变量来控制 v-for 渲染，例如下面代码，使用 shouldShowUsers 变量来控制是否渲染 v-for 的结果。</p><div class="language-html line-numbers-mode" data-ext="html" data-title="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span>
    <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>user in users<span class="token punctuation">&quot;</span></span>
    <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>shouldShowUsers<span class="token punctuation">&quot;</span></span>
    <span class="token attr-name">:key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>user.id<span class="token punctuation">&quot;</span></span>
  <span class="token punctuation">&gt;</span></span>
    {{ user.name }}
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>正确的方式是将 v-if 提取到父元素，这样就不会去渲染 v-for 的结果。</p><div class="language-html line-numbers-mode" data-ext="html" data-title="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>shouldShowUsers<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span>
      <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>user in users<span class="token punctuation">&quot;</span></span>
      <span class="token attr-name">:key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>user.id<span class="token punctuation">&quot;</span></span>
      <span class="token punctuation">&gt;</span></span>
    {{ user.name }}
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="十一、为什么需要在-for-指令上使用-key-属性" tabindex="-1"><a class="header-anchor" href="#十一、为什么需要在-for-指令上使用-key-属性"><span>十一、为什么需要在 for 指令上使用 key 属性？</span></a></h2><p>为了跟踪每个节点的身份，从而重用和重新排序现有元素。</p><h2 id="十二、突变方法有哪些" tabindex="-1"><a class="header-anchor" href="#十二、突变方法有哪些"><span>十二、突变方法有哪些？</span></a></h2><ol><li>push() —— 在数组最后面添加元素</li><li>pop() —— 在数组最后面删除元素</li><li>shift() —— 删除数组最前面的元素</li><li>unshift() —— 在数组最前面添加元素</li><li>splice() —— 通过删除或替换现有元素或者原地添加新的元素来修改数组</li><li>sort() —— 对数组的元素进行排序</li><li>reverse() ——颠倒数组里的元素</li></ol><p>正是因为这些方法原来是直接改变原数组，所以 vue.js 在原来的功能上加上了视图更新</p><h2 id="十三、非突变方法有哪些" tabindex="-1"><a class="header-anchor" href="#十三、非突变方法有哪些"><span>十三、非突变方法有哪些？</span></a></h2><ol><li>filter() —— 根据条件返回一个新数组</li><li>concat() —— 连接多个数组后返回一个新数组</li><li>slice() —— 截取部分数组返回一个新数组、</li></ol><p>因为总是返回一个新数组，所以 vue.js 不会视图更新</p><h2 id="十四、关于突变方法有哪些注意事项" tabindex="-1"><a class="header-anchor" href="#十四、关于突变方法有哪些注意事项"><span>十四、关于突变方法有哪些注意事项？</span></a></h2><p>如果不用突变方法，下面两个修改数组的方式不会引起界面更新</p><ol><li>使用下标改变对应的值</li><li>直接修改数组长度</li></ol><p>对于第 1 种方式可以用下面方式代替：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// Vue.set() 方法</span>
Vue<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>vm<span class="token punctuation">.</span>todos<span class="token punctuation">,</span> indexOfTodo<span class="token punctuation">,</span> newTodoValue<span class="token punctuation">)</span>

<span class="token comment">// Array.prototype.splice() 方法</span>
<span class="token comment">// 从indexOfTodo开始删除1个元素，再添加newTodoValue</span>
vm<span class="token punctuation">.</span>todos<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>indexOfTodo<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> newTodoValue<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对于第 2 种方式：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>vm<span class="token punctuation">.</span>todos<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>todosLength<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>对于对象没有如果不用突变方法，添加或者删除对象中的属性都不会引起界面更新，例如下面代码。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">user</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;John&#39;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token comment">// 添加属性不会引起界面更新</span>
vm<span class="token punctuation">.</span>user<span class="token punctuation">.</span>email <span class="token operator">=</span> john@email<span class="token punctuation">.</span>com
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>您可以使用 <code>Vue.set(object, key, value)</code> 方法或 <code>Object.assign()</code> 来克服这种情况</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>Vue<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>vm<span class="token punctuation">.</span>user<span class="token punctuation">,</span> <span class="token string">&#39;email&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;john@email.com&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Object.assign() 方法将其他参数赋值到第1个参数里</span>
<span class="token comment">// 这里是将新属性和原来的属性添加到空对象里，再赋值</span>
vm<span class="token punctuation">.</span>user <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> vm<span class="token punctuation">.</span>user<span class="token punctuation">,</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">email</span><span class="token operator">:</span> john@email<span class="token punctuation">.</span>com
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="十五、如何使用事件处理" tabindex="-1"><a class="header-anchor" href="#十五、如何使用事件处理"><span>十五、如何使用事件处理？</span></a></h2><p>您可以在 vue 中使用类似于纯 javascript 的事件处理。方法调用还支持特殊的 $event 变量，该变量有许多有个事件的属性。</p><div class="language-html line-numbers-mode" data-ext="html" data-title="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name"><span class="token namespace">v-on:</span>click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>show(&#39;Welcome to VueJS world&#39;, $event)<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
  Submit
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>

methods: {
  show: function (message, event) {
    if (event) event.preventDefault()
  }
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="十六、vue提供的事件修饰符有哪些" tabindex="-1"><a class="header-anchor" href="#十六、vue提供的事件修饰符有哪些"><span>十六、vue提供的事件修饰符有哪些？</span></a></h2><p>通常，javascript 提供 <code>event.preventDefault() / event.stopPropagation()</code> 事件处理方法。</p><p>你可以在 vue 使用这些方法，但是这些方法是用于处理 DOM 事件，而响应方法里最主要的是业务逻辑，这样业务逻辑 和处理 DOM 事件会混在一起。</p><p>官网说明：https://cn.vuejs.org/v2/guide/events.html#%E4%BA%8B%E4%BB%B6%E4%BF%AE%E9%A5%B0%E7%AC%A6</p><p>Vue 为 v-on 提供了以下事件修饰符，这些修饰符是用点表示的指令后缀。</p><ul><li><code>.stop</code> —— 阻止事件冒泡传播</li><li><code>.prevent</code> —— 阻止事件的默认行为</li><li><code>.capture</code> —— 事件按照捕获模式传播</li><li><code>.self</code> ——只有在本元素才能触发事件，（子元素不触发）</li><li><code>.once</code> ——该事件只会触发一次</li><li><code>.passive</code> ——告诉浏览器一定会触发默认事件。一般和滚动事件一起使用，当发生滚动时，不会等待回调方法运行，直接滚动，因为在设置该属性之前，需要等待回调方法运行完成，看是否需要阻止默认行为——滚动。</li></ul><h2 id="二十一、如何定义自定义键修饰符" tabindex="-1"><a class="header-anchor" href="#二十一、如何定义自定义键修饰符"><span>二十一、如何定义自定义键修饰符</span></a></h2><p>您可以通过全局定义自定义键修饰符别名 <code>config.keyCodes</code>。使用规则：</p><ol><li>不能使用驼峰命名，可以使用短横命名</li><li>可以使用数组定义多个值</li></ol><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>Vue<span class="token punctuation">.</span>config<span class="token punctuation">.</span>keyCodes <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">f1</span><span class="token operator">:</span> <span class="token number">112</span><span class="token punctuation">,</span>
  <span class="token comment">// 短横命名</span>
  <span class="token string-property property">&quot;media-play-pause&quot;</span><span class="token operator">:</span> <span class="token number">179</span><span class="token punctuation">,</span>
  <span class="token comment">// 数组定义多个值</span>
  <span class="token literal-property property">down</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">40</span><span class="token punctuation">,</span> <span class="token number">87</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="二十五、v-model支持哪些修饰符" tabindex="-1"><a class="header-anchor" href="#二十五、v-model支持哪些修饰符"><span>二十五、v-model支持哪些修饰符？</span></a></h2><p>三个修饰符：</p><ol><li>lazy：默认情况下，v-model 会在每次输入的时候修改 vue 里面的值。加上 lazy 修饰符的话，在失去焦点或者按下 enter 键后，才会更新。</li><li>number：默认情况下，文本框的值都会被 vue 识别成字符串存入变量里，即使加上 <code>type=&quot;number&quot;</code> 。加上 number 修饰符，就不会被识别成字符串了。</li><li>trim：自动去除字符串两边的空白</li></ol><h2 id="三十、如何使用v-model父子通信" tabindex="-1"><a class="header-anchor" href="#三十、如何使用v-model父子通信"><span>三十、如何使用v-model父子通信</span></a></h2><p>v-model 实现父子通信，就是父组件使用 v-model，然后子组件在修改数据时触发 v-model 事件，让父组件更新数据。</p><p>为什么不直接修改 props 数据？因为 v-model 一般是传入基本类型，传递的是值，而不是地址，所以直接修改 props 数据，父组件不会产生变化。</p><p>具体的使用方式：</p><ol><li>父组件使用 v-model，如第 1 行</li><li>子组件的 props 接收 value</li><li>然后使用 <code>v-bind:value</code> 初始化 <code>&lt;input/&gt;</code> 的值</li><li>最后使用 <code>v-on:input</code> 监听输入事件，当输入的时候触发父组件的 <code>input</code> 事件，即触发 v-model 同步数据</li></ol><div class="language-html line-numbers-mode" data-ext="html" data-title="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>custom-input</span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>xxxx<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>custom-input</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
	Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">&#39;custom-input&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">props</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;value&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token literal-property property">template</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">
    &lt;input
      v-bind:value=&quot;value&quot;
      v-on:input=&quot;$emit(&#39;input&#39;, $event.target.value)&quot;
    /&gt;
  </span><span class="token template-punctuation string">\`</span></span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>但如果 props 是对象和数组，则不应该修改 props。因为在 vue.js 官网说过 【 这样会防止从子组件意外变更父级组件的状态，从而导致你的应用的数据流向难以理解 】</p><p>链接：https://cn.vuejs.org/v2/guide/components-props.html#%E5%8D%95%E5%90%91%E6%95%B0%E6%8D%AE%E6%B5%81</p><h2 id="三十七、什么是非props属性" tabindex="-1"><a class="header-anchor" href="#三十七、什么是非props属性"><span>三十七、什么是非props属性？</span></a></h2><p>看下面代码，父组件有 type 属性，子组件也有 type 属性，那么以哪个为准呢？</p><div class="language-html line-numbers-mode" data-ext="html" data-title="html"><pre class="language-html"><code><span class="token comment">&lt;!-- 父组件 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bootstrap-date-input</span>
  <span class="token attr-name">:name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>name<span class="token punctuation">&quot;</span></span>
  <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>text<span class="token punctuation">&quot;</span></span>
<span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bootstrap-date-input</span><span class="token punctuation">&gt;</span></span>

<span class="token comment">&lt;!-- 子组件 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>date<span class="token punctuation">&quot;</span></span> <span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>会以父组件的为准，因为子组件的 props 没有接收 type 属性，父组件就将其作为普通的属性处理了，而子组件就会自动继承父组件的属性。</p><p>如果不想子组件继承父组件的普通属性，则可以加上这个属性</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">&#39;my-component&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">inheritAttrs</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
  <span class="token comment">// ...</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们可以在子组件使用 <code>$attr</code> 属性来获取父组件的普通属性，即没有被 props 属性接收。我们可以这样在子组件这样写 <code>v-bind=&quot;$attr&quot;</code> ，将组件不用的属性传递给子组件。然后就可以多代传递数据，而不会写得很冗余。例如下面代码：【参考链接：https://www.jianshu.com/p/ce8ca875c337】</p><ul><li>父组件传入三个属性，name 、age 和 sex ，如第 3 行</li><li>然后子组件接收了 name 属性，如第 17 行</li><li>然后再将剩余属性传给孙子组件，如第 21 行</li><li>最后孙子组件的输出为 <code>{ &quot;age&quot;: &quot;30&quot;, &quot;sex&quot;: &quot;男&quot; }</code></li></ul><div class="language-html line-numbers-mode" data-ext="html" data-title="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>childcom</span> <span class="token attr-name">:name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>name<span class="token punctuation">&quot;</span></span> <span class="token attr-name">:age</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>age<span class="token punctuation">&quot;</span></span> <span class="token attr-name">:sex</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>sex<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>childcom</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
    <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token punctuation">{</span>
        <span class="token string-property property">&#39;name&#39;</span><span class="token operator">:</span><span class="token string">&#39;张三&#39;</span><span class="token punctuation">,</span>
        <span class="token string-property property">&#39;age&#39;</span><span class="token operator">:</span><span class="token string">&#39;30&#39;</span><span class="token punctuation">,</span>
        <span class="token string-property property">&#39;sex&#39;</span><span class="token operator">:</span><span class="token string">&#39;男&#39;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token literal-property property">components</span><span class="token operator">:</span><span class="token punctuation">{</span>
      <span class="token string-property property">&#39;childcom&#39;</span><span class="token operator">:</span><span class="token punctuation">{</span>
        <span class="token literal-property property">props</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token string">&#39;name&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
        <span class="token literal-property property">template</span><span class="token operator">:</span>
        <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">&lt;div&gt;
					&lt;div&gt;{{name}}&lt;/div&gt;
					&lt;grandcom v-bind=&quot;$attrs&quot;&gt;&lt;/grandcom&gt;
 				 &lt;/div&gt;</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span>
        <span class="token literal-property property">components</span><span class="token operator">:</span> <span class="token punctuation">{</span>
          <span class="token string-property property">&#39;grandcom&#39;</span><span class="token operator">:</span><span class="token punctuation">{</span>
            <span class="token literal-property property">template</span><span class="token operator">:</span>
            <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">&lt;div&gt;{{$attrs}}&lt;/div&gt;</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span>
          <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="三十九、如何定义自定义组件v-model" tabindex="-1"><a class="header-anchor" href="#三十九、如何定义自定义组件v-model"><span>三十九、如何定义自定义组件v-model</span></a></h2><p>在 【三十、如何使用v-model父子通信】中，父组件使用 v-model 传入数据，为子组件 input 使用。</p><p>但如果是 单选框 radio 和多选框 checkbox 的话，传入子组件的属性和触发的事件不一样。</p><ul><li>input：传入的是 value，触发的事件是 input</li><li>radio 和 checkbox：传入的是 checked，触发的事件是 change</li></ul><p>所以需要自定义：</p><ul><li>model 里的 prop：将 v-model 绑定的属性改为 checked</li><li>model 里的 prop：将 v-model 触发的事件改为 change</li></ul><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">&#39;custom-checkbox&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">model</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">prop</span><span class="token operator">:</span> <span class="token string">&#39;checked&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">event</span><span class="token operator">:</span> <span class="token string">&#39;change&#39;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">props</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">checked</span><span class="token operator">:</span> Boolean
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">template</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">
    &lt;input
      type=&quot;checkbox&quot;
      v-bind:checked=&quot;checked&quot;
      v-on:change=&quot;$emit(&#39;change&#39;, $event.target.checked)&quot;
    &gt;
  </span><span class="token template-punctuation string">\`</span></span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="四十四、如何使路由器参数更改为反应式" tabindex="-1"><a class="header-anchor" href="#四十四、如何使路由器参数更改为反应式"><span>四十四、如何使路由器参数更改为反应式？</span></a></h2><p>当使用带参数的路由从一个 URL 导航到另一个 URL时，将重用相同的组件实例，不会调用组件的生命周期，这样组件的初始化方法就不会调用。</p><p>可以使用以下任一方法解决此问题</p><ol><li><p>观察 $route 对象：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> User <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">template</span><span class="token operator">:</span> <span class="token string">&#39;&lt;div&gt;User {{ $route.params.name }} &lt;/div&gt;&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">watch</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token string">&#39;$route&#39;</span> <span class="token punctuation">(</span>to<span class="token punctuation">,</span> from<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// ...</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>使用 beforeRouteUpdate 导航守卫：从 2.2 版本之后开始可用。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> User <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">template</span><span class="token operator">:</span> <span class="token string">&#39;&lt;div&gt;User {{ $route.params.name }} &lt;/div&gt;&#39;</span><span class="token punctuation">,</span>
  <span class="token function">beforeRouteUpdate</span> <span class="token punctuation">(</span><span class="token parameter">to<span class="token punctuation">,</span> from<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// ....</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><h2 id="五十四、什么是插件" tabindex="-1"><a class="header-anchor" href="#五十四、什么是插件"><span>五十四、什么是插件</span></a></h2><p>我们在初阶段学习的时候，使用到的 <code>VueRouter</code> 和 <code>Vuex</code> 都是插件。我们在 Vue-Cli 写项目的时候，会像下面注册插件：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> VueRouter <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;vue-router&#39;</span><span class="token punctuation">)</span>

<span class="token comment">// 不要忘了调用此方法</span>
Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>VueRouter<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="五十五、如何创建插件" tabindex="-1"><a class="header-anchor" href="#五十五、如何创建插件"><span>五十五、如何创建插件</span></a></h2><p>参考链接：https://developer.aliyun.com/article/70997#slide-3</p><p>创建插件需要定义一个 <code>install</code> 方法，会有两个形参：Vue 和 options，插件里有四种添加方式。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>MyPlugin<span class="token punctuation">.</span><span class="token function-variable function">install</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">Vue<span class="token punctuation">,</span> options</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 1. 添加实例方法</span>
  <span class="token class-name">Vue</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">$myMethod</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">methodOptions</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 逻辑...</span>
  <span class="token punctuation">}</span>
  
  <span class="token comment">// 2. 添加全局方法或 property</span>
  Vue<span class="token punctuation">.</span><span class="token function-variable function">myGlobalMethod</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 逻辑...</span>
  <span class="token punctuation">}</span>

  <span class="token comment">// 3. 添加全局资源</span>
  Vue<span class="token punctuation">.</span><span class="token function">directive</span><span class="token punctuation">(</span><span class="token string">&#39;my-directive&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
    <span class="token function">bind</span> <span class="token punctuation">(</span><span class="token parameter">el<span class="token punctuation">,</span> binding<span class="token punctuation">,</span> vnode<span class="token punctuation">,</span> oldVnode</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// 逻辑...</span>
    <span class="token punctuation">}</span>
    <span class="token operator">...</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>

  <span class="token comment">// 3. 注入组件选项</span>
  Vue<span class="token punctuation">.</span><span class="token function">mixin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token function-variable function">created</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// 逻辑...</span>
    <span class="token punctuation">}</span>
    <span class="token operator">...</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>

  
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol><li>首先是添加 <strong>实例方法</strong> ，如上面代码的第 1 个：</li></ol><ul><li>核心思想：通过 prototype 来添加方法和属性。</li></ul><p>例如下面代码添加实例方法：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">//让输出的数字翻倍</span>
<span class="token class-name">Vue</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">doubleNumber</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">val</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> val <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后可以直接使用 <code>this.doubleNumber()</code> 来调用这个方法。</p><p>如果添加实例属性，该属性不会被共享，都是独立存在的</p><ol start="2"><li>然后是添加 <strong>全局方法或属性</strong>，如上面代码的第 2 个：</li></ol><p>通过第 1 点添加，在组件里使用，通过 this.test() 来调用</p><p>通过第 2 点添加，通过 Vue 实例调用，如 Vue.test() 来调用</p><ol start="3"><li>注入组件，也称混入，意思是将方法或者属性放入 Vue 对象里。这么说和上面的两种有点相似。不同的是，这种方式可以涉及到生命周期方法和自定义合并方法</li></ol><ul><li><p>如果放入的是自己的定义的生命周期方法，则 Vue 会先执行你的方法，然后再执行组件里的方法。</p></li><li><p>如果放入的是 <code>methods</code>、<code>components</code> 和 <code>directives</code> ，则会进行合并，如果里面有对象键名冲突时，取组件对象的键值对。</p></li><li><p>如果放入的是普通方法和属性，会以组件里的方法为主。</p></li><li><p>我们可以自定义合并策略：</p></li></ul><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>Vue<span class="token punctuation">.</span>config<span class="token punctuation">.</span>optionMergeStrategies<span class="token punctuation">.</span><span class="token function-variable function">myOption</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">toVal<span class="token punctuation">,</span> fromVal</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 返回合并后的值</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="六十二、什么是自定义指令" tabindex="-1"><a class="header-anchor" href="#六十二、什么是自定义指令"><span>六十二、什么是自定义指令</span></a></h2><p>自定义指令可以对 HTML 元素进行访问以及操作一些行为。</p><p>例如下面的代码：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// 全局注册v-focus指令</span>
Vue<span class="token punctuation">.</span><span class="token function">directive</span><span class="token punctuation">(</span><span class="token string">&#39;focus&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
  <span class="token comment">// 当元素被插入到DOM里触发</span>
  <span class="token function-variable function">inserted</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">el</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 焦点放到注册的元素里</span>
    el<span class="token punctuation">.</span><span class="token function">focus</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用的时候像下面使用：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token operator">&lt;</span>input v<span class="token operator">-</span>focus<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="六十三、如何自定义化指令" tabindex="-1"><a class="header-anchor" href="#六十三、如何自定义化指令"><span>六十三、如何自定义化指令</span></a></h2><ol><li>我们可以使用 5 个指令生命周期函数</li></ol><ul><li>bind: 当前指令绑定到元素里</li><li>inserted: 当元素插入到 DOM 里</li><li>update: 当元素更新了，但子元素还没更新</li><li>componentUpdated: This hook is called once the component and the children have been updated.</li><li>unbind: This hook is called only once when the directive is removed.</li></ul>`,102);function k(m,g){const t=p("CodeDemo");return l(),o("div",null,[r,i(t,{id:"code-demo-296",type:"vue",title:"%E6%96%87%E6%9C%AC%E6%A1%86%E5%A4%8D%E7%94%A8",code:"eJyNj8FOwzAQRH9l6ktAAnoPTSUkEHAGccrFrbeJJceO7HVLVeXfcZo2iTj15J1n+Y33JPaRRC5WTE1rJBP2j3pXlMK4StvvY0soigLZi2q0zUqxLu3KyA2Z9ZmslkNIVNs2MpJjS7UzinySvFkmj6OLHp+vpQAnX8KtDOHgvBp0y2t1H2bfIBPOaGh4jxT49jorG0qFSge5MaTwvyjFsPW65TQD9Ns6z1C0k9EwTj0DlGR5d39NgCeO3k4ZaCgEWVGO7IOMcfiJtMgepnsdvmp3yLGTaZeRd8PQXUBDXDsV8km8raWtqH86rwe41uFpcKLAYhZH9cU5nN1zv/W4p+j+AMdKoa4="},{default:c(()=>[d]),_:1}),v])}const f=e(u,[["render",k],["__file","面试题一.html.vue"]]),y=JSON.parse('{"path":"/%E5%AD%A6%E4%B9%A0/%E5%89%8D%E7%AB%AF/%E9%9D%A2%E8%AF%95%E9%A2%98%E4%B8%80.html","title":"Vue面试题一","lang":"zh-CN","frontmatter":{"description":"Vue面试题一 转载链接：https://github.com/sudheerj/vuejs-interview-questions#what-is-vuejs 一、什么是Vue 答：Vue.js 是一个开源的、渐进式框架，用于构建增量型的用户界面。Vue.js 专注于视图图层 view layer ，并易于与现有的项目和其他框架集成。 英文原文： V...","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/%E5%AD%A6%E4%B9%A0/%E5%89%8D%E7%AB%AF/%E9%9D%A2%E8%AF%95%E9%A2%98%E4%B8%80.html"}],["meta",{"property":"og:site_name","content":"博客演示"}],["meta",{"property":"og:title","content":"Vue面试题一"}],["meta",{"property":"og:description","content":"Vue面试题一 转载链接：https://github.com/sudheerj/vuejs-interview-questions#what-is-vuejs 一、什么是Vue 答：Vue.js 是一个开源的、渐进式框架，用于构建增量型的用户界面。Vue.js 专注于视图图层 view layer ，并易于与现有的项目和其他框架集成。 英文原文： V..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-02-24T04:33:47.000Z"}],["meta",{"property":"article:author","content":"Mr.Hope"}],["meta",{"property":"article:modified_time","content":"2024-02-24T04:33:47.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Vue面试题一\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-02-24T04:33:47.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr.Hope\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":2,"title":"一、什么是Vue","slug":"一、什么是vue","link":"#一、什么是vue","children":[]},{"level":2,"title":"二、Vue的主要特点是什么？","slug":"二、vue的主要特点是什么","link":"#二、vue的主要特点是什么","children":[]},{"level":2,"title":"三、Vue.js 的生命周期方法有哪些？","slug":"三、vue-js-的生命周期方法有哪些","link":"#三、vue-js-的生命周期方法有哪些","children":[]},{"level":2,"title":"四、有哪些条件指令？","slug":"四、有哪些条件指令","link":"#四、有哪些条件指令","children":[]},{"level":2,"title":"五、v-show和v-if区别","slug":"五、v-show和v-if区别","link":"#五、v-show和v-if区别","children":[]},{"level":2,"title":"六、v-for 指令的作用是什么？","slug":"六、v-for-指令的作用是什么","link":"#六、v-for-指令的作用是什么","children":[]},{"level":2,"title":"七、什么是Vue实例","slug":"七、什么是vue实例","link":"#七、什么是vue实例","children":[]},{"level":2,"title":"八、如何实现有条件地显示一组元素","slug":"八、如何实现有条件地显示一组元素","link":"#八、如何实现有条件地显示一组元素","children":[]},{"level":2,"title":"九、如何使用key属性","slug":"九、如何使用key属性","link":"#九、如何使用key属性","children":[]},{"level":2,"title":"十、为什么不应该在同一个元素上同时使用 if 和 for 指令？","slug":"十、为什么不应该在同一个元素上同时使用-if-和-for-指令","link":"#十、为什么不应该在同一个元素上同时使用-if-和-for-指令","children":[]},{"level":2,"title":"十一、为什么需要在 for 指令上使用 key 属性？","slug":"十一、为什么需要在-for-指令上使用-key-属性","link":"#十一、为什么需要在-for-指令上使用-key-属性","children":[]},{"level":2,"title":"十二、突变方法有哪些？","slug":"十二、突变方法有哪些","link":"#十二、突变方法有哪些","children":[]},{"level":2,"title":"十三、非突变方法有哪些？","slug":"十三、非突变方法有哪些","link":"#十三、非突变方法有哪些","children":[]},{"level":2,"title":"十四、关于突变方法有哪些注意事项？","slug":"十四、关于突变方法有哪些注意事项","link":"#十四、关于突变方法有哪些注意事项","children":[]},{"level":2,"title":"十五、如何使用事件处理？","slug":"十五、如何使用事件处理","link":"#十五、如何使用事件处理","children":[]},{"level":2,"title":"十六、vue提供的事件修饰符有哪些？","slug":"十六、vue提供的事件修饰符有哪些","link":"#十六、vue提供的事件修饰符有哪些","children":[]},{"level":2,"title":"二十一、如何定义自定义键修饰符","slug":"二十一、如何定义自定义键修饰符","link":"#二十一、如何定义自定义键修饰符","children":[]},{"level":2,"title":"二十五、v-model支持哪些修饰符？","slug":"二十五、v-model支持哪些修饰符","link":"#二十五、v-model支持哪些修饰符","children":[]},{"level":2,"title":"三十、如何使用v-model父子通信","slug":"三十、如何使用v-model父子通信","link":"#三十、如何使用v-model父子通信","children":[]},{"level":2,"title":"三十七、什么是非props属性？","slug":"三十七、什么是非props属性","link":"#三十七、什么是非props属性","children":[]},{"level":2,"title":"三十九、如何定义自定义组件v-model","slug":"三十九、如何定义自定义组件v-model","link":"#三十九、如何定义自定义组件v-model","children":[]},{"level":2,"title":"四十四、如何使路由器参数更改为反应式？","slug":"四十四、如何使路由器参数更改为反应式","link":"#四十四、如何使路由器参数更改为反应式","children":[]},{"level":2,"title":"五十四、什么是插件","slug":"五十四、什么是插件","link":"#五十四、什么是插件","children":[]},{"level":2,"title":"五十五、如何创建插件","slug":"五十五、如何创建插件","link":"#五十五、如何创建插件","children":[]},{"level":2,"title":"六十二、什么是自定义指令","slug":"六十二、什么是自定义指令","link":"#六十二、什么是自定义指令","children":[]},{"level":2,"title":"六十三、如何自定义化指令","slug":"六十三、如何自定义化指令","link":"#六十三、如何自定义化指令","children":[]}],"git":{"createdTime":1708749227000,"updatedTime":1708749227000,"contributors":[{"name":"hahg2000","email":"61403802+hahg2000@users.noreply.github.com","commits":1}]},"readingTime":{"minutes":14.16,"words":4248},"filePathRelative":"学习/前端/面试题一.md","localizedDate":"2024年2月24日","excerpt":"\\n<p>转载链接：https://github.com/sudheerj/vuejs-interview-questions#what-is-vuejs</p>\\n<h2>一、什么是Vue</h2>\\n<p>答：Vue.js 是一个开源的、渐进式框架，用于构建增量型的用户界面。Vue.js 专注于视图图层 <code>view layer</code> ，并易于与现有的项目和其他框架集成。</p>\\n<p>英文原文：</p>\\n<p><strong>Vue.js</strong> is an open-source, progressive Javascript framework for building user interfaces that aim to be incrementally adoptable. The core library of VueJS is focused on the <code>view layer</code> only, and is easy to pick up and integrate with other libraries or existing projects.</p>","autoDesc":true}');export{f as comp,y as data};
