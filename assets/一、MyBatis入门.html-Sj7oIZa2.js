import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as s,c as a,f as t}from"./app-BVqESlQI.js";const p={},e=t(`<h1 id="一、mybatis入门" tabindex="-1"><a class="header-anchor" href="#一、mybatis入门"><span>一、MyBatis入门</span></a></h1><img src="https://raw.githubusercontent.com/hahg2000/SSMPic/main/20210211142904.png" alt="MyBatis结构" style="zoom:60%;"><h2 id="_1-1-mybatis-的下载" tabindex="-1"><a class="header-anchor" href="#_1-1-mybatis-的下载"><span>1.1 MyBatis 的下载</span></a></h2><p>​ MyBatis 可以在 Github 官网下载：[ https://github.com/mybatis/mybatis-3 ]</p><h2 id="_1-2-mybatis-概述" tabindex="-1"><a class="header-anchor" href="#_1-2-mybatis-概述"><span>1.2 MyBatis 概述</span></a></h2><h3 id="_1-2-1-mybatis-简介" tabindex="-1"><a class="header-anchor" href="#_1-2-1-mybatis-简介"><span>1.2.1 MyBatis 简介</span></a></h3><p>​ MyBatis是一个优秀的基于Java的持久层框架，它内部封装了JDBC，使开发者 <strong>只需关注SQL语句本身</strong> ，而不用再花费精力去处理诸如注册驱动、创建 Connection 、配置 Statement 等繁杂过程。</p><p>​ Mybatis通过 <strong>xml 或注解</strong> 的方式将要执行的各种statement（statement、preparedStatement 等）配置起来，并通过Java对象和Statement中SQL的动态参数进行映射生成最终执行的SQL语句，最后由MyBatis框架执行SQL并将结果映射成Java对象并返回。</p><h3 id="_1-2-2-mybatis与hibernate" tabindex="-1"><a class="header-anchor" href="#_1-2-2-mybatis与hibernate"><span>1.2.2 MyBatis与Hibernate</span></a></h3><p>​ Hibernate框架是提供了全面的数据库封装机制的 “ 全自动 ” ORM，即实现了 POJO 和数据库表之间的映射，以及 SQL 的 <strong>自动生成和执行</strong> 。</p><p>​ 相对于此，MyBatis 只能算作是 “ 半自动 ” ORM。其着力点，是在 POJO 类与 SQL 语句之间的映射关系。也就是说，MyBatis <strong>并不会为程序员自动生成 SQL 语句</strong> 。具体的 SQL 需要程序员自己编写，然后通过 SQL 语句映射文件，将 SQL 所需的参数，以及返回的结果字段映射到指定 POJO 。因此，MyBatis 成为了 “ 全自动 ” ORM的一种有益补充。</p><p>​ 与Hibernate相比，MyBatis具有以下几个特点：</p><ol><li>在XML文件中配置SQL语句，实现了SQL语句与代码的分离，给程序的维护带来了很大便利。</li><li>因为需要程序员自己去编写SQL语句，程序员可以结合数据库自身的特点灵活控制SQL语句，因此能够实现比Hibernate等全自动ORM框架更高的查询效率，能够完成复杂查询。</li><li>简单，易于学习，易于使用，上手快。</li></ol><h2 id="_1-3-mybatis-体系结构" tabindex="-1"><a class="header-anchor" href="#_1-3-mybatis-体系结构"><span>1.3 MyBatis 体系结构</span></a></h2><img src="https://raw.githubusercontent.com/hahg2000/SSMPic/main/20210211183454.png" alt="MyBatis体系结构" style="zoom:60%;"><h2 id="_1-4-mybatis工作原理" tabindex="-1"><a class="header-anchor" href="#_1-4-mybatis工作原理"><span>1.4 MyBatis工作原理</span></a></h2><img src="https://raw.githubusercontent.com/hahg2000/SSMPic/main/20210211183604.png" alt="MyBatis工作原理" style="zoom:75%;"><h2 id="_1-5-第一个-mybatis-程序" tabindex="-1"><a class="header-anchor" href="#_1-5-第一个-mybatis-程序"><span>1.5 第一个 MyBatis 程序</span></a></h2><p>​ 需求：实现将 Student 信息写入到数据库里。</p><h3 id="_1-5-0-导入-jar-包" tabindex="-1"><a class="header-anchor" href="#_1-5-0-导入-jar-包"><span>1.5.0 导入 Jar 包</span></a></h3><ul><li>导入下载好的 MyBatis 中的子文件夹 lib 里的全部 Jar 包和核心 Jar 包 mybatis-x.x.x.jar；</li><li>导入 mysql-connector-java-x.x.xx.jar</li><li>导入 hamcrest-core-1.3.jar（因为需要用到 log4j）</li></ul><h3 id="_1-5-1-定义实体类-student" tabindex="-1"><a class="header-anchor" href="#_1-5-1-定义实体类-student"><span>1.5.1 定义实体类 Student</span></a></h3><p><strong>Student.java</strong></p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token punctuation">{</span>
	<span class="token keyword">public</span> <span class="token class-name">Integer</span> id<span class="token punctuation">;</span>
	<span class="token keyword">public</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>
	<span class="token keyword">public</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>
	<span class="token keyword">public</span> <span class="token keyword">double</span> scroe<span class="token punctuation">;</span>

	<span class="token comment">// 有参和无参构造器</span>
	<span class="token comment">// getter 和 setter</span>
	<span class="token comment">// toString()</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container tip"><p class="hint-container-title">提示</p><p>id 属性的类型是 Integer，是为了便于判空；</p><p><strong>成员变量</strong> 是类私有的，只要有了 getter 和 setter ，该成员变量就变成了 <strong>属性</strong>，对其他类公开。</p></div><h3 id="_1-5-2-在数据库里创建表" tabindex="-1"><a class="header-anchor" href="#_1-5-2-在数据库里创建表"><span>1.5.2 在数据库里创建表</span></a></h3><img src="https://raw.githubusercontent.com/hahg2000/SSMPic/main/20210212112617.png" alt="student数据库表" style="zoom:80%;"><div class="hint-container warning"><p class="hint-container-title">注意</p><p>在创建数据库表时，字段名要与属性名一致。（不一致时，需要用过 resultMap 解决）</p></div><h3 id="_1-5-3-定义-dao-接口" tabindex="-1"><a class="header-anchor" href="#_1-5-3-定义-dao-接口"><span>1.5.3 定义 dao 接口</span></a></h3><p><strong>IStudentDao.java</strong>：定义 dao 接口，用于后面实现将学生信息插入数据库的操作。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IStudentDao</span> <span class="token punctuation">{</span>
	<span class="token keyword">void</span> <span class="token function">insertStudent</span><span class="token punctuation">(</span><span class="token class-name">Student</span> student<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_1-5-4-定义映射文件" tabindex="-1"><a class="header-anchor" href="#_1-5-4-定义映射文件"><span>1.5.4 定义映射文件</span></a></h3><p>​ 映射文件主要完成 Dao 层中 SQL 语句的映射。映射文件名随意，一般为 mapper.xml。</p><p>​ 映射文件需要约束文件来解释，约束文件在 mybatis-x.x.x.jar 的 org.apache.ibatis.builder.xml 包里，如下图所示。</p><img src="https://raw.githubusercontent.com/hahg2000/SSMPic/main/1613102688(1).png" style="zoom:80%;"><p><strong>mapper.xml</strong>：而在映射文件中需要指定约束文件。</p><ul><li>namespace 属性为当前映射的名字；</li><li>因为执行插入操作，所以需要使用 &lt;insert/&gt; 标签；其属性 id 会在调用 sql 语句时使用；属性 parameterType 是传进 sql 语句的值的类型；然后可以使用 ” #{} “ 符号来取出 bean 里的属性。</li></ul><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code><span class="token prolog">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span>
<span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">mapper</span>
 <span class="token name">PUBLIC</span> <span class="token string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span>
 <span class="token string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">namespace</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>test<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>insert</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>insertStudent<span class="token punctuation">&quot;</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>com.hahg.beans.Student<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
		insert into student(name,age,score) values (#{name},#{age},#{score})
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>insert</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mapper</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_1-5-4-配置主配置文件" tabindex="-1"><a class="header-anchor" href="#_1-5-4-配置主配置文件"><span>1.5.4 配置主配置文件</span></a></h3><ul><li><p>&lt;settings/&gt; 标签用于使用 Log4j2 日志输出技术</p></li><li><p>&lt;environments/&gt; 标签里可以有 <strong>多个</strong> &lt;environment/&gt; 子标签，用于在多个环境里切换。该标签的 default 属性用于选择当前使用的环境配置。</p></li><li><p>&lt;transactionManager/&gt; 标签为事务管理器，其属性 type 若为 “ JDBC ” 则代表使用 JDBC 默认的事务管理；若为 “ Manager ” ，则代表使用第三方事务管理。</p></li><li><p>&lt;dataSource/&gt; 标签的 type 属性的值 “ POOLED ” 代表使用数据库连接池。</p></li><li><p>&lt;property/&gt; 标签用于配置连接数据库的四要素—— driver、url、username、password。</p><ul><li>url 的值中的 “ jdbc:mysql:<span style="color:red;">///</span>test …… ” ；三个 “ /// ” 是默认连接地址的缩写—— //127.0.0.1:3306/</li><li>其中的 “ &amp; ” 连接字符需要使用 “ &amp;amp; &quot; 来表示。</li></ul></li></ul><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code><span class="token prolog">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span>
<span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">configuration</span>
 <span class="token name">PUBLIC</span> <span class="token string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span>
 <span class="token string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>settings</span><span class="token punctuation">&gt;</span></span>
		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>setting</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>logImpl<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>LOG4J2<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>settings</span><span class="token punctuation">&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>environments</span> <span class="token attr-name">default</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>development<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>environment</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>development<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
			<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>transactionManager</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>JDBC<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
			<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dataSource</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>POOLED<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
				<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>driver<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>com.mysql.cj.jdbc.Driver<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
				<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>url<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>jdbc:mysql:///test?useUnicode=true<span class="token entity named-entity" title="&amp;">&amp;amp;</span>characterEncoding=UTF-8<span class="token entity named-entity" title="&amp;">&amp;amp;</span>serverTimezone=UTC<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
				<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>username<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>root<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
				<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>password<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>password<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
			<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dataSource</span><span class="token punctuation">&gt;</span></span>
		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>environment</span><span class="token punctuation">&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>environments</span><span class="token punctuation">&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mappers</span><span class="token punctuation">&gt;</span></span>
		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">resource</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>com/hahg/dao/mapper.xml<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mappers</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_1-5-5-定义-dao-接口的实现类" tabindex="-1"><a class="header-anchor" href="#_1-5-5-定义-dao-接口的实现类"><span>1.5.5 定义 dao 接口的实现类</span></a></h3><p><strong>StudentDaoImpl.java</strong>：实现插入到数据库的操作。</p><ul><li>第 9 行加载主配置文件；</li><li>第 11 行创建 SqlSessionFactory 对象；</li><li>第 13 行创建 SqlSession 对象；</li><li>第 15 行调用 insert() 方法执行插入操作，第一个参数为映射文件中执行语句的 id 名字，若有两个配置文件，且它们中有 id 名字一致时，需要在前面加上映射的名字例如， test.insertStudent ；第二个参数为需要插入的对象；</li><li>第 17 行调用 commit() 方法，提交插入请求。</li></ul><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StudentDaoImpl</span> <span class="token keyword">implements</span> <span class="token class-name">IStudentDao</span> <span class="token punctuation">{</span>

	<span class="token keyword">private</span> <span class="token class-name">SqlSession</span> sqlSession<span class="token punctuation">;</span>

	<span class="token annotation punctuation">@Override</span>
	<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">insertStudent</span><span class="token punctuation">(</span><span class="token class-name">Student</span> student<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">try</span> <span class="token punctuation">{</span>
			<span class="token comment">// 1. 加载配置文件</span>
			<span class="token class-name">InputStream</span> inputStream <span class="token operator">=</span> <span class="token class-name">Resources</span><span class="token punctuation">.</span><span class="token function">getResourceAsStream</span><span class="token punctuation">(</span><span class="token string">&quot;mybatis.xml&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token comment">// 2. 创建SqlSessionFactory对象</span>
			<span class="token class-name">SqlSessionFactory</span> sqlSessionFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SqlSessionFactoryBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span>inputStream<span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token comment">// 3. 创建SqlSession对象</span>
			sqlSession <span class="token operator">=</span> sqlSessionFactory<span class="token punctuation">.</span><span class="token function">openSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token comment">// 4. 执行相关操作</span>
			sqlSession<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token string">&quot;insertStudent&quot;</span><span class="token punctuation">,</span> student<span class="token punctuation">)</span><span class="token punctuation">;</span>
			
			sqlSession<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token comment">// TODO Auto-generated catch block</span>
			e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span><span class="token keyword">finally</span> <span class="token punctuation">{</span>
			<span class="token keyword">if</span><span class="token punctuation">(</span>sqlSession<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
				sqlSession<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_1-5-6-定义测试类" tabindex="-1"><a class="header-anchor" href="#_1-5-6-定义测试类"><span>1.5.6 定义测试类</span></a></h3><p>MyTest.java：使用 junit 测试来运行方法。这里创建了实现类的对象和 Student 类的对象，并调用其中的 insertStudent(student) 方法。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyTest</span> <span class="token punctuation">{</span>

	<span class="token keyword">private</span> <span class="token class-name">IStudentDao</span> dao<span class="token punctuation">;</span>
	
	<span class="token annotation punctuation">@Before</span>
	<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">before</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		dao<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">StudentDaoImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	
	<span class="token annotation punctuation">@Test</span>
	<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testInsert</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token class-name">Student</span> student <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">&quot;张三&quot;</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">,</span> <span class="token number">93.5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		dao<span class="token punctuation">.</span><span class="token function">insertStudent</span><span class="token punctuation">(</span>student<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_1-5-7-添加日志控制文件" tabindex="-1"><a class="header-anchor" href="#_1-5-7-添加日志控制文件"><span>1.5.7 添加日志控制文件</span></a></h3><p>log4j2.xml：新建该文件在 src 根目录下，并添加以下代码；本例的日志只需要在控制台输出，所以 &lt;appenders/&gt; 的子标签只有 &lt;Console/&gt; 标签。</p><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code><span class="token prolog">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span> <span class="token attr-name">status</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>OFF<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appenders</span><span class="token punctuation">&gt;</span></span>
		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Console</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>myConsole<span class="token punctuation">&quot;</span></span> <span class="token attr-name">target</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>SYSTEM_OUT<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
			<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>PatternLayout</span> <span class="token attr-name">pattern</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>[%-5p][%c %L] %m%n<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Console</span><span class="token punctuation">&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>appenders</span><span class="token punctuation">&gt;</span></span>
	
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>loggers</span><span class="token punctuation">&gt;</span></span>		
		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>root</span> <span class="token attr-name">level</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>debug<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
			<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender-ref</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>myConsole<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>root</span><span class="token punctuation">&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>loggers</span><span class="token punctuation">&gt;</span></span>
	
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_1-5-8-日志输出结果" tabindex="-1"><a class="header-anchor" href="#_1-5-8-日志输出结果"><span>1.5.8 日志输出结果</span></a></h3><img src="https://raw.githubusercontent.com/hahg2000/SSMPic/main/log4j2日志输出结果.png" style="zoom:90%;"><h2 id="_1-6-使用工具类" tabindex="-1"><a class="header-anchor" href="#_1-6-使用工具类"><span>1.6 使用工具类</span></a></h2><p>​ 由于每一次执行 SqlSession 的方法，均需首先获取到该对象。而 SqlSession 对象的获取比较繁琐，所以可以将获取 SqlSession 对象定义为一个工具类方法。</p><p>​ SqlSession 对象是通过 SqlSessionFactory 对象创建的。由于 SqlSessionFactory 类为重量级对象，创建和销毁都极耗费时间，且为线程安全的，所以可以将 SqlSessionFactory 对象定义为单例的。</p><p>​ 线程安全的是指该对象的属性是不可以修改的，若有可修改的属性则线程不安全。</p><h3 id="_1-6-1-创建工具类" tabindex="-1"><a class="header-anchor" href="#_1-6-1-创建工具类"><span>1.6.1 创建工具类</span></a></h3><p><strong>MyBatisUtils.java</strong>：因为 SqlSessionFactory 对象为单例的，所以将其设为类的静态成员变量，并在调用 getSqlSession() 方法时判断是否为空，若为空才进行创建。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyBatisUtils</span> <span class="token punctuation">{</span>
	<span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">SqlSessionFactory</span> sqlSessionFactory<span class="token punctuation">;</span>

	<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">SqlSession</span> <span class="token function">getSqlSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">try</span> <span class="token punctuation">{</span>
			<span class="token keyword">if</span> <span class="token punctuation">(</span>sqlSessionFactory<span class="token operator">==</span><span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
				<span class="token class-name">InputStream</span> inputStream <span class="token operator">=</span> <span class="token class-name">Resources</span><span class="token punctuation">.</span><span class="token function">getResourceAsStream</span><span class="token punctuation">(</span><span class="token string">&quot;mybatis.xml&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
				sqlSessionFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SqlSessionFactoryBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span>inputStream<span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
			e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
		<span class="token keyword">return</span> sqlSessionFactory<span class="token punctuation">.</span><span class="token function">openSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_1-6-2-修改实现类" tabindex="-1"><a class="header-anchor" href="#_1-6-2-修改实现类"><span>1.6.2 修改实现类</span></a></h3><p><strong>StudentDaoImpl.java</strong>：在实现类中直接调用工具类的静态方法获取 SqlSession 对象。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StudentDaoImpl</span> <span class="token keyword">implements</span> <span class="token class-name">IStudentDao</span> <span class="token punctuation">{</span>

	<span class="token keyword">private</span> <span class="token class-name">SqlSession</span> sqlSession<span class="token punctuation">;</span>

	<span class="token annotation punctuation">@Override</span>
	<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">insertStudent</span><span class="token punctuation">(</span><span class="token class-name">Student</span> student<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">try</span> <span class="token punctuation">{</span>
			sqlSession<span class="token operator">=</span><span class="token class-name">MyBatisUtils</span><span class="token punctuation">.</span><span class="token function">getSqlSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			sqlSession<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token string">&quot;insertStudent&quot;</span><span class="token punctuation">,</span> student<span class="token punctuation">)</span><span class="token punctuation">;</span>
			
			sqlSession<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span><span class="token keyword">finally</span> <span class="token punctuation">{</span>
			<span class="token keyword">if</span><span class="token punctuation">(</span>sqlSession<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
				sqlSession<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_1-7-使用属性文件读取-db-连接四要素" tabindex="-1"><a class="header-anchor" href="#_1-7-使用属性文件读取-db-连接四要素"><span>1.7 使用属性文件读取 DB 连接四要素</span></a></h2><h3 id="_1-7-1-创建属性文件" tabindex="-1"><a class="header-anchor" href="#_1-7-1-创建属性文件"><span>1.7.1 创建属性文件</span></a></h3><p>​ 在 src 的根目录下创建 jdbc.properties 属性文件，并将 DB 连接四要素写入文件。需要注意的是要将 “ &amp;amp; &quot; 改为 ” &amp; “。</p><div class="language-properties line-numbers-mode" data-ext="properties" data-title="properties"><pre class="language-properties"><code><span class="token key attr-name">jdbc.driver</span><span class="token punctuation">=</span><span class="token value attr-value">com.mysql.cj.jdbc.Driver</span>
<span class="token key attr-name">jdbc.url</span><span class="token punctuation">=</span><span class="token value attr-value">jdbc:mysql:///test?useUnicode=true&amp;characterEncoding=UTF-8&amp;serverTimezone=UTC</span>
<span class="token key attr-name">jdbc.user</span><span class="token punctuation">=</span><span class="token value attr-value">root</span>
<span class="token key attr-name">jdbc.password</span><span class="token punctuation">=</span><span class="token value attr-value">password</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_1-7-2-修改主配置文件" tabindex="-1"><a class="header-anchor" href="#_1-7-2-修改主配置文件"><span>1.7.2 修改主配置文件</span></a></h3><p><strong>mybatis.xml</strong>：</p><ul><li>第 7行，在 &lt;setting/&gt; 标签前加入 &lt;properties/&gt; 来注册配置文件；</li><li>第 18 至 21 行，在 &lt;property/&gt; 标签里的 value 属性，需要使用 ” \${ } “ 占位符来引用配置文件。</li></ul><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code><span class="token prolog">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span>
<span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">configuration</span>
 <span class="token name">PUBLIC</span> <span class="token string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span>
 <span class="token string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">&gt;</span></span>
	<span class="token comment">&lt;!-- 注册配置文件 --&gt;</span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span> <span class="token attr-name">resource</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>jdbc.properties<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
	
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>settings</span><span class="token punctuation">&gt;</span></span>
		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>setting</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>logImpl<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>LOG4J2<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>settings</span><span class="token punctuation">&gt;</span></span>

	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>environments</span> <span class="token attr-name">default</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>development<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>environment</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>development<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
			<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>transactionManager</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>JDBC<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
			<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dataSource</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>POOLED<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
				<span class="token comment">&lt;!-- 使用占位符来引用jdbc配置文件 --&gt;</span>
				<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>driver<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>\${jdbc.driver}<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
				<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>url<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>\${jdbc.url}<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
				<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>username<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>\${jdbc.user}<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
				<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>password<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>\${jdbc.password}<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
			<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dataSource</span><span class="token punctuation">&gt;</span></span>
		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>environment</span><span class="token punctuation">&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>environments</span><span class="token punctuation">&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mappers</span><span class="token punctuation">&gt;</span></span>
		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">resource</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>com/hahg/dao/mapper.xml<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mappers</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_1-8-源码分析" tabindex="-1"><a class="header-anchor" href="#_1-8-源码分析"><span>1.8 源码分析</span></a></h2><h3 id="_1-8-1-输入流的关闭" tabindex="-1"><a class="header-anchor" href="#_1-8-1-输入流的关闭"><span>1.8.1 输入流的关闭</span></a></h3><div class="hint-container tip"><p class="hint-container-title">提示</p><p>在查看的源码时，Alt + ← / → 可以切换源代码界面；Ctrl + PgUp 可以切换标签页</p></div><p><strong>SqlSessionFactoryBuilder.class</strong>：之前使用</p><p>sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream) 语句，</p><p>由下源码第 2 行可知，这个语句会调用 build( inputStream, null, null ) <strong>三参数</strong> 方法。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">SqlSessionFactory</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token class-name">InputStream</span> inputStream<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token function">build</span><span class="token punctuation">(</span>inputStream<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这时跟进其 bulid 方法源码查看其实现方式，在第 10 行代码自动关闭了输入流，所以在工具类使用输入流对象完毕后，<strong>不用手工进行关闭</strong>。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">SqlSessionFactory</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token class-name">InputStream</span> inputStream<span class="token punctuation">,</span> <span class="token class-name">String</span> environment<span class="token punctuation">,</span> <span class="token class-name">Properties</span> properties<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
      <span class="token class-name">XMLConfigBuilder</span> parser <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLConfigBuilder</span><span class="token punctuation">(</span>inputStream<span class="token punctuation">,</span> environment<span class="token punctuation">,</span> properties<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">return</span> <span class="token function">build</span><span class="token punctuation">(</span>parser<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">throw</span> <span class="token class-name">ExceptionFactory</span><span class="token punctuation">.</span><span class="token function">wrapException</span><span class="token punctuation">(</span><span class="token string">&quot;Error building SqlSession.&quot;</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
      <span class="token class-name">ErrorContext</span><span class="token punctuation">.</span><span class="token function">instance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">try</span> <span class="token punctuation">{</span>
        inputStream<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// Intentionally ignore. Prefer previous error.</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_1-8-2-sqlsession-的创建" tabindex="-1"><a class="header-anchor" href="#_1-8-2-sqlsession-的创建"><span>1.8.2 SqlSession 的创建</span></a></h3><p>​ 之前使用了 sqlSessionFactory.openSession(); 这个语句。</p><p>​ SqlSession 对象的创建，需要使用 SqlSessionFactory 接口对象的 openSession() 方法。而 SqlSessionFactory 接口的实现类为 DefaultSqlSessionFactory。</p><p>​ 这时跟进 DefaultSqlSessionFactory 源码。</p><p><strong>DefaultSqlSessionFactory.class</strong>：下面为 openSession() 方法源码，可知在 openSession() 方法其调用了另一个 openSessionFromDataSource(configuration.getDefaultExecutorType(), null, false) 方法。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DefaultSqlSessionFactory</span> <span class="token keyword">implements</span> <span class="token class-name">SqlSessionFactory</span> <span class="token punctuation">{</span>
    
  <span class="token annotation punctuation">@Override</span>
  <span class="token keyword">public</span> <span class="token class-name">SqlSession</span> <span class="token function">openSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token function">openSessionFromDataSource</span><span class="token punctuation">(</span>configuration<span class="token punctuation">.</span><span class="token function">getDefaultExecutorType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>跟进 openSessionFromDataSource 方法，发现其在同一个类，下面来分析源码：</p><ul><li>第 4 行获取 environment 环境变量；</li><li>第 5 行根据 environment 变量来获取事务工厂对象 ；</li><li>第 6 行利用事务工厂对象来新建事务；</li><li>第 7 行使用配置文件对象来创建执行器对象，将来用于执行映射文件中的 SQL 语句；</li><li>第 8 行使用【 configuration 配置对象、executor 执行器对象、和是否自动提交选择】这三个参数，创建了默认 SQL 事务对象，并将其返回。因为由上面代码可知的第三个形参传了 false 进来，所以没有自动提交，则需要自己调用 sqlSession.commit() 。</li></ul><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code> <span class="token keyword">private</span> <span class="token class-name">SqlSession</span> <span class="token function">openSessionFromDataSource</span><span class="token punctuation">(</span><span class="token class-name">ExecutorType</span> execType<span class="token punctuation">,</span> <span class="token class-name">TransactionIsolationLevel</span> level<span class="token punctuation">,</span> <span class="token keyword">boolean</span> autoCommit<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">Transaction</span> tx <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
      <span class="token keyword">final</span> <span class="token class-name">Environment</span> environment <span class="token operator">=</span> configuration<span class="token punctuation">.</span><span class="token function">getEnvironment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">final</span> <span class="token class-name">TransactionFactory</span> transactionFactory <span class="token operator">=</span> <span class="token function">getTransactionFactoryFromEnvironment</span><span class="token punctuation">(</span>environment<span class="token punctuation">)</span><span class="token punctuation">;</span>
      tx <span class="token operator">=</span> transactionFactory<span class="token punctuation">.</span><span class="token function">newTransaction</span><span class="token punctuation">(</span>environment<span class="token punctuation">.</span><span class="token function">getDataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> level<span class="token punctuation">,</span> autoCommit<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">final</span> <span class="token class-name">Executor</span> executor <span class="token operator">=</span> configuration<span class="token punctuation">.</span><span class="token function">newExecutor</span><span class="token punctuation">(</span>tx<span class="token punctuation">,</span> execType<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">DefaultSqlSession</span><span class="token punctuation">(</span>configuration<span class="token punctuation">,</span> executor<span class="token punctuation">,</span> autoCommit<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">closeTransaction</span><span class="token punctuation">(</span>tx<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// may have fetched a connection so lets call close()</span>
      <span class="token keyword">throw</span> <span class="token class-name">ExceptionFactory</span><span class="token punctuation">.</span><span class="token function">wrapException</span><span class="token punctuation">(</span><span class="token string">&quot;Error opening session.  Cause: &quot;</span> <span class="token operator">+</span> e<span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
      <span class="token class-name">ErrorContext</span><span class="token punctuation">.</span><span class="token function">instance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_1-8-3-增删改的执行" tabindex="-1"><a class="header-anchor" href="#_1-8-3-增删改的执行"><span>1.8.3 增删改的执行</span></a></h3><p>之前使用了 sqlSession.insert(&quot;insertStudent&quot;, student); 这个语句，对于 SqlSession 的</p><ul><li>insert( String statement, Object parameter )</li><li>delete( String statement, Object parameter )</li><li>update( String statement ) 方法</li></ul><p>其底层均是调用执行了 update( String statement, Object parameter ) 双参数方法。</p><p>跟进 update 双参数方法 第 19 ~ 28 行中，</p><ul><li><p>第 21 行将 dirty 这个变量设为 true；</p></li><li><p>第 22 行中调用 configuration 对象的 getMappedStatement(statement) 方法，这个方法是根据形参即 映射文件中 Sql 的 id 名字 ，在映射文件中获取到了 sql 执行语句；</p></li><li><p>并在第 23 行中使用 executor 执行器对象来执行更新语句。</p></li></ul><p><strong>DefaultSqlSession.class</strong>：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DefaultSqlSession</span> <span class="token keyword">implements</span> <span class="token class-name">SqlSession</span> <span class="token punctuation">{</span>
    
  <span class="token annotation punctuation">@Override</span>
  <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">insert</span><span class="token punctuation">(</span><span class="token class-name">String</span> statement<span class="token punctuation">,</span> <span class="token class-name">Object</span> parameter<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token function">update</span><span class="token punctuation">(</span>statement<span class="token punctuation">,</span> parameter<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>  
    
  <span class="token annotation punctuation">@Override</span>
  <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token class-name">String</span> statement<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token function">update</span><span class="token punctuation">(</span>statement<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
    
  <span class="token annotation punctuation">@Override</span>
  <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">delete</span><span class="token punctuation">(</span><span class="token class-name">String</span> statement<span class="token punctuation">,</span> <span class="token class-name">Object</span> parameter<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token function">update</span><span class="token punctuation">(</span>statement<span class="token punctuation">,</span> parameter<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
    
  <span class="token annotation punctuation">@Override</span>
  <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token class-name">String</span> statement<span class="token punctuation">,</span> <span class="token class-name">Object</span> parameter<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
      dirty <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
      <span class="token class-name">MappedStatement</span> ms <span class="token operator">=</span> configuration<span class="token punctuation">.</span><span class="token function">getMappedStatement</span><span class="token punctuation">(</span>statement<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">return</span> executor<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>ms<span class="token punctuation">,</span> <span class="token function">wrapCollection</span><span class="token punctuation">(</span>parameter<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">throw</span> <span class="token class-name">ExceptionFactory</span><span class="token punctuation">.</span><span class="token function">wrapException</span><span class="token punctuation">(</span><span class="token string">&quot;Error updating database.  Cause: &quot;</span> <span class="token operator">+</span> e<span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
      <span class="token class-name">ErrorContext</span><span class="token punctuation">.</span><span class="token function">instance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_1-8-4-sqlsession-的提交" tabindex="-1"><a class="header-anchor" href="#_1-8-4-sqlsession-的提交"><span>1.8.4 SqlSession 的提交</span></a></h3><p>​ 在之前使用了 sqlSession.commit() 这个语句；</p><ul><li><p>根据第 3 ~ 5 行源码可知，本质就是调用了 commit(false) 这个方法。</p></li><li><p>在第 10 行中需要跟进 isCommitOrRollbackRequired(force) 这个方法。这个方法的源码在 19 至 21 行。其返回了一个逻辑语句的布尔值。</p><ul><li>在 1.8.2 可知 autoCommit 是 false；所以 !autoCommit 是 true；</li><li>根据 1.8.3 可知在执行插入语句后，dirty 是 true；</li><li>所以该方法返回的是 true</li></ul></li><li><p>已知执行 executor.commit(true) 语句；</p><ul><li>继续跟进到 BaseExecutor.class 里，在该类代码的第 11 行可以看见事务的提交。</li></ul></li><li><p>在 11 行中，因为提交了事务，数据库数据同步了，所以 dirty 就改成了 false。</p></li></ul><p><strong>DefaultSqlSession.class</strong>：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DefaultSqlSession</span> <span class="token keyword">implements</span> <span class="token class-name">SqlSession</span> <span class="token punctuation">{</span> 
  <span class="token annotation punctuation">@Override</span>
  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">commit</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token annotation punctuation">@Override</span>
  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">commit</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> force<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
      executor<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token function">isCommitOrRollbackRequired</span><span class="token punctuation">(</span>force<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      dirty <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">throw</span> <span class="token class-name">ExceptionFactory</span><span class="token punctuation">.</span><span class="token function">wrapException</span><span class="token punctuation">(</span><span class="token string">&quot;Error committing transaction.  Cause: &quot;</span> <span class="token operator">+</span> e<span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
      <span class="token class-name">ErrorContext</span><span class="token punctuation">.</span><span class="token function">instance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
    
  <span class="token keyword">private</span> <span class="token keyword">boolean</span> <span class="token function">isCommitOrRollbackRequired</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> force<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token operator">!</span>autoCommit <span class="token operator">&amp;&amp;</span> dirty<span class="token punctuation">)</span> <span class="token operator">||</span> force<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>BaseExecutor.class</strong>：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">BaseExecutor</span> <span class="token keyword">implements</span> <span class="token class-name">Executor</span> <span class="token punctuation">{</span>
    
  <span class="token annotation punctuation">@Override</span>
  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">commit</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> required<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">SQLException</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>closed<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ExecutorException</span><span class="token punctuation">(</span><span class="token string">&quot;Cannot commit, transaction is already closed&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">clearLocalCache</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">flushStatements</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>required<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      transaction<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_1-8-5-sqlsession-的关闭" tabindex="-1"><a class="header-anchor" href="#_1-8-5-sqlsession-的关闭"><span>1.8.5 SqlSession 的关闭</span></a></h3><p>​ 之前在 finally 块中使用 sqlSession.close() 这个语句，这个语句依旧是 DefaultSqlSession 类的一个方法。</p><ul><li>第 6 行，执行了 isCommitOrRollbackRequired(force) 这个方法 <ul><li>!autoCommit 根据上面可知是 true</li><li>因为 1.8.4 执行了事务的提交并将 dirty 改成了 false，所以 (!autoCommit &amp;&amp; dirty) 为 false</li><li>根据第 6 行传进来的值为 false，所以 (!autoCommit &amp;&amp; dirty) || force = false || false = false，最后结果为 false</li></ul></li><li>第 10 行为事务的关闭，第 17 ~ 21 行释放各种资源并将关闭标记置为 true。</li></ul><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DefaultSqlSession</span> <span class="token keyword">implements</span> <span class="token class-name">SqlSession</span> <span class="token punctuation">{</span>
    
  <span class="token annotation punctuation">@Override</span>
  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
      executor<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token function">isCommitOrRollbackRequired</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token function">closeCursors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      dirty <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
      <span class="token class-name">ErrorContext</span><span class="token punctuation">.</span><span class="token function">instance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
    
   <span class="token keyword">private</span> <span class="token keyword">boolean</span> <span class="token function">isCommitOrRollbackRequired</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> force<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token operator">!</span>autoCommit <span class="token operator">&amp;&amp;</span> dirty<span class="token punctuation">)</span> <span class="token operator">||</span> force<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>BaseExecutor.class：</strong></p><ul><li>现在跟进第 6 行的 executor.close( isCommitOrRollbackRequired(false) ) <ul><li>在 BaseExecutor 类的代码的第 7 行执行 rollback( forceRollback ) 方法，forceRollback 的值为 false。该方法代码在 25 ~ 37 行，在该方法的第 31 ~ 34 行的 finally 块中，因为传进来的参数为 false，即 required 为 false，所以不执行事务回滚。</li><li>若没有 1.8.4 SqlSession 的提交，则 dirty 这个变量为 true；则 isCommitOrRollbackRequired(boolean force) 这个方法将返回 true，最后会执行事务回滚。</li></ul></li></ul><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">BaseExecutor</span> <span class="token keyword">implements</span> <span class="token class-name">Executor</span> <span class="token punctuation">{</span>

  <span class="token annotation punctuation">@Override</span>
  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">close</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> forceRollback<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
      <span class="token keyword">try</span> <span class="token punctuation">{</span>
        <span class="token function">rollback</span><span class="token punctuation">(</span>forceRollback<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>transaction <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          transaction<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// Ignore. There&#39;s nothing that can be done at this point.</span>
      log<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">&quot;Unexpected exception on closing transaction.  Cause: &quot;</span> <span class="token operator">+</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
      transaction <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
      deferredLoads <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
      localCache <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
      localOutputParameterCache <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
      closed <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
    
  <span class="token annotation punctuation">@Override</span>
  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">rollback</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> required<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">SQLException</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>closed<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">try</span> <span class="token punctuation">{</span>
        <span class="token function">clearLocalCache</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">flushStatements</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>required<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          transaction<span class="token punctuation">.</span><span class="token function">rollback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_1-9-别名" tabindex="-1"><a class="header-anchor" href="#_1-9-别名"><span>1.9 别名</span></a></h2><p>​ 在一个映射文件一般对应数据库的一个表和一个 bean 对象。所以可以在使用缩写来表示，这样更简洁，不过需要修改配置文件。</p><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code><span class="token comment">&lt;!-- 原始写法  --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>insert</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>insertStudent<span class="token punctuation">&quot;</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>com.hahg.beans.Student<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    
<span class="token comment">&lt;!-- 第一种改法 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>insert</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>insertStudent<span class="token punctuation">&quot;</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>Student<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>    
<span class="token comment">&lt;!-- 第二种改法 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>insert</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>insertStudent<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>    
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>​ 配置文件修改成以下代码，使用 &lt;package/&gt; 标签。使用该标签会将该包中所有实体类的简单类名指定为别名，写法简单方便。</p><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code><span class="token comment">&lt;!-- 注册配置文件 --&gt;</span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span> <span class="token attr-name">resource</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>jdbc.properties<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>

	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>settings</span><span class="token punctuation">&gt;</span></span>
		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>setting</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>logImpl<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>LOG4J2<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>settings</span><span class="token punctuation">&gt;</span></span>

<span class="token comment">&lt;!-- 增加下面的代码 --&gt;</span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>typeAliases</span><span class="token punctuation">&gt;</span></span>
		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>package</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>com.hahg.beans<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>typeAliases</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>​ 也可以通过 &lt;typeAlias/&gt; 标签一个个指定别名，好处是可以任意指定别名。坏处是必须逐个指定，比较繁琐。</p><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>typeAliases</span><span class="token punctuation">&gt;</span></span>
		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>typeAlias</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>com.hahg.beans.Student<span class="token punctuation">&quot;</span></span> <span class="token attr-name">alias</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>Student<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>typeAliases</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,118),o=[e];function l(c,i){return s(),a("div",null,o)}const k=n(p,[["render",l],["__file","一、MyBatis入门.html.vue"]]),d=JSON.parse('{"path":"/%E5%AD%A6%E4%B9%A0/%E5%90%8E%E7%AB%AF/SSM%E6%A1%86%E6%9E%B6/MyBatis3/%E4%B8%80%E3%80%81MyBatis%E5%85%A5%E9%97%A8.html","title":"一、MyBatis入门","lang":"zh-CN","frontmatter":{"tags":["SSM框架","学习","MyBatis"],"readingTime":true,"autoNext":"二、单表的 CURD 操作","description":"一、MyBatis入门 MyBatis结构 1.1 MyBatis 的下载 ​ MyBatis 可以在 Github 官网下载：[ https://github.com/mybatis/mybatis-3 ] 1.2 MyBatis 概述 1.2.1 MyBatis 简介 ​ MyBatis是一个优秀的基于Java的持久层框架，它内部封装了JDBC，使...","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/%E5%AD%A6%E4%B9%A0/%E5%90%8E%E7%AB%AF/SSM%E6%A1%86%E6%9E%B6/MyBatis3/%E4%B8%80%E3%80%81MyBatis%E5%85%A5%E9%97%A8.html"}],["meta",{"property":"og:site_name","content":"博客演示"}],["meta",{"property":"og:title","content":"一、MyBatis入门"}],["meta",{"property":"og:description","content":"一、MyBatis入门 MyBatis结构 1.1 MyBatis 的下载 ​ MyBatis 可以在 Github 官网下载：[ https://github.com/mybatis/mybatis-3 ] 1.2 MyBatis 概述 1.2.1 MyBatis 简介 ​ MyBatis是一个优秀的基于Java的持久层框架，它内部封装了JDBC，使..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-02-24T04:33:47.000Z"}],["meta",{"property":"article:author","content":"Mr.Hope"}],["meta",{"property":"article:tag","content":"SSM框架"}],["meta",{"property":"article:tag","content":"学习"}],["meta",{"property":"article:tag","content":"MyBatis"}],["meta",{"property":"article:modified_time","content":"2024-02-24T04:33:47.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"一、MyBatis入门\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-02-24T04:33:47.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr.Hope\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":2,"title":"1.1 MyBatis 的下载","slug":"_1-1-mybatis-的下载","link":"#_1-1-mybatis-的下载","children":[]},{"level":2,"title":"1.2 MyBatis 概述","slug":"_1-2-mybatis-概述","link":"#_1-2-mybatis-概述","children":[{"level":3,"title":"1.2.1 MyBatis 简介","slug":"_1-2-1-mybatis-简介","link":"#_1-2-1-mybatis-简介","children":[]},{"level":3,"title":"1.2.2 MyBatis与Hibernate","slug":"_1-2-2-mybatis与hibernate","link":"#_1-2-2-mybatis与hibernate","children":[]}]},{"level":2,"title":"1.3 MyBatis 体系结构","slug":"_1-3-mybatis-体系结构","link":"#_1-3-mybatis-体系结构","children":[]},{"level":2,"title":"1.4 MyBatis工作原理","slug":"_1-4-mybatis工作原理","link":"#_1-4-mybatis工作原理","children":[]},{"level":2,"title":"1.5 第一个 MyBatis 程序","slug":"_1-5-第一个-mybatis-程序","link":"#_1-5-第一个-mybatis-程序","children":[{"level":3,"title":"1.5.0 导入 Jar 包","slug":"_1-5-0-导入-jar-包","link":"#_1-5-0-导入-jar-包","children":[]},{"level":3,"title":"1.5.1 定义实体类 Student","slug":"_1-5-1-定义实体类-student","link":"#_1-5-1-定义实体类-student","children":[]},{"level":3,"title":"1.5.2 在数据库里创建表","slug":"_1-5-2-在数据库里创建表","link":"#_1-5-2-在数据库里创建表","children":[]},{"level":3,"title":"1.5.3 定义 dao 接口","slug":"_1-5-3-定义-dao-接口","link":"#_1-5-3-定义-dao-接口","children":[]},{"level":3,"title":"1.5.4 定义映射文件","slug":"_1-5-4-定义映射文件","link":"#_1-5-4-定义映射文件","children":[]},{"level":3,"title":"1.5.4 配置主配置文件","slug":"_1-5-4-配置主配置文件","link":"#_1-5-4-配置主配置文件","children":[]},{"level":3,"title":"1.5.5 定义 dao 接口的实现类","slug":"_1-5-5-定义-dao-接口的实现类","link":"#_1-5-5-定义-dao-接口的实现类","children":[]},{"level":3,"title":"1.5.6 定义测试类","slug":"_1-5-6-定义测试类","link":"#_1-5-6-定义测试类","children":[]},{"level":3,"title":"1.5.7 添加日志控制文件","slug":"_1-5-7-添加日志控制文件","link":"#_1-5-7-添加日志控制文件","children":[]},{"level":3,"title":"1.5.8 日志输出结果","slug":"_1-5-8-日志输出结果","link":"#_1-5-8-日志输出结果","children":[]}]},{"level":2,"title":"1.6 使用工具类","slug":"_1-6-使用工具类","link":"#_1-6-使用工具类","children":[{"level":3,"title":"1.6.1 创建工具类","slug":"_1-6-1-创建工具类","link":"#_1-6-1-创建工具类","children":[]},{"level":3,"title":"1.6.2 修改实现类","slug":"_1-6-2-修改实现类","link":"#_1-6-2-修改实现类","children":[]}]},{"level":2,"title":"1.7 使用属性文件读取 DB 连接四要素","slug":"_1-7-使用属性文件读取-db-连接四要素","link":"#_1-7-使用属性文件读取-db-连接四要素","children":[{"level":3,"title":"1.7.1 创建属性文件","slug":"_1-7-1-创建属性文件","link":"#_1-7-1-创建属性文件","children":[]},{"level":3,"title":"1.7.2 修改主配置文件","slug":"_1-7-2-修改主配置文件","link":"#_1-7-2-修改主配置文件","children":[]}]},{"level":2,"title":"1.8 源码分析","slug":"_1-8-源码分析","link":"#_1-8-源码分析","children":[{"level":3,"title":"1.8.1 输入流的关闭","slug":"_1-8-1-输入流的关闭","link":"#_1-8-1-输入流的关闭","children":[]},{"level":3,"title":"1.8.2 SqlSession 的创建","slug":"_1-8-2-sqlsession-的创建","link":"#_1-8-2-sqlsession-的创建","children":[]},{"level":3,"title":"1.8.3 增删改的执行","slug":"_1-8-3-增删改的执行","link":"#_1-8-3-增删改的执行","children":[]},{"level":3,"title":"1.8.4 SqlSession 的提交","slug":"_1-8-4-sqlsession-的提交","link":"#_1-8-4-sqlsession-的提交","children":[]},{"level":3,"title":"1.8.5 SqlSession 的关闭","slug":"_1-8-5-sqlsession-的关闭","link":"#_1-8-5-sqlsession-的关闭","children":[]}]},{"level":2,"title":"1.9 别名","slug":"_1-9-别名","link":"#_1-9-别名","children":[]}],"git":{"createdTime":1708749227000,"updatedTime":1708749227000,"contributors":[{"name":"hahg2000","email":"61403802+hahg2000@users.noreply.github.com","commits":1}]},"readingTime":{"minutes":12.6,"words":3781},"filePathRelative":"学习/后端/SSM框架/MyBatis3/一、MyBatis入门.md","localizedDate":"2024年2月24日","excerpt":"\\n<img src=\\"https://raw.githubusercontent.com/hahg2000/SSMPic/main/20210211142904.png\\" alt=\\"MyBatis结构\\" style=\\"zoom:60%;\\"> \\n<h2>1.1 MyBatis 的下载</h2>\\n<p>​\\tMyBatis 可以在 Github 官网下载：[ https://github.com/mybatis/mybatis-3 ]</p>\\n<h2>1.2 MyBatis 概述</h2>\\n<h3>1.2.1 MyBatis 简介</h3>\\n<p>​\\tMyBatis是一个优秀的基于Java的持久层框架，它内部封装了JDBC，使开发者 <strong>只需关注SQL语句本身</strong> ，而不用再花费精力去处理诸如注册驱动、创建 Connection 、配置 Statement 等繁杂过程。</p>","autoDesc":true}');export{k as comp,d as data};
