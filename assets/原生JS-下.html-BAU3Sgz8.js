import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as o,o as c,c as l,a as n,b as s,d as t,f as p}from"./app-B9MLl3uI.js";const i={},u=p(`<h1 id="原生js-下" tabindex="-1"><a class="header-anchor" href="#原生js-下"><span>原生JS-下</span></a></h1><h2 id="一、bom" tabindex="-1"><a class="header-anchor" href="#一、bom"><span>一、BOM</span></a></h2><p>BOM，Browser Object Model，浏览器对象模型。BOM 可以使我们<strong>通过 JS 来操作浏览器</strong>。</p><p>BOM里有几个对象，我们可以 <strong>通过这些对象来完成浏览器的操作</strong>。</p><ul><li><strong>Window</strong>：代表的是整个浏览器的窗口，同时也是网页的 <strong>全局对象</strong>。</li><li><strong>Navigator</strong>：代表的 <strong>当前浏览器的信息</strong>，通过该对象可以识别到不同的浏览器。</li><li><strong>Location</strong>：代表 <strong>当前浏览器的地址栏信息</strong>。通过 Location可以获取到地址栏信息，或者操作浏览器跳转页面。</li><li><strong>History</strong>：代表浏览器访问的当前网页的 <strong>历史记录</strong>，即可以进行后退和前进操作。</li><li><strong>Srceen</strong>：代表用户的 <strong>屏幕信息</strong>，通过该对象可以获取到用户的显示器的相关的信息。</li></ul><p>使用方式：这些 BOM 对象在浏览器中都是作为 window 对象的属性保存的，可以通过 window 对象来使用 <code>window.对象名</code> ，也可以直接使用 <code>对象名</code>。</p><h3 id="_1-1-navigator" tabindex="-1"><a class="header-anchor" href="#_1-1-navigator"><span>1.1 Navigator</span></a></h3><p>代表的 <strong>当前浏览器的信息</strong>，通过该对象可以识别到不同的浏览器。</p><ul><li><p>属性 <code>appName</code> ：早期可以使用其来识别浏览器，但现在已经过时，不能再识别浏览器。</p></li><li><p>属性 <code>userAgent</code> ：现在 <strong>一般使用其来识别浏览器</strong>，但这个可以伪造。</p></li></ul><h3 id="_1-2-history" tabindex="-1"><a class="header-anchor" href="#_1-2-history"><span>1.2 History</span></a></h3><ul><li><p>属性 <code>length</code> ：返回浏览器历史列表中的 <strong>URL 数量</strong>。</p></li><li><p>方法 <code>back()</code> ：可以 <strong>回退</strong> 到上一个页面，和后退按钮功能一样。</p></li><li><p>方法 <code>forward()</code> ：可以 <strong>前进</strong> 到下一个页面，和前进按钮功能一样。</p></li><li><p>方法 <code>go(整数)</code> ：正数向前跳转指定数量页面，负数向后跳转指定数量页面。</p></li></ul><h3 id="_1-3-location" tabindex="-1"><a class="header-anchor" href="#_1-3-location"><span>1.3 Location</span></a></h3><p>代表 <strong>当前浏览器的地址栏信息</strong>。通过 Location 可以获取到地址栏信息，或者操作浏览器跳转页面</p><hr><p>例如假设有 <strong>一个完整地址——href</strong> 如下：</p><img src="https://raw.githubusercontent.com/hahg2000/SSMPic/main/Location完整地址.png" style="zoom:80%;"><p>Location 对象有很多属性可以直接获取到地址中的部分。</p><ul><li><strong>协议部分——protocol</strong></li></ul><img src="https://raw.githubusercontent.com/hahg2000/SSMPic/main/Location-协议.png" style="zoom:80%;"><ul><li><strong>起源（起始）部分——origin</strong></li></ul><img src="https://raw.githubusercontent.com/hahg2000/SSMPic/main/Location-起源.png" style="zoom:80%;"><ul><li><p><strong>主机部分——host</strong></p><img src="https://raw.githubusercontent.com/hahg2000/SSMPic/main/Location-主机.png" style="zoom:80%;"><ul><li><strong>主机名——hostname</strong></li></ul><img src="https://raw.githubusercontent.com/hahg2000/SSMPic/main/Location-主机名.png" style="zoom:80%;"><ul><li><strong>端口号——post</strong></li></ul><img src="https://raw.githubusercontent.com/hahg2000/SSMPic/main/Location-端口号.png" style="zoom:80%;"></li><li><p><strong>路径部分——pathname</strong></p></li></ul><img src="https://raw.githubusercontent.com/hahg2000/picture/Senior-JS/Location-路径.png" style="zoom:80%;"><ul><li><strong>查询部分——search</strong></li></ul><img src="https://raw.githubusercontent.com/hahg2000/SSMPic/main/Location-查询.png" style="zoom:80%;"><ul><li><strong>哈希（锚点）部分——hash</strong></li></ul><img src="https://raw.githubusercontent.com/hahg2000/SSMPic/main/Location-哈希.png" style="zoom:80%;"><hr><p>其也有几个常用的方法：</p><ul><li><code>Location.assign(&quot;网站链接&quot;)</code> ：用于 <strong>跳转到指定页面</strong>。 <ul><li>与 <code>Location = &quot;网站链接&quot;</code> 、 <code>Location.href= &quot;网站链接&quot;</code> 效果一致。</li></ul></li><li><code>Location.reload(布尔值)</code> ：用于 <strong>刷新页面</strong>，布尔值为 true 表示清空缓存强制刷新页面，不填值默认为 false。</li><li><code>Location.replace(&quot;网站链接&quot;)</code> 用于 <strong>替换</strong> 当前页面，<strong>不会生成历史记录</strong>，也就是说不能后退。</li></ul><h2 id="二、定时器" tabindex="-1"><a class="header-anchor" href="#二、定时器"><span>二、定时器</span></a></h2><h3 id="_2-1-setinterval" tabindex="-1"><a class="header-anchor" href="#_2-1-setinterval"><span>2.1 setInterval</span></a></h3><ul><li><p>setInterval 方法，定时调用，每隔一段时间来调用指定函数。</p><p><code>var intervalID = scope.setInterval(func, delay, [arg1, arg2, ...]);</code></p><ul><li><code>intervalID</code> ：返回值，<strong>非零数值</strong>，<strong>用于标识当前的定时器</strong>。</li><li><code>func</code>：每次执行的 <strong>函数</strong>。</li><li><code>delay</code>：每次执行函数的 <strong>间隔时间</strong>。</li><li><code>arg1, arg2, ...</code>：<strong>可选</strong>，当定时器 <strong>执行完毕</strong> 时，将这些值传入函数中。</li></ul></li><li><p>clearInterval 方法，清除指定的定时器。</p><p><code>scope.clearInterval(intervalID)</code></p></li></ul><p>需要注意的是在页面利用 <strong>按钮</strong> 来启动定时器，在执行定时器参数里的函数时，<strong>需要判断之前是否已经创建过定时器</strong>，防止多次点击按钮导致<strong>开启多个定时器</strong>。</p><h3 id="_2-2-settimeout" tabindex="-1"><a class="header-anchor" href="#_2-2-settimeout"><span>2.2 setTimeout</span></a></h3><ul><li><p>setTimeout 方法，延时调用，隔一段时间才调用指定函数。</p><p><code>var timeoutID = scope.setTimeout(function[, delay, arg1, arg2, ...]);</code></p><ul><li><code>timeoutID</code> ：返回值，<strong>非零数值</strong>，<strong>用于标识当前的定时器</strong>。与 <code>intervalID</code> <strong>公用</strong> 一个 ID 池。</li><li><code>func</code>：每次执行的 <strong>函数</strong>。</li><li><code>delay</code>：<strong>可选</strong>，执行指定函数的 <strong>间隔时间</strong>，若不填写则代表立即执行。</li><li><code>arg1, arg2, ...</code>：<strong>可选</strong>，当定时器 <strong>执行完毕</strong> 时，将这些值传入函数中。</li></ul></li></ul><h3 id="_2-3-定时调用小练习" tabindex="-1"><a class="header-anchor" href="#_2-3-定时调用小练习"><span>2.3 定时调用小练习</span></a></h3><p>现在使用定时器来完善之前 “ 用键盘移动 div ” 练习。</p><p>思路：</p><ol><li>将用户按下的键置为全局变量，命名为 direction。</li><li>使用定时器每隔一段极短的时间来判断 direction，并 <strong>移动 div</strong>。</li><li>当用户按下一次键盘时，改变 direction 的值。</li><li>当用户松开键盘时，direction 置为空值。</li></ol><p>在这个思路里，定时器就像马达，驱动 div <strong>不断地向前</strong>，而键盘事件就像方向盘，<strong>改变 div 的方向</strong>。</p><div class="hint-container warning"><p class="hint-container-title">注意</p><p>虽然这个思路可以基本解决键盘事件的 DAS 问题，但如果点击键盘较快时，也会有相应的卡顿。</p></div><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// 定义初始速度</span>
<span class="token keyword">var</span> speed <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
<span class="token comment">// 将用户按下的键置为全局变量</span>
<span class="token keyword">var</span> direction <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> box1 <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&quot;box1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 使用定时器</span>
<span class="token keyword">var</span> timer <span class="token operator">=</span> <span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  
    <span class="token comment">// 判断按下是哪个方向键</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>direction <span class="token operator">==</span> <span class="token string">&quot;ArrowLeft&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        box1<span class="token punctuation">.</span>style<span class="token punctuation">.</span>left <span class="token operator">=</span> box1<span class="token punctuation">.</span>offsetLeft <span class="token operator">-</span> speed <span class="token operator">+</span> <span class="token string">&quot;px&quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>direction <span class="token operator">==</span> <span class="token string">&quot;ArrowUp&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        box1<span class="token punctuation">.</span>style<span class="token punctuation">.</span>top <span class="token operator">=</span> box1<span class="token punctuation">.</span>offsetTop <span class="token operator">-</span> speed <span class="token operator">+</span> <span class="token string">&quot;px&quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>direction <span class="token operator">==</span> <span class="token string">&quot;ArrowRight&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        box1<span class="token punctuation">.</span>style<span class="token punctuation">.</span>left <span class="token operator">=</span> box1<span class="token punctuation">.</span>offsetLeft <span class="token operator">+</span> speed <span class="token operator">+</span> <span class="token string">&quot;px&quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>direction <span class="token operator">==</span> <span class="token string">&quot;ArrowDown&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        box1<span class="token punctuation">.</span>style<span class="token punctuation">.</span>top <span class="token operator">=</span> box1<span class="token punctuation">.</span>offsetTop <span class="token operator">+</span> speed <span class="token operator">+</span> <span class="token string">&quot;px&quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token comment">// 每隔一段极短的时间</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span>

<span class="token comment">// 当用户按下一次键盘时，改变 direction 的值</span>
document<span class="token punctuation">.</span><span class="token function-variable function">onkeydown</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    direction <span class="token operator">=</span> event<span class="token punctuation">.</span>key<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 当用户松开键盘时，direction 置为空值</span>
document<span class="token punctuation">.</span><span class="token function-variable function">onkeyup</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    direction <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-4-定时器应用一" tabindex="-1"><a class="header-anchor" href="#_2-4-定时器应用一"><span>2.4 定时器应用一</span></a></h3><p>这里使用定时器做出当按下按钮时 div 自动往一个方向移动的效果，要求可以停在某一个位置。</p><p>步骤：</p><ol><li>获取 div 、button 元素节点。</li><li>为 button 绑定单击事件。</li><li>在 button 单击事件的响应函数启动定时器。</li><li>在定时器中的回调函数，不断地获取 div 当前的位置，进行计算后再赋值给 div。</li><li>判断计算后的值是否超过指定的值，如果超过则停止定时器。</li></ol><p>第 19 ~ 21 行中，<u>为了确保准确无误地停到指定位置</u>，需要在最后一次移动进行 <strong>矫正 div 的位置</strong>。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// 1.获取 div 、button 元素节点。</span>
<span class="token keyword">var</span> box1 <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&quot;box1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> btn01 <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&quot;btn01&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> timer <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> speed <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
<span class="token comment">// 2.为 button 绑定单击事件。</span>
btn01<span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 根据2.1节所说，需要判断之前是否已经创建过定时器</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>timer <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 3.启动定时器</span>
    timer <span class="token operator">=</span> <span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 4.不断地获取 div 当前的位置</span>
        <span class="token keyword">var</span> oldValue <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token function">getComputedStyle</span><span class="token punctuation">(</span>box1<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 进行计算</span>
        <span class="token keyword">var</span> newValue <span class="token operator">=</span> oldValue <span class="token operator">+</span> speed<span class="token punctuation">;</span>
		<span class="token comment">// 矫正 div 的位置</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>newValue <span class="token operator">&gt;=</span> <span class="token number">800</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            newValue <span class="token operator">=</span> <span class="token number">800</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
       	<span class="token comment">// 赋值给 div</span>
        box1<span class="token punctuation">.</span>style<span class="token punctuation">.</span>left <span class="token operator">=</span> newValue <span class="token operator">+</span> <span class="token string">&quot;px&quot;</span><span class="token punctuation">;</span>
		
        <span class="token comment">// 判断计算后的值是否超过指定的值</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>newValue <span class="token operator">==</span> <span class="token number">800</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 如果超过则停止定时器</span>
            <span class="token function">clearInterval</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-5-定时器应用二" tabindex="-1"><a class="header-anchor" href="#_2-5-定时器应用二"><span>2.5 定时器应用二</span></a></h3><p>现在需要把上面的代码封装成一个函数，来实现 div 的 <strong>位置</strong> 随意变化，div 的 <strong>宽度</strong> 和 <strong>长度</strong> 随意变化。</p><p>首先需要把上面的代码写死的地方找出来，如下图所示。</p><ol><li>box1——对哪个对象操作；</li><li>left——对对象的哪个属性操作；</li><li>800——对象移动的终点是哪里；</li><li>speed——虽然没有写死，但其需要个性化。</li></ol><img src="https://raw.githubusercontent.com/hahg2000/SSMPic/main/div移动封装函数的写死部分.png" style="zoom:80%;"><p>由上面的几点可以总结出函数的形参。</p><ol><li><code>obj</code>：需要操作的 <strong>对象</strong>；</li><li><code>attr</code>：需要操作的 <strong>属性</strong>；</li><li><code>target</code>：操作的 <strong>终止条件</strong></li><li><code>speed</code>：<strong>正整数</strong>，div 移动的 <strong>速度</strong>，移动的方向根据当前位置和目标位置进行判断。</li><li><code>callback</code> ：<strong>回调函数</strong>，当 div 移动完成后需要执行的函数。</li></ol><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// 1. obj：需要操作的对象；</span>
<span class="token comment">// 2. attr：需要操作的属性；</span>
<span class="token comment">// 3. target：操作的终止条件</span>
<span class="token comment">// 4. speed：正整数，div 移动的速度，移动的方向根据当前位置和目标位置进行判断。</span>
<span class="token comment">// 5. callback ：回调函数，当 div 移动完成后需要执行的函数。</span>
<span class="token keyword">function</span> <span class="token function">moveDiv</span><span class="token punctuation">(</span><span class="token parameter">obj<span class="token punctuation">,</span> attr<span class="token punctuation">,</span> target<span class="token punctuation">,</span> speed<span class="token punctuation">,</span> callback</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后需要解决一个问题，如何容易地存取多个定时器，每次定义新的变量，不好准确地找到需要操作的定时器。</p><p>解决方案是：因为 obj 对象是独一无二的，所以可以将定时器的 TimeID 存放到 obj 的属性里。</p><ul><li><p>第 19 行 ~ 20 行中，利用 moreThenZero 变量来得知当前 speed 是否大于零，再使用此变量分别乘上 newValue 和 target，就可以无论 speed 大于零或者小于零，都可以使用 <code>moreThenZero*newValue &gt;= moreThenZero*target</code> 来判断是否到达目的条件。</p></li><li><p>第 28 行，为了使 <code>callback</code> 参数变为可选参数，使用 <code>callback &amp;&amp; callback();</code> 这句代码的意思是如果 <code>callback</code> 为空，则不执行 <code>callback()</code> ，否则就执行。</p></li></ul><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">moveDiv</span><span class="token punctuation">(</span><span class="token parameter">obj<span class="token punctuation">,</span> attr<span class="token punctuation">,</span> target<span class="token punctuation">,</span> speed<span class="token punctuation">,</span> callback</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> moreThenZero <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token comment">// 判断之前是否存在定时器</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>obj<span class="token punctuation">.</span>timer<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">clearInterval</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>timer<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 获取相应属性的值</span>
    <span class="token keyword">var</span> currentValue <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token function">getComputedStyle</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">[</span>attr<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 判断div移动方向</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>currentValue <span class="token operator">&gt;</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        moreThenZero <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
        speed <span class="token operator">=</span> <span class="token operator">-</span>speed<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 将定时器ID存放到对象的属性里</span>
    obj<span class="token punctuation">.</span>timer <span class="token operator">=</span> <span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">var</span> oldValue <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token function">getComputedStyle</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">[</span>attr<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">var</span> newValue <span class="token operator">=</span> oldValue <span class="token operator">+</span> speed<span class="token punctuation">;</span>
		<span class="token comment">// 判断当前是否到达目标位置，并修正位置</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>moreThenZero<span class="token operator">*</span>newValue <span class="token operator">&gt;=</span> moreThenZero<span class="token operator">*</span>target<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            newValue <span class="token operator">=</span> target<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
		<span class="token comment">// </span>
        obj<span class="token punctuation">.</span>style<span class="token punctuation">[</span>attr<span class="token punctuation">]</span> <span class="token operator">=</span> newValue <span class="token operator">+</span> <span class="token string">&quot;px&quot;</span><span class="token punctuation">;</span>
		<span class="token comment">// 如果到达则停止定时器</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>newValue <span class="token operator">==</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">clearInterval</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>timer<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// 在定时器结束后执行函数</span>
  			callback <span class="token operator">&amp;&amp;</span> <span class="token function">callback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-6-轮播图" tabindex="-1"><a class="header-anchor" href="#_2-6-轮播图"><span>2.6 轮播图</span></a></h3><p><u>这里使用定时器做出一个轮播图，下面的导航栏可以改变轮播图的图片</u>。</p><p>下面的 Gif 动图是之前一种比较多网站使用的轮播图类型——最后一张到第一张的动画方向是不一样的。</p><img src="https://raw.githubusercontent.com/hahg2000/SSMPic/main/轮播图.gif" style="zoom:50%;"><h4 id="_1-页面布局" tabindex="-1"><a class="header-anchor" href="#_1-页面布局"><span>（1）页面布局</span></a></h4><p>页面布局使用了两个 ul 标签，一个用来 <strong>显示图片</strong>，一个用来 <strong>显示导航栏</strong>。</p><p>其实显示图片用 div 标签更好，<u>因为 ul 中的每个 li 之间都会有无法取消的 6px 的边距</u>，导致不好计算偏移量。</p><div class="language-html line-numbers-mode" data-ext="html" data-title="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>outer<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>imgList<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>../图片/A1.JPG<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>../图片/A2.JPG<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>../图片/A3.JPG<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>../图片/A4.JPG<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>nav<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>javascript:;<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>javascript:;<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>javascript:;<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>javascript:;<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-加上样式" tabindex="-1"><a class="header-anchor" href="#_2-加上样式"><span>（2）加上样式</span></a></h4><div class="language-html line-numbers-mode" data-ext="html" data-title="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">&gt;</span></span><span class="token style"><span class="token language-css">
  <span class="token selector">img</span> <span class="token punctuation">{</span>
    <span class="token property">width</span><span class="token punctuation">:</span> 500px<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token selector">#outer</span> <span class="token punctuation">{</span>
    <span class="token property">width</span><span class="token punctuation">:</span> 500px<span class="token punctuation">;</span>
    <span class="token property">height</span><span class="token punctuation">:</span> 400px<span class="token punctuation">;</span>
    <span class="token property">border</span><span class="token punctuation">:</span> 5px solid rebeccapurple<span class="token punctuation">;</span>
    <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>
    <span class="token property">left</span><span class="token punctuation">:</span> 400px<span class="token punctuation">;</span>
    <span class="token property">overflow</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span>
    <span class="token property">margin</span><span class="token punctuation">:</span> 0px<span class="token punctuation">;</span>
    <span class="token property">padding</span><span class="token punctuation">:</span> 0px<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token selector">#imgList</span> <span class="token punctuation">{</span>
    <span class="token property">list-style</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>
    <span class="token property">margin</span><span class="token punctuation">:</span> 0px<span class="token punctuation">;</span>
    <span class="token property">padding</span><span class="token punctuation">:</span> 0px<span class="token punctuation">;</span>
    <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>
    <span class="token property">transition</span><span class="token punctuation">:</span> left 0.8s<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token selector">#imgList li</span> <span class="token punctuation">{</span>
    <span class="token property">display</span><span class="token punctuation">:</span> inline-block<span class="token punctuation">;</span>
    <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token selector">#nav</span> <span class="token punctuation">{</span>
    <span class="token property">z-index</span><span class="token punctuation">:</span> 1<span class="token punctuation">;</span>
    <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>
    <span class="token property">list-style</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>
    <span class="token property">height</span><span class="token punctuation">:</span> 30px<span class="token punctuation">;</span>
    <span class="token property">top</span><span class="token punctuation">:</span> 340px<span class="token punctuation">;</span>
    <span class="token property">left</span><span class="token punctuation">:</span> 139px<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token selector">#nav li</span> <span class="token punctuation">{</span>
    <span class="token property">display</span><span class="token punctuation">:</span> inline-block<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token selector">#nav a</span> <span class="token punctuation">{</span>
    <span class="token property">background-color</span><span class="token punctuation">:</span> #f5804e<span class="token punctuation">;</span>
    <span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span>
    <span class="token property">width</span><span class="token punctuation">:</span> 20px<span class="token punctuation">;</span>
    <span class="token property">height</span><span class="token punctuation">:</span> 20px<span class="token punctuation">;</span>
    <span class="token property">border</span><span class="token punctuation">:</span> 3px solid royalblue<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-实现功能1" tabindex="-1"><a class="header-anchor" href="#_3-实现功能1"><span>（3）实现功能1</span></a></h4><p>实现步骤：</p>`,73),r=n("li",null,[n("strong",null,"动态设置 ul 的宽度"),s("，让全部图片可以排成一行。")],-1),k=n("strong",null,"动态居中 nav",-1),d={href:"https://mp.weixin.qq.com/s?__biz=MzI5MzIwNDI1MQ==&mid=2650178007&idx=4&sn=2ce4e1b0496881733bb785e6a6e3dd52&chksm=f47799a3c30010b5e0655c5b240e5547d726cb73de064317422d09bf317538ce9f4b344bdb57&mpshare=1&scene=24&srcid=0802o3W8cY7tKodrUAwhKozp&sharer_sharetime=1627863283992&sharer_shareid=5cdf85a6aef659db44daceadd8dbadd4&ascene=14&devicetype=android-29&version=28000753&nettype=WIFI&abtest_cookie=AAACAA%3D%3D&lang=zh_CN&exportkey=A1%2FcU8hATs3izBbtthw2XJc%3D&pass_ticket=IXU1eh1bx0YPWt8nYD7cejFNa%2FoGdZ1%2F0RbUPcGuWnPrLufZ2UWKCArVoEem5hN9&wx_header=1",target:"_blank",rel:"noopener noreferrer"},v=n("li",null,"初始化 nav 的状态。",-1),m=n("li",null,[n("strong",null,"为每一个 nav 的子元素绑定单击响应事件"),s("。")],-1),g=n("li",null,[n("strong",null,"开启定时器"),s("，使图片运动起来。")],-1),b=p(`<p>这里需要解决一些问题。</p><ol><li><strong>如何得知用户点击的是哪一个导航栏按钮？</strong> 答：为每一个导航栏按钮绑定一个 index 属性，然后使用 <code>this.index</code> 取出来。</li><li><strong>如何让导航栏与图片动画一致？</strong> 答：使用全局变量 imgIndex 来同步。</li><li><strong>如果点击了按钮，需要等下一次定时器运转才会变化图片。</strong> 答：在单击响应函数里，手动改变图片。</li><li><strong>如何动态设置 ul 标签的宽度？</strong> 答：<code>(一个图片的宽度 + 6 ) * 图片的数量</code></li></ol><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// 分别获取所取的元素</span>
<span class="token keyword">var</span> imgList <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&quot;imgList&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> imgArr <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">&quot;img&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> imgWidthStr <span class="token operator">=</span> <span class="token function">getComputedStyle</span><span class="token punctuation">(</span>imgArr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">.</span>width<span class="token punctuation">;</span>
<span class="token keyword">var</span> navLi <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&quot;nav&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>children<span class="token punctuation">;</span>
<span class="token keyword">var</span> aArr <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 使用全局变量 imgIndex</span>
<span class="token keyword">var</span> imgIndex <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token comment">// 动态设置 ul 的宽度</span>
imgList<span class="token punctuation">.</span>style<span class="token punctuation">.</span>width <span class="token operator">=</span> <span class="token punctuation">(</span>imgList<span class="token punctuation">.</span>children<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>offsetWidth <span class="token operator">+</span> <span class="token number">6</span><span class="token punctuation">)</span> <span class="token operator">*</span> imgArr<span class="token punctuation">.</span>length <span class="token operator">+</span> <span class="token string">&quot;px&quot;</span><span class="token punctuation">;</span>
<span class="token comment">// 初始化 nav 的状态</span>
aArr<span class="token punctuation">[</span>imgIndex<span class="token punctuation">]</span><span class="token punctuation">.</span>style<span class="token punctuation">.</span>backgroundColor <span class="token operator">=</span> <span class="token string">&quot;black&quot;</span><span class="token punctuation">;</span>

<span class="token comment">// 设置nav的颜色</span>
<span class="token keyword">function</span> <span class="token function">setNav</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> aArr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        aArr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>style<span class="token punctuation">.</span>backgroundColor <span class="token operator">=</span> <span class="token string">&quot;#f5804e&quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    aArr<span class="token punctuation">[</span>imgIndex<span class="token punctuation">]</span><span class="token punctuation">.</span>style<span class="token punctuation">.</span>backgroundColor <span class="token operator">=</span> <span class="token string">&quot;black&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 为每一个 nav 的子元素绑定单击响应事件</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> navLi<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 为每一个导航栏按钮绑定一个 index 属性</span>
    navLi<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>index <span class="token operator">=</span> i<span class="token punctuation">;</span>
    navLi<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        imgIndex <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>index<span class="token punctuation">;</span>
      	<span class="token function">setNav</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">var</span> newLeft <span class="token operator">=</span> <span class="token operator">-</span><span class="token punctuation">(</span><span class="token function">parseInt</span><span class="token punctuation">(</span>imgWidthStr<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">6</span><span class="token punctuation">)</span> <span class="token operator">*</span> imgIndex<span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>newLeft<span class="token punctuation">)</span> <span class="token operator">&gt;=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>imgWidthStr<span class="token punctuation">)</span> <span class="token operator">*</span> imgArr<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            newLeft <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        imgList<span class="token punctuation">.</span>style<span class="token punctuation">.</span>left <span class="token operator">=</span> newLeft <span class="token operator">+</span> <span class="token string">&quot;px&quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">setNav</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">var</span> newLeft <span class="token operator">=</span> <span class="token operator">-</span><span class="token punctuation">(</span><span class="token function">parseInt</span><span class="token punctuation">(</span>imgWidthStr<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">6</span><span class="token punctuation">)</span> <span class="token operator">*</span> imgIndex<span class="token punctuation">;</span>
    imgList<span class="token punctuation">.</span>style<span class="token punctuation">.</span>left <span class="token operator">=</span> newLeft <span class="token operator">+</span> <span class="token string">&quot;px&quot;</span><span class="token punctuation">;</span>
    imgIndex<span class="token operator">++</span><span class="token punctuation">;</span>
    imgIndex <span class="token operator">=</span> imgIndex <span class="token operator">%</span> imgArr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>但这种使用 CSS 样式来做出过渡效果，有两个缺点，<u>比如说现在的需求改变，改成图片看起来是一直向左移动的效果</u>，如下动图所示。</p><p>其需求核心的做法是 <u>在最后一张图片的后面再添加第一张图片</u>，在显示第二个第一张图片时瞬间换成第一个第一张图片。</p><figure><img src="https://raw.githubusercontent.com/hahg2000/SSMPic/main/轮播图示意图2.gif" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ol><li>动画效果无法设置为只向左移动才有。<strong>只有变化了 left 属性，transition 属性就会起作用</strong>。</li></ol><p>我解决这个问题的思路是：在显示第二个第一张图片时将 left 属性去掉，<u>利用 right 属性瞬间换成第一个第一张图片</u>，然后再将 left 属性加上，right 属性去除。</p><p>但加上 left 属性和去除 right 属性的时机是 <u>第二个第一张图片展示完成</u>后，但 <u>页面渲染是在定时器的里的回调函数完整地执行完成一次才会执行</u>，所以要么是第一张图片停留两倍的时间，要么就是从第一个第一张图片到第二张图片的过渡效果没有（因为第一个第一张图片的 left 属性是空，而不是 0px）。</p><ol start="2"><li>动画效果与定时器时间 <strong>重复</strong></li></ol><p>在进行图片进行动画效果的同时，定时器也在计时，就会导致每张图片的展示时间需要进行计算，即 图片展示时间 = 定时器延时 - 动画效果时间。</p><p>当然优点很明显，方便易用。</p><h4 id="_4-实现功能2" tabindex="-1"><a class="header-anchor" href="#_4-实现功能2"><span>（4）实现功能2</span></a></h4><p>现在使用 第 2.5 节定时器应用二 中的 <code>moveDiv()</code> 函数来执行动画效果，即使用 JS 来做动画。</p><p>实现步骤：与上述一致，但一些细节需要注意：</p><ol><li>第 18 ~ 23 行：因为图片比导航栏多一个，所以需要在设置 nav 的选中之前进行判断，判断是否为第二个第一张图片，如果是则 <code>imgIndex</code> 归为 0，并 <strong>将图片瞬间移动到第一张图片</strong>。</li></ol><p>详情的 JS 运行机制可以参考下面两个网站：</p>`,17),h={href:"https://segmentfault.com/a/1190000012925872",target:"_blank",rel:"noopener noreferrer"},f={href:"https://segmentfault.com/a/1190000013662126",target:"_blank",rel:"noopener noreferrer"},y=p(`<div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// 分别获取所取的元素</span>
<span class="token keyword">var</span> imgList <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&quot;imgList&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> imgArr <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">&quot;img&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> imgWidthStr <span class="token operator">=</span> <span class="token function">getComputedStyle</span><span class="token punctuation">(</span>imgArr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">.</span>width<span class="token punctuation">;</span>
<span class="token keyword">var</span> navLi <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&quot;nav&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>children<span class="token punctuation">;</span>
<span class="token keyword">var</span> aArr <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 使用全局变量 imgIndex</span>
<span class="token keyword">var</span> imgIndex <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token comment">// 动态设置 ul 的宽度</span>
imgList<span class="token punctuation">.</span>style<span class="token punctuation">.</span>width <span class="token operator">=</span> <span class="token punctuation">(</span>imgList<span class="token punctuation">.</span>children<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>offsetWidth <span class="token operator">+</span> <span class="token number">6</span><span class="token punctuation">)</span> <span class="token operator">*</span> imgArr<span class="token punctuation">.</span>length <span class="token operator">+</span> <span class="token string">&quot;px&quot;</span><span class="token punctuation">;</span>
<span class="token comment">// 初始化 nav 的状态</span>
aArr<span class="token punctuation">[</span>imgIndex<span class="token punctuation">]</span><span class="token punctuation">.</span>style<span class="token punctuation">.</span>backgroundColor <span class="token operator">=</span> <span class="token string">&quot;black&quot;</span><span class="token punctuation">;</span>

<span class="token comment">// 设置nav的颜色</span>
<span class="token keyword">function</span> <span class="token function">setNav</span><span class="token punctuation">(</span><span class="token parameter">imgIndex</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 判断是否为第二个第一张图片</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>imgIndex <span class="token operator">==</span> aArr<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 如果是，则nav显示第一张图片</span>
    imgIndex <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token comment">// 将图片瞬间移动到第一张图片</span>
    imgList<span class="token punctuation">.</span>style<span class="token punctuation">.</span>left <span class="token operator">=</span> <span class="token string">&quot;0px&quot;</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> aArr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    aArr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>style<span class="token punctuation">.</span>backgroundColor <span class="token operator">=</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  aArr<span class="token punctuation">[</span>imgIndex<span class="token punctuation">]</span><span class="token punctuation">.</span>style<span class="token punctuation">.</span>backgroundColor <span class="token operator">=</span> <span class="token string">&quot;black&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 为每一个 nav 的子元素绑定单击响应事件</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> navLi<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 为每一个导航栏按钮绑定一个 index 属性</span>
  navLi<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>index <span class="token operator">=</span> i<span class="token punctuation">;</span>
  navLi<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 当点击时，停止定时器，防止动画效果运行时跳转到下一张</span>
    <span class="token function">clearInterval</span><span class="token punctuation">(</span>imgTimer<span class="token punctuation">)</span><span class="token punctuation">;</span>
    imgIndex <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>index<span class="token punctuation">;</span>
    <span class="token function">setNav</span><span class="token punctuation">(</span>imgIndex<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 在动画效果运行后继续启动定时器</span>
    <span class="token function">moveDiv</span><span class="token punctuation">(</span>imgList<span class="token punctuation">,</span> <span class="token string">&quot;left&quot;</span><span class="token punctuation">,</span> <span class="token operator">-</span>imgIndex <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token function">parseInt</span><span class="token punctuation">(</span>imgWidthStr<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">autoChangeImg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">var</span> imgTimer<span class="token punctuation">;</span>
<span class="token function">autoChangeImg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">function</span> <span class="token function">autoChangeImg</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  imgTimer <span class="token operator">=</span> <span class="token function">setInterval</span><span class="token punctuation">(</span>
    <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      imgIndex<span class="token operator">++</span><span class="token punctuation">;</span>
      imgIndex <span class="token operator">%=</span> imgArr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>

      <span class="token function">moveDiv</span><span class="token punctuation">(</span>imgList<span class="token punctuation">,</span> <span class="token string">&quot;left&quot;</span><span class="token punctuation">,</span> <span class="token operator">-</span>imgIndex <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token function">parseInt</span><span class="token punctuation">(</span>imgWidthStr<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">setNav</span><span class="token punctuation">(</span>imgIndex<span class="token punctuation">)</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1500</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="三、类的操作" tabindex="-1"><a class="header-anchor" href="#三、类的操作"><span>三、类的操作</span></a></h2><p>对于元素类的获取，一般使用元素的两个属性：<code>Element.className</code> 和 <code>Element.classList</code></p><ul><li><code>Element.className</code> ：返回的是 <strong>字符串类型</strong>，添加和删除类都需要使用到正则表达式，较麻烦。</li><li><code>Element.classList</code> ：返回的是 <strong>数组类型</strong>，可以使用 <code>remove(&quot;类名&quot;)</code> 来移除指定的类，可以使用 <code>add(&quot;类名&quot;)</code> 来添加指定的类。</li></ul><h4 id="_1-使用classname" tabindex="-1"><a class="header-anchor" href="#_1-使用classname"><span>（1）使用className</span></a></h4><p>以下几个函数可以判断类名是否存在、添加类、删除类和切换类。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">/*
 * 判断一个元素中是否含有指定的class属性值
 * 如果有该class，则返回true，没有则返回false
 * 参数:
 * obj 要添加class属性的元素
 * cn 要添加的class值
 */</span>
<span class="token keyword">function</span> <span class="token function">hasClass</span><span class="token punctuation">(</span><span class="token parameter">obj<span class="token punctuation">,</span> cn</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    
	<span class="token comment">//判断obj中有没有cn class</span>
	<span class="token comment">//创建一个正则表达式</span>
	<span class="token comment">//var reg = /\\bb2\\b/;</span>
	<span class="token keyword">var</span> reg <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span><span class="token string">&quot;\\\\b&quot;</span> <span class="token operator">+</span> cn <span class="token operator">+</span> <span class="token string">&quot;\\\\b&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token keyword">return</span> reg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>className<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">/*
 * 删除一个元素中的指定的class属性
 */</span>
<span class="token keyword">function</span> <span class="token function">removeClass</span><span class="token punctuation">(</span><span class="token parameter">obj<span class="token punctuation">,</span> cn</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token comment">//创建一个正则表达式</span>
	<span class="token keyword">var</span> reg <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span><span class="token string">&quot;\\\\b&quot;</span> <span class="token operator">+</span> cn <span class="token operator">+</span> <span class="token string">&quot;\\\\b&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token comment">//删除class</span>
	obj<span class="token punctuation">.</span>className <span class="token operator">=</span> obj<span class="token punctuation">.</span>className<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>reg<span class="token punctuation">,</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">/*
 * 定义一个函数，用来向一个元素中添加指定的class属性值
 */</span>
<span class="token keyword">function</span> <span class="token function">addClass</span><span class="token punctuation">(</span><span class="token parameter">obj<span class="token punctuation">,</span> cn</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

	<span class="token comment">//检查obj中是否含有cn</span>
	<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">hasClass</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> cn<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		obj<span class="token punctuation">.</span>className <span class="token operator">+=</span> <span class="token string">&quot; &quot;</span> <span class="token operator">+</span> cn<span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">/*
 * toggleClass可以用来切换一个类
 * 	如果元素中具有该类，则删除
 * 	如果元素中没有该类，则添加
 */</span>
<span class="token keyword">function</span> <span class="token function">toggleClass</span><span class="token punctuation">(</span><span class="token parameter">obj<span class="token punctuation">,</span> cn</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

	<span class="token comment">//判断obj中是否含有cn</span>
	<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">hasClass</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> cn<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token comment">//有，则删除</span>
		<span class="token function">removeClass</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> cn<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
		<span class="token comment">//没有，则添加</span>
		<span class="token function">addClass</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> cn<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-使用classlist" tabindex="-1"><a class="header-anchor" href="#_2-使用classlist"><span>（2）使用classList</span></a></h4><p>判断元素中是否有指定的类，需要将 classList 进行 <strong>循环遍历</strong>。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">changeClassList</span><span class="token punctuation">(</span><span class="token parameter">obj<span class="token punctuation">,</span> attr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> classList <span class="token operator">=</span> obj<span class="token punctuation">.</span>classList<span class="token punctuation">;</span>
    <span class="token keyword">var</span> hasAttr <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> classList<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>classList<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">===</span> attr<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            obj<span class="token punctuation">.</span>classList<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>attr<span class="token punctuation">)</span><span class="token punctuation">;</span>
            hasAttr <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>hasAttr<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        obj<span class="token punctuation">.</span>classList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>attr<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-二级列表练习1" tabindex="-1"><a class="header-anchor" href="#_3-二级列表练习1"><span>（3）二级列表练习1</span></a></h4><p>利用切换类来做出二级列表的效果，效果如下动图所示。</p><figure><img src="https://raw.githubusercontent.com/hahg2000/SSMPic/main/二级列表示意图.gif" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>这个效果是调整 div 的高度来实现的。</p><p>这个有两种实现方式，和上面的一致，一是使用 CSS 样式来做出过渡效果，二是使用 JS 做出过渡效果。</p><hr><p>现在使用 CSS 样式来做出过渡效果，如果直接在两个类之间切换，需要两个类之间都需要 height 属性。</p><p>这里的示例中：每一个 div 都有 baseDiv 类，然后根据切换类来切换二级列表的折叠状态。折叠状态的类是 &quot; fold &quot;，展开状态的类是 ” openMenu “。</p><div class="language-html line-numbers-mode" data-ext="html" data-title="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">&gt;</span></span><span class="token style"><span class="token language-css">
    <span class="token selector">.baseDiv</span><span class="token punctuation">{</span>
        <span class="token property">transition</span><span class="token punctuation">:</span> height 1s<span class="token punctuation">;</span>
        <span class="token property">overflow</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token selector">.fold</span> <span class="token punctuation">{</span>
        <span class="token property">height</span><span class="token punctuation">:</span> 32px<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token selector">.openMenu</span> <span class="token punctuation">{</span>
        <span class="token property">height</span><span class="token punctuation">:</span> 128px<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
    <span class="token keyword">var</span> menuItem <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByClassName</span><span class="token punctuation">(</span><span class="token string">&quot;menuItem&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> menuItem<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        menuItem<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">var</span> classList <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>parentElement<span class="token punctuation">.</span>classList<span class="token punctuation">;</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> classList<span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                <span class="token keyword">var</span> tempClass <span class="token operator">=</span> classList<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span>tempClass <span class="token operator">==</span> <span class="token string">&quot;openMenu&quot;</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                    classList<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>tempClass<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    classList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;fold&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">break</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span>tempClass <span class="token operator">==</span> <span class="token string">&quot;fold&quot;</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                    classList<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>tempClass<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    classList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;openMenu&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><p>如果是类与无类之间切换，则需要手动改变 height 的值来实现，较麻烦。本质上还是调整 style 来让过渡效果起作用。</p><h4 id="_4-二级列表练习2" tabindex="-1"><a class="header-anchor" href="#_4-二级列表练习2"><span>（4）二级列表练习2</span></a></h4><p>现在使用 JS 做出过渡效果，同时加上一个要求：<strong>每次只能开一个二级列表</strong>。</p><p>思路比较简单：将当前打开的 div 元素存放到全局变量中，每次点击关闭全局变量里的元素，打开现在点击的元素。</p><p>第 8 ~ 10行：关闭已打开的元素。为了统一就使用了 <code>toggleMenu()</code> 函数来执行动画效果，<code>toggleMenu()</code> 函数里又调用 <code>changeClassList()</code> 函数来切换对象的类。</p><p>但需要两个条件满足，上次点击元素的类才需要切换：</p><p>一：上次点击元素不是现在点击的元素，如果是的话，元素的类就会切换两次，相当于原地踏步。</p><p>二：上次点击元素已经关闭，已经不用再切换类了。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">var</span> menuItemList <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByClassName</span><span class="token punctuation">(</span><span class="token string">&quot;menuItem&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 全局变量存放已打开的元素</span>
<span class="token keyword">var</span> openDiv <span class="token operator">=</span> menuItemList<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>parentNode<span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> menuItemList<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    menuItemList<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">var</span> parentDiv <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>parentNode<span class="token punctuation">;</span>
        
        <span class="token comment">// 判断上次点击的元素是否等于现在点击的元素</span>
        <span class="token comment">// 以及是否已经关闭</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>parentDiv <span class="token operator">!=</span> openDiv <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token function">hasClass</span><span class="token punctuation">(</span>openDiv<span class="token punctuation">,</span> <span class="token string">&quot;closeItem&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">toggleMenu</span><span class="token punctuation">(</span>openDiv<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token comment">//切换菜单的显示状态</span>
        <span class="token function">toggleMenu</span><span class="token punctuation">(</span>parentDiv<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 改变全局变量的值</span>
        openDiv <span class="token operator">=</span> parentDiv<span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">changeClassList</span><span class="token punctuation">(</span><span class="token parameter">obj<span class="token punctuation">,</span> attr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> classList <span class="token operator">=</span> obj<span class="token punctuation">.</span>classList<span class="token punctuation">;</span>
    <span class="token keyword">var</span> hasAttr <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> classList<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>classList<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">===</span> attr<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            obj<span class="token punctuation">.</span>classList<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>attr<span class="token punctuation">)</span><span class="token punctuation">;</span>
            hasAttr <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 遍历完全部才知道当前元素没有指定属性</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>hasAttr<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        obj<span class="token punctuation">.</span>classList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>attr<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">toggleMenu</span><span class="token punctuation">(</span><span class="token parameter">obj</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">//在切换类之前，获取元素的高度</span>
    <span class="token keyword">var</span> begin <span class="token operator">=</span> obj<span class="token punctuation">.</span>offsetHeight<span class="token punctuation">;</span>

    <span class="token comment">//切换parentDiv的显示</span>
    <span class="token function">changeClassList</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token string">&quot;closeItem&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">//在切换类之后获取一个高度</span>
    <span class="token keyword">var</span> end <span class="token operator">=</span> obj<span class="token punctuation">.</span>offsetHeight<span class="token punctuation">;</span>
    <span class="token comment">//动画效果就是将高度从begin向end过渡</span>
    <span class="token comment">//将元素的高度重置为begin</span>
    obj<span class="token punctuation">.</span>style<span class="token punctuation">.</span>height <span class="token operator">=</span> begin <span class="token operator">+</span> <span class="token string">&quot;px&quot;</span><span class="token punctuation">;</span>

    <span class="token comment">// 执行动画，从bengin向end过渡</span>
    <span class="token function">move</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token string">&quot;height&quot;</span><span class="token punctuation">,</span> end<span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">//动画执行完毕，内联样式已经没有存在的意义了，删除之</span>
        obj<span class="token punctuation">.</span>style<span class="token punctuation">.</span>height <span class="token operator">=</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// toggleClass(obj, &quot;closeItem&quot;);</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="四、json" tabindex="-1"><a class="header-anchor" href="#四、json"><span>四、JSON</span></a></h2><h3 id="_4-1-json简介" tabindex="-1"><a class="header-anchor" href="#_4-1-json简介"><span>4.1 JSON简介</span></a></h3><p>JS 中的对象只有 JS 自己认识，其他语言不认识。<u>那需要找到一个大部分语言都有的类型</u>，再将 JS 中的对象转换成这个类型。这个类型就是 <strong>字符串</strong>。</p><p>JSON，JavaScript Object Natation，对象表示法。JSON 就是个特殊的字符串，<u>这个字符串可以被任意的语言所识别，并且可以转换为任意语言中的对象</u>，JSON 在开发中 <strong>主要用来数据的交互</strong>。</p><p>JSON 和 JS 对象的格式一样，只不过 JSON 字符串中的属性名必须加 <strong>双引号</strong>，因为每个对象的属性名原本都是字符串类型，都需要加上双引号，但为了方便使用，允许省略双引号。</p><h3 id="_4-2-json分类" tabindex="-1"><a class="header-anchor" href="#_4-2-json分类"><span>4.2 JSON分类</span></a></h3><ol><li>对象 <code>{&quot;name&quot;:&quot;xxx&quot;}</code></li><li>数组 <code>[1,2,&quot;hello&quot;]</code></li></ol><hr><blockquote><p><strong>JSON</strong> 是一种语法，用来序列化对象、数组、数值、字符串、布尔值和 null。</p><p>它基于 JavaScript 语法，但与之不同：JavaScript不是JSON，JSON也不是JavaScript。</p><p>——MDN Web Docs</p></blockquote><p>所以 JSON 中允许出现的值有：</p><ol><li><strong>普通对象</strong></li><li><strong>数组</strong></li><li>数值</li><li>字符串</li><li>布尔值</li><li>null</li></ol><h3 id="_4-3-json的使用" tabindex="-1"><a class="header-anchor" href="#_4-3-json的使用"><span>4.3 JSON的使用</span></a></h3><p>JSON的使用涉及到两个方面：JSON字符串 ==&gt; JS 对象、JS 对象 ==&gt; JSON 字符串</p><ol><li>JSON字符串 ==&gt; JS 对象：<code>JSON.parse(&quot;text[, reviver]&quot;)</code><ul><li><code>text</code> ：要被解析成 JavaScript 值的字符串。</li><li><code>reviver</code> ：转换器, 如果传入该参数(函数)，<strong>可以用来修改解析生成的原始值</strong>，调用时机在 parse 函数返回之前。</li><li>解析字符串也可以使用 <code>eval( &quot;(&quot; + &quot;JSON字符串&quot; + &quot;)&quot; )</code>，但尽量少用，因为有安全隐患。</li></ul></li><li>JS 对象 ==&gt; JSON 字符串：<code>JSON.stringify(value[, replacer [, space]])</code><ul><li><code>value</code> ：将要序列化成 一个 JSON 字符串的值。</li><li><code>replacer</code>：如果该参数是一个函数，则在序列化过程中，<u>被序列化的值的每个属性都会经过该函数的转换和处理</u>； 如果该参数是一个数组，则 <u>只有包含在这个数组中的属性名</u> 才会被序列化到最终的 JSON 字符串中； 如果该参数为 null 或者未提供，则<u>对象所有的属性都会被序列化</u>。</li><li><code>space</code> ：指定缩进用的空白字符串，用于美化输出（pretty-print）； 如果参数是个数字，它代表有多少的空格；上限为10。该值若小于1，则意味着没有空格； 如果该参数为字符串（当字符串长度超过10个字母，取其前10个字母），该字符串将被作为空格； 如果该参数没有提供（或者为 null），将没有空格。</li></ul></li></ol><p>http://www.dogfight360.com/blog/475/</p>`,44);function w(q,x){const a=o("ExternalLinkIcon");return c(),l("div",null,[u,n("ol",null,[r,n("li",null,[k,s("。 （因为这里使用了 ul ，一些便捷的居中方式不能使用。居中的方式详情："),n("a",d,[s("14种CSS实现水平或垂直居中的技巧——书圈微信公众号"),t(a)])]),v,m,g]),b,n("p",null,[n("a",h,[s("从浏览器多进程到JS单线程，JS运行机制最全面的一次梳理——segmentfault"),t(a)])]),n("p",null,[n("a",f,[s("从输入URL到页面加载的过程？如何由一道题完善自己的前端知识体系！——segmentfault"),t(a)])]),y])}const j=e(i,[["render",w],["__file","原生JS-下.html.vue"]]),L=JSON.parse('{"path":"/%E5%AD%A6%E4%B9%A0/%E5%89%8D%E7%AB%AF/%E5%8E%9F%E7%94%9FJS/%E5%8E%9F%E7%94%9FJS-%E4%B8%8B.html","title":"原生JS-下","lang":"zh-CN","frontmatter":{"description":"原生JS-下 一、BOM BOM，Browser Object Model，浏览器对象模型。BOM 可以使我们通过 JS 来操作浏览器。 BOM里有几个对象，我们可以 通过这些对象来完成浏览器的操作。 Window：代表的是整个浏览器的窗口，同时也是网页的 全局对象。 Navigator：代表的 当前浏览器的信息，通过该对象可以识别到不同的浏览器。 L...","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/%E5%AD%A6%E4%B9%A0/%E5%89%8D%E7%AB%AF/%E5%8E%9F%E7%94%9FJS/%E5%8E%9F%E7%94%9FJS-%E4%B8%8B.html"}],["meta",{"property":"og:site_name","content":"博客演示"}],["meta",{"property":"og:title","content":"原生JS-下"}],["meta",{"property":"og:description","content":"原生JS-下 一、BOM BOM，Browser Object Model，浏览器对象模型。BOM 可以使我们通过 JS 来操作浏览器。 BOM里有几个对象，我们可以 通过这些对象来完成浏览器的操作。 Window：代表的是整个浏览器的窗口，同时也是网页的 全局对象。 Navigator：代表的 当前浏览器的信息，通过该对象可以识别到不同的浏览器。 L..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://raw.githubusercontent.com/hahg2000/SSMPic/main/%E8%BD%AE%E6%92%AD%E5%9B%BE%E7%A4%BA%E6%84%8F%E5%9B%BE2.gif"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-02-24T04:33:47.000Z"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:alt","content":"原生JS-下"}],["meta",{"property":"article:author","content":"hahg"}],["meta",{"property":"article:modified_time","content":"2024-02-24T04:33:47.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"原生JS-下\\",\\"image\\":[\\"https://raw.githubusercontent.com/hahg2000/SSMPic/main/%E8%BD%AE%E6%92%AD%E5%9B%BE%E7%A4%BA%E6%84%8F%E5%9B%BE2.gif\\",\\"https://raw.githubusercontent.com/hahg2000/SSMPic/main/%E4%BA%8C%E7%BA%A7%E5%88%97%E8%A1%A8%E7%A4%BA%E6%84%8F%E5%9B%BE.gif\\"],\\"dateModified\\":\\"2024-02-24T04:33:47.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"hahg\\"}]}"]]},"headers":[{"level":2,"title":"一、BOM","slug":"一、bom","link":"#一、bom","children":[{"level":3,"title":"1.1 Navigator","slug":"_1-1-navigator","link":"#_1-1-navigator","children":[]},{"level":3,"title":"1.2 History","slug":"_1-2-history","link":"#_1-2-history","children":[]},{"level":3,"title":"1.3 Location","slug":"_1-3-location","link":"#_1-3-location","children":[]}]},{"level":2,"title":"二、定时器","slug":"二、定时器","link":"#二、定时器","children":[{"level":3,"title":"2.1 setInterval","slug":"_2-1-setinterval","link":"#_2-1-setinterval","children":[]},{"level":3,"title":"2.2 setTimeout","slug":"_2-2-settimeout","link":"#_2-2-settimeout","children":[]},{"level":3,"title":"2.3 定时调用小练习","slug":"_2-3-定时调用小练习","link":"#_2-3-定时调用小练习","children":[]},{"level":3,"title":"2.4 定时器应用一","slug":"_2-4-定时器应用一","link":"#_2-4-定时器应用一","children":[]},{"level":3,"title":"2.5 定时器应用二","slug":"_2-5-定时器应用二","link":"#_2-5-定时器应用二","children":[]},{"level":3,"title":"2.6 轮播图","slug":"_2-6-轮播图","link":"#_2-6-轮播图","children":[]}]},{"level":2,"title":"三、类的操作","slug":"三、类的操作","link":"#三、类的操作","children":[]},{"level":2,"title":"四、JSON","slug":"四、json","link":"#四、json","children":[{"level":3,"title":"4.1 JSON简介","slug":"_4-1-json简介","link":"#_4-1-json简介","children":[]},{"level":3,"title":"4.2 JSON分类","slug":"_4-2-json分类","link":"#_4-2-json分类","children":[]},{"level":3,"title":"4.3 JSON的使用","slug":"_4-3-json的使用","link":"#_4-3-json的使用","children":[]}]}],"git":{"createdTime":1708749227000,"updatedTime":1708749227000,"contributors":[{"name":"hahg2000","email":"61403802+hahg2000@users.noreply.github.com","commits":1}]},"readingTime":{"minutes":20.12,"words":6035},"filePathRelative":"学习/前端/原生JS/原生JS-下.md","localizedDate":"2024年2月24日","excerpt":"\\n<h2>一、BOM</h2>\\n<p>BOM，Browser Object Model，浏览器对象模型。BOM 可以使我们<strong>通过 JS 来操作浏览器</strong>。</p>\\n<p>BOM里有几个对象，我们可以 <strong>通过这些对象来完成浏览器的操作</strong>。</p>\\n<ul>\\n<li><strong>Window</strong>：代表的是整个浏览器的窗口，同时也是网页的 <strong>全局对象</strong>。</li>\\n<li><strong>Navigator</strong>：代表的 <strong>当前浏览器的信息</strong>，通过该对象可以识别到不同的浏览器。</li>\\n<li><strong>Location</strong>：代表 <strong>当前浏览器的地址栏信息</strong>。通过 Location可以获取到地址栏信息，或者操作浏览器跳转页面。</li>\\n<li><strong>History</strong>：代表浏览器访问的当前网页的 <strong>历史记录</strong>，即可以进行后退和前进操作。</li>\\n<li><strong>Srceen</strong>：代表用户的 <strong>屏幕信息</strong>，通过该对象可以获取到用户的显示器的相关的信息。</li>\\n</ul>","autoDesc":true}');export{j as comp,L as data};
