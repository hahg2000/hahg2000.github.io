import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as s,c as a,f as t}from"./app-B9MLl3uI.js";const e={},p=t(`<h1 id="三、springmvc注解式开发" tabindex="-1"><a class="header-anchor" href="#三、springmvc注解式开发"><span>三、SpringMVC注解式开发</span></a></h1><p>所谓SpringMVC的注解式开发是指，处理器是基于注解的类的开发。</p><p>对于每一个定义的处理器，无需在配置文件中逐个注册，只需在代码中通过对类与方法的注解，便可完成注册。即注解替换的是配置文件中对于处理器的注册部分。</p><h2 id="_3-1-第一个注解式开发程序" tabindex="-1"><a class="header-anchor" href="#_3-1-第一个注解式开发程序"><span>3.1 第一个注解式开发程序</span></a></h2><h3 id="_3-1-1-注册组件扫描器" tabindex="-1"><a class="header-anchor" href="#_3-1-1-注册组件扫描器"><span>3.1.1 注册组件扫描器</span></a></h3><p>这里的组件即处理器，需要指定处理器所在基本包。</p><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>component-scan</span> <span class="token attr-name">base-package</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>com.hahg.handlers<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>3.1.2定义处理器</p><p>此时的处理器类无需继承任何父类或者实现任何接口。只需在类上与方法上添加相应注解即可。</p><ul><li>@Controller：表示当前类为处理器</li><li>@RequestMapping：表示当前方法为处理器方法。该方法要对 value 属性所指定的URL进行处理与响应。<strong>被注解的方法的方法名可以随意</strong>。</li></ul><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Controller</span> 
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyController</span><span class="token punctuation">{</span>
	<span class="token comment">//&lt;bean id=&quot;/my.do&quot; class=&quot;com.hahg.handlers.MyController&quot;/&gt;</span>
	<span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/my.do&quot;</span><span class="token punctuation">)</span>
	<span class="token keyword">public</span> <span class="token class-name">ModelAndView</span> <span class="token function">doSome</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
		<span class="token class-name">ModelAndView</span> mv <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ModelAndView</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		mv<span class="token punctuation">.</span><span class="token function">addObject</span><span class="token punctuation">(</span><span class="token string">&quot;message1&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;hello&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addObject</span><span class="token punctuation">(</span><span class="token string">&quot;message2&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;world&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		mv<span class="token punctuation">.</span><span class="token function">setViewName</span><span class="token punctuation">(</span><span class="token string">&quot;welcome&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
		<span class="token keyword">return</span> mv<span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当然，若有多个请求路径均可匹配该处理器方法的执行，则@RequestMapping的value属性中可以写上一个数组。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">/* 注册处理器映射器 
&lt;bean class=&quot;org.springframework.web.servlet.handler.SimpleUrlHandlerMapping&quot;&gt;
	&lt;property name=&quot;mappings&quot;&gt;
         &lt;props&gt;
             &lt;prop key=&quot;/hello.do&quot;&gt;myController&lt;/prop&gt;
             &lt;prop key=&quot;/my.do&quot;&gt;myController&lt;/prop&gt;
        &lt;/props&gt;
  	&lt;/property&gt; 
&lt;/bean&gt;
*/</span>
<span class="token annotation punctuation">@Controller</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyController</span><span class="token punctuation">{</span>

	<span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">&quot;/my.do&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;doSome.do&quot;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
	<span class="token keyword">public</span> <span class="token class-name">ModelAndView</span> <span class="token function">doSome</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
         <span class="token class-name">ModelAndView</span> mv <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ModelAndView</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		mv<span class="token punctuation">.</span><span class="token function">addObject</span><span class="token punctuation">(</span><span class="token string">&quot;message1&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;hello&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addObject</span><span class="token punctuation">(</span><span class="token string">&quot;message2&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;world&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		mv<span class="token punctuation">.</span><span class="token function">setViewName</span><span class="token punctuation">(</span><span class="token string">&quot;welcome&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
		<span class="token keyword">return</span> mv<span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
	
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>3.2处理器的请求映射规则的定义</p><p>通过@RequestMapping注解可以定义处理器对于请求的映射规则。该注解可以注解在方法上，也可以注解在类上，但意义是不同的。3.2.1对请求URI的命名空间的定义@RequestMapping的value属性用于定义所匹配请求的URI。但对于注解在方法上与类</p>`,15),o=[p];function l(c,i){return s(),a("div",null,o)}const d=n(e,[["render",l],["__file","三、SpringMVC注解式开发.html.vue"]]),k=JSON.parse('{"path":"/%E5%AD%A6%E4%B9%A0/%E5%90%8E%E7%AB%AF/SSM%E6%A1%86%E6%9E%B6/SpringMVC/%E4%B8%89%E3%80%81SpringMVC%E6%B3%A8%E8%A7%A3%E5%BC%8F%E5%BC%80%E5%8F%91.html","title":"三、SpringMVC注解式开发","lang":"zh-CN","frontmatter":{"description":"三、SpringMVC注解式开发 所谓SpringMVC的注解式开发是指，处理器是基于注解的类的开发。 对于每一个定义的处理器，无需在配置文件中逐个注册，只需在代码中通过对类与方法的注解，便可完成注册。即注解替换的是配置文件中对于处理器的注册部分。 3.1 第一个注解式开发程序 3.1.1 注册组件扫描器 这里的组件即处理器，需要指定处理器所在基本包。...","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/%E5%AD%A6%E4%B9%A0/%E5%90%8E%E7%AB%AF/SSM%E6%A1%86%E6%9E%B6/SpringMVC/%E4%B8%89%E3%80%81SpringMVC%E6%B3%A8%E8%A7%A3%E5%BC%8F%E5%BC%80%E5%8F%91.html"}],["meta",{"property":"og:site_name","content":"博客演示"}],["meta",{"property":"og:title","content":"三、SpringMVC注解式开发"}],["meta",{"property":"og:description","content":"三、SpringMVC注解式开发 所谓SpringMVC的注解式开发是指，处理器是基于注解的类的开发。 对于每一个定义的处理器，无需在配置文件中逐个注册，只需在代码中通过对类与方法的注解，便可完成注册。即注解替换的是配置文件中对于处理器的注册部分。 3.1 第一个注解式开发程序 3.1.1 注册组件扫描器 这里的组件即处理器，需要指定处理器所在基本包。..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-02-24T04:33:47.000Z"}],["meta",{"property":"article:author","content":"hahg"}],["meta",{"property":"article:modified_time","content":"2024-02-24T04:33:47.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"三、SpringMVC注解式开发\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-02-24T04:33:47.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"hahg\\"}]}"]]},"headers":[{"level":2,"title":"3.1 第一个注解式开发程序","slug":"_3-1-第一个注解式开发程序","link":"#_3-1-第一个注解式开发程序","children":[{"level":3,"title":"3.1.1 注册组件扫描器","slug":"_3-1-1-注册组件扫描器","link":"#_3-1-1-注册组件扫描器","children":[]}]}],"git":{"createdTime":1708749227000,"updatedTime":1708749227000,"contributors":[{"name":"hahg2000","email":"61403802+hahg2000@users.noreply.github.com","commits":1}]},"readingTime":{"minutes":1.62,"words":486},"filePathRelative":"学习/后端/SSM框架/SpringMVC/三、SpringMVC注解式开发.md","localizedDate":"2024年2月24日","excerpt":"\\n<p>所谓SpringMVC的注解式开发是指，处理器是基于注解的类的开发。</p>\\n<p>对于每一个定义的处理器，无需在配置文件中逐个注册，只需在代码中通过对类与方法的注解，便可完成注册。即注解替换的是配置文件中对于处理器的注册部分。</p>\\n<h2>3.1 第一个注解式开发程序</h2>\\n<h3>3.1.1 注册组件扫描器</h3>\\n<p>这里的组件即处理器，需要指定处理器所在基本包。</p>\\n<div class=\\"language-xml\\" data-ext=\\"xml\\" data-title=\\"xml\\"><pre class=\\"language-xml\\"><code><span class=\\"token tag\\"><span class=\\"token tag\\"><span class=\\"token punctuation\\">&lt;</span><span class=\\"token namespace\\">context:</span>component-scan</span> <span class=\\"token attr-name\\">base-package</span><span class=\\"token attr-value\\"><span class=\\"token punctuation attr-equals\\">=</span><span class=\\"token punctuation\\">\\"</span>com.hahg.handlers<span class=\\"token punctuation\\">\\"</span></span><span class=\\"token punctuation\\">/&gt;</span></span>\\n</code></pre></div>","autoDesc":true}');export{d as comp,k as data};
