const e=JSON.parse('{"key":"v-7558bed4","path":"/%E5%AD%A6%E4%B9%A0/Haskell%E4%B8%AD%E6%96%87%E6%96%87%E6%A1%A3/8.html","title":"第 8 章：高效文件处理、正则表达式、文件名匹配","lang":"zh-CN","frontmatter":{"description":"第 8 章：高效文件处理、正则表达式、文件名匹配 高效文件处理 下面是个简单的基准测试，读取一个由数字构成的文本文件，并打印它们的和。 -- file: ch08/SumFile.hs main = do contents &lt;- getContents print (sumFile contents) where sumFile = sum . map read . words","head":[["meta",{"property":"og:url","content":"https://hahg2000.github.io/%E5%AD%A6%E4%B9%A0/Haskell%E4%B8%AD%E6%96%87%E6%96%87%E6%A1%A3/8.html"}],["meta",{"property":"og:title","content":"第 8 章：高效文件处理、正则表达式、文件名匹配"}],["meta",{"property":"og:description","content":"第 8 章：高效文件处理、正则表达式、文件名匹配 高效文件处理 下面是个简单的基准测试，读取一个由数字构成的文本文件，并打印它们的和。 -- file: ch08/SumFile.hs main = do contents &lt;- getContents print (sumFile contents) where sumFile = sum . map read . words"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-12-23T13:50:18.000Z"}],["meta",{"property":"article:modified_time","content":"2023-12-23T13:50:18.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"第 8 章：高效文件处理、正则表达式、文件名匹配\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-12-23T13:50:18.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"高效文件处理","slug":"高效文件处理","link":"#高效文件处理","children":[{"level":3,"title":"二进制 I/O 和有限载入","slug":"二进制-i-o-和有限载入","link":"#二进制-i-o-和有限载入","children":[]},{"level":3,"title":"文本 I/O","slug":"文本-i-o","link":"#文本-i-o","children":[]}]},{"level":2,"title":"匹配文件名","slug":"匹配文件名","link":"#匹配文件名","children":[]},{"level":2,"title":"Haskell 中的正则表达式","slug":"haskell-中的正则表达式","link":"#haskell-中的正则表达式","children":[{"level":3,"title":"结果的多种类型","slug":"结果的多种类型","link":"#结果的多种类型","children":[]}]},{"level":2,"title":"进一步了解正则表达式","slug":"进一步了解正则表达式","link":"#进一步了解正则表达式","children":[{"level":3,"title":"不同类型字符串的混合与匹配","slug":"不同类型字符串的混合与匹配","link":"#不同类型字符串的混合与匹配","children":[]},{"level":3,"title":"你要知道的其他一些事情","slug":"你要知道的其他一些事情","link":"#你要知道的其他一些事情","children":[]}]},{"level":2,"title":"将 glob 模式翻译为正则表达式","slug":"translate-a-glob-pattern-into-a-regular-expression","link":"#translate-a-glob-pattern-into-a-regular-expression","children":[{"level":3,"title":"练习","slug":"练习","link":"#练习","children":[]}]},{"level":2,"title":"重要的题外话：编写惰性函数","slug":"重要的题外话-编写惰性函数","link":"#重要的题外话-编写惰性函数","children":[]},{"level":2,"title":"利用我们的模式匹配器","slug":"利用我们的模式匹配器","link":"#利用我们的模式匹配器","children":[{"level":3,"title":"练习","slug":"练习-1","link":"#练习-1","children":[]}]},{"level":2,"title":"通过 API 设计进行错误处理","slug":"通过-api-设计进行错误处理","link":"#通过-api-设计进行错误处理","children":[{"level":3,"title":"练习","slug":"练习-2","link":"#练习-2","children":[]}]},{"level":2,"title":"让我们的代码工作","slug":"让我们的代码工作","link":"#让我们的代码工作","children":[{"level":3,"title":"练习","slug":"练习-3","link":"#练习-3","children":[]}]}],"git":{"createdTime":1703339418000,"updatedTime":1703339418000,"contributors":[{"name":"hahg2000","email":"61403802+hahg2000@users.noreply.github.com","commits":1}]},"readingTime":{"minutes":31.49,"words":9447},"filePathRelative":"学习/Haskell中文文档/8.md","localizedDate":"2023年12月23日","excerpt":"<h1> 第 8 章：高效文件处理、正则表达式、文件名匹配</h1>\\n<h2> 高效文件处理</h2>\\n<p>下面是个简单的基准测试，读取一个由数字构成的文本文件，并打印它们的和。</p>\\n<div class=\\"language-haskell line-numbers-mode\\" data-ext=\\"haskell\\"><pre class=\\"language-haskell\\"><code><span class=\\"token comment\\">-- file: ch08/SumFile.hs</span>\\n<span class=\\"token hvariable\\">main</span> <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">do</span>\\n    <span class=\\"token hvariable\\">contents</span> <span class=\\"token operator\\">&lt;-</span> <span class=\\"token builtin\\">getContents</span>\\n    <span class=\\"token builtin\\">print</span> <span class=\\"token punctuation\\">(</span><span class=\\"token hvariable\\">sumFile</span> <span class=\\"token hvariable\\">contents</span><span class=\\"token punctuation\\">)</span>\\n  <span class=\\"token keyword\\">where</span> <span class=\\"token hvariable\\">sumFile</span> <span class=\\"token operator\\">=</span> <span class=\\"token builtin\\">sum</span> <span class=\\"token operator\\">.</span> <span class=\\"token builtin\\">map</span> <span class=\\"token builtin\\">read</span> <span class=\\"token operator\\">.</span> <span class=\\"token builtin\\">words</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{e as data};
