import{_ as t,W as i,X as p,Y as s,Z as n,$ as e,a2 as l,C as o}from"./framework-0bc3c581.js";const c={},r=s("h1",{id:"一、入门",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#一、入门","aria-hidden":"true"},"#"),n(" 一、入门")],-1),u=s("ul",null,[s("li",null,[s("p",null,[n("学习Haskell的契机是想要学习 "),s("strong",null,"函数式编程")])]),s("li",null,[s("p",null,"函数式编程语言有很多，为什么选择 Haskell？因为 Haskell 是纯函数编程语言中最热门的")]),s("li",null,[s("p",null,"代码编辑器选择 VSCode，需要配置插件")])],-1),d=s("p",null,"下面会介绍一些会遇到的名词，可能会不太对（2023年3月12日之前 自己理解的）",-1),m={href:"https://www.haskell.org/",target:"_blank",rel:"noopener noreferrer"},h=l("<li>GHCup：<strong>必装</strong>，管理工具，可以管理 Haskell 所需要的所有工具。注意和 ghc 不是一样的东西 <ul><li>ghc：<strong>必装</strong>，Haskell 编译器，可以使用其来编译 .hs 文件</li><li>HLS：<strong>必装</strong>，Haskell Language Server，Haskell 语言服务器。不会直接 HLS，但 VSCode 需要在后台使用 HLS</li><li>Cabal：Haskell 项目构建工具。简单说就是脚手架，用于生成项目结构</li><li>Stack：Haskell 项目构建工具。也是脚手架，学习视频会使用 Cabal 或者 Stack，建议两个都转上。</li><li>以上在 GHCup 安装的时候都会提示安装，直接全部使用推荐版本，如果使用最新版本可能会有兼容性问题。</li></ul></li>",1),k=s("h1",{id:"二、安装",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#二、安装","aria-hidden":"true"},"#"),n(" 二、安装")],-1),v=s("h2",{id:"_2-1-安装ghcup",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#_2-1-安装ghcup","aria-hidden":"true"},"#"),n(" 2.1 安装GHCup")],-1),g={href:"https://www.haskell.org/ghcup/",target:"_blank",rel:"noopener noreferrer"},b={href:"https://www.haskell.org/ghcup/install/#manual-installation",target:"_blank",rel:"noopener noreferrer"},y=s("li",null,[s("p",null,[n("下载 "),s("code",null,"x86_64-mingw64-ghcup.exe"),n("，不要运行，放到一个不要那么深的目录下，例如 "),s("code",null,"C:\\ghcup\\bin")])],-1),_=s("h2",{id:"_2-2-安装msys2",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#_2-2-安装msys2","aria-hidden":"true"},"#"),n(" 2.2 安装MSYS2")],-1),x=s("li",null,"安装这工具因为 GHCup 需要使用",-1),q={href:"https://repo.msys2.org/distrib/msys2-x86_64-latest.exe",target:"_blank",rel:"noopener noreferrer"},f=s("li",null,[n("运行安装，要记住安装路径，例如 "),s("code",null,"C:\\msys64")],-1),w=l(`<h2 id="_2-3-配置环境变量" tabindex="-1"><a class="header-anchor" href="#_2-3-配置环境变量" aria-hidden="true">#</a> 2.3 配置环境变量</h2><ol><li>在 Path 添加 GHCup 的位置，例如 <code>C:\\ghcup\\bin</code></li><li>在用户变量新建一个变量，变量名填写 <code>GHCUP_MSYS2</code>，变量值填写 <code>C:\\msys64</code></li><li>再新建一个变量，变量名为 <code>GHCUP_CURL_OPTS</code> ，变量值填写 <code>-k</code> 。这个变量值的作用是跳过 CURL 的安全检查，CURL 在下载的时候会检查证书，会因为网络原因失败</li><li>然后在 GHCup 的配置文件配置镜像，配置文件位置 ：安装路径下的 <code>config.yaml</code></li><li>TODO：第3点和第4点是否只需要配置一个？需要后续验证</li></ol><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">url-source</span><span class="token punctuation">:</span>
  <span class="token key atrule">OwnSource</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//mirrors.ustc.edu.cn/ghcup/ghcup<span class="token punctuation">-</span>metadata/ghcup<span class="token punctuation">-</span>0.0.7.yaml
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>然后打开 powershell ，运行下面代码</p><ul><li><code>ghcup install ghc </code></li><li><code>ghcup install cabal </code></li><li><code>ghcup install stack </code></li><li><code>ghcup install hls </code></li></ul><p>安装好后，可以运行 <code>ghcup list</code> 查看已安装的版本</p><p>如果想要切换工具链的版本，<code>ghcup set ghc/stack/cabal/hls V.V.V</code> ，其中 <code>V.V.V</code> 代表工具的bj版本</p><h2 id="_2-4-配置stack" tabindex="-1"><a class="header-anchor" href="#_2-4-配置stack" aria-hidden="true">#</a> 2.4 配置stack</h2><ol><li>首先找到 stack 的安装位置，我的安装位置是 <code>C:\\Users\\xxxxx\\AppData\\Roaming\\stack</code> ，其中 xxxxx 是电脑的用户名。如果不知道的话，可以输入命令 <code>stack path</code> ，然后在输出信息的第 4 行，找到变量名为 <code>stack-root</code></li><li>然后打开 <code>config.yaml</code> ，这个是 stack 的主配置文件，并复制下面的代码</li></ol><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token comment"># 配置使用系统ghc</span>
<span class="token key atrule">system-ghc</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>

<span class="token comment"># 配置镜像</span>
<span class="token key atrule">setup-info-locations</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">&quot;https://mirrors.tuna.tsinghua.edu.cn/stackage/stack-setup.yaml&quot;</span><span class="token punctuation">]</span>
<span class="token key atrule">urls</span><span class="token punctuation">:</span>
  <span class="token key atrule">latest-snapshot</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//mirrors.tuna.tsinghua.edu.cn/stackage/snapshots.json

<span class="token key atrule">snapshot-location-base</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//mirrors.tuna.tsinghua.edu.cn/stackage/stackage<span class="token punctuation">-</span>snapshots/
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li>在这里也可以配置创建项目的时候，自动添加作者名字、版权声明等信息</li></ol><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">templates</span><span class="token punctuation">:</span>
  <span class="token key atrule">params</span><span class="token punctuation">:</span>
<span class="token comment">#    author-name:</span>
<span class="token comment">#    author-email:</span>
<span class="token comment">#    copyright:</span>
<span class="token comment">#    github-username:</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="4"><li>安装 msys2，输入 <code>stack setup</code> 。我暂时没找到使用在 2.2 节安装的 msys2，所以就只能再安装一个。</li></ol><h2 id="_2-5-创建项目" tabindex="-1"><a class="header-anchor" href="#_2-5-创建项目" aria-hidden="true">#</a> 2.5 创建项目</h2><ol><li>输入命令 <code>stack new project_name</code></li><li>配置项目的 <code>stack.yaml</code> ，然后里面找到 resolver，然后改为 <code>resolver: lts-20.11</code></li><li>然后启动命令 <code>stack build</code> ，如果没有报错则没有问题</li><li>配置插件，将下面代码添加到 json 文件里</li></ol><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token comment">// 设置用GHCup来管理HLS</span>
<span class="token property">&quot;haskell.manageHLS&quot;</span><span class="token operator">:</span> <span class="token string">&quot;GHCup&quot;</span><span class="token punctuation">,</span>
<span class="token comment">// 设置GHCup的安装位置</span>
<span class="token property">&quot;haskell.serverEnvironment&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
  <span class="token property">&quot;PATH&quot;</span><span class="token operator">:</span> <span class="token string">&quot;C:/ghcup/bin&quot;</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token comment">// 设置使用全局的工具链</span>
<span class="token property">&quot;haskell.toolchain&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
  <span class="token property">&quot;ghc&quot;</span><span class="token operator">:</span> <span class="token null keyword">null</span><span class="token punctuation">,</span>
  <span class="token property">&quot;cabal&quot;</span><span class="token operator">:</span> <span class="token null keyword">null</span><span class="token punctuation">,</span>
  <span class="token property">&quot;stack&quot;</span><span class="token operator">:</span> <span class="token null keyword">null</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="5"><li>最后 打开/重启打开 vscode，最后的效果如下</li></ol><img src="https://raw.githubusercontent.com/hahg2000/hahg2000.github.io/picture/haskell/配置成功示例.png" style="zoom:50%;"><h1 id="三、基本语法" tabindex="-1"><a class="header-anchor" href="#三、基本语法" aria-hidden="true">#</a> 三、基本语法</h1><p>学习基本语法，先不使用 vscode，先使用最简便的 <code>ghci</code> ，直接在命令行输入 <code>ghci</code> ，就可以进入。</p><p>历史：函数式编程和数学关系非常紧密，不像平常的面向对象和面向过程，很少使用到数学知识。如果说要用到数学知识的方向，估计就是算法之类的了。（陋见：平常写业务代码也使用不到红黑树之类的吧）</p><p>所以先从数学方面来学习基本语法，而不是像平常语言一样学习语句。</p><p>本章书籍链接：</p>`,23),H={href:"https://flaneur2020.github.io/lyah/ready-begin.htm",target:"_blank",rel:"noopener noreferrer"},C={href:"http://cnhaskell.com/",target:"_blank",rel:"noopener noreferrer"},z=l(`<h2 id="_3-1-简单运算" tabindex="-1"><a class="header-anchor" href="#_3-1-简单运算" aria-hidden="true">#</a> 3.1 简单运算</h2><ol><li>加减乘除没问题</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>ghci<span class="token operator">&gt;</span> <span class="token number">2</span> + <span class="token number">15</span>
<span class="token number">17</span>
ghci<span class="token operator">&gt;</span> <span class="token number">1823</span> - <span class="token number">1354</span>
<span class="token number">469</span>
ghci<span class="token operator">&gt;</span> <span class="token number">7</span> / <span class="token number">4</span>
<span class="token number">1.75</span>
ghci<span class="token operator">&gt;</span> <span class="token number">3</span> * <span class="token number">39</span>
<span class="token number">117</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>使用括号改变计算顺序</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>ghci<span class="token operator">&gt;</span> <span class="token number">10</span> + <span class="token number">8</span> * <span class="token number">20</span>
<span class="token number">170</span>
ghci<span class="token operator">&gt;</span> <span class="token punctuation">(</span><span class="token number">10</span> + <span class="token number">8</span><span class="token punctuation">)</span> * <span class="token number">20</span>
<span class="token number">360</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li>负数也要加上括号，就像 小学/初中 课本一样。但也和现在默认的一样，只要负号前面没有运算符，括号可以省略</li></ol><img src="https://raw.githubusercontent.com/hahg2000/hahg2000.github.io/picture/小学课本负数加括号.png" style="zoom:33%;"><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 负号在前面可以省略括号</span>
ghci<span class="token operator">&gt;</span> <span class="token parameter variable">-3</span> * <span class="token number">5</span>
<span class="token parameter variable">-15</span>

<span class="token comment"># 负号在前面有运算符需要加上括号</span>
ghci<span class="token operator">&gt;</span> <span class="token number">5</span> * <span class="token parameter variable">-3</span>
<span class="token operator">&lt;</span>interactive<span class="token operator">&gt;</span>:12:1: error:
    Precedence parsing error
        cannot mix ‘*’ <span class="token punctuation">[</span>infixl <span class="token number">7</span><span class="token punctuation">]</span> and prefix \`-&#39; <span class="token punctuation">[</span>infixl <span class="token number">6</span><span class="token punctuation">]</span> <span class="token keyword">in</span> the same infix expression
ghci<span class="token operator">&gt;</span> <span class="token number">5</span> * <span class="token punctuation">(</span>-3<span class="token punctuation">)</span>
<span class="token parameter variable">-15</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="6"><li>逻辑运算，与、或、非，<code>True</code> 和 <code>False</code> 记住 <strong>首字母要大写</strong></li></ol><div class="language-scala line-numbers-mode" data-ext="scala"><pre class="language-scala"><code>ghci<span class="token operator">&gt;</span> True <span class="token operator">&amp;&amp;</span> False   
False   
ghci<span class="token operator">&gt;</span> True <span class="token operator">&amp;&amp;</span> True   
True   
ghci<span class="token operator">&gt;</span> False <span class="token operator">||</span> True   
True    
ghci<span class="token operator">&gt;</span> not False   
True   
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="7"><li>相等性判断，不等于使用 <code>/=</code> ，而不是 <code>!=</code> 了， <code>/=</code> 更像不等号</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>ghci<span class="token operator">&gt;</span> <span class="token number">6</span> <span class="token operator">==</span> <span class="token number">6</span>   
True   
ghci<span class="token operator">&gt;</span> <span class="token number">6</span> <span class="token operator">==</span> <span class="token number">0</span>   
False   
ghci<span class="token operator">&gt;</span> <span class="token number">6</span> /<span class="token operator">=</span> <span class="token number">6</span>   
False   
ghci<span class="token operator">&gt;</span> <span class="token number">6</span> /<span class="token operator">=</span> <span class="token number">0</span>   
True   
ghci<span class="token operator">&gt;</span> <span class="token string">&quot;hello&quot;</span> <span class="token operator">==</span> <span class="token string">&quot;hello&quot;</span>   
True  
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="8"><li>进行运算的时候，需要左右两边都是一样的类型。不然就像现实生活中说，你的年龄比我昨天睡得还要晚。（胡言乱语.jpg）</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>ghci<span class="token operator">&gt;</span> <span class="token number">5</span> + <span class="token string">&quot;1&quot;</span>

<span class="token operator">&lt;</span>interactive<span class="token operator">&gt;</span>:19:3: error:
    ? No instance <span class="token keyword">for</span> <span class="token punctuation">(</span>Num String<span class="token punctuation">)</span> arising from a use of ‘+’
    ? In the expression: <span class="token number">5</span> + <span class="token string">&quot;1&quot;</span>
      In an equation <span class="token keyword">for</span> ‘it’: it <span class="token operator">=</span> <span class="token number">5</span> + <span class="token string">&quot;1&quot;</span>
ghci<span class="token operator">&gt;</span> <span class="token number">5</span> <span class="token operator">==</span> <span class="token string">&quot;1&quot;</span>

<span class="token operator">&lt;</span>interactive<span class="token operator">&gt;</span>:20:1: error:
    ? No instance <span class="token keyword">for</span> <span class="token punctuation">(</span>Num String<span class="token punctuation">)</span> arising from the literal ‘5’
    ? In the first argument of ‘<span class="token punctuation">(</span><span class="token operator">==</span><span class="token punctuation">)</span>’, namely ‘5’
      In the expression: <span class="token number">5</span> <span class="token operator">==</span> <span class="token string">&quot;1&quot;</span>
      In an equation <span class="token keyword">for</span> ‘it’: it <span class="token operator">=</span> <span class="token number">5</span> <span class="token operator">==</span> <span class="token string">&quot;1&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="9"><li>我们可以用命令 <code>:info</code> 来查看某个操作符的优先级，或者某个类型的详细信息</li></ol><ul><li>第 1 ~ 4 行可以看到 <strong>String 其实是 Char 字符类型的数组</strong>，这点和 C 语句很像；以及这个类型在 GHC的Base 里定义的（是文件还是类？）</li><li>第 6 ~ 12 行可以看到 <code>+</code> 函数需要传入两个 Num 值；在 GHC 的 Num 里定义的；<code>infixl 6 +</code>，表示 <code>(+)</code> 的 <strong>左结合优先级</strong> 是 6；而 <code>infixr 8</code> ，表示 <code>(^)</code> 的 <strong>右结合优先级</strong> 是 8</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>ghci<span class="token operator">&gt;</span> :info String
<span class="token builtin class-name">type</span> String :: *
<span class="token builtin class-name">type</span> String <span class="token operator">=</span> <span class="token punctuation">[</span>Char<span class="token punctuation">]</span>
        -- Defined <span class="token keyword">in</span> ‘GHC.Base’
        
ghci<span class="token operator">&gt;</span> :info +
<span class="token builtin class-name">type</span> Num :: * -<span class="token operator">&gt;</span> Constraint
class Num a where
  <span class="token punctuation">(</span>+<span class="token punctuation">)</span> :: a -<span class="token operator">&gt;</span> a -<span class="token operator">&gt;</span> a
  <span class="token punctuation">..</span>.
        -- Defined <span class="token keyword">in</span> ‘GHC.Num’
infixl <span class="token number">6</span> +

ghci<span class="token operator">&gt;</span> :info ^
<span class="token punctuation">(</span>^<span class="token punctuation">)</span> :: <span class="token punctuation">(</span>Num a, Integral b<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> a -<span class="token operator">&gt;</span> b -<span class="token operator">&gt;</span> a       -- Defined <span class="token keyword">in</span> ‘GHC.Real’
infixr <span class="token number">8</span> ^
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="10"><li>乘方操作符的两种形式，如果指数是整数，使用 <code>^</code> 符号；如果是小数，使用 <code>**</code> 符号。</li></ol>`,18),S=s("p",null,[s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("msup",null,[s("mn",null,"4"),s("mn",null,"2.5")]),s("mo",null,"="),s("msup",null,[s("mn",null,"4"),s("mn",null,"2")]),s("mo",null,"∗"),s("msup",null,[s("mn",null,"4"),s("mn",null,"0.5")]),s("mo",null,"="),s("mn",null,"16"),s("mo",null,"∗"),s("msup",null,[s("mn",null,"4"),s("mfrac",null,[s("mn",null,"1"),s("mn",null,"2")])]),s("mo",null,"="),s("mn",null,"16"),s("mo",null,"∗"),s("mroot",null,[s("mn",null,"4"),s("mn",null,"2")]),s("mo",null,"="),s("mn",null,"16"),s("mo",null,"∗"),s("mn",null,"2"),s("mo",null,"="),s("mn",null,"32")]),s("annotation",{encoding:"application/x-tex"},"4 ^ {2.5} = 4 ^ {2} * 4 ^ {0.5} = 16 * 4 ^ {\\frac{1}{2}} = 16 * \\sqrt[2]{4} = 16 * 2 = 32")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.8141em"}}),s("span",{class:"mord"},[s("span",{class:"mord"},"4"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.8141em"}},[s("span",{style:{top:"-3.063em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},[s("span",{class:"mord mtight"},"2.5")])])])])])])])]),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mrel"},"="),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.8141em"}}),s("span",{class:"mord"},[s("span",{class:"mord"},"4"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.8141em"}},[s("span",{style:{top:"-3.063em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},[s("span",{class:"mord mtight"},"2")])])])])])])])]),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"∗"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.8141em"}}),s("span",{class:"mord"},[s("span",{class:"mord"},"4"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.8141em"}},[s("span",{style:{top:"-3.063em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},[s("span",{class:"mord mtight"},"0.5")])])])])])])])]),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mrel"},"="),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6444em"}}),s("span",{class:"mord"},"16"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"∗"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.954em"}}),s("span",{class:"mord"},[s("span",{class:"mord"},"4"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.954em"}},[s("span",{style:{top:"-3.363em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},[s("span",{class:"mord mtight"},[s("span",{class:"mopen nulldelimiter sizing reset-size3 size6"}),s("span",{class:"mfrac"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.8443em"}},[s("span",{style:{top:"-2.656em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"sizing reset-size3 size1 mtight"},[s("span",{class:"mord mtight"},[s("span",{class:"mord mtight"},"2")])])]),s("span",{style:{top:"-3.2255em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"frac-line mtight",style:{"border-bottom-width":"0.049em"}})]),s("span",{style:{top:"-3.384em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"sizing reset-size3 size1 mtight"},[s("span",{class:"mord mtight"},[s("span",{class:"mord mtight"},"1")])])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.344em"}},[s("span")])])])]),s("span",{class:"mclose nulldelimiter sizing reset-size3 size6"})])])])])])])])])]),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mrel"},"="),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6444em"}}),s("span",{class:"mord"},"16"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"∗"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1.04em","vertical-align":"-0.1328em"}}),s("span",{class:"mord sqrt"},[s("span",{class:"root"},[s("span",{class:"vlist-t"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.7869em"}},[s("span",{style:{top:"-2.9647em"}},[s("span",{class:"pstrut",style:{height:"2.5em"}}),s("span",{class:"sizing reset-size6 size1 mtight"},[s("span",{class:"mord mtight"},[s("span",{class:"mord mtight"},"2")])])])])])])]),s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.9072em"}},[s("span",{class:"svg-align",style:{top:"-3em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"mord",style:{"padding-left":"0.833em"}},[s("span",{class:"mord"},"4")])]),s("span",{style:{top:"-2.8672em"}},[s("span",{class:"pstrut",style:{height:"3em"}}),s("span",{class:"hide-tail",style:{"min-width":"0.853em",height:"1.08em"}},[s("svg",{xmlns:"http://www.w3.org/2000/svg",width:"400em",height:"1.08em",viewBox:"0 0 400000 1080",preserveAspectRatio:"xMinYMin slice"},[s("path",{d:`M95,702
c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14
c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54
c44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10
s173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429
c69,-144,104.5,-217.7,106.5,-221
l0 -0
c5.3,-9.3,12,-14,20,-14
H400000v40H845.2724
s-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7
c-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47z
M834 80h400000v40h-400000z`})])])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.1328em"}},[s("span")])])])]),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mrel"},"="),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6444em"}}),s("span",{class:"mord"},"16"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"∗"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6444em"}}),s("span",{class:"mord"},"2"),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),s("span",{class:"mrel"},"="),s("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.6444em"}}),s("span",{class:"mord"},"32")])])])],-1),I=l(`<div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>ghci<span class="token operator">&gt;</span> <span class="token number">4</span> ** <span class="token number">2.5</span>
<span class="token number">32.0</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3-2-基本类型" tabindex="-1"><a class="header-anchor" href="#_3-2-基本类型" aria-hidden="true">#</a> 3.2 基本类型</h2><h3 id="_1-列表" tabindex="-1"><a class="header-anchor" href="#_1-列表" aria-hidden="true">#</a> 1）列表</h3><p>一个列表由方括号以及被逗号分隔的元素组成。<strong>列表里所有的元素必须是相同类型</strong>。（万恶的 Javascript）</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>ghci<span class="token operator">&gt;</span> <span class="token punctuation">[</span><span class="token number">1</span>, <span class="token number">2</span>, <span class="token string">&quot;3&quot;</span><span class="token punctuation">]</span>
<span class="token operator">&lt;</span>interactive<span class="token operator">&gt;</span>:15:2: error:
    ? No instance <span class="token keyword">for</span> <span class="token punctuation">(</span>Num String<span class="token punctuation">)</span> arising from the literal ‘1’
    ? In the expression: <span class="token number">1</span>
      In the expression: <span class="token punctuation">[</span><span class="token number">1</span>, <span class="token number">2</span>, <span class="token string">&quot;3&quot;</span><span class="token punctuation">]</span>
      In an equation <span class="token keyword">for</span> ‘it’: it <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span>, <span class="token number">2</span>, <span class="token string">&quot;3&quot;</span><span class="token punctuation">]</span>
      
ghci<span class="token operator">&gt;</span> <span class="token punctuation">[</span><span class="token number">1</span>, <span class="token number">2</span>, <span class="token number">3</span><span class="token punctuation">]</span>
<span class="token punctuation">[</span><span class="token number">1,2</span>,3<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果用 列举符号 <code>..</code> 来表示一系列元素，Haskell则会根据规律自动填充内容，但只使用于等差数列。在计算一些数学公式的时候会很有用。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>ghci<span class="token operator">&gt;</span> <span class="token punctuation">[</span><span class="token number">1</span>, <span class="token number">2</span><span class="token punctuation">..</span><span class="token number">10</span><span class="token punctuation">]</span>
<span class="token punctuation">[</span><span class="token number">1,2</span>,3,4,5,6,7,8,9,10<span class="token punctuation">]</span>

ghci<span class="token operator">&gt;</span> <span class="token punctuation">[</span><span class="token number">1</span>, <span class="token number">3</span><span class="token punctuation">..</span><span class="token number">10</span><span class="token punctuation">]</span>
<span class="token punctuation">[</span><span class="token number">1,3</span>,5,7,9<span class="token punctuation">]</span>

ghci<span class="token operator">&gt;</span> <span class="token punctuation">[</span><span class="token number">10</span>, <span class="token number">9</span><span class="token punctuation">..</span><span class="token number">1</span><span class="token punctuation">]</span>
<span class="token punctuation">[</span><span class="token number">10,9</span>,8,7,6,5,4,3,2,1<span class="token punctuation">]</span>

ghci<span class="token operator">&gt;</span> <span class="token punctuation">[</span><span class="token number">2</span>, <span class="token number">4</span>, <span class="token number">8</span>, <span class="token number">16</span><span class="token punctuation">..</span><span class="token number">64</span><span class="token punctuation">]</span> <span class="token comment"># 原意是 [2, 4, 8, 16, 32, 64]</span>
<span class="token operator">&lt;</span>interactive<span class="token operator">&gt;</span>:27:13: error: parse error on input ‘<span class="token punctuation">..</span>’
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果类型是浮点数的话，也会像常见的编程语言一样，会很怪异。（详情可以搜索浮点数在计算机里的存储方式）</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>ghci<span class="token operator">&gt;</span> <span class="token punctuation">[</span><span class="token number">1</span>, <span class="token number">1.2</span><span class="token punctuation">..</span><span class="token number">2</span><span class="token punctuation">]</span>
<span class="token punctuation">[</span><span class="token number">1.0</span>,1.2,1.4,1.5999999999999999,1.7999999999999998,1.9999999999999998<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>列表的操作大概有两种：一种是 <code>++</code> ，用于连接两个列表，很简单，毕竟在平常使用中要连接两个列表只需要擦掉中间连接的括号；一种是 <code>元素 : 列表</code> ，用于在列表的头部添加元素。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>ghci<span class="token operator">&gt;</span> <span class="token punctuation">[</span><span class="token number">1</span>, <span class="token number">2</span><span class="token punctuation">]</span> ++ <span class="token punctuation">[</span><span class="token number">3</span>, <span class="token number">4</span><span class="token punctuation">]</span>
<span class="token punctuation">[</span><span class="token number">1,2</span>,3,4<span class="token punctuation">]</span>
ghci<span class="token operator">&gt;</span> <span class="token string">&quot;Hello &quot;</span> ++ <span class="token string">&quot;World&quot;</span>
<span class="token string">&quot;Hello World&quot;</span>
ghci<span class="token operator">&gt;</span> <span class="token number">1</span> <span class="token builtin class-name">:</span> <span class="token punctuation">[</span><span class="token number">2</span>, <span class="token number">3</span>, <span class="token number">4</span><span class="token punctuation">]</span>
<span class="token punctuation">[</span><span class="token number">1,2</span>,3,4<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-开启类型显示" tabindex="-1"><a class="header-anchor" href="#_2-开启类型显示" aria-hidden="true">#</a> 2）开启类型显示</h3><ol><li>使用 <code> :set +t</code> 开启类型显示；<code>it</code> 代表最近一次求的值所存到的变量</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>ghci<span class="token operator">&gt;</span> <span class="token punctuation">[</span><span class="token string">&#39;h&#39;</span>, <span class="token string">&#39;e&#39;</span>, <span class="token string">&#39;l&#39;</span><span class="token punctuation">]</span>
<span class="token string">&quot;hel&quot;</span>
it :: <span class="token punctuation">[</span>Char<span class="token punctuation">]</span>
ghci<span class="token operator">&gt;</span> <span class="token string">&quot;hel&quot;</span>
<span class="token string">&quot;hel&quot;</span>
it :: String
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>使用 <code>:unset +t</code> 关闭类型显示</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>ghci<span class="token operator">&gt;</span> <span class="token string">&quot;World&quot;</span>
<span class="token string">&quot;World&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li>在关闭类型显示的时候，可以使用 <code>:type xxxxx</code> 来显示某个值的类型</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>ghci<span class="token operator">&gt;</span> :type <span class="token string">&quot;!&quot;</span>
<span class="token string">&quot;!&quot;</span> :: String
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-数字" tabindex="-1"><a class="header-anchor" href="#_3-数字" aria-hidden="true">#</a> 3）数字</h3><p>数字在 Haskell 里比较复杂。简单来说，非小数的数字有两种，一个是 <code>Integer</code> ，无界整数；另一个是 <code>Int</code> ，有界整数，他们的父类（构造函数）是 <code>Integral</code> 。</p><p>无界整数，换句话来说就是 bignums 类型，可以用来防止数字溢出。</p><div class="hint-container warning"><p class="hint-container-title">注意</p><p>ghc 9.2.5 版本会报错，在 ghc 9.2.8 修复了这个 Bug</p></div><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>ghci<span class="token operator">&gt;</span> <span class="token number">2</span> ^ <span class="token number">1000</span>
<span class="token number">10715086071862673209484250490600018105614048117055336074437503883703510511249361224931983788156958581275946729175531468251871452856923140435984577574698574803934567774824230985421074605062371141877954182153046474983581941267398767559165543946077062914571196477686542167660429831652624386837205668069376</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>`,23),G={href:"https://www.haskell.org/tutorial/numbers.html",target:"_blank",rel:"noopener noreferrer"},N=l(`<h3 id="_4-元组" tabindex="-1"><a class="header-anchor" href="#_4-元组" aria-hidden="true">#</a> 4）元组</h3><ul><li>元组长度固定，里面的每个元素类型可以不同。用于存放一个东西的不同信息，例如一本书的书名、价格、持有数量等</li><li>列表长度不固定，里面的每个元素类型必须相同。用于存放不同东西的相同信息，例如一个图书馆的所有书的价格</li></ul><p>从下面的代码可知元组的类型就是 信息类型的集合</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>ghci<span class="token operator">&gt;</span> <span class="token punctuation">(</span><span class="token string">&quot;Kiniro Mosaic&quot;</span>, <span class="token string">&quot;YUI&quot;</span>, <span class="token number">2010</span><span class="token punctuation">)</span>
<span class="token punctuation">(</span><span class="token string">&quot;Kiniro Mosaic&quot;</span>,<span class="token string">&quot;YUI&quot;</span>,2010<span class="token punctuation">)</span>
ghci<span class="token operator">&gt;</span> :type <span class="token punctuation">(</span><span class="token string">&quot;Kiniro Mosaic&quot;</span>, <span class="token string">&quot;YUI&quot;</span>, <span class="token number">2010</span><span class="token punctuation">)</span>
<span class="token punctuation">(</span><span class="token string">&quot;Kiniro Mosaic&quot;</span>, <span class="token string">&quot;YUI&quot;</span>, <span class="token number">2010</span><span class="token punctuation">)</span> :: Num c <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token punctuation">(</span>String, String, c<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5-变量" tabindex="-1"><a class="header-anchor" href="#_5-变量" aria-hidden="true">#</a> 5）变量</h3><ul><li><p>变量在 Haskell 可以成为常量，因为当与一个表达式绑定后，那么这个变量的值就不会改变。</p></li><li><p>实际原因是 Haskell 的初心，一个表达式无论外界发生了什么变化，其返回的值都不应该变化</p></li></ul><p>如果在编辑器上像下面这样写，就会报错，但在 ghci 里这样写可以正常替换</p><div class="language-haskell line-numbers-mode" data-ext="haskell"><pre class="language-haskell"><code><span class="token hvariable">x</span> <span class="token operator">=</span> <span class="token number">2</span>
<span class="token hvariable">x</span> <span class="token operator">=</span> <span class="token number">1</span>
<span class="token comment">-- Multiple declarations of ‘x’</span>
<span class="token comment">-- Declared at: E:\\haskell\\test.hs:1:1</span>
<span class="token comment">--              E:\\haskell\\test.hs:3:1 typecheck</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3-3-函数使用" tabindex="-1"><a class="header-anchor" href="#_3-3-函数使用" aria-hidden="true">#</a> 3.3 函数使用</h2><ol><li>其实我们一直在使用函数，分为前缀函数 和 中缀函数。中缀函数就是 3.1 所提及的基本运算，运算符/函数 在中间；前端函数就是最常见函数的调用方法，<code>函数名 参数1 参数2 ...</code></li></ol><div class="language-powershell line-numbers-mode" data-ext="powershell"><pre class="language-powershell"><code>ghci&gt; succ 8  <span class="token comment">&lt;# succ函数返回一个数的后继 #&gt;</span>
9  
ghci&gt; min 9 11  <span class="token comment">&lt;# min函数返回两个数的最小值 #&gt;</span> 
9      
ghci&gt; max 99 101  <span class="token comment">&lt;# max函数返回两个数的最大值 #&gt;</span>  
101  
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>函数调用拥有最高的优先级，如下两句是等效的</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>ghci<span class="token operator">&gt;</span> succ <span class="token number">9</span> + max <span class="token number">5</span> <span class="token number">4</span> + <span class="token number">1</span>  
<span class="token number">16</span>   
ghci<span class="token operator">&gt;</span> <span class="token punctuation">(</span>succ <span class="token number">9</span><span class="token punctuation">)</span> + <span class="token punctuation">(</span>max <span class="token number">5</span> <span class="token number">4</span><span class="token punctuation">)</span> + <span class="token number">1</span>   <span class="token operator">&lt;</span><span class="token comment"># 10 + 5 + 1 #&gt;  </span>
<span class="token number">16</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li>如果某函数有两个参数，也可以用 [\`] 符号将它括起，以中缀函数的形式调用它。例如 例如除法的 div 函数，中缀函数更符合数学的思维。注：<strong>[\`] 符号一定需要，否则会报错</strong></li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>ghci<span class="token operator">&gt;</span> div <span class="token number">90</span> <span class="token number">9</span>
<span class="token number">10</span>
ghci<span class="token operator">&gt;</span> <span class="token number">90</span> <span class="token variable"><span class="token variable">\`</span>div<span class="token variable">\`</span></span> <span class="token number">9</span>
<span class="token number">10</span>
ghci<span class="token operator">&gt;</span> <span class="token number">90</span> div <span class="token number">9</span>
<span class="token operator">&lt;</span>interactive<span class="token operator">&gt;</span>:4:1: error:
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3-3-定义函数和if运算" tabindex="-1"><a class="header-anchor" href="#_3-3-定义函数和if运算" aria-hidden="true">#</a> 3.3 定义函数和if运算</h2><ol><li>定义函数格式 <code>函数名 参数1 参数2 ... = 返回值</code> ，例如 <code>doubleUs x y = x*2 + y*2 </code></li><li></li></ol>`,17);function T(M,L){const a=o("ExternalLinkIcon");return i(),p("div",null,[r,u,d,s("ul",null,[s("li",null,[n("Haskell：编程语言，官网 "),s("a",m,[n("https://www.haskell.org/"),e(a)])]),h]),k,v,s("ul",null,[s("li",null,[s("p",null,[n("GHCup 官网："),s("a",g,[n("https://www.haskell.org/ghcup/"),e(a)])])]),s("li",null,[s("p",null,[n("理论上一行代码就可以完成安装，就像官网所示。但是由于网络原因，需要手动安装。空降 "),s("a",b,[n("https://www.haskell.org/ghcup/install/#manual-installation"),e(a)])])]),y]),_,s("ul",null,[x,s("li",null,[n("下载链接： "),s("a",q,[n("https://repo.msys2.org/distrib/msys2-x86_64-latest.exe"),e(a)])]),f]),w,s("ul",null,[s("li",null,[s("a",H,[n("https://flaneur2020.github.io/lyah/ready-begin.htm"),e(a)])]),s("li",null,[s("a",C,[n("http://cnhaskell.com/"),e(a)])])]),z,S,I,s("p",null,[n("有小数的数字可以查看官方文档："),s("a",G,[n("https://www.haskell.org/tutorial/numbers.html"),e(a)])]),N])}const U=t(c,[["render",T],["__file","一、入门.html.vue"]]);export{U as default};
