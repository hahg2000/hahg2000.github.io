import{_ as p}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as o,o as l,c,a as s,b as a,d as e,f as t}from"./app-Chw2KLnS.js";const i={},r=s("h1",{id:"第-16-章-使用parsec",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#第-16-章-使用parsec"},[s("span",null,"第 16 章：使用Parsec")])],-1),u=s("p",null,'为一个文本文件或者不同类型的数据做语法分析(parsing)，对程序员来说是个很常见的任务，在本书第198页"使用正则表达式"一节中，我们已经学习了 Haskell 对正则表达式的支持。对很多这样的任务，正则表达式都很好用。',-1),k=s("p",null,"不过，当处理复杂的数据格式时，正则表达式很快就会变得不实用、甚至完全不可用。比如说，对于多数编程语言来说，我们没法（只）用正则表达式去 parse 其源代码。",-1),d={href:"https://en.wikipedia.org/wiki/Parser_combinator",target:"_blank",rel:"noopener noreferrer"},v=t(`<p>将 Parsec 同其他语言的 parse 工具做下对比是很有帮助的，语法分析有时会被分为两个阶段：词法分析（这方面的工具比如 <code>flex</code> ）和语法分析（比如 <code>bison</code> ). Parsec 可以同时处理词法分析和语法分析。 (译注：词法分析将输入的字符串序列转化为一个个的 token，而语法分析进一步接受这些 token 作为输入生成语法树）</p><h2 id="parsec-初步-简单的-csv-parser" tabindex="-1"><a class="header-anchor" href="#parsec-初步-简单的-csv-parser"><span>Parsec 初步：简单的 CSV parser</span></a></h2><p>让我们来写一个解析 CSV 文件的代码。CSV 是纯文本文件，常被用来表示表格或者数据库。每行是一个记录，一个记录中的字段用逗号分隔。至于包含逗号的字段，有特殊的处理方法，不过在这一节我们暂时不考虑这种情况。</p><p>下面的代码比实际需要的代码要长一些，不过接下来，我们很快就会介绍一些 Parsec 的特性，应用这些特性，整个 parser 只需要四行。</p><div class="language-haskell line-numbers-mode" data-ext="haskell" data-title="haskell"><pre class="language-haskell"><code><span class="token comment">-- file: ch16/csv1.hs</span>
<span class="token import-statement"><span class="token keyword">import</span> Text<span class="token punctuation">.</span>ParserCombinators<span class="token punctuation">.</span>Parsec</span>

<span class="token comment">{- A CSV file contains 0 or more lines, each of which is terminated
   by the end-of-line character (eol). -}</span>
<span class="token hvariable">csvFile</span> <span class="token operator">::</span> <span class="token constant">GenParser</span> <span class="token constant">Char</span> <span class="token hvariable">st</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token constant">String</span><span class="token punctuation">]</span><span class="token punctuation">]</span>
<span class="token hvariable">csvFile</span> <span class="token operator">=</span> 
    <span class="token keyword">do</span> <span class="token hvariable">result</span> <span class="token operator">&lt;-</span> <span class="token hvariable">many</span> <span class="token hvariable">line</span>
       <span class="token hvariable">eof</span>
       <span class="token builtin">return</span> <span class="token hvariable">result</span>

<span class="token comment">-- Each line contains 1 or more cells, separated by a comma</span>
<span class="token hvariable">line</span> <span class="token operator">::</span> <span class="token constant">GenParser</span> <span class="token constant">Char</span> <span class="token hvariable">st</span> <span class="token punctuation">[</span><span class="token constant">String</span><span class="token punctuation">]</span>
<span class="token hvariable">line</span> <span class="token operator">=</span> 
    <span class="token keyword">do</span> <span class="token hvariable">result</span> <span class="token operator">&lt;-</span> <span class="token hvariable">cells</span>
       <span class="token hvariable">eol</span>                       <span class="token comment">-- end of line</span>
       <span class="token builtin">return</span> <span class="token hvariable">result</span>

<span class="token comment">-- Build up a list of cells.  Try to parse the first cell, then figure out </span>
<span class="token comment">-- what ends the cell.</span>
<span class="token hvariable">cells</span> <span class="token operator">::</span> <span class="token constant">GenParser</span> <span class="token constant">Char</span> <span class="token hvariable">st</span> <span class="token punctuation">[</span><span class="token constant">String</span><span class="token punctuation">]</span>
<span class="token hvariable">cells</span> <span class="token operator">=</span> 
    <span class="token keyword">do</span> <span class="token hvariable">first</span> <span class="token operator">&lt;-</span> <span class="token hvariable">cellContent</span>
       <span class="token hvariable">next</span> <span class="token operator">&lt;-</span> <span class="token hvariable">remainingCells</span>
       <span class="token builtin">return</span> <span class="token punctuation">(</span><span class="token hvariable">first</span> <span class="token operator">:</span> <span class="token hvariable">next</span><span class="token punctuation">)</span>

<span class="token comment">-- The cell either ends with a comma, indicating that 1 or more cells follow,</span>
<span class="token comment">-- or it doesn&#39;t, indicating that we&#39;re at the end of the cells for this line</span>
<span class="token hvariable">remainingCells</span> <span class="token operator">::</span> <span class="token constant">GenParser</span> <span class="token constant">Char</span> <span class="token hvariable">st</span> <span class="token punctuation">[</span><span class="token constant">String</span><span class="token punctuation">]</span>
<span class="token hvariable">remainingCells</span> <span class="token operator">=</span>
    <span class="token punctuation">(</span><span class="token hvariable">char</span> <span class="token char string">&#39;,&#39;</span> <span class="token operator">&gt;&gt;</span> <span class="token hvariable">cells</span><span class="token punctuation">)</span>            <span class="token comment">-- Found comma?  More cells coming</span>
    <span class="token operator">&lt;|&gt;</span> <span class="token punctuation">(</span><span class="token builtin">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>                <span class="token comment">-- No comma?  Return [], no more cells</span>

<span class="token comment">-- Each cell contains 0 or more characters, which must not be a comma or</span>
<span class="token comment">-- EOL</span>
<span class="token hvariable">cellContent</span> <span class="token operator">::</span> <span class="token constant">GenParser</span> <span class="token constant">Char</span> <span class="token hvariable">st</span> <span class="token constant">String</span>
<span class="token hvariable">cellContent</span> <span class="token operator">=</span> 
    <span class="token hvariable">many</span> <span class="token punctuation">(</span><span class="token hvariable">noneOf</span> <span class="token string">&quot;,\\n&quot;</span><span class="token punctuation">)</span>


<span class="token comment">-- The end of line character is \\n</span>
<span class="token hvariable">eol</span> <span class="token operator">::</span> <span class="token constant">GenParser</span> <span class="token constant">Char</span> <span class="token hvariable">st</span> <span class="token constant">Char</span>
<span class="token hvariable">eol</span> <span class="token operator">=</span> <span class="token hvariable">char</span> <span class="token char string">&#39;\\n&#39;</span>

<span class="token hvariable">parseCSV</span> <span class="token operator">::</span> <span class="token constant">String</span> <span class="token operator">-&gt;</span> <span class="token constant">Either</span> <span class="token constant">ParseError</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token constant">String</span><span class="token punctuation">]</span><span class="token punctuation">]</span>
<span class="token hvariable">parseCSV</span> <span class="token hvariable">input</span> <span class="token operator">=</span> <span class="token hvariable">parse</span> <span class="token hvariable">csvFile</span> <span class="token string">&quot;(unknown)&quot;</span> <span class="token hvariable">input</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们来讲解下这段代码，在这段代码中，我们并没有使用 Parsec 的特性，因此要记住这段代码还能写得更简洁！</p><p>我们自顶向下的构建了一个 CSV 的 parser，第一个函数是 <code>csvFile</code>。它的类型是 <code>GenParser Char st [[String]]</code>， 这表示这个函数的输入是字符序列，也就是 Haskell 中的字符串，因为 <code>String</code> 不过是 <code>[Char]</code> 的别名，而这个函数的返回类型是 <code>[[String]]</code> ： 一个字符串列表的列表。至于 <code>st</code> ，我们暂时忽略它</p><p>Parsec 程序员经常会写一些小函数，因此他们常常懒得写函数的类型签名。Haskell 的类型推导系统能够自动识别函数类型。而在上面第一个例子中，我们写出了所有函数的类型，方便你了解函数到底在干什么。另外你可以在 <code>ghci</code> 中使用 <code>:t</code> 来查看函数的类型。</p><p><code>csvFile</code> 函数使用了 <code>do</code> 语句，如其所示，Parsec 库是 monadic 的，它定义了用于语法分析的[1][ref1]：<code>Genparser</code> monad。</p><p><code>csvFile</code> 函数首先运行的是 <code>many line</code>，<code>many</code>是一个高阶函数，它接受一个 parser 函数作为参数，不断对输入应用这个 parser，并把每次 parse 的结果组成一个列表返回。在 <code>csvFile</code> 中，我们把对 csv 文件中所有行的解析结果存储到 <code>result</code>中，然后，当我们遇到文件终结符 EOF 时，就返回 <code>result</code>。也就是说：一个 CSV 文件有好多行组成，以 EOF 结尾。Parsec 写成的函数如此简洁，我们常常能够像这样直接用语言来解释。</p><p>上一段说，一个 CSV 文件由许多行组成，现在，我们需要说明，什么是&quot;一行&quot;，为此，我们定义了 <code>line</code> 函数来解析 CSV 文件中的一行，通过阅读函数代码，我们可以发现，CSV 文件中的一行，包括许多&quot;单元格&quot;，最后跟着一个换行符。</p><p>那么，什么是&quot;许多单元格&quot;呢，我们通过 <code>cells</code> 函数来解析一行中的所有单元格。一行中的所有单元格，包括一个到多个单元格。因此，我们首先解析第一个单元格的内容，然后，解析剩下的单元格，返回剩下的单元格内容组成的列表，最后，<code>cells</code> 把第一个单元格与剩余单元格列表组成一个新的单元格列表返回。</p><p>我们先跳过 <code>remainingCells</code> 函数，去看 <code>cellContent</code>函数，<code>cellContent</code> 解析一个单元格的内容。一个单元格可以包含任意数量的字符，但每一个字符都不能是逗号或者换行符（译注：实际可以包含逗号，不过我们目前不考虑这种情况），我们使用 <code>noneOf</code> 函数来匹配这两个特殊字符，来确保我们遇到的不是这样的字符，于是，<code>many noneOf &quot;,\\n&quot;</code>定义了一个单元格。</p><p>然后再来看 <code>remainingCells</code> 函数，这个函数用来在解析完一行中第一个单元格之后，解析该行中剩余的单元格。在这个函数中，我们初次使用了 Parsec 中的选择操作，选择操作符是 <code>&lt;|&gt;</code>。这个操作符是这样定义的：它会首先尝试操作符左边的 parser 函数，如果这个parser没能成功消耗任何输入字符（译注：没有消耗任何输入，即是说，从输入字符串的第一个字符，就可以判定无法成功解析，例如，我们希望解析&quot;html&quot;这个字符串，遇到的却是&quot;php&quot;，那从&quot;php&quot;的第一个字符&#39;p&#39;，就可以判定不会解析成功。而如果遇到的是&quot;http&quot;，那么我们需要消耗掉&quot;ht&quot;这两个字符之后，才判定匹配失败，此时，即使已经匹配失败，&quot;ht&quot;这两个字符仍然是被消耗掉了），那么，就尝试操作符右边的 parser。</p><p>在函数 <code>remainingCells</code> 中，我们的任务是去解析第一个单元格之后的所有单元格，<code>cellContent</code> 函数使用了 <code>noneOf &quot;,\\n&quot;</code>，所以逗号和换行符不会被 <code>cellContent</code> 消耗掉，因此，如果我们在解析完一个单元格之后，见到了一个逗号，这说明这一行不止一个单元格。所以，<code>remainingCells</code> 选择操作中的第一个选择的开始是一个 <code>char &#39;,&#39;</code> 来判断是否还有剩余单元格，<code>char</code> 这个 parser 简单的匹配输入中传入的字符，如果我们发现一个逗号，我们希望这个去继续解析剩余的单元格，这个时候，&quot;剩下的单元格&quot;看上去跟一行中的所有单元格在格式上一致。所以，我们递归地调用 <code>cells</code> 去解析它们。如果我们没有发现逗号，说明这一行中再没有剩余的单元格，就返回一个空列表。</p><p>最后，我们需要定义换行符，我们将换行符设定为字符&#39;\\n&#39;,这个设定到目前来讲已经够用了。</p><p>在整个程序的最后，我们定义函数 <code>parseCSV</code>，它接受一个 <code>String</code> 类型的参数，并将其作为 CSV 文件进行解析。这个函数只是对 Parsec 中 <code>parse</code> 函数的简单封装，<code>parse</code> 函数返回 <code>Either ParseError [[String]]</code>类型， 如果输入格式有错误，则返回的是用 <code>Left</code> 标记的错误信息，否则，返回用 <code>Right</code> 标记的解析生成的数据类型。</p><p>理解了上面的代码之后，我们试着在 <code>ghci</code> 中运行一下来看下它：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>ghci<span class="token operator">&gt;</span> :l csv1.hs
<span class="token punctuation">[</span><span class="token number">1</span> of <span class="token number">1</span><span class="token punctuation">]</span> Compiling Main             <span class="token punctuation">(</span> csv1.hs, interpreted <span class="token punctuation">)</span>
Ok, modules loaded: Main.
ghci<span class="token operator">&gt;</span> parseCSV <span class="token string">&quot;&quot;</span>
Loading package parsec-2.1.0.0 <span class="token punctuation">..</span>. linking <span class="token punctuation">..</span>. done.
Right <span class="token punctuation">[</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>结果倒是合情合理， parse 一个空字符串，返回一个空列表。接下来，我们去 parse 一个单元格：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>ghci<span class="token operator">&gt;</span> parseCSV <span class="token string">&quot;hi&quot;</span>
Left <span class="token string">&quot;(unknown)&quot;</span> <span class="token punctuation">(</span>line <span class="token number">1</span>, <span class="token function">column</span> <span class="token number">3</span><span class="token punctuation">)</span>:
unexpected end of input
expecting <span class="token string">&quot;,&quot;</span> or <span class="token string">&quot;<span class="token entity" title="\\n">\\n</span>&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>看下上面的报错信息，我们定义&quot;一行&quot;必须以一个换行符结尾，而在上面的输入中，我们并没有给出换行符。Parsec 的报错信息给出了错误的行号和列号，甚至告诉了我们它期望得到的输入。我们对上面的输入给出换行符，并且继续尝试新的输入：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>ghci<span class="token operator">&gt;</span> parseCSV <span class="token string">&quot;hi<span class="token entity" title="\\n">\\n</span>&quot;</span>
Right <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">&quot;hi&quot;</span><span class="token punctuation">]</span><span class="token punctuation">]</span>
ghci<span class="token operator">&gt;</span> parseCSV <span class="token string">&quot;line1<span class="token entity" title="\\n">\\n</span>line2<span class="token entity" title="\\n">\\n</span>line3<span class="token entity" title="\\n">\\n</span>&quot;</span>
Right <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">&quot;line1&quot;</span><span class="token punctuation">]</span>,<span class="token punctuation">[</span><span class="token string">&quot;line2&quot;</span><span class="token punctuation">]</span>,<span class="token punctuation">[</span><span class="token string">&quot;line3&quot;</span><span class="token punctuation">]</span><span class="token punctuation">]</span>
ghci<span class="token operator">&gt;</span> parseCSV <span class="token string">&quot;cell1,cell2,cell3<span class="token entity" title="\\n">\\n</span>&quot;</span>
Right <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">&quot;cell1&quot;</span>,<span class="token string">&quot;cell2&quot;</span>,<span class="token string">&quot;cell3&quot;</span><span class="token punctuation">]</span><span class="token punctuation">]</span>
ghci<span class="token operator">&gt;</span> parseCSV <span class="token string">&quot;l1c1,l1c2<span class="token entity" title="\\n">\\n</span>l2c1,l2c2<span class="token entity" title="\\n">\\n</span>&quot;</span>
Right <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">&quot;l1c1&quot;</span>,<span class="token string">&quot;l1c2&quot;</span><span class="token punctuation">]</span>,<span class="token punctuation">[</span><span class="token string">&quot;l2c1&quot;</span>,<span class="token string">&quot;l2c2&quot;</span><span class="token punctuation">]</span><span class="token punctuation">]</span>
ghci<span class="token operator">&gt;</span> parseCSV <span class="token string">&quot;Hi,<span class="token entity" title="\\n">\\n</span><span class="token entity" title="\\n">\\n</span>,Hello<span class="token entity" title="\\n">\\n</span>&quot;</span>
Right <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">&quot;Hi&quot;</span>,<span class="token string">&quot;&quot;</span><span class="token punctuation">]</span>,<span class="token punctuation">[</span><span class="token string">&quot;&quot;</span><span class="token punctuation">]</span>,<span class="token punctuation">[</span><span class="token string">&quot;&quot;</span>,<span class="token string">&quot;Hello&quot;</span><span class="token punctuation">]</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看出，<code>parseCSV</code> 的行为与预期一致，甚至空单元格与空行它也能正确处理。</p><h2 id="sepby-与-endby-组合子" tabindex="-1"><a class="header-anchor" href="#sepby-与-endby-组合子"><span>sepBy 与 endBy 组合子</span></a></h2><p>我们早先向您承诺过，上一节中的 CSV parser 可以通过几个辅助函数大大简化。有两个函数可以大幅度简化上一节中的代码。</p><p>第一个工具是 <code>sepBy</code> 函数，这个函数接受两个 parser 函数作为参数。第一个函数解析有效内容，第二个函数解析一个分隔符。<code>sepBy</code> 首先尝试解析有效内容，然后去解析分隔符，然后有效内容与分隔符依次交替解析，直到解析完有效内容之后无法继续解析到分隔符为止。它返回有效内容的列表。</p><p>第二个工具是 <code>endBy</code>, 它与 <code>sepBy</code>相似，不过它期望它的最后一个有效内容之后，还跟着一个分隔符（译注，就是 parse &quot;a\\nb\\nc\\n&quot;这种，而 <code>sepBy</code> 是 parse &quot;a,b,c&quot; 这种）。也就是说，它将一直进行 parse，直到它无法继续消耗任何输入。</p><p>于是，我们可以用 <code>endBy</code> 来解析行，因为每一行必定是以一个换行字符结尾。 我们可以用 <code>sepBy</code> 来解析一行中的所有单元格，因为一行中的单元格以逗号分割，而最后一个单元格后面并不跟着逗号。我们来看下现在的 parser 有多么简单：</p><div class="language-haskell line-numbers-mode" data-ext="haskell" data-title="haskell"><pre class="language-haskell"><code><span class="token comment">-- file: ch16/csv2.hs</span>
<span class="token import-statement"><span class="token keyword">import</span> Text<span class="token punctuation">.</span>ParserCombinators<span class="token punctuation">.</span>Parsec</span>

<span class="token hvariable">csvFile</span> <span class="token operator">=</span> <span class="token hvariable">endBy</span> <span class="token hvariable">line</span> <span class="token hvariable">eol</span>
<span class="token hvariable">line</span>    <span class="token operator">=</span> <span class="token hvariable">sepBy</span> <span class="token hvariable">cell</span> <span class="token punctuation">(</span><span class="token hvariable">char</span> <span class="token char string">&#39;,&#39;</span><span class="token punctuation">)</span>
<span class="token hvariable">cell</span>    <span class="token operator">=</span> <span class="token hvariable">many</span> <span class="token punctuation">(</span><span class="token hvariable">noneOf</span> <span class="token string">&quot;,\\n&quot;</span><span class="token punctuation">)</span>
<span class="token hvariable">eol</span>     <span class="token operator">=</span> <span class="token hvariable">char</span> <span class="token char string">&#39;\\n&#39;</span>

<span class="token hvariable">parseCSV</span> <span class="token operator">::</span> <span class="token constant">String</span> <span class="token operator">-&gt;</span> <span class="token constant">Either</span> <span class="token constant">ParseError</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token constant">String</span><span class="token punctuation">]</span><span class="token punctuation">]</span>
<span class="token hvariable">parseCSV</span> <span class="token hvariable">input</span> <span class="token operator">=</span> <span class="token hvariable">parse</span> <span class="token hvariable">csvFile</span> <span class="token string">&quot;(unknown)&quot;</span> <span class="token hvariable">input</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个程序的行为同上一节中的一样，我们可以通过使用 <code>ghci</code> 重新运行上一节中的测试用例来验证，我们会得到完全相同的结果。然而现在的程序更短、可读性更好。你不用花太多时间就能把这段代码翻译成中文描述，当你阅读这段代码时，你将看到：</p><ul><li>一个 CSV 文件包含0行或者更多行，每一行都是以换行符结尾。</li><li>一行包含一个或者多个单元格 [译者注, sepBy应该是允许0个单元格的]</li><li>一个单元格包含0个或者更多个字符，这些字符不能是逗号或者换行符</li><li>换行符是&#39;\\n&#39;</li></ul><h2 id="选择与错误处理" tabindex="-1"><a class="header-anchor" href="#选择与错误处理"><span>选择与错误处理</span></a></h2><p>不同操作系统采用不同的字符来表示换行，例如，Unix/Linux 系统中，以及 Windows 的 text mode 中，简单地用 &quot;\\n&quot; 来表示。DOS 以及 Windows 系统，使用 &quot;\\r\\n&quot;，而 Mac 一直采用 &quot;\\r&quot;。我们还可以添加对 &quot;\\n\\r&quot; 的支持，因为有些人可能会需要。</p><p>我们可以很容易地修改下上面的代码来适应这些不同的换行符。我们只需要做两处改动，修改下 <code>eol</code> 的定义，使它识别不同的换行符，修改下 <code>cell</code> 函数中的 <code>noneOf</code> 的匹配模式，让它忽略 &quot;\\r&quot;。</p><p>这事做起来得小心些，之前 <code>eol</code> 的定义就是简单的 <code>char &#39;\\n&#39;</code>，而现在我们使用另一个内置的 parser 函数叫做 <code>string</code>，它可以匹配一个给定的字符串，我们来考虑下如何用这个函数来增加对 &quot;\\n\\r&quot; 的支持。</p><p>我们的初次尝试，就像这样：</p><div class="language-haskell line-numbers-mode" data-ext="haskell" data-title="haskell"><pre class="language-haskell"><code><span class="token comment">-- file: ch16/csv3.hs</span>
<span class="token comment">-- This function is not correct!</span>
<span class="token hvariable">eol</span> <span class="token operator">=</span> <span class="token hvariable">string</span> <span class="token string">&quot;\\n&quot;</span> <span class="token operator">&lt;|&gt;</span> <span class="token hvariable">string</span> <span class="token string">&quot;\\n\\r&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然而上面的例子并不正确，<code>&lt;|&gt;</code> 操作符总是首先尝试左边的 parser，即 <code>string &quot;\\n&quot;</code>， 但是对于 &quot;\\n&quot; 和 &quot;\\n\\r&quot; 这两种换行符， <code>string &quot;\\n&quot;</code> 都会匹配成功，这可不是我们想要的，不妨在 <code>ghci</code> 中尝试一下：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>ghci<span class="token operator">&gt;</span> :m Text.ParserCombinators.Parsec
ghci<span class="token operator">&gt;</span> <span class="token builtin class-name">let</span> eol <span class="token operator">=</span> string <span class="token string">&quot;<span class="token entity" title="\\n">\\n</span>&quot;</span> <span class="token operator">&lt;</span><span class="token operator">|</span><span class="token operator">&gt;</span> string <span class="token string">&quot;<span class="token entity" title="\\n">\\n</span><span class="token entity" title="\\r">\\r</span>&quot;</span>
Loading package parsec-2.1.0.0 <span class="token punctuation">..</span>. linking <span class="token punctuation">..</span>. done.
ghci<span class="token operator">&gt;</span> parse eol <span class="token string">&quot;&quot;</span> <span class="token string">&quot;<span class="token entity" title="\\n">\\n</span>&quot;</span>
Right <span class="token string">&quot;<span class="token entity" title="\\n">\\n</span>&quot;</span>
ghci<span class="token operator">&gt;</span> parse eol <span class="token string">&quot;&quot;</span> <span class="token string">&quot;<span class="token entity" title="\\n">\\n</span><span class="token entity" title="\\r">\\r</span>&quot;</span>
Right <span class="token string">&quot;<span class="token entity" title="\\n">\\n</span>&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>看上去这个 parser 对与两种换行符都能够正常工作，不过，仅凭上面的结果我们并不能确认这一点。如果 parser 留下了一些没有解析的部分，我们也无从知晓，因为我们解析完换行符后没有再试图去消耗剩余输入。所以让我们在换行符后面加一个文件终止符 <code>eof</code>，表示我们期望在解析完换行符之后，没有剩余的带解析输入了：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>ghci<span class="token operator">&gt;</span> parse <span class="token punctuation">(</span>eol <span class="token operator">&gt;&gt;</span> eof<span class="token punctuation">)</span> <span class="token string">&quot;&quot;</span> <span class="token string">&quot;<span class="token entity" title="\\n">\\n</span><span class="token entity" title="\\r">\\r</span>&quot;</span>
Left <span class="token punctuation">(</span>line <span class="token number">2</span>, <span class="token function">column</span> <span class="token number">1</span><span class="token punctuation">)</span>:
unexpected <span class="token string">&quot;<span class="token entity" title="\\r">\\r</span>&quot;</span>
expecting end of input
ghci<span class="token operator">&gt;</span> parse <span class="token punctuation">(</span>eol <span class="token operator">&gt;&gt;</span> eof<span class="token punctuation">)</span> <span class="token string">&quot;&quot;</span> <span class="token string">&quot;<span class="token entity" title="\\n">\\n</span>&quot;</span>
Right <span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>正如预期的那样，当解析 &quot;\\n\\r&quot; 换行符时出现了错误，所以接下来我们可能会想这样尝试：</p><div class="language-haskell line-numbers-mode" data-ext="haskell" data-title="haskell"><pre class="language-haskell"><code><span class="token comment">-- file: ch16/csv4.hs</span>
<span class="token comment">-- This function is not correct!</span>
<span class="token hvariable">eol</span> <span class="token operator">=</span> <span class="token hvariable">string</span> <span class="token string">&quot;\\n\\r&quot;</span> <span class="token operator">&lt;|&gt;</span> <span class="token hvariable">string</span> <span class="token string">&quot;\\n&quot;</span><span class="token hvariable">haskell</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这也是不对的。回想一下，<code>&lt;|&gt;</code> 仅在左侧的选项没有消耗输入时，才会尝试在右边的 parser。但是，当我们去看在 &quot;\\n&quot; 后面是不是有一个 &quot;\\r&quot; 的时候，我们早就已经消耗掉了一个 &quot;\\n&quot;，我们会在 parse &quot;\\n&quot; 时遇到错误：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>ghci<span class="token operator">&gt;</span> :m Text.ParserCombinators.Parsec
ghci<span class="token operator">&gt;</span> <span class="token builtin class-name">let</span> eol <span class="token operator">=</span> string <span class="token string">&quot;<span class="token entity" title="\\n">\\n</span><span class="token entity" title="\\r">\\r</span>&quot;</span> <span class="token operator">&lt;</span><span class="token operator">|</span><span class="token operator">&gt;</span> string <span class="token string">&quot;<span class="token entity" title="\\n">\\n</span>&quot;</span>
Loading package parsec-2.1.0.0 <span class="token punctuation">..</span>. linking <span class="token punctuation">..</span>. done.
ghci<span class="token operator">&gt;</span> parse <span class="token punctuation">(</span>eol <span class="token operator">&gt;&gt;</span> eof<span class="token punctuation">)</span> <span class="token string">&quot;&quot;</span> <span class="token string">&quot;<span class="token entity" title="\\n">\\n</span><span class="token entity" title="\\r">\\r</span>&quot;</span>
Right <span class="token punctuation">(</span><span class="token punctuation">)</span>
ghci<span class="token operator">&gt;</span> parse <span class="token punctuation">(</span>eol <span class="token operator">&gt;&gt;</span> eof<span class="token punctuation">)</span> <span class="token string">&quot;&quot;</span> <span class="token string">&quot;<span class="token entity" title="\\n">\\n</span>&quot;</span>
Left <span class="token punctuation">(</span>line <span class="token number">1</span>, <span class="token function">column</span> <span class="token number">1</span><span class="token punctuation">)</span>:
unexpected end of input
expecting <span class="token string">&quot;<span class="token entity" title="\\n">\\n</span><span class="token entity" title="\\r">\\r</span>&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们在超前查看的问题上栽了跟头，看起来，在写 parser 的时候，能够在数据到来时 &quot;超前查看&quot; 是很有用的。Parsec 是支持这一特性的，不过在我们展示这一特性的时候，先来看看怎样能够不利用超前查看特性完成这个任务。你必须要自己去考虑 &quot;\\n&quot; 之后的所有可能：</p><div class="language-haskell line-numbers-mode" data-ext="haskell" data-title="haskell"><pre class="language-haskell"><code><span class="token comment">-- file: ch16/csv5.hs</span>
<span class="token hvariable">eol</span> <span class="token operator">=</span> 
    <span class="token keyword">do</span> <span class="token hvariable">char</span> <span class="token char string">&#39;\\n&#39;</span>
       <span class="token hvariable">char</span> <span class="token char string">&#39;\\r&#39;</span> <span class="token operator">&lt;|&gt;</span> <span class="token builtin">return</span> <span class="token char string">&#39;\\n&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个函数首先寻找 &quot;\\n&quot;，如果找到了，就去寻找 &quot;\\r&quot;，如果找到了 &quot;\\r&quot;，就消耗掉 &quot;\\r&quot;。既然 <code>char &#39;\\r&#39;</code> 的返回类型是 <code>Char</code>，那么没有找到 &#39;\\r&#39; 时的行为就是简单的返回一个 &#39;Char&#39; 而不试图 parse 任何输入。Parsec 有一个内置函数 <code>option</code> 可以将这种情况表达为 <code>option &#39;\\n&#39; (char &#39;\\r&#39;)</code>。我们在 <code>ghci</code> 中试一下：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>ghci<span class="token operator">&gt;</span> :l csv5.hs
<span class="token punctuation">[</span><span class="token number">1</span> of <span class="token number">1</span><span class="token punctuation">]</span> Compiling Main             <span class="token punctuation">(</span> csv5.hs, interpreted <span class="token punctuation">)</span>
Ok, modules loaded: Main.
ghci<span class="token operator">&gt;</span> parse <span class="token punctuation">(</span>eol <span class="token operator">&gt;&gt;</span> eof<span class="token punctuation">)</span> <span class="token string">&quot;&quot;</span> <span class="token string">&quot;<span class="token entity" title="\\n">\\n</span><span class="token entity" title="\\r">\\r</span>&quot;</span>
Loading package parsec-2.1.0.0 <span class="token punctuation">..</span>. linking <span class="token punctuation">..</span>. done.
Right <span class="token punctuation">(</span><span class="token punctuation">)</span>
ghci<span class="token operator">&gt;</span> parse <span class="token punctuation">(</span>eol <span class="token operator">&gt;&gt;</span> eof<span class="token punctuation">)</span> <span class="token string">&quot;&quot;</span> <span class="token string">&quot;<span class="token entity" title="\\n">\\n</span>&quot;</span>
Right <span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这次结果是对的！不过，利用 Parsec 对 lookahead 的支持，代码可以更加简洁。</p><h3 id="超前查看" tabindex="-1"><a class="header-anchor" href="#超前查看"><span>超前查看</span></a></h3><p>Parsec 有一个内置函数叫做 <code>try</code> 用来支持超前查看，<code>try</code> 接受一个 parser 函数，将它应用到输入。如果这个 parser 没有成功，那么 <code>try</code> 表现地就像它不曾消耗任何输入。所以，如果你在 <code>&lt;|&gt;</code> 的左侧应用 <code>try</code>，那么，即使左侧 parser 在失败时会消耗掉一些输入， Parsec 仍然会去尝试右侧的 parser。<code>try</code> 只有在 <code>&lt;|&gt;</code> 左侧时才会有效。不过，许多函数会在内部使用 <code>&lt;|&gt;</code>。让我们来用 <code>try</code> 扩展对换行符的支持：</p><div class="language-haskell line-numbers-mode" data-ext="haskell" data-title="haskell"><pre class="language-haskell"><code><span class="token comment">-- file: ch16/csv6.hs</span>
<span class="token import-statement"><span class="token keyword">import</span> Text<span class="token punctuation">.</span>ParserCombinators<span class="token punctuation">.</span>Parsec</span>

<span class="token hvariable">csvFile</span> <span class="token operator">=</span> <span class="token hvariable">endBy</span> <span class="token hvariable">line</span> <span class="token hvariable">eol</span>
<span class="token hvariable">line</span> <span class="token operator">=</span> <span class="token hvariable">sepBy</span> <span class="token hvariable">cell</span> <span class="token punctuation">(</span><span class="token hvariable">char</span> <span class="token char string">&#39;,&#39;</span><span class="token punctuation">)</span>
<span class="token hvariable">cell</span> <span class="token operator">=</span> <span class="token hvariable">many</span> <span class="token punctuation">(</span><span class="token hvariable">noneOf</span> <span class="token string">&quot;,\\n\\r&quot;</span><span class="token punctuation">)</span>

<span class="token hvariable">eol</span> <span class="token operator">=</span>   <span class="token hvariable">try</span> <span class="token punctuation">(</span><span class="token hvariable">string</span> <span class="token string">&quot;\\n\\r&quot;</span><span class="token punctuation">)</span>
    <span class="token operator">&lt;|&gt;</span> <span class="token hvariable">try</span> <span class="token punctuation">(</span><span class="token hvariable">string</span> <span class="token string">&quot;\\r\\n&quot;</span><span class="token punctuation">)</span>
    <span class="token operator">&lt;|&gt;</span> <span class="token hvariable">string</span> <span class="token string">&quot;\\n&quot;</span>
    <span class="token operator">&lt;|&gt;</span> <span class="token hvariable">string</span> <span class="token string">&quot;\\r&quot;</span>

<span class="token hvariable">parseCSV</span> <span class="token operator">::</span> <span class="token constant">String</span> <span class="token operator">-&gt;</span> <span class="token constant">Either</span> <span class="token constant">ParseError</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token constant">String</span><span class="token punctuation">]</span><span class="token punctuation">]</span>
<span class="token hvariable">parseCSV</span> <span class="token hvariable">input</span> <span class="token operator">=</span> <span class="token hvariable">parse</span> <span class="token hvariable">csvFile</span> <span class="token string">&quot;(unknown)&quot;</span> <span class="token hvariable">input</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里，我们把两个包含两个字符的换行符放在开头，并且用 <code>try</code> 去检查它们。这两个换行符的 parser 都出现在 <code>&lt;|&gt;</code> 的左侧，因此不会有什么问题。我们也可以把 <code>string &quot;\\n&quot;</code> 放到 <code>try</code> 中，不过这其实没什么必要，因为它只用检验一个字符，因此当解析失败时不会消耗输入，我们把代码加载进 <code>ghci</code> 去看下运行结果：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>ghci<span class="token operator">&gt;</span> :l csv6.hs
<span class="token punctuation">[</span><span class="token number">1</span> of <span class="token number">1</span><span class="token punctuation">]</span> Compiling Main             <span class="token punctuation">(</span> csv6.hs, interpreted <span class="token punctuation">)</span>
Ok, modules loaded: Main.
ghci<span class="token operator">&gt;</span> parse <span class="token punctuation">(</span>eol <span class="token operator">&gt;&gt;</span> eof<span class="token punctuation">)</span> <span class="token string">&quot;&quot;</span> <span class="token string">&quot;<span class="token entity" title="\\n">\\n</span><span class="token entity" title="\\r">\\r</span>&quot;</span>
Loading package parsec-2.1.0.0 <span class="token punctuation">..</span>. linking <span class="token punctuation">..</span>. done.
Right <span class="token punctuation">(</span><span class="token punctuation">)</span>
ghci<span class="token operator">&gt;</span> parse <span class="token punctuation">(</span>eol <span class="token operator">&gt;&gt;</span> eof<span class="token punctuation">)</span> <span class="token string">&quot;&quot;</span> <span class="token string">&quot;<span class="token entity" title="\\n">\\n</span>&quot;</span>
Right <span class="token punctuation">(</span><span class="token punctuation">)</span>
ghci<span class="token operator">&gt;</span> parse <span class="token punctuation">(</span>eol <span class="token operator">&gt;&gt;</span> eof<span class="token punctuation">)</span> <span class="token string">&quot;&quot;</span> <span class="token string">&quot;<span class="token entity" title="\\r">\\r</span><span class="token entity" title="\\n">\\n</span>&quot;</span>
Right <span class="token punctuation">(</span><span class="token punctuation">)</span>
ghci<span class="token operator">&gt;</span> parse <span class="token punctuation">(</span>eol <span class="token operator">&gt;&gt;</span> eof<span class="token punctuation">)</span> <span class="token string">&quot;&quot;</span> <span class="token string">&quot;<span class="token entity" title="\\r">\\r</span>&quot;</span>
Right <span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>四种换行符都能正确的处理，你也可以用不同的换行符来测试完整的 CSV parser，就像这样：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>ghci<span class="token operator">&gt;</span> parseCSV <span class="token string">&quot;line1<span class="token entity" title="\\r">\\r</span><span class="token entity" title="\\n">\\n</span>line2<span class="token entity" title="\\n">\\n</span>line3<span class="token entity" title="\\n">\\n</span><span class="token entity" title="\\r">\\r</span>line4<span class="token entity" title="\\r">\\r</span>line5<span class="token entity" title="\\n">\\n</span>&quot;</span>
Right <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">&quot;line1&quot;</span><span class="token punctuation">]</span>,<span class="token punctuation">[</span><span class="token string">&quot;line2&quot;</span><span class="token punctuation">]</span>,<span class="token punctuation">[</span><span class="token string">&quot;line3&quot;</span><span class="token punctuation">]</span>,<span class="token punctuation">[</span><span class="token string">&quot;line4&quot;</span><span class="token punctuation">]</span>,<span class="token punctuation">[</span><span class="token string">&quot;line5&quot;</span><span class="token punctuation">]</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>如你所见，现在我们的 parser 支持在单个文件中使用多种换行符啦。</p><h3 id="错误处理" tabindex="-1"><a class="header-anchor" href="#错误处理"><span>错误处理</span></a></h3><p>本章开头，我们已经看到 Parsec 的报错信息能够列出错误的具体位置以及它期望的输入。可是，当 parser 变得更加复杂的时候，Parsec 的期望输入列表会变得很复杂。不过 Parsec 也提供了一套机制让你来在解析失败时自定义出错信息。</p><p>我们来看下现在的 CSV parser 在遇到错误时给出的错误信息：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>ghci<span class="token operator">&gt;</span> parseCSV <span class="token string">&quot;line1&quot;</span>
Left <span class="token string">&quot;(unknown)&quot;</span> <span class="token punctuation">(</span>line <span class="token number">1</span>, <span class="token function">column</span> <span class="token number">6</span><span class="token punctuation">)</span>:
unexpected end of input
expecting <span class="token string">&quot;,&quot;</span>, <span class="token string">&quot;<span class="token entity" title="\\n">\\n</span><span class="token entity" title="\\r">\\r</span>&quot;</span>, <span class="token string">&quot;<span class="token entity" title="\\r">\\r</span><span class="token entity" title="\\n">\\n</span>&quot;</span>, <span class="token string">&quot;<span class="token entity" title="\\n">\\n</span>&quot;</span> or &quot;<span class="token punctuation">\\</span>r
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个报错信息有点长，并且包含了太多的技术细节。我们可以试着用 Monad 中的 <code>fail</code> 函数来改善以下：</p><div class="language-haskell line-numbers-mode" data-ext="haskell" data-title="haskell"><pre class="language-haskell"><code><span class="token comment">-- file: ch16/csv7.hs</span>
<span class="token hvariable">eol</span> <span class="token operator">=</span>   <span class="token hvariable">try</span> <span class="token punctuation">(</span><span class="token hvariable">string</span> <span class="token string">&quot;\\n\\r&quot;</span><span class="token punctuation">)</span>
    <span class="token operator">&lt;|&gt;</span> <span class="token hvariable">try</span> <span class="token punctuation">(</span><span class="token hvariable">string</span> <span class="token string">&quot;\\r\\n&quot;</span><span class="token punctuation">)</span>
    <span class="token operator">&lt;|&gt;</span> <span class="token hvariable">string</span> <span class="token string">&quot;\\n&quot;</span>
    <span class="token operator">&lt;|&gt;</span> <span class="token hvariable">string</span> <span class="token string">&quot;\\r&quot;</span>
    <span class="token operator">&lt;|&gt;</span> <span class="token builtin">fail</span> <span class="token string">&quot;Couldn&#39;t find EOL&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 <code>ghci</code> 中测试，结果如下：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>ghci<span class="token operator">&gt;</span> :l csv7.hs
<span class="token punctuation">[</span><span class="token number">1</span> of <span class="token number">1</span><span class="token punctuation">]</span> Compiling Main             <span class="token punctuation">(</span> csv7.hs, interpreted <span class="token punctuation">)</span>
Ok, modules loaded: Main.
ghci<span class="token operator">&gt;</span> parseCSV <span class="token string">&quot;line1&quot;</span>
Loading package parsec-2.1.0.0 <span class="token punctuation">..</span>. linking <span class="token punctuation">..</span>. done.
Left <span class="token string">&quot;(unknown)&quot;</span> <span class="token punctuation">(</span>line <span class="token number">1</span>, <span class="token function">column</span> <span class="token number">6</span><span class="token punctuation">)</span>:
unexpected end of input
expecting <span class="token string">&quot;,&quot;</span>, <span class="token string">&quot;<span class="token entity" title="\\n">\\n</span><span class="token entity" title="\\r">\\r</span>&quot;</span>, <span class="token string">&quot;<span class="token entity" title="\\r">\\r</span><span class="token entity" title="\\n">\\n</span>&quot;</span>, <span class="token string">&quot;<span class="token entity" title="\\n">\\n</span>&quot;</span> or <span class="token string">&quot;<span class="token entity" title="\\r">\\r</span>&quot;</span>
Couldn&#39;t <span class="token function">find</span> EOL
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>fail</code> 函数把 &quot;Couldn&#39;t find EOL&quot; 追加到了原有的错误信息后面，而不是替换掉了原有的错误信息。Parsec 有一个内置的 <code>&lt;?&gt;</code> 操作符专门针对后一种需求。它跟 <code>&lt;|&gt;</code> 操作符很像，首先尝试操作符左边的 parser， 不过，左边解析失败时并不是去尝试另一个 parser，而是呈现一段错误信息。下面是它的使用方法：</p><div class="language-haskell line-numbers-mode" data-ext="haskell" data-title="haskell"><pre class="language-haskell"><code><span class="token comment">-- file: ch16/csv8.hs</span>
<span class="token hvariable">eol</span> <span class="token operator">=</span>   <span class="token hvariable">try</span> <span class="token punctuation">(</span><span class="token hvariable">string</span> <span class="token string">&quot;\\n\\r&quot;</span><span class="token punctuation">)</span>
    <span class="token operator">&lt;|&gt;</span> <span class="token hvariable">try</span> <span class="token punctuation">(</span><span class="token hvariable">string</span> <span class="token string">&quot;\\r\\n&quot;</span><span class="token punctuation">)</span>
    <span class="token operator">&lt;|&gt;</span> <span class="token hvariable">string</span> <span class="token string">&quot;\\n&quot;</span>
    <span class="token operator">&lt;|&gt;</span> <span class="token hvariable">string</span> <span class="token string">&quot;\\r&quot;</span>
    <span class="token operator">&lt;?&gt;</span> <span class="token string">&quot;end of line&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现在，当你 parse 失败时，你会得到更有用的错误信息：</p><div class="language-haskell line-numbers-mode" data-ext="haskell" data-title="haskell"><pre class="language-haskell"><code><span class="token hvariable">ghci</span><span class="token operator">&gt;</span> <span class="token operator">:</span><span class="token hvariable">l</span> <span class="token hvariable">csv8</span><span class="token punctuation">.</span><span class="token hvariable">hs</span>
<span class="token punctuation">[</span><span class="token number">1</span> <span class="token keyword">of</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token constant">Compiling</span> <span class="token constant">Main</span>             <span class="token punctuation">(</span> <span class="token hvariable">csv8</span><span class="token punctuation">.</span><span class="token hvariable">hs</span><span class="token punctuation">,</span> <span class="token hvariable">interpreted</span> <span class="token punctuation">)</span>
<span class="token constant">Ok</span><span class="token punctuation">,</span> <span class="token hvariable">modules</span> <span class="token hvariable">loaded</span><span class="token operator">:</span> <span class="token constant">Main</span><span class="token punctuation">.</span>
<span class="token hvariable">ghci</span><span class="token operator">&gt;</span> <span class="token hvariable">parseCSV</span> <span class="token string">&quot;line1&quot;</span>
<span class="token constant">Loading</span> <span class="token hvariable">package</span> <span class="token hvariable">parsec</span><span class="token operator">-</span><span class="token number">2.1</span><span class="token punctuation">.</span><span class="token number">0.0</span> <span class="token operator">...</span> <span class="token hvariable">linking</span> <span class="token operator">...</span> <span class="token hvariable">done</span><span class="token punctuation">.</span>
<span class="token constant">Left</span> <span class="token string">&quot;(unknown)&quot;</span> <span class="token punctuation">(</span><span class="token hvariable">line</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token hvariable">column</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token operator">:</span>
<span class="token hvariable">unexpected</span> <span class="token hvariable">end</span> <span class="token keyword">of</span> <span class="token hvariable">input</span>
<span class="token hvariable">expecting</span> <span class="token string">&quot;,&quot;</span> <span class="token builtin">or</span> <span class="token hvariable">end</span> <span class="token keyword">of</span> <span class="token hvariable">line</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现在报错信息很有用！通常来说，你需要在 <code>&lt;?&gt;</code> 右侧放上可读性较好的报错信息。</p><h2 id="完整的-csv-parser" tabindex="-1"><a class="header-anchor" href="#完整的-csv-parser"><span>完整的 CSV parser</span></a></h2><p>上面的 CSV parser 的例子有一个很严重的问题：它无法处理单元格中包含逗号的情况。CSV 生成程序通常会把包含逗号的单元格用引号引起。但这又产生了新问题：如果单元格中同时包含引号和逗号怎么办？在这种情况下，用两个引号来表示单元格中的一个引号。</p><p>下面是一个完整的 CSV parser，你可以在 <code>ghci</code> 中使用它，或者把它编译成独立的程序，它会解析从标准输入读取的 CSV 文件内容， 并把它转化成另一格式的输出。</p><div class="language-haskell line-numbers-mode" data-ext="haskell" data-title="haskell"><pre class="language-haskell"><code><span class="token comment">-- file: ch16/csv9.hs</span>
<span class="token import-statement"><span class="token keyword">import</span> Text<span class="token punctuation">.</span>ParserCombinators<span class="token punctuation">.</span>Parsec</span>

<span class="token hvariable">csvFile</span> <span class="token operator">=</span> <span class="token hvariable">endBy</span> <span class="token hvariable">line</span> <span class="token hvariable">eol</span>
<span class="token hvariable">line</span> <span class="token operator">=</span> <span class="token hvariable">sepBy</span> <span class="token hvariable">cell</span> <span class="token punctuation">(</span><span class="token hvariable">char</span> <span class="token char string">&#39;,&#39;</span><span class="token punctuation">)</span>
<span class="token hvariable">cell</span> <span class="token operator">=</span> <span class="token hvariable">quotedCell</span> <span class="token operator">&lt;|&gt;</span> <span class="token hvariable">many</span> <span class="token punctuation">(</span><span class="token hvariable">noneOf</span> <span class="token string">&quot;,\\n\\r&quot;</span><span class="token punctuation">)</span>

<span class="token hvariable">quotedCell</span> <span class="token operator">=</span> 
    <span class="token keyword">do</span> <span class="token hvariable">char</span> <span class="token char string">&#39;&quot;&#39;</span>
       <span class="token hvariable">content</span> <span class="token operator">&lt;-</span> <span class="token hvariable">many</span> <span class="token hvariable">quotedChar</span>
       <span class="token hvariable">char</span> <span class="token char string">&#39;&quot;&#39;</span> <span class="token operator">&lt;?&gt;</span> <span class="token string">&quot;quote at end of cell&quot;</span>
       <span class="token builtin">return</span> <span class="token hvariable">content</span>

<span class="token hvariable">quotedChar</span> <span class="token operator">=</span>
        <span class="token hvariable">noneOf</span> <span class="token string">&quot;\\&quot;&quot;</span>
    <span class="token operator">&lt;|&gt;</span> <span class="token hvariable">try</span> <span class="token punctuation">(</span><span class="token hvariable">string</span> <span class="token string">&quot;\\&quot;\\&quot;&quot;</span> <span class="token operator">&gt;&gt;</span> <span class="token builtin">return</span> <span class="token char string">&#39;&quot;&#39;</span><span class="token punctuation">)</span>

<span class="token hvariable">eol</span> <span class="token operator">=</span>   <span class="token hvariable">try</span> <span class="token punctuation">(</span><span class="token hvariable">string</span> <span class="token string">&quot;\\n\\r&quot;</span><span class="token punctuation">)</span>
    <span class="token operator">&lt;|&gt;</span> <span class="token hvariable">try</span> <span class="token punctuation">(</span><span class="token hvariable">string</span> <span class="token string">&quot;\\r\\n&quot;</span><span class="token punctuation">)</span>
    <span class="token operator">&lt;|&gt;</span> <span class="token hvariable">string</span> <span class="token string">&quot;\\n&quot;</span>
    <span class="token operator">&lt;|&gt;</span> <span class="token hvariable">string</span> <span class="token string">&quot;\\r&quot;</span>
    <span class="token operator">&lt;?&gt;</span> <span class="token string">&quot;end of line&quot;</span>

<span class="token hvariable">parseCSV</span> <span class="token operator">::</span> <span class="token constant">String</span> <span class="token operator">-&gt;</span> <span class="token constant">Either</span> <span class="token constant">ParseError</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token constant">String</span><span class="token punctuation">]</span><span class="token punctuation">]</span>
<span class="token hvariable">parseCSV</span> <span class="token hvariable">input</span> <span class="token operator">=</span> <span class="token hvariable">parse</span> <span class="token hvariable">csvFile</span> <span class="token string">&quot;(unknown)&quot;</span> <span class="token hvariable">input</span>

<span class="token hvariable">main</span> <span class="token operator">=</span>
    <span class="token keyword">do</span> <span class="token hvariable">c</span> <span class="token operator">&lt;-</span> <span class="token builtin">getContents</span>
       <span class="token keyword">case</span> <span class="token hvariable">parse</span> <span class="token hvariable">csvFile</span> <span class="token string">&quot;(stdin)&quot;</span> <span class="token hvariable">c</span> <span class="token keyword">of</span>
            <span class="token constant">Left</span> <span class="token hvariable">e</span> <span class="token operator">-&gt;</span> <span class="token keyword">do</span> <span class="token builtin">putStrLn</span> <span class="token string">&quot;Error parsing input:&quot;</span>
                         <span class="token builtin">print</span> <span class="token hvariable">e</span>
            <span class="token constant">Right</span> <span class="token hvariable">r</span> <span class="token operator">-&gt;</span> <span class="token builtin">mapM_</span> <span class="token builtin">print</span> <span class="token hvariable">r</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这是一个完整的 CSV parser，parser 部分只有21行代码，外加10行代码用来写 <code>parseCSV</code> 和 <code>main</code> 这两个函数。</p><p>我们来分析以下这个程序跟上一版本的区别。首先，一个单元格可能是一个普通的单元格或者是一个&quot;引用&quot;的单元格。在这两个选项中，我们首先用 <code>quotedCell</code> 来检查单元格是否是引用单元格，因为这可以通过检查单元格第一个字符是否是引号来实现。（译注：这样可以通过第一个字符判定单元格类型，从而避免使用 <code>try</code>）。</p><p><code>quotedCell</code> 由引用标志双引号开始和结束，其中包含零到多个字符。不过我们不能直接获取这些字符，因为其中可能包含嵌在单元格内容之中的双引号，此时是用两个双引号表示一个嵌入双引号。所以我们定义函数 <code>quotedChar</code> 来处理 <code>quotedCell</code> 中的内容。</p><p>当我们处理一个引用单元格内的字符时，我们先考虑 <code>noneOf &quot;\\&quot;&quot;</code>，这将会匹配并返回所有的非引号字符。而如果我们遇到了引号，我们就检查它是不是两个连续的引号，如果是，就返回一个双引号，否则报错。</p><p>注意到在 <code>quotedChar</code> 中，<code>try</code> 是出现在 <code>&lt;|&gt;</code> 的右侧的。而我们之前提过，<code>try</code> 只有当它出现再 <code>&lt;|&gt;</code> 的左侧时才会有效。事实上，这个 <code>try</code> 确实是出现在 <code>&lt;|&gt;</code> 的左侧的，不过是出现在 <code>many</code> 的实现中包含的 <code>&lt;|&gt;</code>的左侧。（译注：虽然在 <code>quotedChar</code> 中，<code>try</code> 出现在 <code>&lt;|&gt;</code> 的右侧，但是当使用 <code>many quotedChar</code> 时，<code>many</code> 的实现使得 <code>try</code> 会出现在其内部的 <code>&lt;|&gt;</code> 的左侧。）</p><p><code>try</code> 的使用在这里是很重要的。假如我们在解析一个引用单元格，并且这个单元格快要解析完了，在这个单元格后面还有下一个单元格。那么，在当前单元格的结尾，我们会看到一个引号，接着是一个逗号。当 parse 到单元格结尾时，调用 <code>quotedChar</code> 时，首先，<code>noneOf</code> 的测试会失败，接着会进行寻找两个连续引号的测试，这个测试也会失败，因为我们看到的是一个引号和一个逗号。如果我们不使用 <code>try</code>，parser 会在看到一个引号之后，期望下一个引号，而且此时第一个引号已经被 parser 给消耗掉了。如果我们使用了 <code>try</code>，那么这种情况就会被正确的识别为不是单元格的内容，所以 <code>many quotedChar</code> 就会终止。于是，超前查看又一次被证明是十分有用的，并且因为它用起来十分简单，它已经成为 Parsec 中十分引人注目的工具。</p><p>我们可以在 <code>ghci</code> 中用引用单元格来测试这个程序：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>ghci<span class="token operator">&gt;</span> :l csv9.hs
<span class="token punctuation">[</span><span class="token number">1</span> of <span class="token number">1</span><span class="token punctuation">]</span> Compiling Main             <span class="token punctuation">(</span> csv9.hs, interpreted <span class="token punctuation">)</span>
Ok, modules loaded: Main.
ghci<span class="token operator">&gt;</span> parseCSV <span class="token string">&quot;<span class="token entity" title="\\&quot;">\\&quot;</span>This, is, one, big, cell<span class="token entity" title="\\&quot;">\\&quot;</span><span class="token entity" title="\\n">\\n</span>&quot;</span>
Loading package parsec-2.1.0.0 <span class="token punctuation">..</span>. linking <span class="token punctuation">..</span>. done.
Right <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">&quot;This, is, one, big, cell&quot;</span><span class="token punctuation">]</span><span class="token punctuation">]</span>
ghci<span class="token operator">&gt;</span> parseCSV <span class="token string">&quot;<span class="token entity" title="\\&quot;">\\&quot;</span>Cell without an end<span class="token entity" title="\\n">\\n</span>&quot;</span>
Left <span class="token string">&quot;(unknown)&quot;</span> <span class="token punctuation">(</span>line <span class="token number">2</span>, <span class="token function">column</span> <span class="token number">1</span><span class="token punctuation">)</span>:
unexpected end of input
expecting <span class="token string">&quot;<span class="token entity" title="\\&quot;">\\&quot;</span><span class="token entity" title="\\&quot;">\\&quot;</span>&quot;</span> or quote at end of cell
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们来试一下真正的 CSV 文件，下面是一个电子表格程序生成的文件内容：</p><div class="language-csv line-numbers-mode" data-ext="csv" data-title="csv"><pre class="language-csv"><code><span class="token value">&quot;Product&quot;</span><span class="token punctuation">,</span><span class="token value">&quot;Price&quot;</span>
<span class="token value">&quot;O&#39;Reilly Socks&quot;</span><span class="token punctuation">,</span><span class="token value">10</span>
<span class="token value">&quot;Shirt with &quot;&quot;Haskell&quot;&quot; text&quot;</span><span class="token punctuation">,</span><span class="token value">20</span>
<span class="token value">&quot;Shirt, &quot;&quot;O&#39;Reilly&quot;&quot; version&quot;</span><span class="token punctuation">,</span><span class="token value">20</span>
<span class="token value">&quot;Haskell Caps&quot;</span><span class="token punctuation">,</span><span class="token value">15</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现在，我们用这个文件来测试下我们的程序：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>$ runhaskell csv9.hs <span class="token operator">&lt;</span> test.csv
<span class="token punctuation">[</span><span class="token string">&quot;Product&quot;</span>,<span class="token string">&quot;Price&quot;</span><span class="token punctuation">]</span>
<span class="token punctuation">[</span><span class="token string">&quot;O&#39;Reilly Socks&quot;</span>,<span class="token string">&quot;10&quot;</span><span class="token punctuation">]</span>
<span class="token punctuation">[</span><span class="token string">&quot;Shirt with <span class="token entity" title="\\&quot;">\\&quot;</span>Haskell<span class="token entity" title="\\&quot;">\\&quot;</span> text&quot;</span>,<span class="token string">&quot;20&quot;</span><span class="token punctuation">]</span>
<span class="token punctuation">[</span><span class="token string">&quot;Shirt, <span class="token entity" title="\\&quot;">\\&quot;</span>O&#39;Reilly<span class="token entity" title="\\&quot;">\\&quot;</span> version&quot;</span>,<span class="token string">&quot;20&quot;</span><span class="token punctuation">]</span>
<span class="token punctuation">[</span><span class="token string">&quot;Haskell Caps&quot;</span>,<span class="token string">&quot;15&quot;</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="parsec-与-monadplus" tabindex="-1"><a class="header-anchor" href="#parsec-与-monadplus"><span>Parsec 与 MonadPlus</span></a></h2>`,89),h={href:"http://book.realworldhaskell.org/read/programming-with-monads.html#monadcase.monadplus",target:"_blank",rel:"noopener noreferrer"},b=s("code",null,"MonadPlus",-1),m=s("code",null,"Genparser",-1),g=s("code",null,"MonadPlus",-1),q=s("code",null,"mzero",-1),y=s("code",null,"mplus",-1),f=s("code",null,"(<|>)",-1),P=t(`<div class="language-haskell line-numbers-mode" data-ext="haskell" data-title="haskell"><pre class="language-haskell"><code><span class="token comment">-- file: ch16/ParsecPlus.hs</span>
<span class="token keyword">instance</span> <span class="token constant">MonadPlus</span> <span class="token punctuation">(</span><span class="token constant">GenParser</span> <span class="token hvariable">tok</span> <span class="token hvariable">st</span><span class="token punctuation">)</span> <span class="token keyword">where</span>
    <span class="token hvariable">mzero</span> <span class="token operator">=</span> <span class="token builtin">fail</span> <span class="token string">&quot;mzero&quot;</span>
    <span class="token hvariable">mplus</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">&lt;|&gt;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr>`,2),C={href:"http://book.realworldhaskell.org/read/programming-with-monads.html#monadcase.urlencoded",target:"_blank",rel:"noopener noreferrer"},x=s("code",null,"application/x-www-form-urlencoded",-1),_=t(`<p>每个键-值对由 <code>&amp;</code> 字符分隔。</p><div class="language-haskell line-numbers-mode" data-ext="haskell" data-title="haskell"><pre class="language-haskell"><code><span class="token comment">-- file: ch16/FormParse.hs</span>
<span class="token hvariable">p_query</span> <span class="token operator">::</span> <span class="token constant">CharParser</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token constant">String</span><span class="token punctuation">,</span> <span class="token constant">Maybe</span> <span class="token constant">String</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
<span class="token hvariable">p_query</span> <span class="token operator">=</span> <span class="token hvariable">p_pair</span> <span class="token operator">\`sepBy\`</span> <span class="token hvariable">char</span> <span class="token char string">&#39;&amp;&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意上面函数的类型签名，我们使用 <code>Maybe</code> 来表示一个值：因为 HTTP 标准中并没有规定一个键必定有一个与之对应的值。我们希望能够区分&quot;没有值&quot;和&quot;空值&quot;。</p><div class="language-haskell line-numbers-mode" data-ext="haskell" data-title="haskell"><pre class="language-haskell"><code><span class="token comment">-- file: ch16/FormParse.hs</span>
<span class="token hvariable">p_pair</span> <span class="token operator">::</span> <span class="token constant">CharParser</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token constant">String</span><span class="token punctuation">,</span> <span class="token constant">Maybe</span> <span class="token constant">String</span><span class="token punctuation">)</span>
<span class="token hvariable">p_pair</span> <span class="token operator">=</span> <span class="token keyword">do</span>
  <span class="token hvariable">name</span> <span class="token operator">&lt;-</span> <span class="token hvariable">many1</span> <span class="token hvariable">p_char</span>
  <span class="token hvariable">value</span> <span class="token operator">&lt;-</span> <span class="token hvariable">optionMaybe</span> <span class="token punctuation">(</span><span class="token hvariable">char</span> <span class="token char string">&#39;=&#39;</span> <span class="token operator">&gt;&gt;</span> <span class="token hvariable">many</span> <span class="token hvariable">p_char</span><span class="token punctuation">)</span>
  <span class="token builtin">return</span> <span class="token punctuation">(</span><span class="token hvariable">name</span><span class="token punctuation">,</span> <span class="token hvariable">value</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>many1</code> 的功能类似与 <code>many</code>：它反复应用一个 parser，返回 parse 的结果列表。不过，当 parser 从未成功时，<code>many</code> 会返回空列表，而 <code>many1</code> 则会失败，也就是说， <code>many1</code> 会返回至少包含一个元素的列表。</p><p><code>optionMaybe</code> 函数接受一个 parser 作为参数，并修改它的行为，当该 parser 解析失败时， <code>optionMaybe</code> 返回 <code>Nothing</code>，成功时，则把 parser 的返回结果用 <code>Just</code> 封装。这就让我们能够区分&quot;没有值&quot;和&quot;空值&quot;。</p><p>译注：，对于 <code>optionMaybe</code>，parser 失败时并不一定是返回 <code>Nothing</code>，跟 <code>(&lt;|&gt;)</code> 类似，只有当 <code>optionMaybe</code> 的 parser parse 失败，并且没有消耗任何输入时，才会返回 <code>Nothing</code>，否则，仍然是失败，如下列代码所示：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>Prelude Text.ParserCombinators.Parsec<span class="token operator">&gt;</span> <span class="token builtin class-name">let</span> p <span class="token operator">=</span> string <span class="token string">&quot;html&quot;</span> :: Parser String 
Prelude Text.ParserCombinators.Parsec<span class="token operator">&gt;</span> parseTest p <span class="token string">&quot;html&quot;</span> 
<span class="token string">&quot;html&quot;</span>
Prelude Text.ParserCombinators.Parsec<span class="token operator">&gt;</span> parseTest p <span class="token string">&quot;http&quot;</span> 
parse error at <span class="token punctuation">(</span>line <span class="token number">1</span>, <span class="token function">column</span> <span class="token number">1</span><span class="token punctuation">)</span>:
unexpected <span class="token string">&quot;t&quot;</span>
expecting <span class="token string">&quot;html&quot;</span>
Prelude Text.ParserCombinators.Parsec<span class="token operator">&gt;</span> <span class="token builtin class-name">let</span> f <span class="token operator">=</span> optionMaybe p 
Prelude Text.ParserCombinators.Parsec<span class="token operator">&gt;</span> parseTest f <span class="token string">&quot;http&quot;</span> 
parse error at <span class="token punctuation">(</span>line <span class="token number">1</span>, <span class="token function">column</span> <span class="token number">1</span><span class="token punctuation">)</span>:
unexpected <span class="token string">&quot;t&quot;</span>
expecting <span class="token string">&quot;html&quot;</span>
Prelude Text.ParserCombinators.Parsec<span class="token operator">&gt;</span> parseTest f <span class="token string">&quot;php&quot;</span> 
Nothing
Prelude Text.ParserCombinators.Parsec<span class="token operator">&gt;</span>  
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>单独的字符可以以如下集中方式编码</p><div class="language-haskell line-numbers-mode" data-ext="haskell" data-title="haskell"><pre class="language-haskell"><code><span class="token comment">-- file: ch16/FormParse.hs</span>
<span class="token import-statement"><span class="token keyword">import</span> Numeric</span>
<span class="token hvariable">p_char</span> <span class="token operator">::</span> <span class="token constant">CharParser</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token constant">Char</span>
<span class="token hvariable">p_char</span> <span class="token operator">=</span> <span class="token hvariable">oneOf</span> <span class="token hvariable">urlBaseChars</span>
     <span class="token operator">&lt;|&gt;</span> <span class="token punctuation">(</span><span class="token hvariable">char</span> <span class="token char string">&#39;+&#39;</span> <span class="token operator">&gt;&gt;</span> <span class="token builtin">return</span> <span class="token char string">&#39; &#39;</span><span class="token punctuation">)</span>
     <span class="token operator">&lt;|&gt;</span> <span class="token hvariable">p_hex</span>

<span class="token hvariable">urlBaseChars</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token char string">&#39;a&#39;</span><span class="token operator">..</span><span class="token char string">&#39;z&#39;</span><span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">[</span><span class="token char string">&#39;A&#39;</span><span class="token operator">..</span><span class="token char string">&#39;Z&#39;</span><span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">[</span><span class="token char string">&#39;0&#39;</span><span class="token operator">..</span><span class="token char string">&#39;9&#39;</span><span class="token punctuation">]</span><span class="token operator">++</span><span class="token string">&quot;$-_.!*&#39;(),&quot;</span>

<span class="token hvariable">p_hex</span> <span class="token operator">::</span> <span class="token constant">CharParser</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token constant">Char</span>
<span class="token hvariable">p_hex</span> <span class="token operator">=</span> <span class="token keyword">do</span>
  <span class="token hvariable">char</span> <span class="token char string">&#39;%&#39;</span>
  <span class="token hvariable">a</span> <span class="token operator">&lt;-</span> <span class="token hvariable">hexDigit</span>
  <span class="token hvariable">b</span> <span class="token operator">&lt;-</span> <span class="token hvariable">hexDigit</span>
  <span class="token keyword">let</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token hvariable">d</span><span class="token punctuation">,</span> <span class="token hvariable">_</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token hvariable">_</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token builtin">readHex</span> <span class="token punctuation">[</span><span class="token hvariable">a</span><span class="token punctuation">,</span><span class="token hvariable">b</span><span class="token punctuation">]</span>
  <span class="token builtin">return</span> <span class="token operator">.</span> <span class="token builtin">toEnum</span> <span class="token operator">$</span> <span class="token hvariable">d</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>有些字符可以直接表示。空格需要单独表示，空格用字符 <code>+</code> 来表示，其他字符则用一个 <code>%</code> 外加两个16进制数字来表示，<code>Numeric</code> 模块中的 <code>readHex</code> 函数可以把一个16进制字符串解析为一个数字。</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>ghci<span class="token operator">&gt;</span> parseTest p_query <span class="token string">&quot;foo=bar&amp;a%21=b+c&quot;</span>
Loading package parsec-2.1.0.0 <span class="token punctuation">..</span>. linking <span class="token punctuation">..</span>. done.
<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token string">&quot;foo&quot;</span>,Just <span class="token string">&quot;bar&quot;</span><span class="token punctuation">)</span>,<span class="token punctuation">(</span><span class="token string">&quot;a!&quot;</span>,Just <span class="token string">&quot;b c&quot;</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>As appealing and readable as this parser is, we can profit from stepping back and taking another look at some of our building blocks.</p><h2 id="用-parsec-代替正则表达式来进行临时的-parse" tabindex="-1"><a class="header-anchor" href="#用-parsec-代替正则表达式来进行临时的-parse"><span>用 Parsec 代替正则表达式来进行临时的 parse</span></a></h2><p>在很多流行的语言中，程序员喜欢用正则表达式来进行&quot;临时的&quot;解析工作，不过，正则表达式既难写，又难调试，如果代码写完后几个月不管，就几乎无法理解，并且失败时没有报错信息。</p><p>如果我们用 Parsec 编写紧凑的 parser，我们的代码将拥有可读性、表现力以及有用的报错信息。虽然用 Parsec 编写的代码可能会比正则表达式更长，不过也不会长太多，大抵能够抵消正则表达式的许多诱惑了。</p><h2 id="解析时不用变量" tabindex="-1"><a class="header-anchor" href="#解析时不用变量"><span>解析时不用变量</span></a></h2><p>上面的一些 parser 使用了 <code>do</code> 标记语法，把一些中间的解析结果绑定到变量，以便过后使用，比如说， <code>p_pair</code>。</p><div class="language-haskell line-numbers-mode" data-ext="haskell" data-title="haskell"><pre class="language-haskell"><code><span class="token comment">-- file: ch16/FormParse.hs</span>
<span class="token hvariable">p_pair</span> <span class="token operator">::</span> <span class="token constant">CharParser</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token constant">String</span><span class="token punctuation">,</span> <span class="token constant">Maybe</span> <span class="token constant">String</span><span class="token punctuation">)</span>
<span class="token hvariable">p_pair</span> <span class="token operator">=</span> <span class="token keyword">do</span>
  <span class="token hvariable">name</span> <span class="token operator">&lt;-</span> <span class="token hvariable">many1</span> <span class="token hvariable">p_char</span>
  <span class="token hvariable">value</span> <span class="token operator">&lt;-</span> <span class="token hvariable">optionMaybe</span> <span class="token punctuation">(</span><span class="token hvariable">char</span> <span class="token char string">&#39;=&#39;</span> <span class="token operator">&gt;&gt;</span> <span class="token hvariable">many</span> <span class="token hvariable">p_char</span><span class="token punctuation">)</span>
  <span class="token builtin">return</span> <span class="token punctuation">(</span><span class="token hvariable">name</span><span class="token punctuation">,</span> <span class="token hvariable">value</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们可以使用 <code>Control.Monad</code> 模块中的 <code>liftM2</code> 函数，不使用变量来完成上面的工作：</p><div class="language-haskell line-numbers-mode" data-ext="haskell" data-title="haskell"><pre class="language-haskell"><code><span class="token comment">-- file: ch16/FormParse.hs</span>
<span class="token hvariable">p_pair_app1</span> <span class="token operator">=</span>
    <span class="token hvariable">liftM2</span> <span class="token punctuation">(</span><span class="token punctuation">,</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token hvariable">many1</span> <span class="token hvariable">p_char</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token hvariable">optionMaybe</span> <span class="token punctuation">(</span><span class="token hvariable">char</span> <span class="token char string">&#39;=&#39;</span> <span class="token operator">&gt;&gt;</span> <span class="token hvariable">many</span> <span class="token hvariable">p_char</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个函数跟 <code>p_pair</code> 有相同的类型与行为，不过它只有一行。在这里，我们不使用&quot;过程式&quot;的风格来写 parser，而是更加强调应用 parser 以及 parser 的组合。</p><p>这种（无变量的）风格称为 applicative 风格，我们可以在编写 applicative 风格 parser 的路上走的更远一些。大多数情况下，除了刚开始要理解这种风格需要一点最初的努力之外，applicative 风格带来的代码紧凑型并不会牺牲代码的可读性。</p><h2 id="使用-applicative-functor-进行-parse" tabindex="-1"><a class="header-anchor" href="#使用-applicative-functor-进行-parse"><span>使用 Applicative Functor 进行 parse</span></a></h2>`,24),w=s("code",null,"Control.Applicative",-1),S={href:"http://book.realworldhaskell.org/read/code-case-study-parsing-a-binary-data-format.html#binary.fmap",target:"_blank",rel:"noopener noreferrer"},T=s("code",null,"Applicative",-1),O=s("em",null,"Applicative Functor",-1),A=s("code",null,"Functor",-1),M=s("code",null,"Monad",-1),H=s("code",null,"Control.Applicative",-1),J=s("code",null,"Alternative",-1),V=s("code",null,"MonadPlus",-1),E=t(`<p>像往常一样，我们认为理解 Applicative Functor 的最好的方式通过使用它们来讲解。从理论上讲，每个 Monad 都是一个 Applicative functor，但不是每一个 Applicative Functor 都是一个 Monad。由于 Applicative Functor 是在 Monad 之后很久才加入标准库，我们常常不能免费获得一个 <code>Applicative</code> 实例，我们常常需要自己把正在使用的 Monad 声明为 <code>Applicative</code>。</p><p>译注： 至少在我用的 GHC 7.8.1/GHC 7.10 里，<code>Parser</code> 已经是 <code>Applicative</code>了。不需要自己实现。而且，在 GHC 7.10 中，每一个 <code>Monad</code> 都会强制要求声明为 <code>Applicative</code>，不过又据说 GHC 7.12 可能会取消这一限制。</p><p>要在 Parsec 中做到这一点，我们将写一个小模块来将 Parsec 实现为 <code>Applicative</code>，然后我们导入这个模块，而不是通常的 Parsec 模块。</p><div class="language-haskell line-numbers-mode" data-ext="haskell" data-title="haskell"><pre class="language-haskell"><code><span class="token comment">-- file: ch16/ApplicativeParsec.hs</span>
<span class="token keyword">module</span> <span class="token constant">ApplicativeParsec</span>
    <span class="token punctuation">(</span>
      <span class="token keyword">module</span> <span class="token constant">Control<span class="token punctuation">.</span>Applicative</span>
    <span class="token punctuation">,</span> <span class="token keyword">module</span> <span class="token constant">Text<span class="token punctuation">.</span>ParserCombinators<span class="token punctuation">.</span>Parsec</span>
    <span class="token punctuation">)</span> <span class="token keyword">where</span>

<span class="token import-statement"><span class="token keyword">import</span> Control<span class="token punctuation">.</span>Applicative</span>
<span class="token import-statement"><span class="token keyword">import</span> Control<span class="token punctuation">.</span>Monad</span> <span class="token punctuation">(</span><span class="token constant">MonadPlus</span><span class="token punctuation">(</span><span class="token operator">..</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token hvariable">ap</span><span class="token punctuation">)</span>
<span class="token comment">-- Hide a few names that are provided by Applicative.</span>
<span class="token import-statement"><span class="token keyword">import</span> Text<span class="token punctuation">.</span>ParserCombinators<span class="token punctuation">.</span>Parsec <span class="token keyword">hiding</span></span> <span class="token punctuation">(</span><span class="token hvariable">many</span><span class="token punctuation">,</span> <span class="token hvariable">optional</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token operator">&lt;|&gt;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token comment">-- The Applicative instance for every Monad looks like this.</span>
<span class="token keyword">instance</span> <span class="token constant">Applicative</span> <span class="token punctuation">(</span><span class="token constant">GenParser</span> <span class="token hvariable">s</span> <span class="token hvariable">a</span><span class="token punctuation">)</span> <span class="token keyword">where</span>
    <span class="token hvariable">pure</span>  <span class="token operator">=</span> <span class="token builtin">return</span>
    <span class="token punctuation">(</span><span class="token operator">&lt;*&gt;</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token hvariable">ap</span>

<span class="token comment">-- The Alternative instance for every MonadPlus looks like this.</span>
<span class="token keyword">instance</span> <span class="token constant">Alternative</span> <span class="token punctuation">(</span><span class="token constant">GenParser</span> <span class="token hvariable">s</span> <span class="token hvariable">a</span><span class="token punctuation">)</span> <span class="token keyword">where</span>
    <span class="token hvariable">empty</span> <span class="token operator">=</span> <span class="token hvariable">mzero</span>
    <span class="token punctuation">(</span><span class="token operator">&lt;|&gt;</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token hvariable">mplus</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>为了方便起见，我们自己的模块导出了我们从 <code>Applicative</code> 和 <code>Parsec</code> 模块中导入的所有变量与函数名。因为我们隐藏了 Parsec 的 <code>(&lt;|&gt;)</code>，我们导入这个自己定义的模块后，使用的 <code>(&lt;|&gt;)</code> 将会是从 <code>Control.Applicative</code> 模块中导入的。</p><h2 id="举例-使用-applicative-进行-parse" tabindex="-1"><a class="header-anchor" href="#举例-使用-applicative-进行-parse"><span>举例：使用 Applicative 进行 parse</span></a></h2><p>我们将自底向上的改写上面的表单 parser，首先从 <code>p_hex</code> 开始，<code>p_hex</code> 解析一个16进制转义字符序列。下面是使用 do-notation 风格的代码：</p><div class="language-haskell line-numbers-mode" data-ext="haskell" data-title="haskell"><pre class="language-haskell"><code><span class="token comment">-- file: ch16/FormApp.hs</span>
<span class="token hvariable">p_hex</span> <span class="token operator">::</span> <span class="token constant">CharParser</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token constant">Char</span>
<span class="token hvariable">p_hex</span> <span class="token operator">=</span> <span class="token keyword">do</span>
  <span class="token hvariable">char</span> <span class="token char string">&#39;%&#39;</span>
  <span class="token hvariable">a</span> <span class="token operator">&lt;-</span> <span class="token hvariable">hexDigit</span>
  <span class="token hvariable">b</span> <span class="token operator">&lt;-</span> <span class="token hvariable">hexDigit</span>
  <span class="token keyword">let</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token hvariable">d</span><span class="token punctuation">,</span> <span class="token hvariable">_</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token hvariable">_</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token builtin">readHex</span> <span class="token punctuation">[</span><span class="token hvariable">a</span><span class="token punctuation">,</span><span class="token hvariable">b</span><span class="token punctuation">]</span>
  <span class="token builtin">return</span> <span class="token operator">.</span> <span class="token builtin">toEnum</span> <span class="token operator">$</span> <span class="token hvariable">d</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>而下面是 applicative 风格的代码：</p><div class="language-haskell line-numbers-mode" data-ext="haskell" data-title="haskell"><pre class="language-haskell"><code><span class="token comment">-- file: ch16/FormApp.hs</span>
<span class="token hvariable">a_hex</span> <span class="token operator">=</span> <span class="token hvariable">hexify</span> <span class="token operator">&lt;$&gt;</span> <span class="token punctuation">(</span><span class="token hvariable">char</span> <span class="token char string">&#39;%&#39;</span> <span class="token operator">*&gt;</span> <span class="token hvariable">hexDigit</span><span class="token punctuation">)</span> <span class="token operator">&lt;*&gt;</span> <span class="token hvariable">hexDigit</span>
    <span class="token keyword">where</span> <span class="token hvariable">hexify</span> <span class="token hvariable">a</span> <span class="token hvariable">b</span> <span class="token operator">=</span> <span class="token builtin">toEnum</span> <span class="token operator">.</span> <span class="token builtin">fst</span> <span class="token operator">.</span> <span class="token builtin">head</span> <span class="token operator">.</span> <span class="token builtin">readHex</span> <span class="token operator">$</span> <span class="token punctuation">[</span><span class="token hvariable">a</span><span class="token punctuation">,</span><span class="token hvariable">b</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>虽然单独的 parser 并没有改变，仍然是 <code>char &#39;%&#39;</code> 与两个 <code>hexDigit</code>，把它们组合在一起的组合子却发生了变化。其中，目前我们唯一熟悉的一个就是 <code>(&lt;$&gt;)</code>，我们已经知道，它不过是 <code>fmap</code> 的同义词。</p><p>从我们对 <code>GenParser</code> 的 <code>Applicative</code> 实例的实现中，我们知道 <code>(&lt;*&gt;)</code> 就是 <code>ap</code></p><p>剩下的我们不熟悉的组合子是 <code>(*&gt;)</code>，它接受两个 parser 作为参数，首先应用第一个 parser，但是忽略其返回结果，而只用作消耗输入，然后应用第二个 parser，并返回其结果。换句话说，它很像 <code>(&gt;&gt;)</code>。</p><blockquote><p>关于尖括号的一个小提示（此处应该是 Real World Haskell 中的 Notes）</p><p>我们继续之前，记住这些从 <code>Control.Applicative</code> 中导入的尖括号表示的组合子是在干什么是很有用的：如果一个尖括号指向某个方向，那么它就是返回这个方向的参数的结果。</p><p>例如，<code>(*&gt;)</code> 返回其右侧参数的结果；<code>(&lt;*&gt;)</code> 返回两侧参数的结果，<code>(&lt;*)</code>，这个组合子我们目前还没过用到，它返回其左侧参数的结果。</p></blockquote><p>虽然这里涉及的多数概念在之前 Functor 和 Monad 的章节中我们已经了解过了，我们还是过一遍这下函数来解释下发生了什么。首先，为了解函数的类型，我们把 <code>hexify</code> 函数提升为全局函数，并且手动写类型签名。</p><div class="language-haskell line-numbers-mode" data-ext="haskell" data-title="haskell"><pre class="language-haskell"><code><span class="token comment">-- file: ch16/FormApp.hs</span>
<span class="token hvariable">hexify</span> <span class="token operator">::</span> <span class="token constant">Char</span> <span class="token operator">-&gt;</span> <span class="token constant">Char</span> <span class="token operator">-&gt;</span> <span class="token constant">Char</span>
<span class="token hvariable">hexify</span> <span class="token hvariable">a</span> <span class="token hvariable">b</span> <span class="token operator">=</span> <span class="token builtin">toEnum</span> <span class="token operator">.</span> <span class="token builtin">fst</span> <span class="token operator">.</span> <span class="token builtin">head</span> <span class="token operator">.</span> <span class="token builtin">readHex</span> <span class="token operator">$</span> <span class="token punctuation">[</span><span class="token hvariable">a</span><span class="token punctuation">,</span><span class="token hvariable">b</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Parsec 的 <code>hexDigit</code> parser 会解析一个十六进制数字（译注：是0-F的数字，而不是十六进制数）</p><div class="language-haskell line-numbers-mode" data-ext="haskell" data-title="haskell"><pre class="language-haskell"><code><span class="token hvariable">ghci</span><span class="token operator">&gt;</span> <span class="token operator">:</span><span class="token keyword">type</span> <span class="token hvariable">hexDigit</span>
<span class="token hvariable">hexDigit</span> <span class="token operator">::</span> <span class="token constant">CharParser</span> <span class="token hvariable">st</span> <span class="token constant">Char</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>因此， <code>char &#39;%&#39; *&gt; hexDigit</code> 的类型跟 <code>hexDigit</code> 相同， 而 <code>(*&gt;)</code> 返回它右侧的结果。(<code>CharParser</code> 类型不过是 <code>GenParser Char</code> 的同义词）。</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>ghci<span class="token operator">&gt;</span> :type char <span class="token string">&#39;%&#39;</span> *<span class="token operator">&gt;</span> hexDigit
char <span class="token string">&#39;%&#39;</span> *<span class="token operator">&gt;</span> hexDigit :: GenParser Char st Char
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><code>hexify &lt;$&gt; (char &#39;%&#39; *&gt; hexDigit)</code> 这个表达式是这样一个 parser，它匹配一个 &quot;%&quot; 字符，紧接着匹配一个十六进制数字字符，而其结果是一个函数。(译注：hexify 这个函数在这里被部分应用了）</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>ghci<span class="token operator">&gt;</span> :type hexify <span class="token operator">&lt;</span>$<span class="token operator">&gt;</span> <span class="token punctuation">(</span>char <span class="token string">&#39;%&#39;</span> *<span class="token operator">&gt;</span> hexDigit<span class="token punctuation">)</span>
hexify <span class="token operator">&lt;</span>$<span class="token operator">&gt;</span> <span class="token punctuation">(</span>char <span class="token string">&#39;%&#39;</span> *<span class="token operator">&gt;</span> hexDigit<span class="token punctuation">)</span> :: GenParser Char st <span class="token punctuation">(</span>Char -<span class="token operator">&gt;</span> Char<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>最后， <code>(&lt;*&gt;)</code> 首先应用左边的 parser，再应用右边的 parser，然后应用把右边 parser 产生的值应用到左边 parser 产生的函数上。</p><p>如果你已经能够理解下面这句话，那么你就能理解 <code>(&lt;*&gt;)</code> 和 <code>ap</code> 这两个组合子：<code>(&lt;*&gt;)</code> 就是原来的 <code>($)</code> 被提升到 Applicative Functor，而 <code>ap</code> 则是 <code>($)</code> 被提升到 Monad。</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>ghci<span class="token operator">&gt;</span> :type <span class="token punctuation">(</span>$<span class="token punctuation">)</span>
<span class="token punctuation">(</span>$<span class="token punctuation">)</span> :: <span class="token punctuation">(</span>a -<span class="token operator">&gt;</span> b<span class="token punctuation">)</span> -<span class="token operator">&gt;</span> a -<span class="token operator">&gt;</span> b
ghci<span class="token operator">&gt;</span> :type <span class="token punctuation">(</span><span class="token operator">&lt;</span>*<span class="token operator">&gt;</span><span class="token punctuation">)</span>
<span class="token punctuation">(</span><span class="token operator">&lt;</span>*<span class="token operator">&gt;</span><span class="token punctuation">)</span> :: <span class="token punctuation">(</span>Applicative f<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> f <span class="token punctuation">(</span>a -<span class="token operator">&gt;</span> b<span class="token punctuation">)</span> -<span class="token operator">&gt;</span> f a -<span class="token operator">&gt;</span> f b
ghci<span class="token operator">&gt;</span> :type ap
ap :: <span class="token punctuation">(</span>Monad m<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> m <span class="token punctuation">(</span>a -<span class="token operator">&gt;</span> b<span class="token punctuation">)</span> -<span class="token operator">&gt;</span> m a -<span class="token operator">&gt;</span> m b
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来，我们考虑 <code>p_char</code> 这个 parser，原来的代码是这样子的：</p><div class="language-haskell line-numbers-mode" data-ext="haskell" data-title="haskell"><pre class="language-haskell"><code><span class="token comment">-- file: ch16/FormApp.hs</span>
<span class="token hvariable">p_char</span> <span class="token operator">::</span> <span class="token constant">CharParser</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token constant">Char</span>
<span class="token hvariable">p_char</span> <span class="token operator">=</span> <span class="token hvariable">oneOf</span> <span class="token hvariable">urlBaseChars</span>
     <span class="token operator">&lt;|&gt;</span> <span class="token punctuation">(</span><span class="token hvariable">char</span> <span class="token char string">&#39;+&#39;</span> <span class="token operator">&gt;&gt;</span> <span class="token builtin">return</span> <span class="token char string">&#39; &#39;</span><span class="token punctuation">)</span>
     <span class="token operator">&lt;|&gt;</span> <span class="token hvariable">p_hex</span>

<span class="token hvariable">urlBaseChars</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token char string">&#39;a&#39;</span><span class="token operator">..</span><span class="token char string">&#39;z&#39;</span><span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">[</span><span class="token char string">&#39;A&#39;</span><span class="token operator">..</span><span class="token char string">&#39;Z&#39;</span><span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">[</span><span class="token char string">&#39;0&#39;</span><span class="token operator">..</span><span class="token char string">&#39;9&#39;</span><span class="token punctuation">]</span><span class="token operator">++</span><span class="token string">&quot;$-_.!*&#39;(),&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用 Applicative 风格的代码跟上面的代码几乎一样，不过使用了更方便的记号。</p><div class="language-haskell line-numbers-mode" data-ext="haskell" data-title="haskell"><pre class="language-haskell"><code><span class="token comment">-- file: ch16/FormApp.hs</span>
<span class="token hvariable">a_char</span> <span class="token operator">=</span> <span class="token hvariable">oneOf</span> <span class="token hvariable">urlBaseChars</span>
     <span class="token operator">&lt;|&gt;</span> <span class="token punctuation">(</span><span class="token char string">&#39; &#39;</span> <span class="token operator">&lt;$</span> <span class="token hvariable">char</span> <span class="token char string">&#39;+&#39;</span><span class="token punctuation">)</span>
     <span class="token operator">&lt;|&gt;</span> <span class="token hvariable">a_hex</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里，<code>(&lt;$)</code> 组合子会在右边的 parser 成功时，返回左边参数的值。</p><p>最后，等价的 <code>p_pair_app1</code> 也几乎跟原来的版本相同，下面是原来的版本：</p><div class="language-haskell line-numbers-mode" data-ext="haskell" data-title="haskell"><pre class="language-haskell"><code><span class="token comment">-- file: ch16/FormParse.hs</span>
<span class="token hvariable">p_pair_app1</span> <span class="token operator">=</span>
    <span class="token hvariable">liftM2</span> <span class="token punctuation">(</span><span class="token punctuation">,</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token hvariable">many1</span> <span class="token hvariable">p_char</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token hvariable">optionMaybe</span> <span class="token punctuation">(</span><span class="token hvariable">char</span> <span class="token char string">&#39;=&#39;</span> <span class="token operator">&gt;&gt;</span> <span class="token hvariable">many</span> <span class="token hvariable">p_char</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们改变的只有用来做提升的组合子： <code>liftA</code> 函数在这里的效果同 <code>liftM</code> 是一样的。</p><div class="language-haskell line-numbers-mode" data-ext="haskell" data-title="haskell"><pre class="language-haskell"><code><span class="token comment">-- file: ch16/FormApp.hs</span>
<span class="token hvariable">a_pair</span> <span class="token operator">::</span> <span class="token constant">CharParser</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token constant">String</span><span class="token punctuation">,</span> <span class="token constant">Maybe</span> <span class="token constant">String</span><span class="token punctuation">)</span>
<span class="token hvariable">a_pair</span> <span class="token operator">=</span> <span class="token hvariable">liftA2</span> <span class="token punctuation">(</span><span class="token punctuation">,</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token hvariable">many1</span> <span class="token hvariable">a_char</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token hvariable">optionMaybe</span> <span class="token punctuation">(</span><span class="token hvariable">char</span> <span class="token char string">&#39;=&#39;</span> <span class="token operator">*&gt;</span> <span class="token hvariable">many</span> <span class="token hvariable">a_char</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="parse-json-数据" tabindex="-1"><a class="header-anchor" href="#parse-json-数据"><span>Parse JSON 数据</span></a></h2><p>为了更好的理解 Applicative Functor，并且进一步探索 Parsec，让我们来写一个满足 RFC 4627 定义的 JSON parser</p><p>在顶层，一个 JSON 值要么是一个对象，要么是一个数组。</p><div class="language-haskell line-numbers-mode" data-ext="haskell" data-title="haskell"><pre class="language-haskell"><code><span class="token comment">-- file: ch16/JSONParsec.hs</span>
<span class="token hvariable">p_text</span> <span class="token operator">::</span> <span class="token constant">CharParser</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token constant">JValue</span>
<span class="token hvariable">p_text</span> <span class="token operator">=</span> <span class="token hvariable">spaces</span> <span class="token operator">*&gt;</span> <span class="token hvariable">text</span>
     <span class="token operator">&lt;?&gt;</span> <span class="token string">&quot;JSON text&quot;</span>
    <span class="token keyword">where</span> <span class="token hvariable">text</span> <span class="token operator">=</span> <span class="token constant">JObject</span> <span class="token operator">&lt;$&gt;</span> <span class="token hvariable">p_object</span>
             <span class="token operator">&lt;|&gt;</span> <span class="token constant">JArray</span> <span class="token operator">&lt;$&gt;</span> <span class="token hvariable">p_array</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>译注：这一节作者并没有给出 <code>JSON</code> 类型的定义，可以参考第六章。而且第六章的 <code>JSON</code> 定义也跟这里的 parser 不太一致，可以参考 Real World Haskell 网站这一节中 Alexey 的 comment:</p><div class="language-haskell line-numbers-mode" data-ext="haskell" data-title="haskell"><pre class="language-haskell"><code><span class="token comment">-- 译注：Real World Haskell 网站这一节中 Alexey 的 comment</span>
<span class="token keyword">data</span> <span class="token constant">JValue</span> <span class="token operator">=</span> <span class="token constant">JString</span> <span class="token constant">String</span>
            <span class="token operator">|</span> <span class="token constant">JNumber</span> <span class="token constant">Double</span>
            <span class="token operator">|</span> <span class="token constant">JBool</span> <span class="token constant">Bool</span>
            <span class="token operator">|</span> <span class="token constant">JNull</span>
            <span class="token operator">|</span> <span class="token constant">JObject</span> <span class="token punctuation">(</span><span class="token constant">JObj</span> <span class="token constant">JValue</span><span class="token punctuation">)</span>
            <span class="token operator">|</span> <span class="token constant">JArray</span> <span class="token punctuation">(</span><span class="token constant">JAry</span> <span class="token constant">JValue</span><span class="token punctuation">)</span>
            <span class="token keyword">deriving</span> <span class="token punctuation">(</span><span class="token constant">Eq</span><span class="token punctuation">,</span> <span class="token constant">Ord</span><span class="token punctuation">,</span> <span class="token constant">Show</span><span class="token punctuation">)</span>
<span class="token keyword">newtype</span> <span class="token constant">JAry</span> <span class="token hvariable">a</span> <span class="token operator">=</span> <span class="token constant">JAry</span> <span class="token punctuation">{</span>
    <span class="token hvariable">fromJAry</span> <span class="token operator">::</span> <span class="token punctuation">[</span><span class="token hvariable">a</span><span class="token punctuation">]</span>
    <span class="token punctuation">}</span> <span class="token keyword">deriving</span> <span class="token punctuation">(</span><span class="token constant">Eq</span><span class="token punctuation">,</span> <span class="token constant">Ord</span><span class="token punctuation">,</span> <span class="token constant">Show</span><span class="token punctuation">)</span>

<span class="token keyword">newtype</span> <span class="token constant">JObj</span> <span class="token hvariable">a</span> <span class="token operator">=</span> <span class="token constant">JObj</span> <span class="token punctuation">{</span>
    <span class="token hvariable">fromJObj</span> <span class="token operator">::</span> <span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token constant">String</span><span class="token punctuation">,</span> <span class="token hvariable">a</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
    <span class="token punctuation">}</span> <span class="token keyword">deriving</span> <span class="token punctuation">(</span><span class="token constant">Eq</span><span class="token punctuation">,</span> <span class="token constant">Ord</span><span class="token punctuation">,</span> <span class="token constant">Show</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>数组和对象在结构上很类似，一个字符（对数组是 &quot;[&quot;，对对象是&quot;{&quot;）用作做括号，内部是用逗号分隔的数据，由另一个字符（对数组是&quot;]&quot;，对对象是&quot;}&quot;）作为右括号终结。我们可以抓住这种相似性，写一个小的辅助函数。</p><div class="language-haskell line-numbers-mode" data-ext="haskell" data-title="haskell"><pre class="language-haskell"><code><span class="token comment">-- file: ch16/JSONParsec.hs</span>
<span class="token hvariable">p_series</span> <span class="token operator">::</span> <span class="token constant">Char</span> <span class="token operator">-&gt;</span> <span class="token constant">CharParser</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token hvariable">a</span> <span class="token operator">-&gt;</span> <span class="token constant">Char</span> <span class="token operator">-&gt;</span> <span class="token constant">CharParser</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token hvariable">a</span><span class="token punctuation">]</span>
<span class="token hvariable">p_series</span> <span class="token hvariable">left</span> <span class="token hvariable">parser</span> <span class="token hvariable">right</span> <span class="token operator">=</span>
    <span class="token hvariable">between</span> <span class="token punctuation">(</span><span class="token hvariable">char</span> <span class="token hvariable">left</span> <span class="token operator">&lt;*</span> <span class="token hvariable">spaces</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token hvariable">char</span> <span class="token hvariable">right</span><span class="token punctuation">)</span> <span class="token operator">$</span>
            <span class="token punctuation">(</span><span class="token hvariable">parser</span> <span class="token operator">&lt;*</span> <span class="token hvariable">spaces</span><span class="token punctuation">)</span> <span class="token operator">\`sepBy\`</span> <span class="token punctuation">(</span><span class="token hvariable">char</span> <span class="token char string">&#39;,&#39;</span> <span class="token operator">&lt;*</span> <span class="token hvariable">spaces</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这里，我们终于用到了 <code>(&lt;*)</code> 这个我们之前介绍过的组合子。我们用它来略过一些 token 之前的空格。使用 <code>p_series</code> 函数， 解析一个数组会很简单。</p><div class="language-haskell line-numbers-mode" data-ext="haskell" data-title="haskell"><pre class="language-haskell"><code><span class="token comment">-- file: ch16/JSONParsec.hs</span>
<span class="token hvariable">p_array</span> <span class="token operator">::</span> <span class="token constant">CharParser</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token constant">JAry</span> <span class="token constant">JValue</span><span class="token punctuation">)</span>
<span class="token hvariable">p_array</span> <span class="token operator">=</span> <span class="token constant">JAry</span> <span class="token operator">&lt;$&gt;</span> <span class="token hvariable">p_series</span> <span class="token char string">&#39;[&#39;</span> <span class="token hvariable">p_value</span> <span class="token char string">&#39;]&#39;</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>处理 JSON 的对象要复杂一点，需要一点额外的努力来为每个 object 的 field 产生一个 name-value 对。</p><div class="language-haskell line-numbers-mode" data-ext="haskell" data-title="haskell"><pre class="language-haskell"><code><span class="token comment">-- file: ch16/JSONParsec.hs</span>
<span class="token hvariable">p_object</span> <span class="token operator">::</span> <span class="token constant">CharParser</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token constant">JObj</span> <span class="token constant">JValue</span><span class="token punctuation">)</span>
<span class="token hvariable">p_object</span> <span class="token operator">=</span> <span class="token constant">JObj</span> <span class="token operator">&lt;$&gt;</span> <span class="token hvariable">p_series</span> <span class="token char string">&#39;{&#39;</span> <span class="token hvariable">p_field</span> <span class="token char string">&#39;}&#39;</span>
    <span class="token keyword">where</span> <span class="token hvariable">p_field</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">,</span><span class="token punctuation">)</span> <span class="token operator">&lt;$&gt;</span> <span class="token punctuation">(</span><span class="token hvariable">p_string</span> <span class="token operator">&lt;*</span> <span class="token hvariable">char</span> <span class="token char string">&#39;:&#39;</span> <span class="token operator">&lt;*</span> <span class="token hvariable">spaces</span><span class="token punctuation">)</span> <span class="token operator">&lt;*&gt;</span> <span class="token hvariable">p_value</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>解析一个单独的值是就是调用一个现有的 Parser，然后把它的结果用相应的 <code>JValue</code> 构造器封装：</p><div class="language-haskell line-numbers-mode" data-ext="haskell" data-title="haskell"><pre class="language-haskell"><code><span class="token comment">-- file: ch16/JSONParsec.hs</span>
<span class="token hvariable">p_value</span> <span class="token operator">::</span> <span class="token constant">CharParser</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token constant">JValue</span>
<span class="token hvariable">p_value</span> <span class="token operator">=</span> <span class="token hvariable">value</span> <span class="token operator">&lt;*</span> <span class="token hvariable">spaces</span>
  <span class="token keyword">where</span> <span class="token hvariable">value</span> <span class="token operator">=</span> <span class="token constant">JString</span> <span class="token operator">&lt;$&gt;</span> <span class="token hvariable">p_string</span>
            <span class="token operator">&lt;|&gt;</span> <span class="token constant">JNumber</span> <span class="token operator">&lt;$&gt;</span> <span class="token hvariable">p_number</span>
            <span class="token operator">&lt;|&gt;</span> <span class="token constant">JObject</span> <span class="token operator">&lt;$&gt;</span> <span class="token hvariable">p_object</span>
            <span class="token operator">&lt;|&gt;</span> <span class="token constant">JArray</span>  <span class="token operator">&lt;$&gt;</span> <span class="token hvariable">p_array</span>
            <span class="token operator">&lt;|&gt;</span> <span class="token constant">JBool</span>   <span class="token operator">&lt;$&gt;</span> <span class="token hvariable">p_bool</span>
            <span class="token operator">&lt;|&gt;</span> <span class="token constant">JNull</span>   <span class="token operator">&lt;$</span> <span class="token hvariable">string</span> <span class="token string">&quot;null&quot;</span>
            <span class="token operator">&lt;?&gt;</span> <span class="token string">&quot;JSON value&quot;</span>

<span class="token hvariable">p_bool</span> <span class="token operator">::</span> <span class="token constant">CharParser</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token constant">Bool</span>
<span class="token hvariable">p_bool</span> <span class="token operator">=</span> <span class="token constant">True</span> <span class="token operator">&lt;$</span> <span class="token hvariable">string</span> <span class="token string">&quot;true&quot;</span>
     <span class="token operator">&lt;|&gt;</span> <span class="token constant">False</span> <span class="token operator">&lt;$</span> <span class="token hvariable">string</span> <span class="token string">&quot;false&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>choice</code> 组合子允许我们把这种很有很多选项的情况用一个列表来表示，它返回 parser 列表中第一个 parse 成功的 parser 的结果。</p><div class="language-haskell line-numbers-mode" data-ext="haskell" data-title="haskell"><pre class="language-haskell"><code><span class="token comment">-- file: ch16/JSONParsec.hs</span>
<span class="token hvariable">p_value_choice</span> <span class="token operator">=</span> <span class="token hvariable">value</span> <span class="token operator">&lt;*</span> <span class="token hvariable">spaces</span>
  <span class="token keyword">where</span> <span class="token hvariable">value</span> <span class="token operator">=</span> <span class="token hvariable">choice</span> <span class="token punctuation">[</span> <span class="token constant">JString</span> <span class="token operator">&lt;$&gt;</span> <span class="token hvariable">p_string</span>
                       <span class="token punctuation">,</span> <span class="token constant">JNumber</span> <span class="token operator">&lt;$&gt;</span> <span class="token hvariable">p_number</span>
                       <span class="token punctuation">,</span> <span class="token constant">JObject</span> <span class="token operator">&lt;$&gt;</span> <span class="token hvariable">p_object</span>
                       <span class="token punctuation">,</span> <span class="token constant">JArray</span>  <span class="token operator">&lt;$&gt;</span> <span class="token hvariable">p_array</span>
                       <span class="token punctuation">,</span> <span class="token constant">JBool</span>   <span class="token operator">&lt;$&gt;</span> <span class="token hvariable">p_bool</span>
                       <span class="token punctuation">,</span> <span class="token constant">JNull</span>   <span class="token operator">&lt;$</span> <span class="token hvariable">string</span> <span class="token string">&quot;null&quot;</span>
                       <span class="token punctuation">]</span>
                <span class="token operator">&lt;?&gt;</span> <span class="token string">&quot;JSON value&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>下面是最有意思的两个 parser：数字、字符串</p><div class="language-haskell line-numbers-mode" data-ext="haskell" data-title="haskell"><pre class="language-haskell"><code><span class="token comment">-- file: ch16/JSONParsec.hs</span>
<span class="token hvariable">p_number</span> <span class="token operator">::</span> <span class="token constant">CharParser</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token constant">Double</span>
<span class="token hvariable">p_number</span> <span class="token operator">=</span> <span class="token keyword">do</span> <span class="token hvariable">s</span> <span class="token operator">&lt;-</span> <span class="token hvariable">getInput</span>
              <span class="token keyword">case</span> <span class="token builtin">readSigned</span> <span class="token builtin">readFloat</span> <span class="token hvariable">s</span> <span class="token keyword">of</span>
                <span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token hvariable">n</span><span class="token punctuation">,</span> <span class="token hvariable">s&#39;</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">-&gt;</span> <span class="token hvariable">n</span> <span class="token operator">&lt;$</span> <span class="token hvariable">setInput</span> <span class="token hvariable">s&#39;</span>
                <span class="token hvariable">_</span>         <span class="token operator">-&gt;</span> <span class="token hvariable">empty</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们的诀窍是利用 Haskell 标准库中的数字 parser 库函数，它们定义在 <code>Numeric</code> 库中，<code>readFloat</code> 函数解析一个无符号浮点数，而 <code>readSigned</code> 函数接受一个无符号数的 parser 作为参数，并将其转换为有符号数的 parser。</p><p>上面的那些函数都不是 Parsec 中的库函数，所以需要一点特殊处理。Parsec 的 <code>getInput</code> 函数可以让我们直接访问 Parsec 还不曾消耗的输入流，对这些输入流，如果 <code>readSigned readFloat</code>解析成功，那么就返回解析成功的数字以及剩下的输入。这些还没有处理的输入，我们用 <code>setInput</code> 将他们还给 Parsec 作为新的未消耗的输入流。</p><p>Parse 一个字符串也不困难，不过需要处理一些细节。</p><div class="language-haskell line-numbers-mode" data-ext="haskell" data-title="haskell"><pre class="language-haskell"><code><span class="token comment">-- file: ch16/JSONParsec.hs</span>
<span class="token hvariable">p_string</span> <span class="token operator">::</span> <span class="token constant">CharParser</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token constant">String</span>
<span class="token hvariable">p_string</span> <span class="token operator">=</span> <span class="token hvariable">between</span> <span class="token punctuation">(</span><span class="token hvariable">char</span> <span class="token char string">&#39;\\&quot;&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token hvariable">char</span> <span class="token char string">&#39;\\&quot;&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token hvariable">many</span> <span class="token hvariable">jchar</span><span class="token punctuation">)</span>
    <span class="token keyword">where</span> <span class="token hvariable">jchar</span> <span class="token operator">=</span> <span class="token hvariable">char</span> <span class="token char string">&#39;\\\\&#39;</span> <span class="token operator">*&gt;</span> <span class="token punctuation">(</span><span class="token hvariable">p_escape</span> <span class="token operator">&lt;|&gt;</span> <span class="token hvariable">p_unicode</span><span class="token punctuation">)</span>
              <span class="token operator">&lt;|&gt;</span> <span class="token hvariable">satisfy</span> <span class="token punctuation">(</span><span class="token operator">\`notElem\`</span> <span class="token string">&quot;\\&quot;\\\\&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们可以使用刚刚介绍过的 <code>choice</code> 组合子来解析转义字符序列。</p><div class="language-haskell line-numbers-mode" data-ext="haskell" data-title="haskell"><pre class="language-haskell"><code><span class="token comment">-- file: ch16/JSONParsec.hs</span>
<span class="token hvariable">p_escape</span> <span class="token operator">::</span> <span class="token constant">CharParser</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token constant">Char</span>
<span class="token hvariable">p_escape</span> <span class="token operator">=</span> <span class="token hvariable">choice</span> <span class="token punctuation">(</span><span class="token builtin">zipWith</span> <span class="token hvariable">decode</span> <span class="token string">&quot;bnfrt\\\\\\&quot;/&quot;</span> <span class="token string">&quot;\\b\\n\\f\\r\\t\\\\\\&quot;/&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">where</span> <span class="token hvariable">decode</span> <span class="token operator">::</span> <span class="token constant">Char</span> <span class="token operator">-&gt;</span> <span class="token constant">Char</span> <span class="token operator">-&gt;</span> <span class="token constant">CharParser</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token constant">Char</span>
          <span class="token hvariable">decode</span> <span class="token hvariable">c</span> <span class="token hvariable">r</span> <span class="token operator">=</span> <span class="token hvariable">r</span> <span class="token operator">&lt;$</span> <span class="token hvariable">char</span> <span class="token hvariable">c</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>最后，JSON 允许我们在字符串中使用 Unicode 字符：&quot;\\u&quot;后面跟着四个十六进制数字:</p><div class="language-haskell line-numbers-mode" data-ext="haskell" data-title="haskell"><pre class="language-haskell"><code><span class="token comment">-- file: ch16/JSONParsec.hs</span>
<span class="token hvariable">p_unicode</span> <span class="token operator">::</span> <span class="token constant">CharParser</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token constant">Char</span>
<span class="token hvariable">p_unicode</span> <span class="token operator">=</span> <span class="token hvariable">char</span> <span class="token char string">&#39;u&#39;</span> <span class="token operator">*&gt;</span> <span class="token punctuation">(</span><span class="token hvariable">decode</span> <span class="token operator">&lt;$&gt;</span> <span class="token hvariable">count</span> <span class="token number">4</span> <span class="token hvariable">hexDigit</span><span class="token punctuation">)</span>
    <span class="token keyword">where</span> <span class="token hvariable">decode</span> <span class="token hvariable">x</span> <span class="token operator">=</span> <span class="token builtin">toEnum</span> <span class="token hvariable">code</span>
              <span class="token keyword">where</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token hvariable">code</span><span class="token punctuation">,</span><span class="token hvariable">_</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token hvariable">_</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token builtin">readHex</span> <span class="token hvariable">x</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>相比 Monad，Applicative Functor唯一缺少的能力，就是把一个值绑定到一个变量，而当我们需要验证我们解析的结果时，我们就需要这种能力。</p><p>基本上只有当我们需要把值绑定到变量时，我们才会需要写 Monadic 的函数，对于更复杂的 parser 也是这样的：我们不太会用到 Monad 提供的额外的力量。</p><p>我们写这本书的时候， Applicative Functor 对于 Haskell 社区还是很新的概念，人们仍然在探索它在 parser 领域之外应用的可能。</p><h2 id="parse-http-请求" tabindex="-1"><a class="header-anchor" href="#parse-http-请求"><span>Parse HTTP 请求</span></a></h2><p>这一节我们来写一个基本的 HTTP 请求的 parser， 来作为 Applicative Parsing 的例子。</p><div class="language-haskell line-numbers-mode" data-ext="haskell" data-title="haskell"><pre class="language-haskell"><code><span class="token keyword">module</span> <span class="token constant">HttpRequestParser</span>
    <span class="token punctuation">(</span>
      <span class="token constant">HttpRequest</span><span class="token punctuation">(</span><span class="token operator">..</span><span class="token punctuation">)</span>
    <span class="token punctuation">,</span> <span class="token constant">Method</span><span class="token punctuation">(</span><span class="token operator">..</span><span class="token punctuation">)</span>
    <span class="token punctuation">,</span> <span class="token hvariable">p_request</span>
    <span class="token punctuation">,</span> <span class="token hvariable">p_query</span>
    <span class="token punctuation">)</span> <span class="token keyword">where</span>

<span class="token import-statement"><span class="token keyword">import</span> ApplicativeParsec</span>
<span class="token import-statement"><span class="token keyword">import</span> Numeric</span> <span class="token punctuation">(</span><span class="token builtin">readHex</span><span class="token punctuation">)</span>
<span class="token import-statement"><span class="token keyword">import</span> Control<span class="token punctuation">.</span>Monad</span> <span class="token punctuation">(</span><span class="token hvariable">liftM4</span><span class="token punctuation">)</span>
<span class="token import-statement"><span class="token keyword">import</span> System<span class="token punctuation">.</span>IO</span> <span class="token punctuation">(</span><span class="token constant">Handle</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>一个 HTTP 请求包含一个 method，一个 identifier，一些 header，以及一个可选的 body。为了简单起见，我们只关注 HTTP 1.1 标准的六种 method 中的两种，<code>POST</code> method 包含一个 body，<code>GET</code> method 没有 body.</p><div class="language-haskell line-numbers-mode" data-ext="haskell" data-title="haskell"><pre class="language-haskell"><code><span class="token comment">-- file: ch16/HttpRequestParser.hs</span>
<span class="token keyword">data</span> <span class="token constant">Method</span> <span class="token operator">=</span> <span class="token constant">Get</span> <span class="token operator">|</span> <span class="token constant">Post</span>
          <span class="token keyword">deriving</span> <span class="token punctuation">(</span><span class="token constant">Eq</span><span class="token punctuation">,</span> <span class="token constant">Ord</span><span class="token punctuation">,</span> <span class="token constant">Show</span><span class="token punctuation">)</span>

<span class="token keyword">data</span> <span class="token constant">HttpRequest</span> <span class="token operator">=</span> <span class="token constant">HttpRequest</span> <span class="token punctuation">{</span>
      <span class="token hvariable">reqMethod</span> <span class="token operator">::</span> <span class="token constant">Method</span>
    <span class="token punctuation">,</span> <span class="token hvariable">reqURL</span> <span class="token operator">::</span> <span class="token constant">String</span>
    <span class="token punctuation">,</span> <span class="token hvariable">reqHeaders</span> <span class="token operator">::</span> <span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token constant">String</span><span class="token punctuation">,</span> <span class="token constant">String</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
    <span class="token punctuation">,</span> <span class="token hvariable">reqBody</span> <span class="token operator">::</span> <span class="token constant">Maybe</span> <span class="token constant">String</span>
    <span class="token punctuation">}</span> <span class="token keyword">deriving</span> <span class="token punctuation">(</span><span class="token constant">Eq</span><span class="token punctuation">,</span> <span class="token constant">Show</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>因为我们采用 application style, 我们的 parser 简洁而易读。当然，可读性好，是说你得习惯 applicative style。</p><div class="language-haskell line-numbers-mode" data-ext="haskell" data-title="haskell"><pre class="language-haskell"><code><span class="token comment">-- file: ch16/HttpRequestParser.hs</span>
<span class="token hvariable">p_request</span> <span class="token operator">::</span> <span class="token constant">CharParser</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token constant">HttpRequest</span>
<span class="token hvariable">p_request</span> <span class="token operator">=</span> <span class="token hvariable">q</span> <span class="token string">&quot;GET&quot;</span> <span class="token constant">Get</span> <span class="token punctuation">(</span><span class="token hvariable">pure</span> <span class="token constant">Nothing</span><span class="token punctuation">)</span>
        <span class="token operator">&lt;|&gt;</span> <span class="token hvariable">q</span> <span class="token string">&quot;POST&quot;</span> <span class="token constant">Post</span> <span class="token punctuation">(</span><span class="token constant">Just</span> <span class="token operator">&lt;$&gt;</span> <span class="token hvariable">many</span> <span class="token hvariable">anyChar</span><span class="token punctuation">)</span>
  <span class="token keyword">where</span> <span class="token hvariable">q</span> <span class="token hvariable">name</span> <span class="token hvariable">ctor</span> <span class="token hvariable">body</span> <span class="token operator">=</span> <span class="token hvariable">liftM4</span> <span class="token constant">HttpRequest</span> <span class="token hvariable">req</span> <span class="token hvariable">url</span> <span class="token hvariable">p_headers</span> <span class="token hvariable">body</span>
            <span class="token keyword">where</span> <span class="token hvariable">req</span> <span class="token operator">=</span> <span class="token hvariable">ctor</span> <span class="token operator">&lt;$</span> <span class="token hvariable">string</span> <span class="token hvariable">name</span> <span class="token operator">&lt;*</span> <span class="token hvariable">char</span> <span class="token char string">&#39; &#39;</span>
        <span class="token hvariable">url</span> <span class="token operator">=</span> <span class="token hvariable">optional</span> <span class="token punctuation">(</span><span class="token hvariable">char</span> <span class="token char string">&#39;/&#39;</span><span class="token punctuation">)</span> <span class="token operator">*&gt;</span>
              <span class="token hvariable">manyTill</span> <span class="token hvariable">notEOL</span> <span class="token punctuation">(</span><span class="token hvariable">try</span> <span class="token operator">$</span> <span class="token hvariable">string</span> <span class="token string">&quot; HTTP/1.&quot;</span> <span class="token operator">&lt;*</span> <span class="token hvariable">oneOf</span> <span class="token string">&quot;01&quot;</span><span class="token punctuation">)</span>
              <span class="token operator">&lt;*</span> <span class="token hvariable">crlf</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>简单地说，<code>q</code> 辅助函数接受一个 method 名，一个值构造器，一个对请求的可选 body 的 parser。而 <code>url</code> 辅助函数并不试图去验证一个 URL，因为 HTTP 规范没有规定 URL 能够包含哪些字符，这个函数只是消耗遇到的输入直到行尾或者遇到 HTTP 版本 identifier。</p><h3 id="避免使用回溯" tabindex="-1"><a class="header-anchor" href="#避免使用回溯"><span>避免使用回溯</span></a></h3><p><code>try</code> 组合子必须记住它遇到的输入，因为要在 parse 失败时恢复消耗的输入，以便下一个 parser 使用。这被称为回溯。因为 <code>try</code> 必须保存输入，它的开销很昂贵。滥用 <code>try</code> 会拖慢 parser 的速度，甚至使性能慢到不可接受。</p><p>为了避免使用回溯，标准的做法是重构我们的 parser，手动提取 <code>(&lt;|&gt;)</code> 两侧 parser 的公共左因子，使我们只用一个 token 就能判断 parse 成功还是失败。在这种情况下，两个 parser 消耗相同的初始输入，最终组合为一个 parser</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>ghci<span class="token operator">&gt;</span> <span class="token builtin class-name">let</span> parser <span class="token operator">=</span> <span class="token punctuation">(</span>++<span class="token punctuation">)</span> <span class="token operator">&lt;</span>$<span class="token operator">&gt;</span> string <span class="token string">&quot;HT&quot;</span> <span class="token operator">&lt;</span>*<span class="token operator">&gt;</span> <span class="token punctuation">(</span>string <span class="token string">&quot;TP&quot;</span> <span class="token operator">&lt;</span><span class="token operator">|</span><span class="token operator">&gt;</span> string <span class="token string">&quot;ML&quot;</span><span class="token punctuation">)</span>
ghci<span class="token operator">&gt;</span> parseTest parser <span class="token string">&quot;HTTP&quot;</span>
<span class="token string">&quot;HTTP&quot;</span>
ghci<span class="token operator">&gt;</span> parseTest parser <span class="token string">&quot;HTML&quot;</span>
<span class="token string">&quot;HTML&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>更妙的是，使用这种写法，当输入无法匹配时，Parsec 给出的错误信息更好：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>ghci<span class="token operator">&gt;</span> parseTest parser <span class="token string">&quot;HTXY&quot;</span>
parse error at <span class="token punctuation">(</span>line <span class="token number">1</span>, <span class="token function">column</span> <span class="token number">3</span><span class="token punctuation">)</span>:
unexpected <span class="token string">&quot;X&quot;</span>
expecting <span class="token string">&quot;TP&quot;</span> or <span class="token string">&quot;ML&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="parse-http-header" tabindex="-1"><a class="header-anchor" href="#parse-http-header"><span>Parse HTTP Header</span></a></h3><p>HTTP 请求的第一行之后，是零到多个 header，一个 header 以一个字段名开头，跟着是一个冒号，然后是内容。如果一行以空格开头，它被认为是上一行的延续。</p><div class="language-haskell line-numbers-mode" data-ext="haskell" data-title="haskell"><pre class="language-haskell"><code><span class="token comment">-- file: ch16/HttpRequestParser.hs</span>
<span class="token hvariable">p_headers</span> <span class="token operator">::</span> <span class="token constant">CharParser</span> <span class="token hvariable">st</span> <span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token constant">String</span><span class="token punctuation">,</span> <span class="token constant">String</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
<span class="token hvariable">p_headers</span> <span class="token operator">=</span> <span class="token hvariable">header</span> <span class="token operator">\`manyTill\`</span> <span class="token hvariable">crlf</span>
  <span class="token keyword">where</span> <span class="token hvariable">header</span> <span class="token operator">=</span> <span class="token hvariable">liftA2</span> <span class="token punctuation">(</span><span class="token punctuation">,</span><span class="token punctuation">)</span> <span class="token hvariable">fieldName</span> <span class="token punctuation">(</span><span class="token hvariable">char</span> <span class="token char string">&#39;:&#39;</span> <span class="token operator">*&gt;</span> <span class="token hvariable">spaces</span> <span class="token operator">*&gt;</span> <span class="token hvariable">contents</span><span class="token punctuation">)</span>
        <span class="token hvariable">contents</span> <span class="token operator">=</span> <span class="token hvariable">liftA2</span> <span class="token punctuation">(</span><span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token hvariable">many1</span> <span class="token hvariable">notEOL</span> <span class="token operator">&lt;*</span> <span class="token hvariable">crlf</span><span class="token punctuation">)</span>
                               <span class="token punctuation">(</span><span class="token hvariable">continuation</span> <span class="token operator">&lt;|&gt;</span> <span class="token hvariable">pure</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
        <span class="token hvariable">continuation</span> <span class="token operator">=</span> <span class="token hvariable">liftA2</span> <span class="token punctuation">(</span><span class="token operator">:</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token char string">&#39; &#39;</span> <span class="token operator">&lt;$</span> <span class="token hvariable">many1</span> <span class="token punctuation">(</span><span class="token hvariable">oneOf</span> <span class="token string">&quot; \\t&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token hvariable">contents</span>
        <span class="token hvariable">fieldName</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">:</span><span class="token punctuation">)</span> <span class="token operator">&lt;$&gt;</span> <span class="token hvariable">letter</span> <span class="token operator">&lt;*&gt;</span> <span class="token hvariable">many</span> <span class="token hvariable">fieldChar</span>
        <span class="token hvariable">fieldChar</span> <span class="token operator">=</span> <span class="token hvariable">letter</span> <span class="token operator">&lt;|&gt;</span> <span class="token hvariable">digit</span> <span class="token operator">&lt;|&gt;</span> <span class="token hvariable">oneOf</span> <span class="token string">&quot;-_&quot;</span>

<span class="token hvariable">crlf</span> <span class="token operator">::</span> <span class="token constant">CharParser</span> <span class="token hvariable">st</span> <span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token hvariable">crlf</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;$</span> <span class="token hvariable">string</span> <span class="token string">&quot;\\r\\n&quot;</span><span class="token punctuation">)</span> <span class="token operator">&lt;|&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;$</span> <span class="token hvariable">newline</span><span class="token punctuation">)</span>

<span class="token hvariable">notEOL</span> <span class="token operator">::</span> <span class="token constant">CharParser</span> <span class="token hvariable">st</span> <span class="token constant">Char</span>
<span class="token hvariable">notEOL</span> <span class="token operator">=</span> <span class="token hvariable">noneOf</span> <span class="token string">&quot;\\r\\n&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="练习" tabindex="-1"><a class="header-anchor" href="#练习"><span>练习</span></a></h2><ol><li>我们的 HTTP 请求 parser 过于简化了，没法在部署在实际应用中。它缺少重要的功能，并且无法组织最基本的拒绝服务攻击(DOS，denial of service attack) 让我们的 parser 关注 Content-Length 这个 field，如果它存在的话</li><li>针对不设防的 web server 的 一个很流行的 DOS 攻击方式，是向它发送特别长的 header，一个 header 可能包含几百兆的垃圾信息，从而耗光服务器的内存。 重构 header 的 parser，当一行超过 4096 个字符时 parse 失败。它必须在超过长度时立刻失败，而不是等到处理完一行之后。</li><li>关注 Transfer-Encoding 这个 field，如果它存在的话，关于它的细节，可以查看 RFC 2616 的第 3.6.1 节</li><li>另一个流行的攻击方式是开启一个链接之后，放置不管或者以十分慢的速度发送数据。使用 <code>IO</code> monad 来封装 parser，如果没有在30秒内完成 parse，就使用 <code>System.Timeout</code> 这个模块关闭链接。</li></ol>`,82);function F($,N){const n=o("ExternalLinkIcon");return l(),c("div",null,[r,u,k,s("p",null,[a("Parsec 是一个很有用的 "),s("a",d,[a("parser combinator"),e(n)]),a(" 库，使用 Parsec，我们可以将一些小的、简单的 parser 组合成更复杂的 parser。Parsec 提供了一些简单的 parser，以及一些用于将这些 parser 组合在一起的组合子。毫不意外，这个为 Haskell 设计的 parser 库是函数式的。")]),v,s("p",null,[a("我们在 "),s("a",h,[a('"Looking for alternatives"'),e(n)]),a(" 一节介绍过 "),b,a("，Parsec 的 "),m,a(" moand 是 "),g,a(" 类型类的一个实例。"),q,a(" 代表 parse 失败，而 "),y,a(" 则使用 "),f,a(" 把两个 parser 组合成一个。")]),P,s("p",null,[a("当我们在 "),s("a",C,[a('"Golfing practice: association lists"'),e(n)]),a(" 一节提到 "),x,a(" 文本时，我们曾说过之后会为它写一个 parser，现在，我们可以用 Parsec 轻易的实现。")]),_,s("p",null,[a("Haskell 标准库中包含一个叫做 "),w,a(" 的模块，我们已经在 "),s("a",S,[a('"Infix use of fmap"'),e(n)]),a(" 一节见识过了。这个模块定义了一个叫做 "),T,a(" 的类型类，它表示一个 "),O,a("，Applicative Functor 在结构化方面比 "),A,a(" 更强，不过比 "),M,a(" 稍弱。"),H,a(" 模块也定义了 "),J,a(" 类型类，它跟 "),V,a(" 很相似。")]),E])}const L=p(i,[["render",F],["__file","16.html.vue"]]),D=JSON.parse('{"path":"/%E5%AD%A6%E4%B9%A0/Haskell%E4%B8%AD%E6%96%87%E6%96%87%E6%A1%A3/16.html","title":"第 16 章：使用Parsec","lang":"zh-CN","frontmatter":{"description":"第 16 章：使用Parsec 为一个文本文件或者不同类型的数据做语法分析(parsing)，对程序员来说是个很常见的任务，在本书第198页\\"使用正则表达式\\"一节中，我们已经学习了 Haskell 对正则表达式的支持。对很多这样的任务，正则表达式都很好用。 不过，当处理复杂的数据格式时，正则表达式很快就会变得不实用、甚至完全不可用。比如说，对于多数编程...","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/%E5%AD%A6%E4%B9%A0/Haskell%E4%B8%AD%E6%96%87%E6%96%87%E6%A1%A3/16.html"}],["meta",{"property":"og:site_name","content":"博客演示"}],["meta",{"property":"og:title","content":"第 16 章：使用Parsec"}],["meta",{"property":"og:description","content":"第 16 章：使用Parsec 为一个文本文件或者不同类型的数据做语法分析(parsing)，对程序员来说是个很常见的任务，在本书第198页\\"使用正则表达式\\"一节中，我们已经学习了 Haskell 对正则表达式的支持。对很多这样的任务，正则表达式都很好用。 不过，当处理复杂的数据格式时，正则表达式很快就会变得不实用、甚至完全不可用。比如说，对于多数编程..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-02-25T04:39:03.000Z"}],["meta",{"property":"article:author","content":"hahg"}],["meta",{"property":"article:modified_time","content":"2024-02-25T04:39:03.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"第 16 章：使用Parsec\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-02-25T04:39:03.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"hahg\\"}]}"]]},"headers":[{"level":2,"title":"Parsec 初步：简单的 CSV parser","slug":"parsec-初步-简单的-csv-parser","link":"#parsec-初步-简单的-csv-parser","children":[]},{"level":2,"title":"sepBy 与 endBy 组合子","slug":"sepby-与-endby-组合子","link":"#sepby-与-endby-组合子","children":[]},{"level":2,"title":"选择与错误处理","slug":"选择与错误处理","link":"#选择与错误处理","children":[{"level":3,"title":"超前查看","slug":"超前查看","link":"#超前查看","children":[]},{"level":3,"title":"错误处理","slug":"错误处理","link":"#错误处理","children":[]}]},{"level":2,"title":"完整的 CSV parser","slug":"完整的-csv-parser","link":"#完整的-csv-parser","children":[]},{"level":2,"title":"Parsec 与 MonadPlus","slug":"parsec-与-monadplus","link":"#parsec-与-monadplus","children":[]},{"level":2,"title":"用 Parsec 代替正则表达式来进行临时的 parse","slug":"用-parsec-代替正则表达式来进行临时的-parse","link":"#用-parsec-代替正则表达式来进行临时的-parse","children":[]},{"level":2,"title":"解析时不用变量","slug":"解析时不用变量","link":"#解析时不用变量","children":[]},{"level":2,"title":"使用 Applicative Functor 进行 parse","slug":"使用-applicative-functor-进行-parse","link":"#使用-applicative-functor-进行-parse","children":[]},{"level":2,"title":"举例：使用 Applicative 进行 parse","slug":"举例-使用-applicative-进行-parse","link":"#举例-使用-applicative-进行-parse","children":[]},{"level":2,"title":"Parse JSON 数据","slug":"parse-json-数据","link":"#parse-json-数据","children":[]},{"level":2,"title":"Parse HTTP 请求","slug":"parse-http-请求","link":"#parse-http-请求","children":[{"level":3,"title":"避免使用回溯","slug":"避免使用回溯","link":"#避免使用回溯","children":[]},{"level":3,"title":"Parse HTTP Header","slug":"parse-http-header","link":"#parse-http-header","children":[]}]},{"level":2,"title":"练习","slug":"练习","link":"#练习","children":[]}],"git":{"createdTime":1708835943000,"updatedTime":1708835943000,"contributors":[{"name":"hahg2000","email":"61403802+hahg2000@users.noreply.github.com","commits":1}]},"readingTime":{"minutes":34.8,"words":10440},"filePathRelative":"学习/Haskell中文文档/16.md","localizedDate":"2024年2月25日","excerpt":"\\n<p>为一个文本文件或者不同类型的数据做语法分析(parsing)，对程序员来说是个很常见的任务，在本书第198页\\"使用正则表达式\\"一节中，我们已经学习了 Haskell 对正则表达式的支持。对很多这样的任务，正则表达式都很好用。</p>\\n<p>不过，当处理复杂的数据格式时，正则表达式很快就会变得不实用、甚至完全不可用。比如说，对于多数编程语言来说，我们没法（只）用正则表达式去 parse 其源代码。</p>\\n<p>Parsec 是一个很有用的 <a href=\\"https://en.wikipedia.org/wiki/Parser_combinator\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">parser combinator</a> 库，使用 Parsec，我们可以将一些小的、简单的 parser 组合成更复杂的 parser。Parsec 提供了一些简单的 parser，以及一些用于将这些 parser 组合在一起的组合子。毫不意外，这个为 Haskell 设计的 parser 库是函数式的。</p>","autoDesc":true}');export{L as comp,D as data};
