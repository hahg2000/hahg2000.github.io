import{_ as p}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as t,o,c as l,a as s,b as a,d as c,f as n}from"./app-Chw2KLnS.js";const i={},r=n(`<h1 id="第-9-章-i-o学习-——-构建一个用于搜索文件系统的库" tabindex="-1"><a class="header-anchor" href="#第-9-章-i-o学习-——-构建一个用于搜索文件系统的库"><span>第 9 章：I/O学习 —— 构建一个用于搜索文件系统的库</span></a></h1><p>自从电脑有了分层文件系统以来，&quot;我知道有这个文件，但不知道它放在哪&quot;这个问题就一直困扰着人们。1974年发布的Unix第五个版本引入的 <code>find</code> 命令，到今天仍在使用。查找文件的艺术已经走过了很长一段路：伴随现代操作系统一起不断发展的文件索引和搜索功能。</p><p>给程序员的工具箱里添加类似 <code>find</code> 这样的功能依旧非常有价值，在本章，我们将通过编写一个Haskell库给我们的 <code>find</code> 命令添加更多功能，我们将通过一些有着不同的健壮度的方法来完成这个库。</p><h2 id="find命令" tabindex="-1"><a class="header-anchor" href="#find命令"><span>find命令</span></a></h2><p>如果你不曾用过类Unix的系统，或者你不是个重度shell用户，那么你很可能从未听说过 <code>find</code> ，通过给定的一组目录，它递归搜索每个目录并且打印出每个匹配表达式的目录项名称。</p><div class="language-haskell line-numbers-mode" data-ext="haskell" data-title="haskell"><pre class="language-haskell"><code><span class="token comment">-- file: ch09/RecursiveContents.hs</span>
<span class="token keyword">module</span> <span class="token constant">RecursiveContents</span> <span class="token punctuation">(</span><span class="token hvariable">getRecursiveContents</span><span class="token punctuation">)</span> <span class="token keyword">where</span>

<span class="token import-statement"><span class="token keyword">import</span> Control<span class="token punctuation">.</span>Monad</span> <span class="token punctuation">(</span><span class="token hvariable">forM</span><span class="token punctuation">)</span>
<span class="token import-statement"><span class="token keyword">import</span> System<span class="token punctuation">.</span>Directory</span> <span class="token punctuation">(</span><span class="token hvariable">doesDirectoryExist</span><span class="token punctuation">,</span> <span class="token hvariable">getDirectoryContents</span><span class="token punctuation">)</span>
<span class="token import-statement"><span class="token keyword">import</span> System<span class="token punctuation">.</span>FilePath</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">&lt;/&gt;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token hvariable">getRecursiveContents</span> <span class="token operator">::</span> <span class="token constant">FilePath</span> <span class="token operator">-&gt;</span> <span class="token constant">IO</span> <span class="token punctuation">[</span><span class="token constant">FilePath</span><span class="token punctuation">]</span>

<span class="token hvariable">getRecursiveContents</span> <span class="token hvariable">topdir</span> <span class="token operator">=</span> <span class="token keyword">do</span>
  <span class="token hvariable">names</span> <span class="token operator">&lt;-</span> <span class="token hvariable">getDirectoryContents</span> <span class="token hvariable">topdir</span>
  <span class="token keyword">let</span> <span class="token hvariable">properNames</span> <span class="token operator">=</span> <span class="token builtin">filter</span> <span class="token punctuation">(</span><span class="token operator">\`notElem\`</span> <span class="token punctuation">[</span><span class="token string">&quot;.&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;..&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token hvariable">names</span>
  <span class="token hvariable">paths</span> <span class="token operator">&lt;-</span> <span class="token hvariable">forM</span> <span class="token hvariable">properNames</span> <span class="token operator">$</span> <span class="token operator">\\</span><span class="token hvariable">name</span> <span class="token operator">-&gt;</span> <span class="token keyword">do</span>
    <span class="token keyword">let</span> <span class="token hvariable">path</span> <span class="token operator">=</span> <span class="token hvariable">topdir</span> <span class="token operator">&lt;/&gt;</span> <span class="token hvariable">name</span>
    <span class="token hvariable">isDirectory</span> <span class="token operator">&lt;-</span> <span class="token hvariable">doesDirectoryExist</span> <span class="token hvariable">path</span>
    <span class="token keyword">if</span> <span class="token hvariable">isDirectory</span>
      <span class="token keyword">then</span> <span class="token hvariable">getRecursiveContents</span> <span class="token hvariable">path</span>
      <span class="token keyword">else</span> <span class="token builtin">return</span> <span class="token punctuation">[</span><span class="token hvariable">path</span><span class="token punctuation">]</span>
  <span class="token builtin">return</span> <span class="token punctuation">(</span><span class="token builtin">concat</span> <span class="token hvariable">paths</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>单个表达式可以识别像&quot;符合这个全局模式的名称&quot;，&quot;目录项是一个文件&quot;，&quot;当前最后一个被修改的文件&quot;以及其他诸如此类的表达式，通过and或or算子就可以把他们装配起来构成更加复杂的表达式</p><h2 id="简单的开始-递归遍历目录" tabindex="-1"><a class="header-anchor" href="#简单的开始-递归遍历目录"><span>简单的开始：递归遍历目录</span></a></h2><p>在投入设计我们的库之前，先解决一些规模稍小的问题，我们第一个问题就是递归地列出一个目录下面的所有内容和它的子目录</p><p><code>filter</code> 表达式确保一个目录的列表不含特定的目录名（比如代表当前目录的 <code>.</code> 和上一级目录的 <code>..</code> ），如果忘记过滤这些，随后的查找将陷入无限循环。</p><p>我们在之前的章节里完成了 <code>forM</code> 函数，它是参数颠倒后的 <code>mapM</code> 函数。</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>ghci<span class="token operator">&gt;</span> :m +Control.Monad
ghci<span class="token operator">&gt;</span> :type mapM
mapM :: <span class="token punctuation">(</span>Monad m<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token punctuation">(</span>a -<span class="token operator">&gt;</span> m b<span class="token punctuation">)</span> -<span class="token operator">&gt;</span> <span class="token punctuation">[</span>a<span class="token punctuation">]</span> -<span class="token operator">&gt;</span> m <span class="token punctuation">[</span>b<span class="token punctuation">]</span>
ghci<span class="token operator">&gt;</span> :type forM
forM :: <span class="token punctuation">(</span>Monad m<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token punctuation">[</span>a<span class="token punctuation">]</span> -<span class="token operator">&gt;</span> <span class="token punctuation">(</span>a -<span class="token operator">&gt;</span> m b<span class="token punctuation">)</span> -<span class="token operator">&gt;</span> m <span class="token punctuation">[</span>b<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>循环体将检查当前目录项是否为目录，如果是，则递归调用 <code>getrecuresivacontents</code> 函数列出这个目录（的内容），如果否，则返回只含有当前目录项名字的单元素列表，不要忘记 <code>return</code> 函数在 Haskell 中有特殊的含义，他通过monad的类型构造器包装了一个值。</p><p>另一个值得注意的地方是变量 <code>isDirectory</code> 的使用，在命令式语言如 Python 中，我们通常用 <code>if os.path.isdir(path)</code> 来表示，然而，<code>doesDirectoryExist</code> 函数是一个动作，它的返回类型是 <code>IO Bool</code> 而非 <code>Bool</code> ，由于 <code>if</code> 表达式需要一个操作值为 <code>bool</code> 的表达式作为条件，我们使用 <code>&lt;-</code> 来从io包装器上得到这个动作的的 <code>bool</code> 返回值，这样我们就能在 <code>if</code> 中使用这个干净的无包装的 <code>bool</code> 。</p><p>循环体中每一次迭代生成的结果都是名称列表，因此 <code>forM</code> 的结果是 <code>IO [[FilePath]]</code> ，我们通过 <code>concat</code> 将它转换为一个元素列表(从以列表为元素的列表转换为不含列表元素的列表)</p><h3 id="再次认识匿名和命名函数" tabindex="-1"><a class="header-anchor" href="#再次认识匿名和命名函数"><span>再次认识匿名和命名函数</span></a></h3>`,16),d={href:"http://book.realworldhaskell.org/read/functional-programming.html#fp.anonymous",target:"_blank",rel:"noopener noreferrer"},k=n(`<p>我们已经在 <code>forM</code> 和 <code>mapM</code> 上看到使用函数作为参数的方式，许多循环体是程序中只出现一次的代码块。既然我们喜欢在循环中使用一个再也不会出现的循环体，那么为什么要给他们命名？</p><p>显而易见，有时候我们需要在不同的循环中嵌入相同的代码，这时候我们不应该使用匿名函数，把他们剪贴和复制进去，而是给这些匿名函数命名来调用，这样显得有意义一点</p><h3 id="为什么提供-mapm-和-form" tabindex="-1"><a class="header-anchor" href="#为什么提供-mapm-和-form"><span>为什么提供 <code>mapM</code> 和 <code>forM</code></span></a></h3><p>存在两个相同的函数看起来是有点奇怪，但接受参数的顺序之间的差异使他们适用于不同的情况。</p><p>我们来考察下之前的例子，使用匿名函数作为循环体，如果我们使用 <code>mapM</code> 而非 <code>forM</code> ，我们将不得不把变量 <code>properNames</code> 放置到函数体的后边，而为了让代码正确解析，我们就必须将整个匿名函数用括号包起来，或者用一个不必要的命名函数将它取代，自己尝试下，拷贝上边的代码，用 <code>mapM</code> 代替 <code>forM</code> ，观察代码可读性上有什么变化</p><p>相反，如果循环体是一个命名函数，而且我们要循环的列表是通过一个复杂表达式计算的，我们就找到了 <code>mapM</code> 的应用场景</p><p>这里需要遵守的代码风格是无论通过 <code>mapM</code> 和 <code>forM</code> 都让你写出干净的代码，如果循环体或者循环中的表达式都很短，那么用哪个都无所谓，如果循环体很短，但数据很长，使用 <code>mapM</code> ，如果相反，则用 <code>forM</code> ，如果都很长，使用 <code>let</code> 或者 <code>where</code> 让其中一个变短，通过这样一些实践，不同情况下那个实现最好就变得显而易见</p><h2 id="一个本地查找函数" tabindex="-1"><a class="header-anchor" href="#一个本地查找函数"><span>一个本地查找函数</span></a></h2><p>我们可以使用 <code>getRecursiveContents</code> 函数作为一个内置的简单文件查找器的基础</p><div class="language-haskell line-numbers-mode" data-ext="haskell" data-title="haskell"><pre class="language-haskell"><code><span class="token comment">-- file: ch09/SimpleFinder.hs</span>
<span class="token import-statement"><span class="token keyword">import</span> RecursiveContents</span> <span class="token punctuation">(</span><span class="token hvariable">getRecursiveContents</span><span class="token punctuation">)</span>
<span class="token hvariable">simpleFind</span> <span class="token operator">::</span> <span class="token punctuation">(</span><span class="token constant">FilePath</span> <span class="token operator">-&gt;</span> <span class="token constant">Bool</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token constant">FilePath</span> <span class="token operator">-&gt;</span> <span class="token constant">IO</span> <span class="token punctuation">[</span><span class="token constant">FilePath</span><span class="token punctuation">]</span>
<span class="token hvariable">simpleFind</span> <span class="token hvariable">p</span> <span class="token hvariable">path</span> <span class="token operator">=</span> <span class="token keyword">do</span>
    <span class="token hvariable">names</span> <span class="token operator">&lt;-</span> <span class="token hvariable">getRecursiveContents</span> <span class="token hvariable">path</span>
    <span class="token builtin">return</span> <span class="token punctuation">(</span><span class="token builtin">filter</span> <span class="token hvariable">p</span> <span class="token hvariable">names</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上文的函数通过我们在过滤器中的谓词来匹配 <code>getRecursiveContents</code> 函数返回的名字，每个通过谓词判断的名称都是文件全路径，因此如何完成一个像&quot;查找所有扩展名以 <code>.c</code> 结尾的文件&quot;的功能？</p><p><code>System.FilePath</code> 模块包含了许多有价值的函数来帮助我们操作文件名，在这个例子中，我们使用 <code>takeExtension</code> ：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>ghci<span class="token operator">&gt;</span> :m +System.FilePath
ghci<span class="token operator">&gt;</span> :type takeExtension
takeExtension :: FilePath -<span class="token operator">&gt;</span> String
ghci<span class="token operator">&gt;</span> takeExtension <span class="token string">&quot;foo/bar.c&quot;</span>
Loading package filepath-1.1.0.0 <span class="token punctuation">..</span>. linking <span class="token punctuation">..</span>. done.
<span class="token string">&quot;.c&quot;</span>
ghci<span class="token operator">&gt;</span> takeExtension <span class="token string">&quot;quux&quot;</span>
<span class="token string">&quot;&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>下面的代码给我们一个包括获得路径，获得扩展名，然后和.c进行比较的简单功能的函数实现，</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>ghci<span class="token operator">&gt;</span> :load SimpleFinder
<span class="token punctuation">[</span><span class="token number">1</span> of <span class="token number">2</span><span class="token punctuation">]</span> Compiling RecursiveContents <span class="token punctuation">(</span> RecursiveContents.hs, interpreted <span class="token punctuation">)</span>
<span class="token punctuation">[</span><span class="token number">2</span> of <span class="token number">2</span><span class="token punctuation">]</span> Compiling Main             <span class="token punctuation">(</span> SimpleFinder.hs, interpreted <span class="token punctuation">)</span>
Ok, modules loaded: RecursiveContents, Main.
ghci<span class="token operator">&gt;</span> :type simpleFind <span class="token punctuation">(</span><span class="token punctuation">\\</span>p -<span class="token operator">&gt;</span> takeExtension p <span class="token operator">==</span> <span class="token string">&quot;.c&quot;</span><span class="token punctuation">)</span>
simpleFind <span class="token punctuation">(</span><span class="token punctuation">\\</span>p -<span class="token operator">&gt;</span> takeExtension p <span class="token operator">==</span> <span class="token string">&quot;.c&quot;</span><span class="token punctuation">)</span> :: FilePath -<span class="token operator">&gt;</span> IO <span class="token punctuation">[</span>FilePath<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>simpleFind</code> 在工作中有一些非常刺眼的问题，第一个就是谓词并不能准确而完全的表达，他只关注文件夹中的目录项名称，而无法做到辨认这是个文件还是个目录此类的事情，------而我们使用 <code>simpleFind</code> 的尝试就是想列举所有文件和与文件一样拥有 <code>.c</code> 扩展名的文件夹</p><p>第二个问题是在 <code>simpleFind</code> 中我们无法控制它遍历文件系统的方式，这是显而易见的，想想在分布式版本控制系统中控制下的树状结构中查找一个源文件的问题吧，所有被控制的目录都含有一个 <code>.svn</code> 的私有文件夹，每一个包含了许多我们毫不感兴趣的子文件夹和文件，简单的过滤所有包含 <code>.svn</code> 的路径远比仅仅在读取时避免遍历这些文件夹更加有效。例如，一个分布式源码树包含了45000个文件，30000个分布在1200个不同的.svn文件夹中，避免遍历这1200个文件夹比过滤他们包含的30000个文件代价更低。</p><p>最后。 <code>simpleFind</code> 是严格的，因为它包含一系列IO Monad操作执行构成的动作，如果我们有一百万个文件要遍历，我们需要等待很长一段时间才能得到一个包含一百万个名字的巨大的返回值，这对用户体验和资源消耗都是噩梦，我们更需要一个只有当他们获得结果的时才展示的结果流。</p><p>在接下来的环节里，我们将解决每个遇到的问题</p><h2 id="谓词在保持纯粹的同时支持从贫类型到富类型" tabindex="-1"><a class="header-anchor" href="#谓词在保持纯粹的同时支持从贫类型到富类型"><span>谓词在保持纯粹的同时支持从贫类型到富类型</span></a></h2><p>我们的谓词只关注文件名，这将一系列有趣的操作排除在外，试想下，假如我们希望列出比某个给定值更大的文件呢？</p><p>面对这个问题的第一反应是查找 <code>IO</code> :我们的谓词是 <code>FilePath -&gt; Bool</code> 类型，为什么不把它变成 <code>FilePath -&gt; IO Bool</code> 类型？这将使我们所有的IO操作都成为谓词的一部分，但这在显而易见的好处之外引入一个潜在的问题，使用这样一个谓词存在各种可能的后果，比如一个有 <code>IO a</code> 类型返回的函数将有能力生成任何它想产生的结果。</p><p>让我们在类型系统中寻找以写出拥有更多谓词，更少bug的代码，我们通过避免污染IO来坚持谓词的纯粹，这将确保他们不会产生任何不纯的结果，同时我们给他们提供更多信息，这样他们就可以在不必诱发潜在的危险的情况下获得需要的表达式</p><p>Haskell 的 <code>System.Directory</code> 模块提供了一个尽管受限但仍然有用的关于文件元数据的集合</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>ghci<span class="token operator">&gt;</span> :m +System.Directory
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>我们可以通过 <code>doesFileExist</code> 和 <code>doesDirectoryExist</code> 来判断目录项是目录还是文件，但暂时还没有更多方式来查找这些年里出现的纷繁复杂的其他文件类型，比如管道，硬链接和软连接。</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>ghci<span class="token operator">&gt;</span> :type doesFileExist
doesFileExist :: FilePath -<span class="token operator">&gt;</span> IO Bool
ghci<span class="token operator">&gt;</span> doesFileExist <span class="token string">&quot;.&quot;</span>
Loading package old-locale-1.0.0.0 <span class="token punctuation">..</span>. linking <span class="token punctuation">..</span>. done.
Loading package old-time-1.0.0.0 <span class="token punctuation">..</span>. linking <span class="token punctuation">..</span>. done.
Loading package directory-1.0.0.0 <span class="token punctuation">..</span>. linking <span class="token punctuation">..</span>. done.
False
ghci<span class="token operator">&gt;</span> :type doesDirectoryExist
doesDirectoryExist :: FilePath -<span class="token operator">&gt;</span> IO Bool
ghci<span class="token operator">&gt;</span> doesDirectoryExist <span class="token string">&quot;.&quot;</span>
True
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>getPermissions</code> 函数让我们确定当前对于文件或目录的操作是否是合法：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>ghci<span class="token operator">&gt;</span> :type getPermissions
getPermissions :: FilePath -<span class="token operator">&gt;</span> IO Permissions
ghci<span class="token operator">&gt;</span> :info Permissions
data Permissions
  <span class="token operator">=</span> Permissions <span class="token punctuation">{</span>readable :: Bool,
                 writable :: Bool,
                 executable :: Bool,
                 searchable :: Bool<span class="token punctuation">}</span>
      -- Defined <span class="token keyword">in</span> System.Directory
instance Eq Permissions -- Defined <span class="token keyword">in</span> System.Directory
instance Ord Permissions -- Defined <span class="token keyword">in</span> System.Directory
instance Read Permissions -- Defined <span class="token keyword">in</span> System.Directory
instance Show Permissions -- Defined <span class="token keyword">in</span> System.Directory
ghci<span class="token operator">&gt;</span> getPermissions <span class="token string">&quot;.&quot;</span>
Permissions <span class="token punctuation">{</span>readable <span class="token operator">=</span> True, writable <span class="token operator">=</span> True, executable <span class="token operator">=</span> False, searchable <span class="token operator">=</span> True<span class="token punctuation">}</span>
ghci<span class="token operator">&gt;</span> :type searchable
searchable :: Permissions -<span class="token operator">&gt;</span> Bool
ghci<span class="token operator">&gt;</span> searchable it
True
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果你无法回忆起 <code>ghci</code> 中变量 <code>it</code> 的特殊用法，回到第一章复习一下，如果我们的权限能够列出它的内容，那么这个目录就应该是可被搜索的，而文件则永远是不可搜索的</p><p>最后， <code>getModificationTime</code> 告诉我们目录项上次被修改的时间：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>ghci<span class="token operator">&gt;</span> :type getModificationTime
getModificationTime :: FilePath -<span class="token operator">&gt;</span> IO System.Time.ClockTime
ghci<span class="token operator">&gt;</span> getModificationTime <span class="token string">&quot;.&quot;</span>
Mon Aug <span class="token number">18</span> <span class="token number">12</span>:08:24 CDT <span class="token number">2008</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>[ Forec 译注：在 GHC 7.6 之后，<code>getModificationTime</code> 不再返回 <code>ClockTime</code> 类型，你可以使用 <code>UTCTime</code> 代替：</p><div class="language-haskell line-numbers-mode" data-ext="haskell" data-title="haskell"><pre class="language-haskell"><code><span class="token import-statement"><span class="token keyword">import</span> Data<span class="token punctuation">.</span>Time<span class="token punctuation">.</span>Clock</span> <span class="token punctuation">(</span><span class="token constant">UTCTime</span><span class="token punctuation">(</span><span class="token operator">..</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>]</p><p>如果我们像标准的Haskell代码一样对可移植性要求严格，这些函数就是我们手头所有的一切(我们同样可以通过黑客手段来获得文件大小)，这些已经足够让我们明白所感兴趣领域中的原则，而非让我们浪费宝贵的时间对着一个例子冥思苦想，如果你需要写满足更多需求的代码， <code>System.Posix</code> 和 <code>System.Win32</code> 模块提供关于当代两种计算平台的更多文件元数据的细节。 <code>Hackage</code> 中同样有一个 <code>unix-compat</code> 包，提供windows下的类unix的api 。</p><p>新的富类型谓词需要关注的数据段到底有几个？自从我们可以通过 <code>Permissions</code> 来判断目录项是文件还是目录之后，我们就不再需要获得 <code>doesFileExist</code> 和 <code>doesDirectoryExist</code> 的结果，因此一个谓词需要关注的输入有四个。</p><div class="language-haskell line-numbers-mode" data-ext="haskell" data-title="haskell"><pre class="language-haskell"><code><span class="token comment">-- file: ch09/BetterPredicate.hs</span>
<span class="token import-statement"><span class="token keyword">import</span> Control<span class="token punctuation">.</span>Monad</span> <span class="token punctuation">(</span><span class="token hvariable">filterM</span><span class="token punctuation">)</span>
<span class="token import-statement"><span class="token keyword">import</span> System<span class="token punctuation">.</span>Directory</span> <span class="token punctuation">(</span><span class="token constant">Permissions</span><span class="token punctuation">(</span><span class="token operator">..</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token hvariable">getModificationTime</span><span class="token punctuation">,</span> <span class="token hvariable">getPermissions</span><span class="token punctuation">)</span>
<span class="token import-statement"><span class="token keyword">import</span> System<span class="token punctuation">.</span>Time</span> <span class="token punctuation">(</span><span class="token constant">ClockTime</span><span class="token punctuation">(</span><span class="token operator">..</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token import-statement"><span class="token keyword">import</span> System<span class="token punctuation">.</span>FilePath</span> <span class="token punctuation">(</span><span class="token hvariable">takeExtension</span><span class="token punctuation">)</span>
<span class="token import-statement"><span class="token keyword">import</span> Control<span class="token punctuation">.</span>Exception</span> <span class="token punctuation">(</span><span class="token hvariable">bracket</span><span class="token punctuation">,</span> <span class="token hvariable">handle</span><span class="token punctuation">)</span>
<span class="token import-statement"><span class="token keyword">import</span> System<span class="token punctuation">.</span>IO</span> <span class="token punctuation">(</span><span class="token constant">IOMode</span><span class="token punctuation">(</span><span class="token operator">..</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token hvariable">hClose</span><span class="token punctuation">,</span> <span class="token hvariable">hFileSize</span><span class="token punctuation">,</span> <span class="token hvariable">openFile</span><span class="token punctuation">)</span>

<span class="token comment">-- the function we wrote earlier</span>
<span class="token import-statement"><span class="token keyword">import</span> RecursiveContents</span> <span class="token punctuation">(</span><span class="token hvariable">getRecursiveContents</span><span class="token punctuation">)</span>

<span class="token keyword">type</span> <span class="token constant">Predicate</span> <span class="token operator">=</span>  <span class="token constant">FilePath</span>      <span class="token comment">-- path to directory entry</span>
               <span class="token operator">-&gt;</span> <span class="token constant">Permissions</span>   <span class="token comment">-- permissions</span>
               <span class="token operator">-&gt;</span> <span class="token constant">Maybe</span> <span class="token constant">Integer</span> <span class="token comment">-- file size (Nothing if not file)</span>
               <span class="token operator">-&gt;</span> <span class="token constant">ClockTime</span>     <span class="token comment">-- last modified</span>
               <span class="token operator">-&gt;</span> <span class="token constant">Bool</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这一谓词类型只是一个有四个参数的函数的同义词，他将给我们节省一些键盘工作和屏幕空间。</p><p>注意这一返回值是 <code>Bool</code> 而非 <code>IO Bool</code> ，谓词需要保证纯粹，而且不能表现IO，在拥有这种类型以后，我们的查找函数仍然显得非常整洁。</p><div class="language-haskell line-numbers-mode" data-ext="haskell" data-title="haskell"><pre class="language-haskell"><code><span class="token comment">-- file: ch09/BetterPredicate.hs</span>
<span class="token comment">-- soon to be defined</span>
<span class="token hvariable">getFileSize</span> <span class="token operator">::</span> <span class="token constant">FilePath</span> <span class="token operator">-&gt;</span> <span class="token constant">IO</span> <span class="token punctuation">(</span><span class="token constant">Maybe</span> <span class="token constant">Integer</span><span class="token punctuation">)</span>

<span class="token hvariable">betterFind</span> <span class="token operator">::</span> <span class="token constant">Predicate</span> <span class="token operator">-&gt;</span> <span class="token constant">FilePath</span> <span class="token operator">-&gt;</span> <span class="token constant">IO</span> <span class="token punctuation">[</span><span class="token constant">FilePath</span><span class="token punctuation">]</span>

<span class="token hvariable">betterFind</span> <span class="token hvariable">p</span> <span class="token hvariable">path</span> <span class="token operator">=</span> <span class="token hvariable">getRecursiveContents</span> <span class="token hvariable">path</span> <span class="token operator">&gt;&gt;=</span> <span class="token hvariable">filterM</span> <span class="token hvariable">check</span>
    <span class="token keyword">where</span> <span class="token hvariable">check</span> <span class="token hvariable">name</span> <span class="token operator">=</span> <span class="token keyword">do</span>
            <span class="token hvariable">perms</span> <span class="token operator">&lt;-</span> <span class="token hvariable">getPermissions</span> <span class="token hvariable">name</span>
            <span class="token hvariable">size</span> <span class="token operator">&lt;-</span> <span class="token hvariable">getFileSize</span> <span class="token hvariable">name</span>
            <span class="token hvariable">modified</span> <span class="token operator">&lt;-</span> <span class="token hvariable">getModificationTime</span> <span class="token hvariable">name</span>
            <span class="token builtin">return</span> <span class="token punctuation">(</span><span class="token hvariable">p</span> <span class="token hvariable">name</span> <span class="token hvariable">perms</span> <span class="token hvariable">size</span> <span class="token hvariable">modified</span><span class="token punctuation">)</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>先来阅读代码，由于随后将讨论 <code>getFileSize</code> 的某些细节，因此现在暂时先跳过它。</p><p>我们无法使用 <code>filter</code> 来调用我们的谓词，因为 <code>p</code> 的纯粹代表他不能作为IO收集元数据的方式</p><p>这让我们将目光转移到一个并不熟悉的函数 <code>filterM</code> 上，它的动作就像普通的 <code>filter</code> 函数，但在这种情况下，它在 <code>IO monad</code> 操作中使用它的谓词，进而通过谓词表现IO：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>ghci<span class="token operator">&gt;</span> :m +Control.Monad
ghci<span class="token operator">&gt;</span> :type filterM
filterM :: <span class="token punctuation">(</span>Monad m<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token punctuation">(</span>a -<span class="token operator">&gt;</span> m Bool<span class="token punctuation">)</span> -<span class="token operator">&gt;</span> <span class="token punctuation">[</span>a<span class="token punctuation">]</span> -<span class="token operator">&gt;</span> m <span class="token punctuation">[</span>a<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>check</code> 谓词是纯谓词 <code>p</code> 的IO功能包装器，替 <code>p</code> 完成了所有IO相关的脏活累活，因此我们可以使 <code>p</code> 对副作用免疫，在收集完元数据后， <code>check</code> 调用 <code>p</code> ，通过 <code>return</code> 语句包装 <code>p</code> 的IO返回结果</p><h2 id="安全的获得一个文件的大小" tabindex="-1"><a class="header-anchor" href="#安全的获得一个文件的大小"><span>安全的获得一个文件的大小</span></a></h2><p>即使 <code>System.Directory</code> 不允许我们获得一个文件的大小，我们仍可以使用 <code>System.IO</code> 的类似接口完成这项任务，它包含了一个名为 <code>hFileSize</code> 的函数，这一函数返回打开文件的字节数，下面是他的简单调用实例：</p><div class="language-haskell line-numbers-mode" data-ext="haskell" data-title="haskell"><pre class="language-haskell"><code><span class="token comment">-- file: ch09/BetterPredicate.hs</span>
<span class="token hvariable">simpleFileSize</span> <span class="token operator">::</span> <span class="token constant">FilePath</span> <span class="token operator">-&gt;</span> <span class="token constant">IO</span> <span class="token constant">Integer</span>

<span class="token hvariable">simpleFileSize</span> <span class="token hvariable">path</span> <span class="token operator">=</span> <span class="token keyword">do</span>
  <span class="token hvariable">h</span> <span class="token operator">&lt;-</span> <span class="token hvariable">openFile</span> <span class="token hvariable">path</span> <span class="token constant">ReadMode</span>
  <span class="token hvariable">size</span> <span class="token operator">&lt;-</span> <span class="token hvariable">hFileSize</span> <span class="token hvariable">h</span>
  <span class="token hvariable">hClose</span> <span class="token hvariable">h</span>
  <span class="token builtin">return</span> <span class="token hvariable">size</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当这个函数工作时，他还不能完全为我们所用，在 <code>betterFind</code> 中，我们在目录下的任何目录项上调用 <code>getFileSize</code> ，如果目录项不是一个文件或者大小被 <code>Just</code> 包装起来，他应当返回一个空值，而当目录项不是文件或者没有被打开时（可能是由于权限不够），这个函数会抛出一个异常然后返回一个未包装的大小。</p><p>下文是安全的用法：</p><div class="language-haskell line-numbers-mode" data-ext="haskell" data-title="haskell"><pre class="language-haskell"><code><span class="token comment">-- file: ch09/BetterPredicate.hs</span>
<span class="token hvariable">saferFileSize</span> <span class="token operator">::</span> <span class="token constant">FilePath</span> <span class="token operator">-&gt;</span> <span class="token constant">IO</span> <span class="token punctuation">(</span><span class="token constant">Maybe</span> <span class="token constant">Integer</span><span class="token punctuation">)</span>

<span class="token hvariable">saferFileSize</span> <span class="token hvariable">path</span> <span class="token operator">=</span> <span class="token hvariable">handle</span> <span class="token punctuation">(</span><span class="token operator">\\</span><span class="token hvariable">_</span> <span class="token operator">-&gt;</span> <span class="token builtin">return</span> <span class="token constant">Nothing</span><span class="token punctuation">)</span> <span class="token operator">$</span> <span class="token keyword">do</span>
  <span class="token hvariable">h</span> <span class="token operator">&lt;-</span> <span class="token hvariable">openFile</span> <span class="token hvariable">path</span> <span class="token constant">ReadMode</span>
  <span class="token hvariable">size</span> <span class="token operator">&lt;-</span> <span class="token hvariable">hFileSize</span> <span class="token hvariable">h</span>
  <span class="token hvariable">hClose</span> <span class="token hvariable">h</span>
  <span class="token builtin">return</span> <span class="token punctuation">(</span><span class="token constant">Just</span> <span class="token hvariable">size</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>[ Forec 译注：此处在 GHC 7.8.* 中会出现编译错误，如果你想按照原文中的匿名函数格式编写，则需要做如下修改：</p><div class="language-haskell line-numbers-mode" data-ext="haskell" data-title="haskell"><pre class="language-haskell"><code><span class="token comment">{-# LANGUAGE ScopedTypeVariables #-}</span>
<span class="token import-statement"><span class="token keyword">import</span> Control<span class="token punctuation">.</span>Exception</span> <span class="token punctuation">(</span><span class="token hvariable">bracket</span><span class="token punctuation">,</span> <span class="token hvariable">handle</span><span class="token punctuation">,</span> <span class="token constant">SomeException</span><span class="token punctuation">)</span>

<span class="token hvariable">getFileSize</span> <span class="token hvariable">path</span> <span class="token operator">=</span> <span class="token hvariable">handle</span> <span class="token punctuation">(</span><span class="token operator">\\</span><span class="token punctuation">(</span><span class="token hvariable">_</span> <span class="token operator">::</span> <span class="token constant">SomeException</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token builtin">return</span> <span class="token constant">Nothing</span><span class="token punctuation">)</span> <span class="token operator">$</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>]</p><p>函数体几乎完全一致，除了 <code>handle</code> 语句。</p><p>我们的异常捕捉在忽略通过的异常的同时返回一个空值，函数体唯一的变化就是允许通过 <code>Just</code> 包装文件大小</p><p><code>saferFileSize</code> 函数现在有正确的类型签名，并且不会抛出任何异常，但他扔未能完全的正常工作，存在 <code>openFile</code> 会成功的目录项，但 <code>hFileSize</code> 会抛出异常，这将和被称作命名管道的状况一起发生，这样的异常会被捕捉，但却从未发起调用 <code>hClose</code> 。</p><p>当发现不再使用文件句柄，Haskell会自动关闭它，但这只有在运行垃圾回收时才会执行，如果无法断言，则延迟到下一次垃圾回收。</p><p>文件句柄是稀缺资源，稀缺性是通过操作系统强制保证的，在linux中，一个进程只能同时拥有1024个文件句柄。</p><p>不难想象这种场景，程序调用了一个使用 <code>saferFileSize</code> 的 <code>betterFind</code> 函数，在足够的垃圾文件句柄被关闭之前，由于 <code>betterFind</code> 造成文件句柄数耗尽导致了程序崩溃</p><p>这是bug危害性的一方面：通过合并起来的不同的部分使得bug不易被排查，只有在 <code>betterFind</code> 访问足够多的非文件达到进程打开文件句柄数上限的时候才会被触发，随后在积累的垃圾文件句柄被关闭之前返回一个尝试打开另一个文件的调用。</p><p>任何程序内由无法获得数据造成的后续错误都会让事情变得更糟，直到垃圾回收为止。修正这样一个bug需要程序结构本身支持，文件系统内容，如何关闭当前正在运行的程序以触发垃圾回收</p><p>这种问题在开发中很容易被检查出来，然而当他在上线之后出现（这些恶心的问题一向如此），就变得非常难以发觉</p><p>幸运的是，我们可以很容易避开这种错误，同时又能缩短我们的函数。</p><h3 id="请求-使用-释放循环" tabindex="-1"><a class="header-anchor" href="#请求-使用-释放循环"><span>请求-使用-释放循环</span></a></h3><p>每当 <code>openFile</code> 成功之后我们就必须保证调用 <code>hClose</code> ， <code>Control.Exception</code> 模块提供了 <code>bracket</code> 函数来支持这个想法：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>ghci<span class="token operator">&gt;</span> :type bracket
bracket :: IO a -<span class="token operator">&gt;</span> <span class="token punctuation">(</span>a -<span class="token operator">&gt;</span> IO b<span class="token punctuation">)</span> -<span class="token operator">&gt;</span> <span class="token punctuation">(</span>a -<span class="token operator">&gt;</span> IO c<span class="token punctuation">)</span> -<span class="token operator">&gt;</span> IO c
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><code>bracket</code> 函数需要三个动作作为参数，第一个动作需要一个资源，第二个动作释放这个资源，第三个动作在这两个中执行，当资源被请求，我们称他为操作动作，当请求动作成功，释放动作随后总是被调用，这保证了这个资源一直能够被释放，对通过的每个请求资源文件的操作，使用和释放动作都是必要的。</p><p>如果一个异常发生在使用过程中， <code>bracket</code> 调用释放动作并抛出异常，如果使用动作成功， <code>bracket</code> 调用释放动作，同时返回使用动作返回的值。</p><p>我们现在可以写一个完全安全的函数了，他将不会抛出异常，也不会积累可能在我们程序其他地方制造失败的垃圾文件句柄数。</p><div class="language-haskell line-numbers-mode" data-ext="haskell" data-title="haskell"><pre class="language-haskell"><code><span class="token comment">-- file: ch09/BetterPredicate.hs</span>
<span class="token hvariable">getFileSize</span> <span class="token hvariable">path</span> <span class="token operator">=</span> <span class="token hvariable">handle</span> <span class="token punctuation">(</span><span class="token operator">\\</span><span class="token hvariable">_</span> <span class="token operator">-&gt;</span> <span class="token builtin">return</span> <span class="token constant">Nothing</span><span class="token punctuation">)</span> <span class="token operator">$</span>
  <span class="token hvariable">bracket</span> <span class="token punctuation">(</span><span class="token hvariable">openFile</span> <span class="token hvariable">path</span> <span class="token constant">ReadMode</span><span class="token punctuation">)</span> <span class="token hvariable">hClose</span> <span class="token operator">$</span> <span class="token operator">\\</span><span class="token hvariable">h</span> <span class="token operator">-&gt;</span> <span class="token keyword">do</span>
    <span class="token hvariable">size</span> <span class="token operator">&lt;-</span> <span class="token hvariable">hFileSize</span> <span class="token hvariable">h</span>
    <span class="token builtin">return</span> <span class="token punctuation">(</span><span class="token constant">Just</span> <span class="token hvariable">size</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>仔细观察 <code>bracket</code> 的参数，首先打开文件，并且返回文件句柄，第二步关闭句柄，第三步在句柄上调用 <code>hFileSize</code> 并用 <code>just</code> 包装结果返回</p><p>为了这个函数的正常工作，我们需要使用 <code>bracket</code> 和 <code>handle</code> ，前者保证我们不会积累垃圾文件句柄数，后者保证我们免于异常。</p><h4 id="练习" tabindex="-1"><a class="header-anchor" href="#练习"><span>练习</span></a></h4><ol><li>调用 <code>bracket</code> 和 <code>handle</code> 的顺序重要吗，为什么</li></ol><h2 id="为谓词而开发的领域特定语言" tabindex="-1"><a class="header-anchor" href="#为谓词而开发的领域特定语言"><span>为谓词而开发的领域特定语言</span></a></h2><p>深入谓词写作的内部，我们的谓词将检查大于128kb的C++源文件：</p><div class="language-haskell line-numbers-mode" data-ext="haskell" data-title="haskell"><pre class="language-haskell"><code><span class="token comment">-- file: ch09/BetterPredicate.hs</span>
<span class="token hvariable">myTest</span> <span class="token hvariable">path</span> <span class="token hvariable">_</span> <span class="token punctuation">(</span><span class="token constant">Just</span> <span class="token hvariable">size</span><span class="token punctuation">)</span> <span class="token hvariable">_</span> <span class="token operator">=</span>
    <span class="token hvariable">takeExtension</span> <span class="token hvariable">path</span> <span class="token operator">==</span> <span class="token string">&quot;.cpp&quot;</span> <span class="token operator">&amp;&amp;</span> <span class="token hvariable">size</span> <span class="token operator">&gt;</span> <span class="token number">131072</span>
<span class="token hvariable">myTest</span> <span class="token hvariable">_</span> <span class="token hvariable">_</span> <span class="token hvariable">_</span> <span class="token hvariable">_</span> <span class="token operator">=</span> <span class="token constant">False</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这并不是令人感到愉快的工作，谓词需要四个参数，并且总是忽略其中的两个，同时需要定义两个等式，写一些更有意义的谓词代码，我们可以做的更好。</p><p>有些时候，这种库被用作嵌入式领域特定语言，我们通过编写代码的过程中通过编程语言的本地特性来优雅的解决一些特定问题</p><p>第一步是写一个返回当前函数的一个参数的函数，这个从参数中抽取路径并传给谓词：</p><div class="language-haskell line-numbers-mode" data-ext="haskell" data-title="haskell"><pre class="language-haskell"><code><span class="token comment">-- file: ch09/BetterPredicate.hs</span>
<span class="token hvariable">pathP</span> <span class="token hvariable">path</span> <span class="token hvariable">_</span> <span class="token hvariable">_</span> <span class="token hvariable">_</span> <span class="token operator">=</span> <span class="token hvariable">path</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>如果我们不能提供类型签名， Haskell 将给这个函数提供一个通用类型，这在随后会导致一个难以理解的错误信息，因此给 <code>pathP</code> 一个类型：</p><div class="language-haskell line-numbers-mode" data-ext="haskell" data-title="haskell"><pre class="language-haskell"><code><span class="token comment">-- file: ch09/BetterPredicate.hs</span>
<span class="token keyword">type</span> <span class="token constant">InfoP</span> <span class="token hvariable">a</span> <span class="token operator">=</span>  <span class="token constant">FilePath</span>        <span class="token comment">-- path to directory entry</span>
             <span class="token operator">-&gt;</span> <span class="token constant">Permissions</span>     <span class="token comment">-- permissions</span>
             <span class="token operator">-&gt;</span> <span class="token constant">Maybe</span> <span class="token constant">Integer</span>   <span class="token comment">-- file size (Nothing if not file)</span>
             <span class="token operator">-&gt;</span> <span class="token constant">ClockTime</span>       <span class="token comment">-- last modified</span>
             <span class="token operator">-&gt;</span> <span class="token hvariable">a</span>

<span class="token hvariable">pathP</span> <span class="token operator">::</span> <span class="token constant">InfoP</span> <span class="token constant">FilePath</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们已经创建了一个可以用做缩写的类型，相似的结构函数，我们的类型代词接受一个类型参数，如此我们可以分辨不同的结果类型：</p><div class="language-haskell line-numbers-mode" data-ext="haskell" data-title="haskell"><pre class="language-haskell"><code><span class="token comment">-- file: ch09/BetterPredicate.hs</span>
<span class="token hvariable">sizeP</span> <span class="token operator">::</span> <span class="token constant">InfoP</span> <span class="token constant">Integer</span>
<span class="token hvariable">sizeP</span> <span class="token hvariable">_</span> <span class="token hvariable">_</span> <span class="token punctuation">(</span><span class="token constant">Just</span> <span class="token hvariable">size</span><span class="token punctuation">)</span> <span class="token hvariable">_</span> <span class="token operator">=</span> <span class="token hvariable">size</span>
<span class="token hvariable">sizeP</span> <span class="token hvariable">_</span> <span class="token hvariable">_</span> <span class="token constant">Nothing</span>     <span class="token hvariable">_</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们在这里做了些小动作，对那些我们无法打开的文件或者不是文件的东西我们返回的目录项大小是 <code>-1</code> 。</p><p>事实上，浏览中可以看出我们在本章开始处定义谓词类型的和 <code>InfoP Bool</code> 一样，因此我们可以合法的放弃谓词类型。</p><p><code>pathP</code> 和 <code>sizeP</code> 的用法？通过一些线索，我们发现可以在一个谓词中使用它们（每个名称中的前缀p代表谓词），从这开始事情就变得有趣起来：</p><div class="language-haskell line-numbers-mode" data-ext="haskell" data-title="haskell"><pre class="language-haskell"><code><span class="token comment">-- file: ch09/BetterPredicate.hs</span>
<span class="token hvariable">equalP</span> <span class="token operator">::</span> <span class="token punctuation">(</span><span class="token constant">Eq</span> <span class="token hvariable">a</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token constant">InfoP</span> <span class="token hvariable">a</span> <span class="token operator">-&gt;</span> <span class="token hvariable">a</span> <span class="token operator">-&gt;</span> <span class="token constant">InfoP</span> <span class="token constant">Bool</span>
<span class="token hvariable">equalP</span> <span class="token hvariable">f</span> <span class="token hvariable">k</span> <span class="token operator">=</span> <span class="token operator">\\</span><span class="token hvariable">w</span> <span class="token hvariable">x</span> <span class="token hvariable">y</span> <span class="token hvariable">z</span> <span class="token operator">-&gt;</span> <span class="token hvariable">f</span> <span class="token hvariable">w</span> <span class="token hvariable">x</span> <span class="token hvariable">y</span> <span class="token hvariable">z</span> <span class="token operator">==</span> <span class="token hvariable">k</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>equalP</code> 的类型签名值得注意，他接受一个 <code>InfoP a</code> ，同时兼容 <code>pathP</code> 和 <code>sizeP</code> ，他接受一个 <code>a</code> ，并返回一个被认为是谓词同义词的 <code>InfoP Bool</code> ，换言之， <code>equalP</code> 构造了一个谓词。</p><p><code>equalP</code> 函数通过返回一个匿名函数工作，谓词接受参数之后将他们转成 <code>f</code> ，并将结果和 <code>f</code> 进行比对。</p><p><code>equalP</code> 的相等强调了这一事实，我们认为它需要两个参数，在 Haskell 柯里化处理了所有函数的情况下，通过这种方式写 <code>equalP</code> 并无必要，我们可以避免匿名函数，同时通过柯里化来写出表现相同的函数：</p><div class="language-haskell line-numbers-mode" data-ext="haskell" data-title="haskell"><pre class="language-haskell"><code><span class="token comment">-- file: ch09/BetterPredicate.hs</span>
<span class="token hvariable">equalP&#39;</span> <span class="token operator">::</span> <span class="token punctuation">(</span><span class="token constant">Eq</span> <span class="token hvariable">a</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token constant">InfoP</span> <span class="token hvariable">a</span> <span class="token operator">-&gt;</span> <span class="token hvariable">a</span> <span class="token operator">-&gt;</span> <span class="token constant">InfoP</span> <span class="token constant">Bool</span>
<span class="token hvariable">equalP&#39;</span> <span class="token hvariable">f</span> <span class="token hvariable">k</span> <span class="token hvariable">w</span> <span class="token hvariable">x</span> <span class="token hvariable">y</span> <span class="token hvariable">z</span> <span class="token operator">=</span> <span class="token hvariable">f</span> <span class="token hvariable">w</span> <span class="token hvariable">x</span> <span class="token hvariable">y</span> <span class="token hvariable">z</span> <span class="token operator">==</span> <span class="token hvariable">k</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在继续我们的探险之前，先把写好的模块加载到 <code>ghci</code> 里去：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>ghci<span class="token operator">&gt;</span> :load BetterPredicate
<span class="token punctuation">[</span><span class="token number">1</span> of <span class="token number">2</span><span class="token punctuation">]</span> Compiling RecursiveContents <span class="token punctuation">(</span> RecursiveContents.hs, interpreted <span class="token punctuation">)</span>
<span class="token punctuation">[</span><span class="token number">2</span> of <span class="token number">2</span><span class="token punctuation">]</span> Compiling Main             <span class="token punctuation">(</span> BetterPredicate.hs, interpreted <span class="token punctuation">)</span>
Ok, modules loaded: RecursiveContents, Main.
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>让我们来看看函数中的简单谓词能否正常工作：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>ghci<span class="token operator">&gt;</span> :type betterFind <span class="token punctuation">(</span>sizeP <span class="token variable"><span class="token variable">\`</span>equalP<span class="token variable">\`</span></span> <span class="token number">1024</span><span class="token punctuation">)</span>
betterFind <span class="token punctuation">(</span>sizeP <span class="token variable"><span class="token variable">\`</span>equalP<span class="token variable">\`</span></span> <span class="token number">1024</span><span class="token punctuation">)</span> :: FilePath -<span class="token operator">&gt;</span> IO <span class="token punctuation">[</span>FilePath<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>注意我们并没有直接调用 <code>betterFind</code> ，我们只是确定我们的表达式进行了类型检查，现在我们需要更多的方法来列出大小为特定值的所有文件，之前的成功给了我们继续下去的勇气。</p><p>:: _avoiding-boilerplate-with-lifting:</p><h3 id="多用提升-lifting-来减少样板代码" tabindex="-1"><a class="header-anchor" href="#多用提升-lifting-来减少样板代码"><span>多用提升（lifting）来减少样板代码</span></a></h3><p>除了 <code>equalP</code> ，我们还将能够编写其他二元函数，我们更希望不去写他们每个的具体实现，因为这看起来只是重复工作：</p><div class="language-haskell line-numbers-mode" data-ext="haskell" data-title="haskell"><pre class="language-haskell"><code><span class="token comment">-- file: ch09/BetterPredicate.hs</span>
<span class="token hvariable">liftP</span> <span class="token operator">::</span> <span class="token punctuation">(</span><span class="token hvariable">a</span> <span class="token operator">-&gt;</span> <span class="token hvariable">b</span> <span class="token operator">-&gt;</span> <span class="token hvariable">c</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token constant">InfoP</span> <span class="token hvariable">a</span> <span class="token operator">-&gt;</span> <span class="token hvariable">b</span> <span class="token operator">-&gt;</span> <span class="token constant">InfoP</span> <span class="token hvariable">c</span>
<span class="token hvariable">liftP</span> <span class="token hvariable">q</span> <span class="token hvariable">f</span> <span class="token hvariable">k</span> <span class="token hvariable">w</span> <span class="token hvariable">x</span> <span class="token hvariable">y</span> <span class="token hvariable">z</span> <span class="token operator">=</span> <span class="token hvariable">f</span> <span class="token hvariable">w</span> <span class="token hvariable">x</span> <span class="token hvariable">y</span> <span class="token hvariable">z</span> <span class="token operator">\`q\`</span> <span class="token hvariable">k</span>

<span class="token hvariable">greaterP</span><span class="token punctuation">,</span> <span class="token hvariable">lesserP</span> <span class="token operator">::</span> <span class="token punctuation">(</span><span class="token constant">Ord</span> <span class="token hvariable">a</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token constant">InfoP</span> <span class="token hvariable">a</span> <span class="token operator">-&gt;</span> <span class="token hvariable">a</span> <span class="token operator">-&gt;</span> <span class="token constant">InfoP</span> <span class="token constant">Bool</span>
<span class="token hvariable">greaterP</span> <span class="token operator">=</span> <span class="token hvariable">liftP</span> <span class="token punctuation">(</span><span class="token operator">&gt;</span><span class="token punctuation">)</span>
<span class="token hvariable">lesserP</span> <span class="token operator">=</span> <span class="token hvariable">liftP</span> <span class="token punctuation">(</span><span class="token operator">&lt;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>[ Forec 译注：此处 <code>liftP</code> 的参数可能较容易弄混，这里我们令 <code>k</code> 的类型和 <code>a</code> 相同，令 <code>c</code> 的类型是 <code>Bool</code> ，通过下面的写法可能会更好理解一些：</p><div class="language-haskell line-numbers-mode" data-ext="haskell" data-title="haskell"><pre class="language-haskell"><code><span class="token hvariable">liftP</span> <span class="token operator">::</span> <span class="token punctuation">(</span><span class="token hvariable">a</span> <span class="token operator">-&gt;</span> <span class="token hvariable">a</span> <span class="token operator">-&gt;</span> <span class="token constant">Bool</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token constant">InfoP</span> <span class="token hvariable">a</span> <span class="token operator">-&gt;</span> <span class="token hvariable">a</span> <span class="token operator">-&gt;</span> <span class="token constant">InfoP</span> <span class="token constant">Bool</span>
<span class="token hvariable">liftP</span> <span class="token hvariable">comparator</span> <span class="token hvariable">getter</span> <span class="token hvariable">argument</span> <span class="token hvariable">w</span> <span class="token hvariable">x</span> <span class="token hvariable">y</span> <span class="token hvariable">z</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token hvariable">getter</span> <span class="token hvariable">w</span> <span class="token hvariable">x</span> <span class="token hvariable">y</span> <span class="token hvariable">z</span><span class="token punctuation">)</span> <span class="token operator">\`comparator\`</span> <span class="token hvariable">argument</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>这里的 <code>comparator</code> 对应原文中的 <code>q</code> ，为 <code>(a -&gt; b -&gt; c)</code> 类型的函数， <code>getter</code> 对应原文的 <code>f</code> ，<code>argument</code> 对应原文的 <code>k</code> 。 <code>getter</code> 是 <code>InfoP a</code> 类的函数，这类函数根据 <code>Predicate</code> 类型中的元素计算出一个结果。因此整个 <code>liftP</code> 函数接收到参数的类型签名为 <code>(a -&gt; b -&gt; c) -&gt; InfoP a -&gt; b -&gt; w -&gt; x -&gt; y -&gt; z</code> ， 此处 <code>w -&gt; x -&gt; y -&gt; z</code> 是 <code>InfoP c</code> 展开的前四项。 <code>getter</code> 从这四项中提取到一个类型为 <code>a</code> 的值，并和 <code>argument</code> 比较，最终返回 <code>Bool</code> 。在原文的代码中则返回类型为 <code>c</code> 的值， <code>c</code> 类型由比较函数决定。</p><p>]</p><p>为了完成这个，让我们使用 Haskell 的抽象功能，定义 <code>equalP</code> 代替直接调用 <code>==</code> ，我们就可以把二元函数作为参数传入我们想调用的函数。</p><p>函数动作，比如 <code>&gt;</code> ，以及将它转换成另一个函数操作另一种上下文，在这里是 <code>greaterP</code> ，通过提升（lifting）将它引入到上下文，这解释了当前函数名称中lifting出现的原因，提升让我们复用代码并降低模板的使用，在本书的后半部分的内容中，我们将大量使用这一技术</p><p>当我们提升一个函数，我们通常将它转换到原始类型和一个新版本------提升和未提升两个版本</p><p>在这里，将 <code>q</code> 作为 <code>liftP</code> 的第一个参数是经过深思熟虑的，这使得我们可能写一个对 <code>greaterP</code> 和 <code>lesserP</code> 都有意义的定义，实践中发现，相较其他语言，Haskell 中参数的最佳适配成为api设计中最重要的一部分。语言内部要求参数转换，在Haskell中放错一个参数的位置就将失去程序的所有意义。</p><p>我们可以通过组合子（combinators）恢复一些意义，比如，直到2007年 <code>forM</code> 才加入 <code>Control.Monad</code> 模块，在此之前，人们用的是 <code>flip mapM</code> 。</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>ghci<span class="token operator">&gt;</span> :m +Control.Monad
ghci<span class="token operator">&gt;</span> :t mapM
mapM :: <span class="token punctuation">(</span>Monad m<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token punctuation">(</span>a -<span class="token operator">&gt;</span> m b<span class="token punctuation">)</span> -<span class="token operator">&gt;</span> <span class="token punctuation">[</span>a<span class="token punctuation">]</span> -<span class="token operator">&gt;</span> m <span class="token punctuation">[</span>b<span class="token punctuation">]</span>
ghci<span class="token operator">&gt;</span> :t forM
forM :: <span class="token punctuation">(</span>Monad m<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token punctuation">[</span>a<span class="token punctuation">]</span> -<span class="token operator">&gt;</span> <span class="token punctuation">(</span>a -<span class="token operator">&gt;</span> m b<span class="token punctuation">)</span> -<span class="token operator">&gt;</span> m <span class="token punctuation">[</span>b<span class="token punctuation">]</span>
ghci<span class="token operator">&gt;</span> :t flip mapM
flip mapM :: <span class="token punctuation">(</span>Monad m<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token punctuation">[</span>a<span class="token punctuation">]</span> -<span class="token operator">&gt;</span> <span class="token punctuation">(</span>a -<span class="token operator">&gt;</span> m b<span class="token punctuation">)</span> -<span class="token operator">&gt;</span> m <span class="token punctuation">[</span>b<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="谓词组合" tabindex="-1"><a class="header-anchor" href="#谓词组合"><span>谓词组合</span></a></h3><p>如果我们希望组合谓词，我们可以循着手边最明显的路径来开始</p><div class="language-haskell line-numbers-mode" data-ext="haskell" data-title="haskell"><pre class="language-haskell"><code><span class="token comment">-- file: ch09/BetterPredicate.hs</span>
<span class="token hvariable">simpleAndP</span> <span class="token operator">::</span> <span class="token constant">InfoP</span> <span class="token constant">Bool</span> <span class="token operator">-&gt;</span> <span class="token constant">InfoP</span> <span class="token constant">Bool</span> <span class="token operator">-&gt;</span> <span class="token constant">InfoP</span> <span class="token constant">Bool</span>
<span class="token hvariable">simpleAndP</span> <span class="token hvariable">f</span> <span class="token hvariable">g</span> <span class="token hvariable">w</span> <span class="token hvariable">x</span> <span class="token hvariable">y</span> <span class="token hvariable">z</span> <span class="token operator">=</span> <span class="token hvariable">f</span> <span class="token hvariable">w</span> <span class="token hvariable">x</span> <span class="token hvariable">y</span> <span class="token hvariable">z</span> <span class="token operator">&amp;&amp;</span> <span class="token hvariable">g</span> <span class="token hvariable">w</span> <span class="token hvariable">x</span> <span class="token hvariable">y</span> <span class="token hvariable">z</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现在我们知道了提升，他成为通过提升存在的布尔操作来削减代码量的更自然的选择。</p><div class="language-haskell line-numbers-mode" data-ext="haskell" data-title="haskell"><pre class="language-haskell"><code><span class="token comment">-- file: ch09/BetterPredicate.hs</span>
<span class="token hvariable">liftP2</span> <span class="token operator">::</span> <span class="token punctuation">(</span><span class="token hvariable">a</span> <span class="token operator">-&gt;</span> <span class="token hvariable">b</span> <span class="token operator">-&gt;</span> <span class="token hvariable">c</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token constant">InfoP</span> <span class="token hvariable">a</span> <span class="token operator">-&gt;</span> <span class="token constant">InfoP</span> <span class="token hvariable">b</span> <span class="token operator">-&gt;</span> <span class="token constant">InfoP</span> <span class="token hvariable">c</span>
<span class="token hvariable">liftP2</span> <span class="token hvariable">q</span> <span class="token hvariable">f</span> <span class="token hvariable">g</span> <span class="token hvariable">w</span> <span class="token hvariable">x</span> <span class="token hvariable">y</span> <span class="token hvariable">z</span> <span class="token operator">=</span> <span class="token hvariable">f</span> <span class="token hvariable">w</span> <span class="token hvariable">x</span> <span class="token hvariable">y</span> <span class="token hvariable">z</span> <span class="token operator">\`q\`</span> <span class="token hvariable">g</span> <span class="token hvariable">w</span> <span class="token hvariable">x</span> <span class="token hvariable">y</span> <span class="token hvariable">z</span>

<span class="token hvariable">andP</span> <span class="token operator">=</span> <span class="token hvariable">liftP2</span> <span class="token punctuation">(</span><span class="token operator">&amp;&amp;</span><span class="token punctuation">)</span>
<span class="token hvariable">orP</span> <span class="token operator">=</span> <span class="token hvariable">liftP2</span> <span class="token punctuation">(</span><span class="token operator">||</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意 <code>liftP2</code> 非常像我们之前的 <code>liftP</code> 。事实上， <code>liftP2</code> 更通用，因为我们可以用它来实现 <code>liftP</code> ：</p><div class="language-haskell line-numbers-mode" data-ext="haskell" data-title="haskell"><pre class="language-haskell"><code><span class="token comment">-- file: ch09/BetterPredicate.hs</span>
<span class="token hvariable">constP</span> <span class="token operator">::</span> <span class="token hvariable">a</span> <span class="token operator">-&gt;</span> <span class="token constant">InfoP</span> <span class="token hvariable">a</span>
<span class="token hvariable">constP</span> <span class="token hvariable">k</span> <span class="token hvariable">_</span> <span class="token hvariable">_</span> <span class="token hvariable">_</span> <span class="token hvariable">_</span> <span class="token operator">=</span> <span class="token hvariable">k</span>

<span class="token hvariable">liftP&#39;</span> <span class="token hvariable">q</span> <span class="token hvariable">f</span> <span class="token hvariable">k</span> <span class="token hvariable">w</span> <span class="token hvariable">x</span> <span class="token hvariable">y</span> <span class="token hvariable">z</span> <span class="token operator">=</span> <span class="token hvariable">f</span> <span class="token hvariable">w</span> <span class="token hvariable">x</span> <span class="token hvariable">y</span> <span class="token hvariable">z</span> <span class="token operator">\`q\`</span> <span class="token hvariable">constP</span> <span class="token hvariable">k</span> <span class="token hvariable">w</span> <span class="token hvariable">x</span> <span class="token hvariable">y</span> <span class="token hvariable">z</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container note"><p class="hint-container-title">Note</p><p>组合子</p><p>在Haskell中，我们更希望函数的传入参数和返回值都是函数，就像组合子一样</p></div><p>回到之前定义的 <code>myTest</code> 函数，现在我们可以使用一些帮助函数了。</p><div class="language-haskell line-numbers-mode" data-ext="haskell" data-title="haskell"><pre class="language-haskell"><code><span class="token comment">-- file: ch09/BetterPredicate.hs</span>
<span class="token hvariable">myTest</span> <span class="token hvariable">path</span> <span class="token hvariable">_</span> <span class="token punctuation">(</span><span class="token constant">Just</span> <span class="token hvariable">size</span><span class="token punctuation">)</span> <span class="token hvariable">_</span> <span class="token operator">=</span>
    <span class="token hvariable">takeExtension</span> <span class="token hvariable">path</span> <span class="token operator">==</span> <span class="token string">&quot;.cpp&quot;</span> <span class="token operator">&amp;&amp;</span> <span class="token hvariable">size</span> <span class="token operator">&gt;</span> <span class="token number">131072</span>
<span class="token hvariable">myTest</span> <span class="token hvariable">_</span> <span class="token hvariable">_</span> <span class="token hvariable">_</span> <span class="token hvariable">_</span> <span class="token operator">=</span> <span class="token constant">False</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在加入组合子以后这个函数会变成什么样子：</p><div class="language-haskell line-numbers-mode" data-ext="haskell" data-title="haskell"><pre class="language-haskell"><code><span class="token comment">-- file: ch09/BetterPredicate.hs</span>
<span class="token hvariable">liftPath</span> <span class="token operator">::</span> <span class="token punctuation">(</span><span class="token constant">FilePath</span> <span class="token operator">-&gt;</span> <span class="token hvariable">a</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token constant">InfoP</span> <span class="token hvariable">a</span>
<span class="token hvariable">liftPath</span> <span class="token hvariable">f</span> <span class="token hvariable">w</span> <span class="token hvariable">_</span> <span class="token hvariable">_</span> <span class="token hvariable">_</span> <span class="token operator">=</span> <span class="token hvariable">f</span> <span class="token hvariable">w</span>

<span class="token hvariable">myTest2</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token hvariable">liftPath</span> <span class="token hvariable">takeExtension</span> <span class="token operator">\`equalP\`</span> <span class="token string">&quot;.cpp&quot;</span><span class="token punctuation">)</span> <span class="token operator">\`andP\`</span>
          <span class="token punctuation">(</span><span class="token hvariable">sizeP</span> <span class="token operator">\`greaterP\`</span> <span class="token number">131072</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>由于操作文件名是如此平常的行为，我们加入了最终组合子 <code>liftPath</code> 。</p><h2 id="定义并使用新算符" tabindex="-1"><a class="header-anchor" href="#定义并使用新算符"><span>定义并使用新算符</span></a></h2><p>可以通过特定领域语言定义新的操作：</p><div class="language-haskell line-numbers-mode" data-ext="haskell" data-title="haskell"><pre class="language-haskell"><code><span class="token comment">-- file: ch09/BetterPredicate.hs</span>
<span class="token punctuation">(</span><span class="token operator">==?</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token hvariable">equalP</span>
<span class="token punctuation">(</span><span class="token operator">&amp;&amp;?</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token hvariable">andP</span>
<span class="token punctuation">(</span><span class="token operator">&gt;?</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token hvariable">greaterP</span>

<span class="token hvariable">myTest3</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token hvariable">liftPath</span> <span class="token hvariable">takeExtension</span> <span class="token operator">==?</span> <span class="token string">&quot;.cpp&quot;</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;?</span> <span class="token punctuation">(</span><span class="token hvariable">sizeP</span> <span class="token operator">&gt;?</span> <span class="token number">131072</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个括号在定义中是必要的，因为并未告诉Haskell有关之前和相关的操作，领域语言的操作如果没有边界（fixities）声明将会被以 <code>infixl 9</code> 之类的东西对待，计算从左到右，如果跳过这个括号，表达式将被解析成具有可怕错误的 <code>(((liftPath takeExtension) ==? &quot;.cpp&quot;) &amp;&amp;? sizeP) &gt;? 131072</code> 。</p><p>可以给操作添加边界声明，第一步是找出未提升的操作的，这样就可以模仿他们了：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>ghci<span class="token operator">&gt;</span> :info <span class="token operator">==</span>
class Eq a where
  <span class="token punctuation">(</span><span class="token operator">==</span><span class="token punctuation">)</span> :: a -<span class="token operator">&gt;</span> a -<span class="token operator">&gt;</span> Bool
  <span class="token punctuation">..</span>.
      -- Defined <span class="token keyword">in</span> GHC.Base
infix <span class="token number">4</span> <span class="token operator">==</span>
ghci<span class="token operator">&gt;</span> :info <span class="token operator">&amp;&amp;</span>
<span class="token punctuation">(</span><span class="token operator">&amp;&amp;</span><span class="token punctuation">)</span> :: Bool -<span class="token operator">&gt;</span> Bool -<span class="token operator">&gt;</span> Bool    -- Defined <span class="token keyword">in</span> GHC.Base
infixr <span class="token number">3</span> <span class="token operator">&amp;&amp;</span>
ghci<span class="token operator">&gt;</span> :info <span class="token operator">&gt;</span>
class <span class="token punctuation">(</span>Eq a<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> Ord a where
  <span class="token punctuation">..</span>.
  <span class="token punctuation">(</span><span class="token operator">&gt;</span><span class="token punctuation">)</span> :: a -<span class="token operator">&gt;</span> a -<span class="token operator">&gt;</span> Bool
  <span class="token punctuation">..</span>.
    -- Defined <span class="token keyword">in</span> GHC.Base
infix <span class="token number">4</span> <span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>学会这些就可以写一个不用括号的表达式，却和 <code>myTest3</code> 的解析结果一致的表达式了</p><div class="language-haskell line-numbers-mode" data-ext="haskell" data-title="haskell"><pre class="language-haskell"><code><span class="token comment">-- file: ch09/BetterPredicate.hs</span>
<span class="token hvariable">infix</span> <span class="token number">4</span> <span class="token operator">==?</span>
<span class="token keyword">infixr</span> <span class="token number">3</span> <span class="token operator">&amp;&amp;?</span>
<span class="token hvariable">infix</span> <span class="token number">4</span> <span class="token operator">&gt;?</span>

<span class="token hvariable">myTest4</span> <span class="token operator">=</span> <span class="token hvariable">liftPath</span> <span class="token hvariable">takeExtension</span> <span class="token operator">==?</span> <span class="token string">&quot;.cpp&quot;</span> <span class="token operator">&amp;&amp;?</span> <span class="token hvariable">sizeP</span> <span class="token operator">&gt;?</span> <span class="token number">131072</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="控制遍历" tabindex="-1"><a class="header-anchor" href="#控制遍历"><span>控制遍历</span></a></h2><p>遍历文件系统时，我们喜欢在需要遍历的文件夹上有更多的控制权，简便方法之一是可以在函数中允许给定文件夹的部分子文件夹通过，然后返回另一个列表，这个列表可以移除元素，也可以要求和原始列表不同，或两者皆有，最简单的控制函数就是id，原样返回未修改的列表。</p><p>为了应付多种情况，我们正在尝试改变部分表达，为了替代精心刻画的函数类型 <code>InfoP</code> ，我们将使用一个普通代数数据类型来表达相同的含义</p><div class="language-haskell line-numbers-mode" data-ext="haskell" data-title="haskell"><pre class="language-haskell"><code><span class="token comment">-- file: ch09/ControlledVisit.hs</span>
<span class="token keyword">data</span> <span class="token constant">Info</span> <span class="token operator">=</span> <span class="token constant">Info</span> <span class="token punctuation">{</span>
      <span class="token hvariable">infoPath</span> <span class="token operator">::</span> <span class="token constant">FilePath</span>
    <span class="token punctuation">,</span> <span class="token hvariable">infoPerms</span> <span class="token operator">::</span> <span class="token constant">Maybe</span> <span class="token constant">Permissions</span>
    <span class="token punctuation">,</span> <span class="token hvariable">infoSize</span> <span class="token operator">::</span> <span class="token constant">Maybe</span> <span class="token constant">Integer</span> 
    <span class="token punctuation">,</span> <span class="token hvariable">infoModTime</span> <span class="token operator">::</span> <span class="token constant">Maybe</span> <span class="token constant">ClockTime</span>
    <span class="token punctuation">}</span> <span class="token keyword">deriving</span> <span class="token punctuation">(</span><span class="token constant">Eq</span><span class="token punctuation">,</span> <span class="token constant">Ord</span><span class="token punctuation">,</span> <span class="token constant">Show</span><span class="token punctuation">)</span>

<span class="token hvariable">getInfo</span> <span class="token operator">::</span> <span class="token constant">FilePath</span> <span class="token operator">-&gt;</span> <span class="token constant">IO</span> <span class="token constant">Info</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>记录语法给了我们一些&quot;免费&quot;的访问函数，例如 <code>infoPath</code> ， <code>traverse</code> 函数的类型很简单，正如我们上面的提案一样，如果需要一个文件或者目录的信息，就调用 <code>getInfo</code> 函数：</p><div class="language-haskell line-numbers-mode" data-ext="haskell" data-title="haskell"><pre class="language-haskell"><code><span class="token comment">-- file: ch09/ControlledVisit.hs</span>
<span class="token hvariable">traverse</span> <span class="token operator">::</span> <span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token constant">Info</span><span class="token punctuation">]</span> <span class="token operator">-&gt;</span> <span class="token punctuation">[</span><span class="token constant">Info</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token constant">FilePath</span> <span class="token operator">-&gt;</span> <span class="token constant">IO</span> <span class="token punctuation">[</span><span class="token constant">Info</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><code>traverse</code> 的定义很短，但很有分量：</p><div class="language-haskell line-numbers-mode" data-ext="haskell" data-title="haskell"><pre class="language-haskell"><code><span class="token comment">-- file: ch09/ControlledVisit.hs</span>
<span class="token hvariable">traverse</span> <span class="token hvariable">order</span> <span class="token hvariable">path</span> <span class="token operator">=</span> <span class="token keyword">do</span>
    <span class="token hvariable">names</span> <span class="token operator">&lt;-</span> <span class="token hvariable">getUsefulContents</span> <span class="token hvariable">path</span>
    <span class="token hvariable">contents</span> <span class="token operator">&lt;-</span> <span class="token builtin">mapM</span> <span class="token hvariable">getInfo</span> <span class="token punctuation">(</span><span class="token hvariable">path</span> <span class="token operator">:</span> <span class="token builtin">map</span> <span class="token punctuation">(</span><span class="token hvariable">path</span> <span class="token operator">&lt;/&gt;</span><span class="token punctuation">)</span> <span class="token hvariable">names</span><span class="token punctuation">)</span>
    <span class="token hvariable">liftM</span> <span class="token builtin">concat</span> <span class="token operator">$</span> <span class="token hvariable">forM</span> <span class="token punctuation">(</span><span class="token hvariable">order</span> <span class="token hvariable">contents</span><span class="token punctuation">)</span> <span class="token operator">$</span> <span class="token operator">\\</span><span class="token hvariable">info</span> <span class="token operator">-&gt;</span> <span class="token keyword">do</span>
      <span class="token keyword">if</span> <span class="token hvariable">isDirectory</span> <span class="token hvariable">info</span> <span class="token operator">&amp;&amp;</span> <span class="token hvariable">infoPath</span> <span class="token hvariable">info</span> <span class="token operator">/=</span> <span class="token hvariable">path</span>
        <span class="token keyword">then</span> <span class="token hvariable">traverse</span> <span class="token hvariable">order</span> <span class="token punctuation">(</span><span class="token hvariable">infoPath</span> <span class="token hvariable">info</span><span class="token punctuation">)</span>
        <span class="token keyword">else</span> <span class="token builtin">return</span> <span class="token punctuation">[</span><span class="token hvariable">info</span><span class="token punctuation">]</span>

<span class="token hvariable">getUsefulContents</span> <span class="token operator">::</span> <span class="token constant">FilePath</span> <span class="token operator">-&gt;</span> <span class="token constant">IO</span> <span class="token punctuation">[</span><span class="token constant">String</span><span class="token punctuation">]</span>
<span class="token hvariable">getUsefulContents</span> <span class="token hvariable">path</span> <span class="token operator">=</span> <span class="token keyword">do</span>
    <span class="token hvariable">names</span> <span class="token operator">&lt;-</span> <span class="token hvariable">getDirectoryContents</span> <span class="token hvariable">path</span>
    <span class="token builtin">return</span> <span class="token punctuation">(</span><span class="token builtin">filter</span> <span class="token punctuation">(</span><span class="token operator">\`notElem\`</span> <span class="token punctuation">[</span><span class="token string">&quot;.&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;..&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token hvariable">names</span><span class="token punctuation">)</span>

<span class="token hvariable">isDirectory</span> <span class="token operator">::</span> <span class="token constant">Info</span> <span class="token operator">-&gt;</span> <span class="token constant">Bool</span>
<span class="token hvariable">isDirectory</span> <span class="token operator">=</span> <span class="token builtin">maybe</span> <span class="token constant">False</span> <span class="token hvariable">searchable</span> <span class="token operator">.</span> <span class="token hvariable">infoPerms</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现在不再引入新技术，这就是我们遇到的最深奥的函数定义，一行行的深入他，解释它每行为何是这样，不过开始部分的那几行没什么神秘的，它们只是之前看到代码的拷贝。</p><p>观察变量 <code>contents</code> 的时候情况变得有趣起来，从左到右仔细阅读，已经知道 <code>names</code> 是一个包含目录项的列表。我们将当前目录的路径拼接到列表中每个元素的前面，再把当前目录路径加到列表里。然后再通过 <code>mapM</code> 将 <code>getInfo</code> 函数应用到产生的结果列表上。</p><p>接下来的这一行更深奥，继续从左往右看，我们看到本行的最后一个元素以一个匿名函数的定义开始，并持续到这一段的结尾，给定一个Info值，函数或者递归访问一个目录（有一个额外的判断条件保证我们不会重复访问 <code>path</code>），或者将当前值作为一个单元素列表返回（来匹配 <code>traverse</code> 的返回类型）。</p><p>函数通过 <code>forM</code> 获得 <code>order</code> 返回 <code>info</code> 列表中的每个元素， <code>forM</code> 是使用者提供的递归控制函数。</p><p>本行的开头，我们在一个新的上下文中使用了提升技术， <code>liftM</code> 函数将一个普通函数， <code>concat</code> ，提升到可在 <code>IO</code> monad 之中使用。换句话讲，<code>liftM</code> 将 <code>forM</code> 的结果值（类型为 <code>[[Info]]</code>）从 <code>IO</code> monad 中取出，把 <code>concat</code> 应用在其上（获得一个 <code>[Info]</code> 类型的返回值，这也是我们所需要的），最后将结果再放进 <code>IO</code> monad 里。</p><p>最后不要忘记定义 <code>getInfo</code> 函数：</p><div class="language-haskell line-numbers-mode" data-ext="haskell" data-title="haskell"><pre class="language-haskell"><code><span class="token comment">-- file: ch09/ControlledVisit.hs</span>
<span class="token hvariable">maybeIO</span> <span class="token operator">::</span> <span class="token constant">IO</span> <span class="token hvariable">a</span> <span class="token operator">-&gt;</span> <span class="token constant">IO</span> <span class="token punctuation">(</span><span class="token constant">Maybe</span> <span class="token hvariable">a</span><span class="token punctuation">)</span>
<span class="token hvariable">maybeIO</span> <span class="token hvariable">act</span> <span class="token operator">=</span> <span class="token hvariable">handle</span> <span class="token punctuation">(</span><span class="token operator">\\</span><span class="token hvariable">_</span> <span class="token operator">-&gt;</span> <span class="token builtin">return</span> <span class="token constant">Nothing</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token constant">Just</span> <span class="token operator">\`liftM\`</span> <span class="token hvariable">act</span><span class="token punctuation">)</span>

<span class="token hvariable">getInfo</span> <span class="token hvariable">path</span> <span class="token operator">=</span> <span class="token keyword">do</span>   
  <span class="token hvariable">perms</span> <span class="token operator">&lt;-</span> <span class="token hvariable">maybeIO</span> <span class="token punctuation">(</span><span class="token hvariable">getPermissions</span> <span class="token hvariable">path</span><span class="token punctuation">)</span>
  <span class="token hvariable">size</span> <span class="token operator">&lt;-</span> <span class="token hvariable">maybeIO</span> <span class="token punctuation">(</span><span class="token hvariable">bracket</span> <span class="token punctuation">(</span><span class="token hvariable">openFile</span> <span class="token hvariable">path</span> <span class="token constant">ReadMode</span><span class="token punctuation">)</span> <span class="token hvariable">hClose</span> <span class="token hvariable">hFileSize</span><span class="token punctuation">)</span>
  <span class="token hvariable">modified</span> <span class="token operator">&lt;-</span> <span class="token hvariable">maybeIO</span> <span class="token punctuation">(</span><span class="token hvariable">getModificationTime</span> <span class="token hvariable">path</span><span class="token punctuation">)</span>
  <span class="token builtin">return</span> <span class="token punctuation">(</span><span class="token constant">Info</span> <span class="token hvariable">path</span> <span class="token hvariable">perms</span> <span class="token hvariable">size</span> <span class="token hvariable">modified</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在此唯一值得记录的事情是一个有用的组合子， <code>maybeIO</code> ，将一个可能抛出异常的 IO 操作转换成用 <code>Maybe</code> 包装的结果</p><p>[ Forec 译注：在 GHC 7.6 以后的版本中，以上代码编译会出现问题，需添加 <code>import</code> 列表，并对部分代码做修改如下：</p><div class="language-haskell line-numbers-mode" data-ext="haskell" data-title="haskell"><pre class="language-haskell"><code><span class="token comment">{-# LANGUAGE ScopedTypeVariables #-}</span>
<span class="token import-statement"><span class="token keyword">import</span> Prelude <span class="token keyword">hiding</span></span> <span class="token punctuation">(</span><span class="token hvariable">traverse</span><span class="token punctuation">)</span>
<span class="token import-statement"><span class="token keyword">import</span> Control<span class="token punctuation">.</span>Monad</span> <span class="token punctuation">(</span><span class="token hvariable">filterM</span><span class="token punctuation">,</span> <span class="token hvariable">liftM</span><span class="token punctuation">,</span> <span class="token hvariable">forM</span><span class="token punctuation">)</span>
<span class="token import-statement"><span class="token keyword">import</span> System<span class="token punctuation">.</span>Directory</span> <span class="token punctuation">(</span><span class="token constant">Permissions</span><span class="token punctuation">(</span><span class="token operator">..</span><span class="token punctuation">)</span><span class="token punctuation">,</span> 
                         <span class="token hvariable">getModificationTime</span><span class="token punctuation">,</span> 
                         <span class="token hvariable">getPermissions</span><span class="token punctuation">,</span> 
                         <span class="token hvariable">getDirectoryContents</span><span class="token punctuation">)</span>
<span class="token import-statement"><span class="token keyword">import</span> Data<span class="token punctuation">.</span>Time<span class="token punctuation">.</span>Clock</span> <span class="token punctuation">(</span><span class="token constant">UTCTime</span><span class="token punctuation">(</span><span class="token operator">..</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token import-statement"><span class="token keyword">import</span> System<span class="token punctuation">.</span>FilePath</span> <span class="token punctuation">(</span><span class="token hvariable">takeExtension</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token operator">&lt;/&gt;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token import-statement"><span class="token keyword">import</span> Control<span class="token punctuation">.</span>Exception</span> <span class="token punctuation">(</span><span class="token hvariable">bracket</span><span class="token punctuation">,</span> <span class="token hvariable">handle</span><span class="token punctuation">,</span> <span class="token constant">SomeException</span><span class="token punctuation">)</span>
<span class="token import-statement"><span class="token keyword">import</span> System<span class="token punctuation">.</span>IO</span> <span class="token punctuation">(</span><span class="token constant">IOMode</span><span class="token punctuation">(</span><span class="token operator">..</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token hvariable">hClose</span><span class="token punctuation">,</span> <span class="token hvariable">hFileSize</span><span class="token punctuation">,</span> <span class="token hvariable">openFile</span><span class="token punctuation">)</span>

<span class="token hvariable">maybeIO</span> <span class="token hvariable">act</span> <span class="token operator">=</span> <span class="token hvariable">handle</span> <span class="token punctuation">(</span><span class="token operator">\\</span><span class="token punctuation">(</span><span class="token hvariable">_</span><span class="token operator">::</span><span class="token constant">SomeException</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token builtin">return</span> <span class="token constant">Nothing</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token hvariable">liftM</span> <span class="token constant">Just</span> <span class="token hvariable">act</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>你可以在 GHC 中导入代码并查看执行结果：</p><div class="language-haskell line-numbers-mode" data-ext="haskell" data-title="haskell"><pre class="language-haskell"><code><span class="token hvariable">ghci</span><span class="token operator">&gt;</span> <span class="token operator">:</span><span class="token hvariable">l</span> <span class="token hvariable">ControlledVisit<span class="token punctuation">.</span>hs</span>
<span class="token punctuation">[</span><span class="token number">1</span> <span class="token keyword">of</span> <span class="token number">2</span><span class="token punctuation">]</span> <span class="token constant">Compiling</span> <span class="token constant">RecursiveContents</span> <span class="token punctuation">(</span> <span class="token hvariable">RecursiveContents<span class="token punctuation">.</span>hs</span><span class="token punctuation">,</span> <span class="token hvariable">interpreted</span> <span class="token punctuation">)</span>
<span class="token punctuation">[</span><span class="token number">2</span> <span class="token keyword">of</span> <span class="token number">2</span><span class="token punctuation">]</span> <span class="token constant">Compiling</span> <span class="token constant">Main</span>             <span class="token punctuation">(</span> <span class="token hvariable">ControlledVisit<span class="token punctuation">.</span>hs</span><span class="token punctuation">,</span> <span class="token hvariable">interpreted</span> <span class="token punctuation">)</span>
<span class="token constant">Ok</span><span class="token punctuation">,</span> <span class="token hvariable">modules</span> <span class="token hvariable">loaded</span><span class="token operator">:</span> <span class="token constant">RecursiveContents</span><span class="token punctuation">,</span> <span class="token constant">Main</span><span class="token punctuation">.</span>
<span class="token hvariable">ghci</span><span class="token operator">&gt;</span> <span class="token operator">:</span><span class="token hvariable">m</span> <span class="token operator">+</span><span class="token constant">Data<span class="token punctuation">.</span>List</span>
<span class="token hvariable">ghci</span><span class="token operator">&gt;</span> <span class="token hvariable">infos</span><span class="token operator">&lt;-</span><span class="token hvariable">traverse</span> <span class="token builtin">sort</span> <span class="token string">&quot;.&quot;</span>
<span class="token hvariable">ghci</span><span class="token operator">&gt;</span> <span class="token builtin">map</span> <span class="token hvariable">infoPath</span> <span class="token hvariable">infos</span>
<span class="token punctuation">[</span><span class="token string">&quot;.&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;.\\\\BetterPredicate.hs&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;.\\\\ControlledVisit.hs&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;.\\\\RecursiveContents.hs&quot;</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>]</p><h3 id="练习-1" tabindex="-1"><a class="header-anchor" href="#练习-1"><span>练习</span></a></h3><ol><li>如果想要以反字母顺序(reverse alphabetic)遍历一棵目录树，该传给 <code>traverse</code> 什么参数？</li><li>使用 <code>id</code> 作为控制函数， <code>traverse id</code> 会前序遍历一棵树，即返回值中父目录出现在子目录之前。写一个控制函数让 <code>traverse</code> 完成后序遍历，即在子目录之后返回父目录。</li><li>使得《谓词组合》一节里面的谓词和组合子可以处理新的 <code>info</code> 类型。</li><li>给 <code>traverse</code> 写一个包装器，可以让你通过一个谓词控制遍历，通过另一个谓词来过滤返回结果</li></ol><h2 id="代码密度-可读性和学习过程" tabindex="-1"><a class="header-anchor" href="#代码密度-可读性和学习过程"><span>代码密度，可读性和学习过程</span></a></h2><p><code>traverse</code> 这样密实的代码在Haskell中并不多见，这种代码具有显著的表达力，而且其实只需要相对很少的练习就能够以这种方式流利的阅读和编写代码：</p><div class="language-haskell line-numbers-mode" data-ext="haskell" data-title="haskell"><pre class="language-haskell"><code><span class="token comment">-- file: ch09/ControlledVisit.hs</span>
<span class="token hvariable">traverseVerbose</span> <span class="token hvariable">order</span> <span class="token hvariable">path</span> <span class="token operator">=</span> <span class="token keyword">do</span>
    <span class="token hvariable">names</span> <span class="token operator">&lt;-</span> <span class="token hvariable">getDirectoryContents</span> <span class="token hvariable">path</span>
    <span class="token keyword">let</span> <span class="token hvariable">usefulNames</span> <span class="token operator">=</span> <span class="token builtin">filter</span> <span class="token punctuation">(</span><span class="token operator">\`notElem\`</span> <span class="token punctuation">[</span><span class="token string">&quot;.&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;..&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token hvariable">names</span>
    <span class="token hvariable">contents</span> <span class="token operator">&lt;-</span> <span class="token builtin">mapM</span> <span class="token hvariable">getEntryName</span> <span class="token punctuation">(</span><span class="token string">&quot;&quot;</span> <span class="token operator">:</span> <span class="token hvariable">usefulNames</span><span class="token punctuation">)</span>
    <span class="token hvariable">recursiveContents</span> <span class="token operator">&lt;-</span> <span class="token builtin">mapM</span> <span class="token hvariable">recurse</span> <span class="token punctuation">(</span><span class="token hvariable">order</span> <span class="token hvariable">contents</span><span class="token punctuation">)</span>
    <span class="token builtin">return</span> <span class="token punctuation">(</span><span class="token builtin">concat</span> <span class="token hvariable">recursiveContents</span><span class="token punctuation">)</span>
  <span class="token keyword">where</span> <span class="token hvariable">getEntryName</span> <span class="token hvariable">name</span> <span class="token operator">=</span> <span class="token hvariable">getInfo</span> <span class="token punctuation">(</span><span class="token hvariable">path</span> <span class="token operator">&lt;/&gt;</span> <span class="token hvariable">name</span><span class="token punctuation">)</span>
        <span class="token hvariable">isDirectory</span> <span class="token hvariable">info</span> <span class="token operator">=</span> <span class="token keyword">case</span> <span class="token hvariable">infoPerms</span> <span class="token hvariable">info</span> <span class="token keyword">of</span>
                             <span class="token constant">Nothing</span> <span class="token operator">-&gt;</span> <span class="token constant">False</span>
                             <span class="token constant">Just</span> <span class="token hvariable">perms</span> <span class="token operator">-&gt;</span> <span class="token hvariable">searchable</span> <span class="token hvariable">perms</span>
        <span class="token hvariable">recurse</span> <span class="token hvariable">info</span> <span class="token operator">=</span> <span class="token keyword">do</span>
            <span class="token keyword">if</span> <span class="token hvariable">isDirectory</span> <span class="token hvariable">info</span> <span class="token operator">&amp;&amp;</span> <span class="token hvariable">infoPath</span> <span class="token hvariable">info</span> <span class="token operator">/=</span> <span class="token hvariable">path</span>
                <span class="token keyword">then</span> <span class="token hvariable">traverseVerbose</span> <span class="token hvariable">order</span> <span class="token punctuation">(</span><span class="token hvariable">infoPath</span> <span class="token hvariable">info</span><span class="token punctuation">)</span>
                <span class="token keyword">else</span> <span class="token builtin">return</span> <span class="token punctuation">[</span><span class="token hvariable">info</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>作为对比，这里有一个不那么复杂的代码，这也许适合一个对Haskell了解不那么深入的程序员</p><p>这里我们只是对部分代码做了下替换。我们在 <code>where</code> 块中定义了一些局部函数来替换原来使用的部分应用（partial application）和函数组合（function composition）。通过使用 <code>case</code> 表达式来替代 <code>maybe</code> 组合子。为了替代 <code>liftM</code> ，我们手动将 <code>concat</code> 提升。</p><p>并不是说密实的代码永远都是好的， <code>traverse</code> 函数的每一行原始代码都很短，我们引入一个局部变量和局部函数来保证代码干净且足够短，使用的名字都很有描述性，同时使用函数组合和管线化，最长的管道只含有三个元素。[译注：好像本书前面都没有介绍过何谓管线化，而且我在本章的代码里也没看到哪里是在使用管线化，姑且先把字面意思翻出来吧。]</p><p>编写可维护的Haskell代码核心是找到深度和可读性的折中，能否做到这点取决于你的实践层次：</p><ul><li>成为Haskell程序员之前，Andrew并不知道使用标准库的方式，为此付出的代价则是写了一大堆不必要的重复代码。</li><li>Zack是一个有数月编程经验的，并且精通通过( <code>.</code> )组合长管道的技巧。每当代码需要改动，就需要重构一个管道，他无法更深入的理解已经存在的管道的意义，而这些管道也太脆弱而无法修正。</li><li>Monica有相当时间的编程经验，她对Haskell库和编写整洁的代码非常熟悉，但她避免使用高深度的风格，她的代码可维护，同时她还找到了一种简单地方法来面对快速的需求变更</li></ul><hr><p>相比原始的 <code>betterFind</code> 函数，<code>traverse</code> 函数给我们更多控制权的同时仍存在一个问题，我们可以避免递归目录，但我们不能过滤其他文件名直到我们获得整个名称树，如果递归含有100000个文件的目录的同时只关注其中三个，在获得这三个需要的文件名之前需要给出一个含有10000个元素的表。</p><p>一个可行的方法是提供一个过滤器作为递归的新参数，我们将它应用到生成的名单中，这将允许我们获得一个只包含我们需要元素的列表</p><p>然而，这个方法也存在缺点：假如说我们只需要三个的目录项，并且这些目录项恰巧是这10000个我们需要遍历的元素之中的前几个，这种情况下我们会无谓的去遍历99997个元素，这并不是个故弄玄虚的问题，举个例子，邮箱文件夹中存放了包含许多邮件信息的文件夹------就像一个有大量文件的目录，那么代表邮箱的目录含有数千个文件就很正常。</p><p>我们可以通过从另一个角度思考问题来之前两个遍历函数的弱点：我们将遍历文件系统这件事看做对目录层级结构进行折叠（fold），这样如何？</p><p>我们所熟悉的fold， <code>foldr</code> 和 <code>foldl&#39;</code> ，很好地概括了如何在遍历列表的同时累计结果，把这个想法从遍历列表扩展到遍历目录树简直小菜一碟，但我们仍希望在 <code>fold</code> 中加入一个 <em>控制</em> 的功能，我们将这个控制表达为一个代数数据类型：</p><div class="language-haskell line-numbers-mode" data-ext="haskell" data-title="haskell"><pre class="language-haskell"><code><span class="token comment">-- file: ch09/FoldDir.hs</span>
<span class="token keyword">data</span> <span class="token constant">Iterate</span> <span class="token hvariable">seed</span> <span class="token operator">=</span> <span class="token constant">Done</span>     <span class="token punctuation">{</span> <span class="token hvariable">unwrap</span> <span class="token operator">::</span> <span class="token hvariable">seed</span> <span class="token punctuation">}</span>
                  <span class="token operator">|</span> <span class="token constant">Skip</span>     <span class="token punctuation">{</span> <span class="token hvariable">unwrap</span> <span class="token operator">::</span> <span class="token hvariable">seed</span> <span class="token punctuation">}</span>
                  <span class="token operator">|</span> <span class="token constant">Continue</span> <span class="token punctuation">{</span> <span class="token hvariable">unwrap</span> <span class="token operator">::</span> <span class="token hvariable">seed</span> <span class="token punctuation">}</span>
                    <span class="token keyword">deriving</span> <span class="token punctuation">(</span><span class="token constant">Show</span><span class="token punctuation">)</span>

<span class="token keyword">type</span> <span class="token constant">Iterator</span> <span class="token hvariable">seed</span> <span class="token operator">=</span> <span class="token hvariable">seed</span> <span class="token operator">-&gt;</span> <span class="token constant">Info</span> <span class="token operator">-&gt;</span> <span class="token constant">Iterate</span> <span class="token hvariable">seed</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>Iterator</code> 类型给函数一个便于使用的别名，它需要一个种子和一个 <code>info</code> 值来表达一个目录项，并返回一个新种子和一个对我们 <code>fold</code> 函数的指令，这个说明通过 <code>Iterate</code> 类型的构造器来表达：</p><ul><li>如果这个构造器已经完成，遍历将立即停止，被 <code>Done</code> 包裹的值将作为结果返回。</li><li>如果这个说明被 <code>Skip</code>，并且当前 <code>info</code> 代表一个目录，遍历将不再递归搜寻这个目录。</li><li>否则，这个遍历仍将继续，使用包裹值作为下一个调用 <code>fold</code> 函数的参数。</li></ul><p>我们的 fold 函数逻辑上来看是个左折叠的，因为我们开始从我们第一个遇到的目录项开始 <code>fold</code> 操作，而每步中的种子是之前一步的结果。</p><div class="language-haskell line-numbers-mode" data-ext="haskell" data-title="haskell"><pre class="language-haskell"><code><span class="token comment">-- file: ch09/FoldDir.hs</span>
<span class="token hvariable">foldTree</span> <span class="token operator">::</span> <span class="token constant">Iterator</span> <span class="token hvariable">a</span> <span class="token operator">-&gt;</span> <span class="token hvariable">a</span> <span class="token operator">-&gt;</span> <span class="token constant">FilePath</span> <span class="token operator">-&gt;</span> <span class="token constant">IO</span> <span class="token hvariable">a</span>

<span class="token hvariable">foldTree</span> <span class="token hvariable">iter</span> <span class="token hvariable">initSeed</span> <span class="token hvariable">path</span> <span class="token operator">=</span> <span class="token keyword">do</span>
    <span class="token hvariable">endSeed</span> <span class="token operator">&lt;-</span> <span class="token hvariable">fold</span> <span class="token hvariable">initSeed</span> <span class="token hvariable">path</span>
    <span class="token builtin">return</span> <span class="token punctuation">(</span><span class="token hvariable">unwrap</span> <span class="token hvariable">endSeed</span><span class="token punctuation">)</span>
  <span class="token keyword">where</span>
    <span class="token hvariable">fold</span> <span class="token hvariable">seed</span> <span class="token hvariable">subpath</span> <span class="token operator">=</span> <span class="token hvariable">getUsefulContents</span> <span class="token hvariable">subpath</span> <span class="token operator">&gt;&gt;=</span> <span class="token hvariable">walk</span> <span class="token hvariable">seed</span>

    <span class="token hvariable">walk</span> <span class="token hvariable">seed</span> <span class="token punctuation">(</span><span class="token hvariable">name</span><span class="token operator">:</span><span class="token hvariable">names</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token keyword">do</span>
      <span class="token keyword">let</span> <span class="token hvariable">path&#39;</span> <span class="token operator">=</span> <span class="token hvariable">path</span> <span class="token operator">&lt;/&gt;</span> <span class="token hvariable">name</span>
      <span class="token hvariable">info</span> <span class="token operator">&lt;-</span> <span class="token hvariable">getInfo</span> <span class="token hvariable">path&#39;</span>
      <span class="token keyword">case</span> <span class="token hvariable">iter</span> <span class="token hvariable">seed</span> <span class="token hvariable">info</span> <span class="token keyword">of</span>
        <span class="token hvariable">done</span><span class="token operator">@</span><span class="token punctuation">(</span><span class="token constant">Done</span> <span class="token hvariable">_</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token builtin">return</span> <span class="token hvariable">done</span>
        <span class="token constant">Skip</span> <span class="token hvariable">seed&#39;</span>    <span class="token operator">-&gt;</span> <span class="token hvariable">walk</span> <span class="token hvariable">seed&#39;</span> <span class="token hvariable">names</span>
        <span class="token constant">Continue</span> <span class="token hvariable">seed&#39;</span>
          <span class="token operator">|</span> <span class="token hvariable">isDirectory</span> <span class="token hvariable">info</span> <span class="token operator">-&gt;</span> <span class="token keyword">do</span>
              <span class="token hvariable">next</span> <span class="token operator">&lt;-</span> <span class="token hvariable">fold</span> <span class="token hvariable">seed&#39;</span> <span class="token hvariable">path&#39;</span>
              <span class="token keyword">case</span> <span class="token hvariable">next</span> <span class="token keyword">of</span>
                <span class="token hvariable">done</span><span class="token operator">@</span><span class="token punctuation">(</span><span class="token constant">Done</span> <span class="token hvariable">_</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token builtin">return</span> <span class="token hvariable">done</span>
                <span class="token hvariable">seed&#39;&#39;</span>        <span class="token operator">-&gt;</span> <span class="token hvariable">walk</span> <span class="token punctuation">(</span><span class="token hvariable">unwrap</span> <span class="token hvariable">seed&#39;&#39;</span><span class="token punctuation">)</span> <span class="token hvariable">names</span>
          <span class="token operator">|</span> <span class="token builtin">otherwise</span> <span class="token operator">-&gt;</span> <span class="token hvariable">walk</span> <span class="token hvariable">seed&#39;</span> <span class="token hvariable">names</span>
    <span class="token hvariable">walk</span> <span class="token hvariable">seed</span> <span class="token hvariable">_</span> <span class="token operator">=</span> <span class="token builtin">return</span> <span class="token punctuation">(</span><span class="token constant">Continue</span> <span class="token hvariable">seed</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>[ Forec 译注：要在 GHC 中使用这段代码，你需要修改 <code>ControlledVisit.hs</code> 的头部，并在 <code>FoldDir.hs</code> 的头部加入 <code>import ControlledVisit</code> ：</p><div class="language-haskell line-numbers-mode" data-ext="haskell" data-title="haskell"><pre class="language-haskell"><code><span class="token comment">{-# LANGUAGE ScopedTypeVariables #-}</span>
<span class="token keyword">module</span> <span class="token constant">ControlledVisit</span> 
<span class="token punctuation">(</span>
    <span class="token constant">Info</span><span class="token punctuation">(</span><span class="token operator">..</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token hvariable">getInfo</span><span class="token punctuation">,</span>
    <span class="token hvariable">getUsefulContents</span><span class="token punctuation">,</span>
    <span class="token hvariable">isDirectory</span>
<span class="token punctuation">)</span> <span class="token keyword">where</span>

<span class="token comment">-- code left</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>]</p><p>这段代码有些有意思的地方。开始是通过使用作用域来避免通过额外的参数，最高层 <code>foldTree</code> 函数只是 <code>fold</code> 的包装器，用来揭开 <code>fold</code> 的最后结果的生成器。</p><p>由于 <code>fold</code> 是局部函数，我们不需要把 <code>foldTree</code> 的 <code>iter</code> 变量传给它，它可以直接访问外围作用域的变量，相似的， <code>walk</code> 也可以在它的外围作用域中部看到 <code>path</code> 。</p><p>另一个需要指出的点是 <code>walk</code> 是一个尾递归，在我们最初的函数中用来替代一个匿名函数调用。通过自己把控，可以在任何需要的时候停止，这使得当 <code>iterator</code> 返回 <code>Done</code> 的时候就可以退出。</p><p>虽然 <code>fold</code> 调用 <code>walk</code> ， <code>walk</code> 递归调用 <code>fold</code> 来遍历子目录，每个函数返回一个用 <code>Iterate</code> 包装起来的种子，当 <code>fold</code> 被调用，并且返回， <code>walk</code> 检查返回并观察需要继续还是退出。通过这种方式，一个 <code>Done</code> 的返回直接终止两个函数中的所有递归调用。</p><p>实践中一个 <code>iterator</code> 像什么，下面这个相对复杂的例子里会查找最多三个位图文件，同时还不会在SVN的元数据目录中进行查找：</p><div class="language-haskell line-numbers-mode" data-ext="haskell" data-title="haskell"><pre class="language-haskell"><code><span class="token comment">-- file: ch09/FoldDir.hs</span>
<span class="token hvariable">atMostThreePictures</span> <span class="token operator">::</span> <span class="token constant">Iterator</span> <span class="token punctuation">[</span><span class="token constant">FilePath</span><span class="token punctuation">]</span>

<span class="token hvariable">atMostThreePictures</span> <span class="token hvariable">paths</span> <span class="token hvariable">info</span>
    <span class="token operator">|</span> <span class="token builtin">length</span> <span class="token hvariable">paths</span> <span class="token operator">==</span> <span class="token number">3</span>
      <span class="token operator">=</span> <span class="token constant">Done</span> <span class="token hvariable">paths</span>
    <span class="token operator">|</span> <span class="token hvariable">isDirectory</span> <span class="token hvariable">info</span> <span class="token operator">&amp;&amp;</span> <span class="token hvariable">takeFileName</span> <span class="token hvariable">path</span> <span class="token operator">==</span> <span class="token string">&quot;.svn&quot;</span>
      <span class="token operator">=</span> <span class="token constant">Skip</span> <span class="token hvariable">paths</span>
    <span class="token operator">|</span> <span class="token hvariable">extension</span> <span class="token operator">\`elem\`</span> <span class="token punctuation">[</span><span class="token string">&quot;.jpg&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;.png&quot;</span><span class="token punctuation">]</span>
      <span class="token operator">=</span> <span class="token constant">Continue</span> <span class="token punctuation">(</span><span class="token hvariable">path</span> <span class="token operator">:</span> <span class="token hvariable">paths</span><span class="token punctuation">)</span>
    <span class="token operator">|</span> <span class="token builtin">otherwise</span>
      <span class="token operator">=</span> <span class="token constant">Continue</span> <span class="token hvariable">paths</span>
  <span class="token keyword">where</span> <span class="token hvariable">extension</span> <span class="token operator">=</span> <span class="token builtin">map</span> <span class="token builtin">toLower</span> <span class="token punctuation">(</span><span class="token hvariable">takeExtension</span> <span class="token hvariable">path</span><span class="token punctuation">)</span>
        <span class="token hvariable">path</span> <span class="token operator">=</span> <span class="token hvariable">infoPath</span> <span class="token hvariable">info</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>为了使用这个需要调用 <code>foldTree atMostThreePictures []</code> ，它给我们一个 <code>IO [FilePath]</code> 类型的返回值。</p><p>当然， <code>iterators</code> 并不需要如此复杂，下面是个对目录进行计数的代码：</p><div class="language-haskell line-numbers-mode" data-ext="haskell" data-title="haskell"><pre class="language-haskell"><code><span class="token comment">-- file: ch09/FoldDir.hs</span>
<span class="token hvariable">countDirectories</span> <span class="token hvariable">count</span> <span class="token hvariable">info</span> <span class="token operator">=</span>
    <span class="token constant">Continue</span> <span class="token punctuation">(</span><span class="token keyword">if</span> <span class="token hvariable">isDirectory</span> <span class="token hvariable">info</span>
              <span class="token keyword">then</span> <span class="token hvariable">count</span> <span class="token operator">+</span> <span class="token number">1</span>
              <span class="token keyword">else</span> <span class="token hvariable">count</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>传递给 <code>foldTree</code> 的初始种子（seed）为数字零。</p><h3 id="练习-2" tabindex="-1"><a class="header-anchor" href="#练习-2"><span>练习</span></a></h3><ol><li>修正 <code>foldTree</code> 来允许调用改变遍历目录项的顺序。</li><li><code>foldTree</code> 函数展示了前序遍历，将它修正为允许调用方决定便利顺序。</li><li>写一个组合子的库允许 <code>foldTree</code> 接收不同类型的 <code>iterators</code> ，你能写出更简洁的 <code>iterators</code> 吗？</li></ol><h2 id="编码指南" tabindex="-1"><a class="header-anchor" href="#编码指南"><span>编码指南</span></a></h2><p>有许多好的Haskell程序员的习惯来自经验，我们有一些通用的经验给你，这样你可以更快的写出易于阅读的代码。</p><p>正如已经提到的，Haskell中永远使用空格，而不是tab 。</p><p>如果你发现代码里有个片段聪明到炸裂，停下来，然后思考下如果你离开代码一个月是否还能懂这段代码。</p><p>对类型和变量的命名惯例是使用驼峰命名法，例如 <code>myVariableName</code> ，这种风格在Haskell中也同样流行，不要去想你的其他命名习惯，如果你遵循一个不标准的惯例，那么你的代码在其他人看来可能会很刺眼。</p><p>即使你已经用了Haskell一段时间，在你写小函数之前花费几分钟的时间查阅库函数，如果标准库并没有提供你需要的函数，你可能需要组合出一个新的函数来获得你想要的结果。</p><p>组合函数的长管道难以阅读，长意味着包含三个以上元素的序列，如果你有这样一个管道，使用 <code>let</code> 或者 <code>where</code> 语句块将它分解成若干个小部分，给每个管道元素一个有意义的名字，然后再将他们回填到代码，如果你想不出一个有意义的名字，问下自己能不能解释这段代码的功能，如果不能，简化你的代码。</p><p>即使在编辑器中很容易格式化长于八十列的代码，宽度仍然是个重要问题，宽行在80行之外的内容通常会被截断，这非常伤害可读性，每一行不超过八十个字符，这样你就可以写入单独的一行，这帮助你保持每一行代码不那么复杂，从而更容易被人读懂。</p><h3 id="常用布局风格" tabindex="-1"><a class="header-anchor" href="#常用布局风格"><span>常用布局风格</span></a></h3><p>只要你的代码遵守布局规范，那么他并不会给人一团乱麻的感觉，因此也不会造成误解，也就是说，有些布局风格是常用的。</p><p><code>in</code> 关键字通常正对着 <code>let</code> 关键字，如下所示：</p><div class="language-haskell line-numbers-mode" data-ext="haskell" data-title="haskell"><pre class="language-haskell"><code><span class="token comment">-- file: ch09/Style.hs</span>
<span class="token hvariable">tidyLet</span> <span class="token operator">=</span> <span class="token keyword">let</span> <span class="token hvariable">foo</span> <span class="token operator">=</span> <span class="token hvariable">undefinedwei&#39;s</span>
              <span class="token hvariable">bar</span> <span class="token operator">=</span> <span class="token hvariable">foo</span> <span class="token operator">*</span> <span class="token number">2</span>
          <span class="token keyword">in</span> <span class="token builtin">undefined</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>单独列出 <code>in</code> 或者让 <code>in</code>在一系列等式之后跟着的写法都是正确的，但下面这种写法则会显得很奇怪：</p><div class="language-haskell line-numbers-mode" data-ext="haskell" data-title="haskell"><pre class="language-haskell"><code><span class="token comment">-- file: ch09/Style.hs</span>
<span class="token hvariable">weirdLet</span> <span class="token operator">=</span> <span class="token keyword">let</span> <span class="token hvariable">foo</span> <span class="token operator">=</span> <span class="token builtin">undefined</span>
               <span class="token hvariable">bar</span> <span class="token operator">=</span> <span class="token hvariable">foo</span> <span class="token operator">*</span> <span class="token number">2</span>
    <span class="token keyword">in</span> <span class="token builtin">undefined</span>

<span class="token hvariable">strangeLet</span> <span class="token operator">=</span> <span class="token keyword">let</span> <span class="token hvariable">foo</span> <span class="token operator">=</span> <span class="token builtin">undefined</span>
                 <span class="token hvariable">bar</span> <span class="token operator">=</span> <span class="token hvariable">foo</span> <span class="token operator">*</span> <span class="token number">2</span> <span class="token keyword">in</span>
    <span class="token builtin">undefined</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>与此相反，让 <code>do</code> 在行尾跟着而非在行首单独列出：</p><div class="language-haskell line-numbers-mode" data-ext="haskell" data-title="haskell"><pre class="language-haskell"><code><span class="token comment">-- file: ch09/Style.hs</span>
<span class="token hvariable">commonDo</span> <span class="token operator">=</span> <span class="token keyword">do</span>
  <span class="token hvariable">something</span> <span class="token operator">&lt;-</span> <span class="token builtin">undefined</span>
  <span class="token builtin">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment">-- not seen very often</span>
<span class="token hvariable">rareDo</span> <span class="token operator">=</span>
  <span class="token keyword">do</span> <span class="token hvariable">something</span> <span class="token operator">&lt;-</span> <span class="token builtin">undefined</span>
     <span class="token builtin">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>括号和分号即使合法也很少用到，他们的使用并不存在问题，只是让代码看起来奇怪，同时让Haskell写成的代码不必遵守排版规则。</p><div class="language-haskell line-numbers-mode" data-ext="haskell" data-title="haskell"><pre class="language-haskell"><code><span class="token comment">-- file: ch09/Style.hs</span>
<span class="token hvariable">unusualPunctuation</span> <span class="token operator">=</span>
    <span class="token punctuation">[</span> <span class="token punctuation">(</span><span class="token hvariable">x</span><span class="token punctuation">,</span><span class="token hvariable">y</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token hvariable">x</span> <span class="token operator">&lt;-</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token operator">..</span><span class="token hvariable">a</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token hvariable">y</span> <span class="token operator">&lt;-</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token operator">..</span><span class="token hvariable">b</span><span class="token punctuation">]</span> <span class="token punctuation">]</span> <span class="token keyword">where</span> <span class="token punctuation">{</span>
                                           <span class="token hvariable">b</span> <span class="token operator">=</span> <span class="token number">7</span><span class="token punctuation">;</span>
 <span class="token hvariable">a</span> <span class="token operator">=</span> <span class="token number">6</span> <span class="token punctuation">}</span>

<span class="token hvariable">preferredLayout</span> <span class="token operator">=</span> <span class="token punctuation">[</span> <span class="token punctuation">(</span><span class="token hvariable">x</span><span class="token punctuation">,</span><span class="token hvariable">y</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token hvariable">x</span> <span class="token operator">&lt;-</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token operator">..</span><span class="token hvariable">a</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token hvariable">y</span> <span class="token operator">&lt;-</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token operator">..</span><span class="token hvariable">b</span><span class="token punctuation">]</span> <span class="token punctuation">]</span>
    <span class="token keyword">where</span> <span class="token hvariable">b</span> <span class="token operator">=</span> <span class="token number">7</span>
          <span class="token hvariable">a</span> <span class="token operator">=</span> <span class="token number">6</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果等式的右侧另起一行，通常在和他本行内，相关变量名或者函数定义的下方之前留出一些空格。</p><div class="language-haskell line-numbers-mode" data-ext="haskell" data-title="haskell"><pre class="language-haskell"><code><span class="token comment">-- file: ch09/Style.hs</span>
<span class="token hvariable">normalIndent</span> <span class="token operator">=</span>
    <span class="token builtin">undefined</span>

<span class="token hvariable">strangeIndent</span> <span class="token operator">=</span>
                           <span class="token builtin">undefined</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>空格缩进的数量有多种选择，有时候在一个文件中，二，三，四格缩进都很正常，一个缩进也合法，但不常用，而且容易被误读。</p><p>写 <code>where</code> 语句的缩进时，最好让它分辨起来比较容易：</p><div class="language-haskell line-numbers-mode" data-ext="haskell" data-title="haskell"><pre class="language-haskell"><code><span class="token comment">-- file: ch09/Style.hs</span>
<span class="token hvariable">goodWhere</span> <span class="token operator">=</span> <span class="token builtin">take</span> <span class="token number">5</span> <span class="token hvariable">lambdas</span>
    <span class="token keyword">where</span> <span class="token hvariable">lambdas</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>

<span class="token hvariable">alsoGood</span> <span class="token operator">=</span>
    <span class="token builtin">take</span> <span class="token number">5</span> <span class="token hvariable">lambdas</span>
  <span class="token keyword">where</span>
    <span class="token hvariable">lambdas</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>

<span class="token hvariable">badWhere</span> <span class="token operator">=</span>           <span class="token comment">-- legal, but ugly and hard to read</span>
    <span class="token builtin">take</span> <span class="token number">5</span> <span class="token hvariable">lambdas</span>
    <span class="token keyword">where</span>
    <span class="token hvariable">lambdas</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="练习-3" tabindex="-1"><a class="header-anchor" href="#练习-3"><span>练习</span></a></h2><p>即使本章内容指导你们完成文件查找代码，但这并不意味着真正的系统编程，因为haskell移植的 <code>IO</code> 库并不暴露足够的消息给我们写有趣和复杂的查询。</p><ol><li>把本章代码移植到你使用平台的 <code>api</code> 上， <code>System.Posix</code> 或者 <code>System.Win32</code> 。</li><li>加入查找文件所有者的功能，将这个属性对谓词可见。</li></ol>`,218);function u(v,b){const e=t("ExternalLinkIcon");return o(),l("div",null,[r,s("p",null,[a("在 "),s("a",d,[a("Anonymous (lambda) functions"),c(e)]),a(" 这部分，我们列举了一系列不使用匿名函数的原因，然而在这里，我们将使用它作为函数体，这是匿名函数在 Haskell 中最常见的用途之一。")]),k])}const g=p(i,[["render",u],["__file","9.html.vue"]]),f=JSON.parse('{"path":"/%E5%AD%A6%E4%B9%A0/Haskell%E4%B8%AD%E6%96%87%E6%96%87%E6%A1%A3/9.html","title":"第 9 章：I/O学习 —— 构建一个用于搜索文件系统的库","lang":"zh-CN","frontmatter":{"description":"第 9 章：I/O学习 —— 构建一个用于搜索文件系统的库 自从电脑有了分层文件系统以来，\\"我知道有这个文件，但不知道它放在哪\\"这个问题就一直困扰着人们。1974年发布的Unix第五个版本引入的 find 命令，到今天仍在使用。查找文件的艺术已经走过了很长一段路：伴随现代操作系统一起不断发展的文件索引和搜索功能。 给程序员的工具箱里添加类似 find ...","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/%E5%AD%A6%E4%B9%A0/Haskell%E4%B8%AD%E6%96%87%E6%96%87%E6%A1%A3/9.html"}],["meta",{"property":"og:site_name","content":"博客演示"}],["meta",{"property":"og:title","content":"第 9 章：I/O学习 —— 构建一个用于搜索文件系统的库"}],["meta",{"property":"og:description","content":"第 9 章：I/O学习 —— 构建一个用于搜索文件系统的库 自从电脑有了分层文件系统以来，\\"我知道有这个文件，但不知道它放在哪\\"这个问题就一直困扰着人们。1974年发布的Unix第五个版本引入的 find 命令，到今天仍在使用。查找文件的艺术已经走过了很长一段路：伴随现代操作系统一起不断发展的文件索引和搜索功能。 给程序员的工具箱里添加类似 find ..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-02-24T04:33:47.000Z"}],["meta",{"property":"article:author","content":"hahg"}],["meta",{"property":"article:modified_time","content":"2024-02-24T04:33:47.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"第 9 章：I/O学习 —— 构建一个用于搜索文件系统的库\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-02-24T04:33:47.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"hahg\\"}]}"]]},"headers":[{"level":2,"title":"find命令","slug":"find命令","link":"#find命令","children":[]},{"level":2,"title":"简单的开始：递归遍历目录","slug":"简单的开始-递归遍历目录","link":"#简单的开始-递归遍历目录","children":[{"level":3,"title":"再次认识匿名和命名函数","slug":"再次认识匿名和命名函数","link":"#再次认识匿名和命名函数","children":[]},{"level":3,"title":"为什么提供 mapM 和 forM","slug":"为什么提供-mapm-和-form","link":"#为什么提供-mapm-和-form","children":[]}]},{"level":2,"title":"一个本地查找函数","slug":"一个本地查找函数","link":"#一个本地查找函数","children":[]},{"level":2,"title":"谓词在保持纯粹的同时支持从贫类型到富类型","slug":"谓词在保持纯粹的同时支持从贫类型到富类型","link":"#谓词在保持纯粹的同时支持从贫类型到富类型","children":[]},{"level":2,"title":"安全的获得一个文件的大小","slug":"安全的获得一个文件的大小","link":"#安全的获得一个文件的大小","children":[{"level":3,"title":"请求-使用-释放循环","slug":"请求-使用-释放循环","link":"#请求-使用-释放循环","children":[]}]},{"level":2,"title":"为谓词而开发的领域特定语言","slug":"为谓词而开发的领域特定语言","link":"#为谓词而开发的领域特定语言","children":[{"level":3,"title":"多用提升（lifting）来减少样板代码","slug":"多用提升-lifting-来减少样板代码","link":"#多用提升-lifting-来减少样板代码","children":[]},{"level":3,"title":"谓词组合","slug":"谓词组合","link":"#谓词组合","children":[]}]},{"level":2,"title":"定义并使用新算符","slug":"定义并使用新算符","link":"#定义并使用新算符","children":[]},{"level":2,"title":"控制遍历","slug":"控制遍历","link":"#控制遍历","children":[{"level":3,"title":"练习","slug":"练习-1","link":"#练习-1","children":[]}]},{"level":2,"title":"代码密度，可读性和学习过程","slug":"代码密度-可读性和学习过程","link":"#代码密度-可读性和学习过程","children":[{"level":3,"title":"练习","slug":"练习-2","link":"#练习-2","children":[]}]},{"level":2,"title":"编码指南","slug":"编码指南","link":"#编码指南","children":[{"level":3,"title":"常用布局风格","slug":"常用布局风格","link":"#常用布局风格","children":[]}]},{"level":2,"title":"练习","slug":"练习-3","link":"#练习-3","children":[]}],"git":{"createdTime":1708749227000,"updatedTime":1708749227000,"contributors":[{"name":"hahg2000","email":"61403802+hahg2000@users.noreply.github.com","commits":1}]},"readingTime":{"minutes":37.03,"words":11108},"filePathRelative":"学习/Haskell中文文档/9.md","localizedDate":"2024年2月24日","excerpt":"\\n<p>自从电脑有了分层文件系统以来，\\"我知道有这个文件，但不知道它放在哪\\"这个问题就一直困扰着人们。1974年发布的Unix第五个版本引入的 <code>find</code> 命令，到今天仍在使用。查找文件的艺术已经走过了很长一段路：伴随现代操作系统一起不断发展的文件索引和搜索功能。</p>\\n<p>给程序员的工具箱里添加类似 <code>find</code> 这样的功能依旧非常有价值，在本章，我们将通过编写一个Haskell库给我们的\\n<code>find</code> 命令添加更多功能，我们将通过一些有着不同的健壮度的方法来完成这个库。</p>\\n<h2>find命令</h2>\\n<p>如果你不曾用过类Unix的系统，或者你不是个重度shell用户，那么你很可能从未听说过 <code>find</code> ，通过给定的一组目录，它递归搜索每个目录并且打印出每个匹配表达式的目录项名称。</p>","autoDesc":true}');export{g as comp,f as data};
