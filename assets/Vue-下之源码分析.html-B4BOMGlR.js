import{_ as l}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as c,o as i,c as u,a as n,b as s,d as a,w as e,f as p}from"./app-Chw2KLnS.js";const r={},d=n("h1",{id:"vue-下之源码分析",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#vue-下之源码分析"},[n("span",null,"Vue-下之源码分析")])],-1),k=n("p",null,"接下来我们对 Vue 一些核心功能的源码进行分析，当然我们并不是直接看 Vue 的源码，在 Github 上有一个简化版本，我们可以学习一下那个。",-1),v={href:"https://github.com/DMQ/mvvm",target:"_blank",rel:"noopener noreferrer"},m=n("p",null,"本文能帮你做什么？",-1),b=n("p",null,"1、了解vue的双向数据绑定原理以及核心代码模块",-1),g=n("p",null,"2、缓解好奇心的同时了解如何实现双向绑定",-1),h={href:"https://github.com/vuejs/vue",target:"_blank",rel:"noopener noreferrer"},y=n("h2",{id:"一、准备工作",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#一、准备工作"},[n("span",null,"一、准备工作")])],-1),f=n("h3",{id:"_1-1-伪数组转变为真数组",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_1-1-伪数组转变为真数组"},[n("span",null,"1.1 伪数组转变为真数组")])],-1),_=n("p",null,[s("伪数组转变为真数组："),n("code",null,"[].slice.call(伪数组)"),s(" 。")],-1),w=n("code",null,"call()",-1),E=p('<ol><li><code>slice()</code> ：截取数组，对里面的引用类型进行浅拷贝，并返回一个新数组。</li><li><code>call()</code> ：指定某个方法的 <code>this</code> ；而 <code>call(伪数组)</code> ，就等于在伪数组里调用 <code>slice()</code> 方法。</li><li>使用 <code>call()</code> 方法的前提是传进去的对象可以执行当前指定的方法。这里正好 <code>slice()</code> 对伪数组使用。</li><li>用途：将使用原生 Javascript 获取的 DOM 节点组成的伪数组转换成真数组</li></ol><h3 id="_1-2-节点类型" tabindex="-1"><a class="header-anchor" href="#_1-2-节点类型"><span>1.2 节点类型</span></a></h3><p>节点类型是非常少使用的，但在一些底层设计时经常会使用到。</p>',3),j=p('<p>一些节点的类型以及属性：</p><img src="https://raw.githubusercontent.com/hahg2000/SSMPic/main/HTML常用节点.png" style="zoom:60%;"><table><thead><tr><th>节点类型</th><th>nodeName</th><th>nodeType</th><th>nodeValue</th></tr></thead><tbody><tr><td>文档节点</td><td>#document</td><td>9</td><td>null</td></tr><tr><td>元素节点</td><td>标签名（div，html）</td><td>1</td><td>null</td></tr><tr><td>属性节点</td><td>属性名（class，style）</td><td>2</td><td>属性值</td></tr><tr><td>文本节点</td><td>#text</td><td>3</td><td><strong>文本内容</strong></td></tr></tbody></table><h3 id="_1-3给对象添加属性" tabindex="-1"><a class="header-anchor" href="#_1-3给对象添加属性"><span>1.3给对象添加属性</span></a></h3><p>给对象添加属性除了直接赋值，还可以使用一个方法来添加属性，并指定属性的一些配置。</p><ul><li><code>Object.defineProperty( obj, prop, [descriptor] )</code></li></ul>',6),x=p(`<p>属性的配置有六种：可以通过其中文意思大概知道他们的意思。</p><ul><li><code>configurable</code> ：当前属性是否可以被重新配置</li><li><code>enumerable</code> ：当前属性是否可以被枚举</li><li><code>value</code> ：当前属性的初始值</li><li><code>writable</code> ：当前属性是否可以直接修改其值</li><li><code>get</code> ：回调函数，当外部获取属性的值时调用</li><li><code>set</code> ：回调函数，当外部修改属性的值时调用</li></ul><p>属性描述符也称属性的种类，其有两种种类：<strong>数据描述符</strong> 和 <strong>存取描述符</strong>。</p><ul><li>数据描述符：可以直接对数据进行操作 <ul><li>没有 <code>get</code> 和 <code>set</code> 配置</li></ul></li><li>存取描述符：需要通过 <code>get</code> 和 <code>set</code> 配置来返回属性的值进行操作。 <ul><li>没有 <code>value</code> 和 <code>writable</code> 配置</li></ul></li></ul><p>Vue 中的计算属性就是使用了这个方法。我们现在可以粗略地实现一下计算属性的功能。以之前的 fullName 实例做例子。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// 直接定义两个属性</span>
<span class="token keyword">let</span> nameObj <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">firstName</span><span class="token operator">:</span> <span class="token string">&#39;A&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">secondName</span><span class="token operator">:</span> <span class="token string">&#39;B&#39;</span><span class="token punctuation">}</span>

<span class="token comment">// 使用defineProperty来定义fullName属性</span>
Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>nameObj<span class="token punctuation">,</span> <span class="token string">&#39;fullName&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
  <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment">// 将firstName和SecondName拼接到一起</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>firstName <span class="token operator">+</span> <span class="token string">&#39; &#39;</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>secondName 
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token function">set</span><span class="token punctuation">(</span>newValue<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment">// 更新firstName和SecondName</span>
    <span class="token keyword">let</span> array <span class="token operator">=</span> newValue<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&#39; &#39;</span><span class="token punctuation">)</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>firstName <span class="token operator">=</span> array<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>secondName <span class="token operator">=</span> array<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token comment">// 修改firstName的值，原值为&#39;A&#39;</span>
nameObj<span class="token punctuation">.</span>firstName <span class="token operator">=</span> <span class="token string">&#39;B&#39;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>nameObj<span class="token punctuation">.</span>fullName<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// B B</span>

<span class="token comment">// 修改fullName的值，原值为&#39;B B&#39;</span>
nameObj<span class="token punctuation">.</span>fullName <span class="token operator">=</span> <span class="token string">&#39;A A&#39;</span>

<span class="token comment">// firstName和econdName都被修改</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>nameObj<span class="token punctuation">.</span>firstName<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// A</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>nameObj<span class="token punctuation">.</span>secondName<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// A</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_1-4-判断对象内部是否有某个属性" tabindex="-1"><a class="header-anchor" href="#_1-4-判断对象内部是否有某个属性"><span>1.4 判断对象内部是否有某个属性</span></a></h3><p>一般我们调用 <code>对象.属性名</code> 都从对象的原型的寻找，但我们不想让 Javascript 在原型上寻找，那么我们就需要使用 <code>对象.hasOwnProperty( &#39;属性名&#39; )</code> 来判断。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;张三&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span><span class="token string">&#39;name&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>	<span class="token comment">// true</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span><span class="token string">&#39;toString&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_1-5-文档碎片" tabindex="-1"><a class="header-anchor" href="#_1-5-文档碎片"><span>1.5 文档碎片</span></a></h3><p><code>Node</code> 是一个接口，各种类型的 DOM API 对象会从这个接口继承。而 <code>DocumentFragment</code> 继承了 <code>Node</code> 。</p><p><code>DocumentFragment</code> 文档片段接口，一个没有父对象的最小文档对象。它被作为一个轻量版的 <code>Document</code> 使用，就像标准的 document 一样，<strong>存储由节点（nodes）组成的文档结构</strong>。</p><p>简单来说，<strong>就是一个存在内存中且拥有 DOM 文档结构的容器，与真实的 DOM 文档结构隔离</strong>。</p><p><strong>语法：</strong> <code>document.createDocumentFragment()</code> 创建文档碎片对象。</p><p>接下来我们使用文档碎片来实现 Vue 中数据更新后界面的更新效果。下面代码为准备工作：</p><div class="language-html line-numbers-mode" data-ext="html" data-title="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
	<span class="token comment">// 创建文档碎片对象</span>
  <span class="token keyword">const</span> fragment <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createDocumentFragment</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token comment">// 所取到需要更新数据的DOM节点</span>
  <span class="token keyword">const</span> uls <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">&#39;ul&#39;</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>核心代码：为 <code>fragment</code> 添加节点</p><ul><li><strong>循环条件</strong> 为 【uls 的第一个节点不为空】，<strong>循环体</strong>是 【将节点添加到 <code>fragment</code> 里】。 但好像循环条件里的变量没有变动，是死循环吗？</li><li>其实这里的循环条件里的变量 <strong>隐式变动</strong> 了，在第 4 行变动了。</li><li>每一个除 HTML 节点外的所有节点都会有一个父节点，所以只要将某个节点的添加为其他节点的孩子时，这个节点就会在原来父节点中移除。<strong>所以第 4 行，不但执行了添加而且还执行了移除</strong>。</li><li>（感觉有点离谱，就像新的父亲会覆盖旧的父亲一样）</li></ul><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// 为fragment添加节点</span>
<span class="token keyword">let</span> child <span class="token operator">=</span> <span class="token keyword">null</span>
<span class="token keyword">while</span><span class="token punctuation">(</span> child <span class="token operator">=</span> uls<span class="token punctuation">.</span>firstChild <span class="token punctuation">)</span><span class="token punctuation">{</span>
  fragment<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>child<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后在遍历 fragment ，然后修改对应的值，最后再添加到页面上去。因为 <code>childNodes</code> 有文档节点和元素节点所以 <strong>需要判断是否为元素节点</strong>，元素节点的 nodeType 节点类型为 1.</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>fragment<span class="token punctuation">.</span>childNodes<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span> <span class="token punctuation">(</span><span class="token parameter">node</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>nodeType <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    node<span class="token punctuation">.</span>textContent <span class="token operator">=</span> <span class="token string">&#39;hahg&#39;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

uls<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>fragment<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="二、数据代理" tabindex="-1"><a class="header-anchor" href="#二、数据代理"><span>二、数据代理</span></a></h2><h3 id="_2-1-使用vue实现" tabindex="-1"><a class="header-anchor" href="#_2-1-使用vue实现"><span>2.1 使用Vue实现</span></a></h3><ul><li>数据代理参考的是设计模式里的代理模式，<strong>通过一个对象代理对另一个对象中属性的读或写</strong>。</li><li>Vue 数据代理： <ul><li>之前有一个细节就是我们编写 Vue 的构造函数里的配置时，读或写 data 里的值都只需要使用 <code>this.变量名</code> 而不是 <code>this._data.变量名</code> （实际渲染页面时 data 对象重命名为了 <code>_data</code> ）</li><li>这就是 Vue 中数据代理，我们不必要多写一个对象来获取数据。</li><li>下面就是 VM 的实际结构</li></ul></li></ul><img src="https://raw.githubusercontent.com/hahg2000/picture/vue/Vue数据代理.png" style="zoom:70%;"><p>我们对 <code>name</code> 修改，<code>_data.name</code> 也会同时改变。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">el</span><span class="token operator">:</span> <span class="token string">&#39;#app&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;hahg&#39;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token comment">// 修改name的值，_data里的name也会改</span>
vm<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&#39;小司&#39;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>vm<span class="token punctuation">.</span>_data<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 小司</span>

<span class="token comment">// 修改_data里的name的值，name也会改变</span>
vm<span class="token punctuation">.</span>_data<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&#39;此方&#39;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>vm<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 此方</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-2-使用简化版" tabindex="-1"><a class="header-anchor" href="#_2-2-使用简化版"><span>2.2 使用简化版</span></a></h3><p>下载简化版本，然后和 Vue 一样使用，只是构造函数不一样。</p><div class="language-html line-numbers-mode" data-ext="html" data-title="html"><pre class="language-html"><code><span class="token comment">&lt;!-- 引入四个核心文件 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>./js/observer.js<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>./js/watcher.js<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>./js/compile.js<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>./js/mvvm.js<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  <span class="token keyword">const</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MVVM</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">el</span><span class="token operator">:</span> <span class="token string">&#39;#app&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;hahg&#39;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>

  <span class="token comment">// 输出vm</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>vm<span class="token punctuation">)</span><span class="token punctuation">;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后查看输出情况，与第 2.1 节的红色方框的内容相同，但简化了很多东西。</p><img src="https://raw.githubusercontent.com/hahg2000/picture/vue/简化版数据代理.png" style="zoom:80%;"><h3 id="_2-3-debug调试" tabindex="-1"><a class="header-anchor" href="#_2-3-debug调试"><span>2.3 Debug调试</span></a></h3><p>接下来我们使用 VSCode 来看下简化版的源码，或者也可以使用 Chorme 自带的开发者工具。</p><p>下面简单介绍一下调试工具的几个按钮的作用：</p><img src="https://raw.githubusercontent.com/hahg2000/picture/vue/vscode调试界面.png" style="zoom:70%;"><ul><li>第一个【继续】：竖线加一个右三角——直接跳转到下一个断点。</li><li>第二个【单步跳过】：一个箭头越过一个点——如果遇到方法里直接执行完方法。</li><li>第三个【单步调试】：一个箭头指向一个点——进入到方法里执行。</li><li>第四个【单步跳出】：一个箭头反方向指向一个点——直接执行完成方法，除非遇到断点。</li><li>第五个【重启】：绿色旋转箭头——重启调试。</li><li>第六个【停止】：红色空心方形——结束调试。</li></ul><p>首先在上面代码的第 7 行打上断点，然后选择单步调试，进入到源码里，源码全部如下：</p><p>::: detail</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token constant">MVVM</span><span class="token punctuation">(</span><span class="token parameter">options</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>$options <span class="token operator">=</span> options <span class="token operator">||</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token keyword">var</span> data <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_data <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$options<span class="token punctuation">.</span>data<span class="token punctuation">;</span>
  <span class="token keyword">var</span> me <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>

  <span class="token comment">// 数据代理</span>
  <span class="token comment">// 实现 vm.xxx -&gt; vm._data.xxx</span>
  Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">key</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    me<span class="token punctuation">.</span><span class="token function">_proxyData</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">_initComputed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token function">observe</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">this</span><span class="token punctuation">.</span>$compile <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Compile</span><span class="token punctuation">(</span>options<span class="token punctuation">.</span>el <span class="token operator">||</span> document<span class="token punctuation">.</span>body<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token class-name">MVVM</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">constructor</span><span class="token operator">:</span> <span class="token constant">MVVM</span><span class="token punctuation">,</span>
  <span class="token function-variable function">$watch</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">key<span class="token punctuation">,</span> cb<span class="token punctuation">,</span> options</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">new</span> <span class="token class-name">Watcher</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> key<span class="token punctuation">,</span> cb<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>

  <span class="token function-variable function">_proxyData</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">key<span class="token punctuation">,</span> setter<span class="token punctuation">,</span> getter</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> me <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
    setter <span class="token operator">=</span> setter <span class="token operator">||</span> 
      Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>me<span class="token punctuation">,</span> key<span class="token punctuation">,</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">configurable</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
      <span class="token literal-property property">enumerable</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
      <span class="token function-variable function">get</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token function">proxyGetter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> me<span class="token punctuation">.</span>_data<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token function-variable function">set</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token function">proxySetter</span><span class="token punctuation">(</span><span class="token parameter">newVal</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        me<span class="token punctuation">.</span>_data<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> newVal<span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>

  <span class="token function-variable function">_initComputed</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> me <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
    <span class="token keyword">var</span> computed <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$options<span class="token punctuation">.</span>computed<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> computed <span class="token operator">===</span> <span class="token string">&#39;object&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>computed<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">key</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>me<span class="token punctuation">,</span> key<span class="token punctuation">,</span> <span class="token punctuation">{</span>
          <span class="token literal-property property">get</span><span class="token operator">:</span> <span class="token keyword">typeof</span> computed<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string">&#39;function&#39;</span> 
          <span class="token operator">?</span> computed<span class="token punctuation">[</span>key<span class="token punctuation">]</span> 
          <span class="token operator">:</span> computed<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">.</span>get<span class="token punctuation">,</span>
          <span class="token function-variable function">set</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>:::</p><p>数据代理只用到里面的几行：</p><ul><li>第 2 ~ 7 行：初始化操作/第 5 行 <strong>将配置对象里的 data 对象传给 vm 的 _data</strong>，这就是为什么我们调用 vm 里的 data 不是 <code>vm.data</code> 而是 <code>vm._data</code>。</li><li>第 11 行开始实现数据代理，将 <code>_data</code> 里的数据根据代理映射出来。这里使用到了 <code>_proxyData()</code> 方法。 <ul><li><code>Object.keys(data)</code> ：将 data 里所有属性的属性名放到一个数组里，并返回。</li><li>这里使用到了 <code>forEach()</code> ，所以第 12 行执行的是以 data 里的 <strong>每一个属性名</strong> 作为参数掉调用 <code>_proxyData()</code> 方法。</li></ul></li></ul><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token constant">MVVM</span><span class="token punctuation">(</span><span class="token parameter">options</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 判断传入参数是否为空</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>$options <span class="token operator">=</span> options <span class="token operator">||</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token comment">// 将配置对象里的data的数据传给vm._data</span>
  <span class="token keyword">var</span> data <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_data <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$options<span class="token punctuation">.</span>data<span class="token punctuation">;</span>
  <span class="token comment">// me代表vm对象</span>
  <span class="token keyword">var</span> me <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>

  <span class="token comment">// 数据代理</span>
  <span class="token comment">// 实现 vm.xxx -&gt; vm._data.xxx</span>
  Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">key</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    me<span class="token punctuation">.</span><span class="token function">_proxyData</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>接下来我们进入 <code>me._proxyData()</code> 方法里 <ul><li>第 1 行： <code>_proxyData()</code> 方法存在 MVVM 的原型里，所以任何他的实例都可以调用。</li><li>第 3 行：存储 <code>this</code> ，由于是 vm 对象调用所以是 <code>this </code> 指向 vm 对象。</li><li>第 4 行：使用了 <code>||</code> 或运算符，判断形参 setter 是否为空，不为空则使用参数，为空则执行默认操作，因为在上面的第 12 行中，只传递了一个属性名，所以这里需要执行默认操作。</li><li>第 5 ~14 行：以形参的属性名创建存取描述符，定义 <code>set()</code> 和 <code>get()</code> 方法来实现数据代理。 <ul><li>第 8 行：<code>get()</code> 方法中返回的值是从 <code>_data</code> 里取到的。</li><li>第 11 行：<code>set()</code> 方法中使用新值改变 <code>_data</code> 里的值。</li></ul></li></ul></li></ul><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token class-name">MVVM</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token function-variable function">_proxyData</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">key<span class="token punctuation">,</span> setter<span class="token punctuation">,</span> getter</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> me <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
    setter <span class="token operator">=</span> setter <span class="token operator">||</span> 
      Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>me<span class="token punctuation">,</span> key<span class="token punctuation">,</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">configurable</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
      <span class="token literal-property property">enumerable</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
      <span class="token function-variable function">get</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token function">proxyGetter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> me<span class="token punctuation">.</span>_data<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token function-variable function">set</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token function">proxySetter</span><span class="token punctuation">(</span><span class="token parameter">newVal</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        me<span class="token punctuation">.</span>_data<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> newVal<span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-4-总结" tabindex="-1"><a class="header-anchor" href="#_2-4-总结"><span>2.4 总结</span></a></h3><ul><li>Vue 的数据代理是 <strong>数据劫持</strong> ： 通过 <code>Object.defineProperty()</code> 来劫持各个属性的设置和获取，也就是说你 读或写 都需要执行属性里 <code>set()</code> 和 <code>get()</code> 方法。 <ul><li>不得不说，能想到直接使用 Javascript 里的原生语法来实现这个功能，真的很妙。</li></ul></li><li>Angular.js 的数据代车是 <strong>脏值检查:</strong> 是通过脏值检测的方式比对数据是否有变更，来决定是否更新视图，最简单的方式就是通过 <code>setInterval()</code> 定时轮询检测数据变动，当然Google不会这么low，angular只有在指定的事件触发时进入脏值检测，大致如下： <ul><li>DOM 事件，譬如用户输入文本，点击按钮等。( ng-click )</li><li>XHR 响应事件 ( $http )</li><li>浏览器 Location 变更事件 ( $location )</li><li>Timer 事件( $timeout , $interval )</li><li>执行 $digest() 或 $apply()</li><li>这个就类似直接设置一个管理员来管理数据，只有数据被另一个人使用了，才会更新数据。</li><li>可能这个和 Vue 对比，应该是性能会好点，不会经常地修改数据。</li></ul></li></ul><h2 id="三、大括号表达式" tabindex="-1"><a class="header-anchor" href="#三、大括号表达式"><span>三、大括号表达式</span></a></h2>`,49);function V(A,D){const o=c("ExternalLinkIcon"),t=c("RouteLink");return i(),u("div",null,[d,k,n("ul",null,[n("li",null,[n("a",v,[s("Github 仓库"),a(o)])])]),n("blockquote",null,[m,b,g,n("p",null,[s("为了便于说明原理与实现，本文相关代码主要摘自 "),n("a",h,[s("vue源码"),a(o)]),s(", 并进行了简化改造，相对较简陋，并未考虑到数组的处理、数据的循环依赖等，也难免存在一些问题，欢迎大家指正。不过这些并不会影响大家的阅读和理解，相信看完本文后对大家在阅读vue源码的时候会更有帮助 本文所有相关代码均在github上面可找到 https://github.com/DMQ/mvvm")])]),y,f,_,n("blockquote",null,[n("p",null,[s("在在之前笔记的 "),a(t,{to:"/%E5%AD%A6%E4%B9%A0/%E5%89%8D%E7%AB%AF/%E5%8E%9F%E7%94%9FJS/%E5%8E%9F%E7%94%9FJS-%E4%B8%8A.html"},{default:e(()=>[s("原生JS-上")]),_:1}),s(" 的 2.4 的第（4）节中有的函数2，有 "),w,s(" 方法的详解。")])]),E,n("blockquote",null,[n("p",null,[s("在之前笔记的 "),a(t,{to:"/%E5%AD%A6%E4%B9%A0/%E5%89%8D%E7%AB%AF/%E5%8E%9F%E7%94%9FJS/%E5%8E%9F%E7%94%9FJS-%E4%B8%AD.html"},{default:e(()=>[s("原生 JS-中")]),_:1}),s(" 的 一、DOM简介所提到过。")])]),j,n("blockquote",null,[n("p",null,[s("在在之前笔记的 "),a(t,{to:"/%E5%AD%A6%E4%B9%A0/%E5%89%8D%E7%AB%AF/%E5%8E%9F%E7%94%9FJS/%E5%8E%9F%E7%94%9FJS-%E4%B8%8A.html#%E4%BA%8C%E3%80%81%E5%AF%B9%E8%B1%A1"},{default:e(()=>[s("原生JS-上")]),_:1}),s(" 的 2.1 节中有属性的详解。")])]),x])}const M=l(r,[["render",V],["__file","Vue-下之源码分析.html.vue"]]),O=JSON.parse('{"path":"/%E5%AD%A6%E4%B9%A0/%E5%89%8D%E7%AB%AF/JS%E6%A1%86%E6%9E%B6/Vue-%E4%B8%8B%E4%B9%8B%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90.html","title":"Vue-下之源码分析","lang":"zh-CN","frontmatter":{"description":"Vue-下之源码分析 接下来我们对 Vue 一些核心功能的源码进行分析，当然我们并不是直接看 Vue 的源码，在 Github 上有一个简化版本，我们可以学习一下那个。 Github 仓库 本文能帮你做什么？ 1、了解vue的双向数据绑定原理以及核心代码模块 2、缓解好奇心的同时了解如何实现双向绑定 为了便于说明原理与实现，本文相关代码主要摘自 vue...","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/%E5%AD%A6%E4%B9%A0/%E5%89%8D%E7%AB%AF/JS%E6%A1%86%E6%9E%B6/Vue-%E4%B8%8B%E4%B9%8B%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90.html"}],["meta",{"property":"og:site_name","content":"博客演示"}],["meta",{"property":"og:title","content":"Vue-下之源码分析"}],["meta",{"property":"og:description","content":"Vue-下之源码分析 接下来我们对 Vue 一些核心功能的源码进行分析，当然我们并不是直接看 Vue 的源码，在 Github 上有一个简化版本，我们可以学习一下那个。 Github 仓库 本文能帮你做什么？ 1、了解vue的双向数据绑定原理以及核心代码模块 2、缓解好奇心的同时了解如何实现双向绑定 为了便于说明原理与实现，本文相关代码主要摘自 vue..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-02-24T04:33:47.000Z"}],["meta",{"property":"article:author","content":"hahg"}],["meta",{"property":"article:modified_time","content":"2024-02-24T04:33:47.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Vue-下之源码分析\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-02-24T04:33:47.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"hahg\\"}]}"]]},"headers":[{"level":2,"title":"一、准备工作","slug":"一、准备工作","link":"#一、准备工作","children":[{"level":3,"title":"1.1 伪数组转变为真数组","slug":"_1-1-伪数组转变为真数组","link":"#_1-1-伪数组转变为真数组","children":[]},{"level":3,"title":"1.2 节点类型","slug":"_1-2-节点类型","link":"#_1-2-节点类型","children":[]},{"level":3,"title":"1.3给对象添加属性","slug":"_1-3给对象添加属性","link":"#_1-3给对象添加属性","children":[]},{"level":3,"title":"1.4 判断对象内部是否有某个属性","slug":"_1-4-判断对象内部是否有某个属性","link":"#_1-4-判断对象内部是否有某个属性","children":[]},{"level":3,"title":"1.5 文档碎片","slug":"_1-5-文档碎片","link":"#_1-5-文档碎片","children":[]}]},{"level":2,"title":"二、数据代理","slug":"二、数据代理","link":"#二、数据代理","children":[{"level":3,"title":"2.1 使用Vue实现","slug":"_2-1-使用vue实现","link":"#_2-1-使用vue实现","children":[]},{"level":3,"title":"2.2 使用简化版","slug":"_2-2-使用简化版","link":"#_2-2-使用简化版","children":[]},{"level":3,"title":"2.3 Debug调试","slug":"_2-3-debug调试","link":"#_2-3-debug调试","children":[]},{"level":3,"title":"2.4 总结","slug":"_2-4-总结","link":"#_2-4-总结","children":[]}]},{"level":2,"title":"三、大括号表达式","slug":"三、大括号表达式","link":"#三、大括号表达式","children":[]}],"git":{"createdTime":1708749227000,"updatedTime":1708749227000,"contributors":[{"name":"hahg2000","email":"61403802+hahg2000@users.noreply.github.com","commits":1}]},"readingTime":{"minutes":10.13,"words":3039},"filePathRelative":"学习/前端/JS框架/Vue-下之源码分析.md","localizedDate":"2024年2月24日","excerpt":"\\n<p>接下来我们对 Vue 一些核心功能的源码进行分析，当然我们并不是直接看 Vue 的源码，在 Github 上有一个简化版本，我们可以学习一下那个。</p>\\n<ul>\\n<li><a href=\\"https://github.com/DMQ/mvvm\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">Github 仓库</a></li>\\n</ul>\\n<blockquote>\\n<p>本文能帮你做什么？</p>\\n<p>1、了解vue的双向数据绑定原理以及核心代码模块</p>\\n<p>2、缓解好奇心的同时了解如何实现双向绑定</p>\\n<p>为了便于说明原理与实现，本文相关代码主要摘自 <a href=\\"https://github.com/vuejs/vue\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">vue源码</a>, 并进行了简化改造，相对较简陋，并未考虑到数组的处理、数据的循环依赖等，也难免存在一些问题，欢迎大家指正。不过这些并不会影响大家的阅读和理解，相信看完本文后对大家在阅读vue源码的时候会更有帮助\\n本文所有相关代码均在github上面可找到 https://github.com/DMQ/mvvm</p>\\n</blockquote>","autoDesc":true}');export{M as comp,O as data};
