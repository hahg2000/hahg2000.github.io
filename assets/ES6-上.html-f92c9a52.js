const e=JSON.parse('{"key":"v-200ed906","path":"/%E5%AD%A6%E4%B9%A0/%E5%89%8D%E7%AB%AF/%E5%8E%9F%E7%94%9FJS/ES6-%E4%B8%8A.html","title":"ES6-上","lang":"zh-CN","frontmatter":{"description":"ES6-上 一、let ES6 新增了 let 命令，用来声明变量。 1.1 let作用域 （1）声明变量 它的用法类似于var，但是所声明的变量，只在let 命令 所在的代码块内有效。 下面为例子： 下面的代码中使用 let 声明的变量 a ，在第 6 行就无法输出，而使用 var 声明的变量 b 就可以在 第 7 行输出。","head":[["meta",{"property":"og:url","content":"https://hahg2000.github.io/%E5%AD%A6%E4%B9%A0/%E5%89%8D%E7%AB%AF/%E5%8E%9F%E7%94%9FJS/ES6-%E4%B8%8A.html"}],["meta",{"property":"og:title","content":"ES6-上"}],["meta",{"property":"og:description","content":"ES6-上 一、let ES6 新增了 let 命令，用来声明变量。 1.1 let作用域 （1）声明变量 它的用法类似于var，但是所声明的变量，只在let 命令 所在的代码块内有效。 下面为例子： 下面的代码中使用 let 声明的变量 a ，在第 6 行就无法输出，而使用 var 声明的变量 b 就可以在 第 7 行输出。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-03-12T04:21:01.000Z"}],["meta",{"property":"article:modified_time","content":"2023-03-12T04:21:01.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"ES6-上\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-03-12T04:21:01.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"一、let","slug":"一、let","link":"#一、let","children":[{"level":3,"title":"1.1 let作用域","slug":"_1-1-let作用域","link":"#_1-1-let作用域","children":[]},{"level":3,"title":"1.2  不存在变量提升","slug":"_1-2-不存在变量提升","link":"#_1-2-不存在变量提升","children":[]},{"level":3,"title":"1.3 暂时性死区","slug":"_1-3-暂时性死区","link":"#_1-3-暂时性死区","children":[]},{"level":3,"title":"1.4 不允许重复声明","slug":"_1-4-不允许重复声明","link":"#_1-4-不允许重复声明","children":[]}]},{"level":2,"title":"二、块级作用域","slug":"二、块级作用域","link":"#二、块级作用域","children":[{"level":3,"title":"2.1 为什么需要块级作用域？","slug":"_2-1-为什么需要块级作用域","link":"#_2-1-为什么需要块级作用域","children":[]},{"level":3,"title":"2.2 ES6 的块级作用域","slug":"_2-2-es6-的块级作用域","link":"#_2-2-es6-的块级作用域","children":[]}]},{"level":2,"title":"三、 const 关键词","slug":"三、-const-关键词","link":"#三、-const-关键词","children":[{"level":3,"title":"3.1 基本用法","slug":"_3-1-基本用法","link":"#_3-1-基本用法","children":[]},{"level":3,"title":"3.2 本质","slug":"_3-2-本质","link":"#_3-2-本质","children":[]}]},{"level":2,"title":"四、顶层对象的属性","slug":"四、顶层对象的属性","link":"#四、顶层对象的属性","children":[]},{"level":2,"title":"五、globalThis 对象","slug":"五、globalthis-对象","link":"#五、globalthis-对象","children":[]},{"level":2,"title":"六、变量的解构赋值","slug":"六、变量的解构赋值","link":"#六、变量的解构赋值","children":[{"level":3,"title":"6.1 基本用法","slug":"_6-1-基本用法","link":"#_6-1-基本用法","children":[]},{"level":3,"title":"6.2 默认值","slug":"_6-2-默认值","link":"#_6-2-默认值","children":[]}]},{"level":2,"title":"七、对象的解构赋值","slug":"七、对象的解构赋值","link":"#七、对象的解构赋值","children":[{"level":3,"title":"7.1 普通用法","slug":"_7-1-普通用法","link":"#_7-1-普通用法","children":[]},{"level":3,"title":"7.2 嵌套用法","slug":"_7-2-嵌套用法","link":"#_7-2-嵌套用法","children":[]},{"level":3,"title":"7.3 读取到原型链","slug":"_7-3-读取到原型链","link":"#_7-3-读取到原型链","children":[]},{"level":3,"title":"7.4 默认值","slug":"_7-4-默认值","link":"#_7-4-默认值","children":[]}]}],"git":{"createdTime":1678594861000,"updatedTime":1678594861000,"contributors":[{"name":"hahg2000","email":"61403802+hahg2000@users.noreply.github.com","commits":1}]},"readingTime":{"minutes":12.89,"words":3868},"filePathRelative":"学习/前端/原生JS/ES6-上.md","localizedDate":"2023年3月12日","excerpt":"<h1> ES6-上</h1>\\n<h2> 一、let</h2>\\n<p>ES6 新增了 <code>let</code> 命令，用来声明变量。</p>\\n<h3> 1.1 let作用域</h3>\\n<h4> （1）声明变量</h4>\\n<ul>\\n<li>它的用法类似于<code>var</code>，但是所声明的变量，只在<code>let</code> 命令 <strong>所在的代码块内有效</strong>。</li>\\n</ul>\\n<hr>\\n<p>下面为例子：</p>\\n<p>下面的代码中使用 <code>let</code> 声明的变量 a ，在第 6 行就无法输出，而使用 <code>var</code> 声明的变量 b 就可以在 第 7 行输出。</p>","autoDesc":true}');export{e as data};
