import{_ as p,W as o,X as c,Y as n,Z as s,$ as e,a2 as t,C as i}from"./framework-0bc3c581.js";const l={},u=t(`<h1 id="node-下之综合web项目" tabindex="-1"><a class="header-anchor" href="#node-下之综合web项目" aria-hidden="true">#</a> Node-下之综合Web项目</h1><h2 id="一、设计目录" tabindex="-1"><a class="header-anchor" href="#一、设计目录" aria-hidden="true">#</a> 一、设计目录</h2><p>首先先在项目里建立好项目结构：</p><ul><li>在 Window 列出项目结构在命令行中输入 <code>tree</code></li><li>列出结构并输出到文件 <code>tree &gt;文件名.txt</code></li></ul><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>├─node_modules 【模块】
├─controllers 【控制层】
├─models 【模型】
├─public 【公开的文件】
│  ├─css
│  ├─img
│  └─js
├─views 【视图】
├─middlewares 【中间件】
├─app.js【入口文件】
├─router.js【路由文件】
├─package.json【包说明文件】
└─package-lock.json【包锁定文件】
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面主要为 MVC 模式的项目结构：</p><ul><li>控制层和路由的职责有所重复，所以也可以合并成只有路由。</li><li>如果想保留控制层，那么在路由就只单单处理请求的分类，具体地处理请求将在控制层。</li></ul><p>例如下面的代码。第 3 行，处理 “ / “ 的请求，然后 <strong>将具体地处理交给控制层</strong>；而第 6 行的控制层，就开始具体的操作，例如权限控制和返回页面。</p>`,8),r={href:"https://github.com/cnodejs/nodeclub",target:"_blank",rel:"noopener noreferrer"},d=t(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// routes.js 处理请求的分类</span>
<span class="token keyword">var</span> site <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;./controllers/site&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
router<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;/&#39;</span><span class="token punctuation">,</span> site<span class="token punctuation">.</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// controllers/site.js </span>
exports<span class="token punctuation">.</span><span class="token function-variable function">index</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 处理请求主页</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果需要使用上面目录的文件夹时，需要 <strong>在入口文件进行注册</strong>。</p><ul><li>view【视图文件夹】 <ul><li><code>app.engine(&#39;html&#39;, require(&#39;express-art-template&#39;))</code> 注册模板引擎</li><li><code>app.set(&#39;views&#39;, path.join(__dirname, &#39;./views&#39;))</code> 配置渲染目录</li></ul></li><li>public【公开资源文件夹】 <ul><li><code>app.use(&#39;/public/&#39;, express.static(path.join(__dirname, &#39;./public/&#39;)))</code></li></ul></li><li>router.js【路由文件】和 middlewares【中间件文件夹】 <ul><li>使用他们都需要使用到 <code>app.use(请求路径, 所使用的模块)</code></li></ul></li><li>解析 POST 数据</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>express<span class="token punctuation">.</span><span class="token function">urlencoded</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">extended</span><span class="token operator">:</span> <span class="token boolean">false</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>express<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="二、设计模型" tabindex="-1"><a class="header-anchor" href="#二、设计模型" aria-hidden="true">#</a> 二、设计模型</h2><p>一般模型 Model 是操作数据库，最常用的是操作 MySql 和 MongoDB。</p><h3 id="_2-1-操作mysql" tabindex="-1"><a class="header-anchor" href="#_2-1-操作mysql" aria-hidden="true">#</a> 2.1 操作MySql</h3><p>在 Node 中篇中的第四章中有较详细地讲述，这里就列出大概模板。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 引入Mysql模块</span>
<span class="token keyword">var</span> mysql <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;mysql&#39;</span><span class="token punctuation">)</span>

<span class="token comment">// 创建连接池</span>
<span class="token keyword">var</span> pool <span class="token operator">=</span> mysql<span class="token punctuation">.</span><span class="token function">createPool</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">connectionLimit</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
    <span class="token literal-property property">host</span><span class="token operator">:</span> <span class="token string">&#39;localhost&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">user</span><span class="token operator">:</span> <span class="token string">&#39;root&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">password</span><span class="token operator">:</span> <span class="token string">&#39;password&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">database</span><span class="token operator">:</span> <span class="token string">&#39;tx&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">queueLimit</span><span class="token operator">:</span> <span class="token number">1</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token comment">// 在连接池获取连接</span>
pool<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> connection</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
   	<span class="token comment">// 执行MySql语句</span>
    connection<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span> <span class="token string">&quot;select * from table&quot;</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> rows</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token comment">// 获取到错误对象和数据对象</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> err<span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> rows <span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 使用完连接后释放连接</span>
    connection<span class="token punctuation">.</span><span class="token function">release</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-2-操作mongodb" tabindex="-1"><a class="header-anchor" href="#_2-2-操作mongodb" aria-hidden="true">#</a> 2.2 操作MongoDB</h3><p>MongoDB 现在【2021年12月24日】尚不熟悉，所以一般不会去用 つ﹏⊂</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 导入Mongoose模块</span>
<span class="token keyword">let</span> mongoose <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;mongoose&#39;</span><span class="token punctuation">)</span>

<span class="token comment">// 连接数据库</span>
<span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token parameter">err</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">await</span> mongoose<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span><span class="token string">&#39;mongodb://localhost:27017/students&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 获取模式</span>
<span class="token keyword">const</span> <span class="token punctuation">{</span> Schema <span class="token punctuation">}</span> <span class="token operator">=</span> mongoose<span class="token punctuation">;</span>

<span class="token comment">// 使用模式创建具体的数据库模型，这里将自己自定义化</span>
<span class="token keyword">const</span> studentsSchema <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Schema</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">type</span><span class="token operator">:</span>Number <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token comment">// String is shorthand for {type: String}</span>
    <span class="token literal-property property">name</span><span class="token operator">:</span> String<span class="token punctuation">,</span>
    <span class="token literal-property property">gender</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">type</span><span class="token operator">:</span>Number<span class="token punctuation">,</span> <span class="token keyword">enum</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">default</span><span class="token operator">:</span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token literal-property property">age</span><span class="token operator">:</span><span class="token punctuation">{</span> <span class="token literal-property property">type</span><span class="token operator">:</span>Number <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token literal-property property">hobby</span><span class="token operator">:</span> String
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 导出数据库模型，其他模块拿到数据库模型可以进行增删改查</span>
module<span class="token punctuation">.</span>exports <span class="token operator">=</span> mongoose<span class="token punctuation">.</span><span class="token function">model</span><span class="token punctuation">(</span><span class="token string">&quot;Student_info&quot;</span><span class="token punctuation">,</span> studentsSchema<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>下面将使用导出的数据库模型：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>Students<span class="token punctuation">.</span><span class="token function">findOne</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">id</span><span class="token operator">:</span> tempId <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> data</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        response<span class="token punctuation">.</span><span class="token function">status</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">&#39;Server error...&#39;</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>

    response<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token string">&#39;修改学生信息.html&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">updateStu</span><span class="token operator">:</span> data<span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="三、登录验证" tabindex="-1"><a class="header-anchor" href="#三、登录验证" aria-hidden="true">#</a> 三、登录验证</h2><p>现在对用户进行登录验证，最常见的是 token 验证，也就是将用户信息和一些相关数据进行加密，然后传给客户端，客户端再存到 cookie 里面。</p><p>然后 <strong>每次请求</strong> 浏览器都会 <strong>自动</strong> 将 cookie 里的信息传到服务端。服务端再根据 token 内容进行解密判断当前 token 是否合法。</p><p>（疑惑：不太知道一些互联网大企业如何来做这个事情才比较安全。最离谱的是 cf 活动页面复制 cookie 后退出再导入复制的 cookie，就可以直接登录）</p><hr><p>我们的是 JWT 模块来生成 token，具体的官网 ：</p>`,20),k={href:"https://jwt.io/",target:"_blank",rel:"noopener noreferrer"},v={href:"https://github.com/auth0/node-jsonwebtoken",target:"_blank",rel:"noopener noreferrer"},m=t(`<p>使用也非常简单，首先 <strong>加密用户输入的正确账号和密码</strong>，也可以有一些标识，例如是否为管理员。</p><ul><li><p>引入模块： <code>const jwt = require(&#39;jsonwebtoken&#39;)</code></p></li><li><p><code>let token = jwt.sign(data, SECRET_KEY)</code></p><ul><li>第一个参数为 <strong>需要加密的内容</strong>，可以为对象或者字符串。</li><li>第二参数为 salt ，与数据一起加密，可以加大破解的难度。</li></ul></li><li><p>如果想要传给前端可以使用 <code>response.json(对象)</code> 方法来发送 JSON 格式的数据。</p></li><li><p>在前端可以使用包装过的 AJAX 接收服务区传过来的数据，例如下面代码：</p><ul><li>第 4 行：使用了 <code>document.cookie = &#39;对象名=对象值&#39;</code> 来添加 cookie 里面。</li></ul></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function-variable function">success</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>success<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>success<span class="token punctuation">)</span><span class="token punctuation">{</span>
        document<span class="token punctuation">.</span>cookie <span class="token operator">=</span> <span class="token string">&#39;token=&#39;</span> <span class="token operator">+</span> data<span class="token punctuation">.</span>token
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>在前端发送请求到后端时，<strong>cookie 会自动放到请求头</strong>，但解析起来比较麻烦，所以我们需要另一个官方中间件 <code>cookie-parser</code></li><li>直接使用 <code>req.cookies</code> 就可以取出对象类型的 cookie。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 导入模块</span>
<span class="token keyword">const</span> cookieParser <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;cookie-parser&#39;</span><span class="token punctuation">)</span>

<span class="token comment">// 注册模块</span>
app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token function">cookieParser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token comment">// 请求主页</span>
app<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;/main&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

    <span class="token keyword">const</span> token <span class="token operator">=</span> req<span class="token punctuation">.</span>cookies<span class="token punctuation">.</span>token

    <span class="token comment">// 解密token</span>
    <span class="token keyword">let</span> decoded <span class="token operator">=</span> jwt<span class="token punctuation">.</span><span class="token function">verify</span><span class="token punctuation">(</span>token<span class="token punctuation">,</span> <span class="token constant">SECRET_KEY</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 在这里查询数据库然后比较</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="四、中间件" tabindex="-1"><a class="header-anchor" href="#四、中间件" aria-hidden="true">#</a> 四、中间件</h2><p>中间件就像污水处理厂一样，一步步处理请求。就像 JavaWeb 里的拦截器。</p><img src="https://raw.githubusercontent.com/hahg2000/picture/Senior-JS/中间件示意图.png" style="zoom:70%;"><p>下面来自定义并使用中间件。首先定义中间件 <strong>需要按照其规定的方式来定义方法</strong>。</p><img src="https://raw.githubusercontent.com/hahg2000/picture/Senior-JS/中间件函数.png" style="zoom:60%;"><ul><li>第一个参数：前端发来的 request 请求。</li><li>第二个参数：服务器返回的 response 响应。</li><li>第三个参数：下一个中间件的回调函数，只有执行了该函数 <code>next()</code> 下一个中间件才可以执行。</li></ul><p>例如下面代码中：定义了两个方法作为中间件，然后在第一个方法中往 request 里添加数据，在之后的中间件都可以获取到其里面的数据。</p><p><strong>这就是为什么配置一些中间件后，就可以直接在路由的 request 请求取出 cookie 和 POST 所携带的数据。</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//。。。。</span>

<span class="token comment">// 注册中间件</span>
app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>middleware1<span class="token punctuation">)</span>
app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>middleware2<span class="token punctuation">)</span>

<span class="token comment">// 定义两个中间件函数</span>
<span class="token keyword">function</span> <span class="token function">middleware1</span><span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token comment">// 标识输出</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;这是middleware1&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// 往req里添加内容</span>
  req<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&#39;张三&#39;</span><span class="token punctuation">;</span>
  <span class="token comment">// 必写</span>
  <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token keyword">function</span> <span class="token function">middleware2</span><span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token comment">// 取出req里的内容</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;在middleware2中取出req的name:&#39;</span> <span class="token operator">+</span> req<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// 必写</span>
  <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token comment">// 最终路由</span>
app<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;/&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
   <span class="token comment">// 输出req里的内容</span>
   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;在最后中取出req的name:&#39;</span> <span class="token operator">+</span> req<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
   res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token comment">// 输出</span>
<span class="token comment">// 这是middleware1</span>
<span class="token comment">// 在middleware2中取出req的name:张三</span>
<span class="token comment">// 在最后中取出req的name:张三</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,14);function b(g,h){const a=i("ExternalLinkIcon");return o(),c("div",null,[u,n("ul",null,[n("li",null,[s("具体的项目参考："),n("a",r,[s("CNodeJS Github仓库"),e(a)])])]),d,n("ul",null,[n("li",null,[n("a",k,[s("JWT的io网站"),e(a)]),s("：里面有不同语言使用的情况。")]),n("li",null,[n("a",v,[s("JWT的node版本 Github仓库"),e(a)])])]),m])}const y=p(l,[["render",b],["__file","Node-下之综合Web项目.html.vue"]]);export{y as default};
