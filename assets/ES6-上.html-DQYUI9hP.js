import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as s,c as a,f as e}from"./app-Chw2KLnS.js";const t={},p=e(`<h1 id="es6-上" tabindex="-1"><a class="header-anchor" href="#es6-上"><span>ES6-上</span></a></h1><h2 id="一、let" tabindex="-1"><a class="header-anchor" href="#一、let"><span>一、let</span></a></h2><p>ES6 新增了 <code>let</code> 命令，用来声明变量。</p><h3 id="_1-1-let作用域" tabindex="-1"><a class="header-anchor" href="#_1-1-let作用域"><span>1.1 let作用域</span></a></h3><h4 id="_1-声明变量" tabindex="-1"><a class="header-anchor" href="#_1-声明变量"><span>（1）声明变量</span></a></h4><ul><li>它的用法类似于<code>var</code>，但是所声明的变量，只在<code>let</code> 命令 <strong>所在的代码块内有效</strong>。</li></ul><hr><p>下面为例子：</p><p>下面的代码中使用 <code>let</code> 声明的变量 a ，在第 6 行就无法输出，而使用 <code>var</code> 声明的变量 b 就可以在 第 7 行输出。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token punctuation">{</span>
  <span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
  <span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

a <span class="token comment">// ReferenceError: a is not defined.</span>
b <span class="token comment">// 1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>for</code>循环的计数器，就很合适使用<code>let</code>命令，可以防止变量污染或者变量冗余。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// ...</span>
<span class="token punctuation">}</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// ReferenceError: i is not defined</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-块作用域" tabindex="-1"><a class="header-anchor" href="#_2-块作用域"><span>（2）块作用域</span></a></h4><p>一句话：<code>let</code> 声明的变量有块级作用域。</p><hr><ul><li>经典问题：原生 Javascript 使用循环中为每一个按钮绑定事件，里面用到的 <code>i</code> 变量不是正确的值。</li><li>用 <code>let</code> 可以解决：每一次添加事件回调函数时，函数里面的作用域里面就会就添加 <code>i</code> 变量，就像闭包一样。</li></ul><p>下面举一个例子：</p><p>定义了一个数组名字为 a，然后在循环往 a 里面添加函数。函数里使用了 <code>let</code> 声明的变量。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// 这里使用var</span>
<span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
a<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 10</span>

<span class="token comment">// 这里使用let</span>
<span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
a<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 6</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-父作用域" tabindex="-1"><a class="header-anchor" href="#_3-父作用域"><span>（3）父作用域</span></a></h4><p><code>let</code> 在 <code>for</code>循环还有一个特别之处，就是设置循环变量的那部分是一个父作用域，而循环体内部是一个单独的子作用域。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token string">&#39;abc&#39;</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> 
<span class="token comment">// 不会报错</span>
<span class="token comment">// abc</span>
<span class="token comment">// abc</span>
<span class="token comment">// abc</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_1-2-不存在变量提升" tabindex="-1"><a class="header-anchor" href="#_1-2-不存在变量提升"><span>1.2 不存在变量提升</span></a></h3><p>一句话：<code>let</code> 不像 <code>var</code> 一样会变量提升。</p><hr><ul><li>第 3 行的会提升；而第 7 行的不会提升。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// var 的情况</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>foo<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出undefined</span>
<span class="token keyword">var</span> foo <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>

<span class="token comment">// let 的情况</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>bar<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 报错ReferenceError</span>
<span class="token keyword">let</span> bar <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_1-3-暂时性死区" tabindex="-1"><a class="header-anchor" href="#_1-3-暂时性死区"><span>1.3 暂时性死区</span></a></h3><p>一句话：<code>let</code> 锁住了该区域，不让其获取全局变量。</p><hr><p>ES6 明确规定，如果区块中存在 let 和 const 命令，这个区块对这些命令声明的变量，从一开始就形成了封闭作用域。<strong>凡是在声明之前就使用这些变量，就会报错</strong>。</p><p>总之，在代码块内，使用 let 命令声明变量之前，该变量都是不可用的。这在语法上，称为 “ 暂时性死区 ”（temporal dead zone，简称 TDZ）。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// 全局声明了一个变量</span>
<span class="token keyword">var</span> tmp <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span>

<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 赋值操作</span>
  tmp <span class="token operator">=</span> <span class="token string">&#39;abc&#39;</span><span class="token punctuation">;</span> <span class="token comment">// ReferenceError</span>
  <span class="token comment">// 重复声明</span>
  <span class="token keyword">let</span> tmp<span class="token punctuation">;</span>	<span class="token comment">// 在这行代码下面才可以使用tmp变量</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个特性影响到了 <code>typeof</code> ，这个 <strong>不再是一个百分之百安全的操作</strong>。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">typeof</span> x<span class="token punctuation">;</span> <span class="token comment">// ReferenceError</span>
<span class="token keyword">let</span> x<span class="token punctuation">;</span>

<span class="token keyword">typeof</span> undeclared_variable <span class="token comment">// typeof 未声明变量 =&gt; &quot;undefined&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_1-4-不允许重复声明" tabindex="-1"><a class="header-anchor" href="#_1-4-不允许重复声明"><span>1.4 不允许重复声明</span></a></h3><p>一句话：不要手抖声明同一个变量。</p><hr><p><code>let</code> 不允许在相同作用域内，重复声明同一个变量，无论之前变量是用 <code>let</code> 还是 <code>var </code> 声明。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// 报错</span>
<span class="token keyword">function</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 第一次用var声明</span>
  <span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
  <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 报错</span>
<span class="token keyword">function</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 第一次用let声明 </span>
  <span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>函数内也是如此，不能重复声明形参。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token parameter">arg</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> arg<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 报错</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="二、块级作用域" tabindex="-1"><a class="header-anchor" href="#二、块级作用域"><span>二、块级作用域</span></a></h2><h3 id="_2-1-为什么需要块级作用域" tabindex="-1"><a class="header-anchor" href="#_2-1-为什么需要块级作用域"><span>2.1 为什么需要块级作用域？</span></a></h3><p>ES5 只有全局作用域和函数作用域，没有块级作用域，这带来很多不合理的场景。</p><h4 id="_1-内层变量可能会覆盖外层变量" tabindex="-1"><a class="header-anchor" href="#_1-内层变量可能会覆盖外层变量"><span>（1）内层变量可能会覆盖外层变量</span></a></h4><p>第 7 ~ 10 行：if 语句块中用 <code>var</code> 声明的变量，因没有块级作用域所以 <strong>进行变量提升</strong>，提升到了方法的最前端，<strong>导致 tmp 变为了函数作用域里的变量</strong>。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// 声明全局变量</span>
<span class="token keyword">var</span> tmp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>tmp<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 该语句会进行变量提升</span>
        <span class="token keyword">var</span> tmp <span class="token operator">=</span> <span class="token string">&#39;hello world&#39;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// undefined</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-内存泄漏" tabindex="-1"><a class="header-anchor" href="#_2-内存泄漏"><span>（2）内存泄漏？</span></a></h4><p>用来计数的循环变量泄露为全局变量。</p><ul><li>i 变量只是用来计数，但 <code>var</code> 没有块级作用域，所以第 3 行声明的语句其实是在声明全局变量。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">var</span> s <span class="token operator">=</span> <span class="token string">&#39;hello&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> s<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 5</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-2-es6-的块级作用域" tabindex="-1"><a class="header-anchor" href="#_2-2-es6-的块级作用域"><span>2.2 ES6 的块级作用域</span></a></h3><p><code>let</code> 实际上为 JavaScript 新增了块级作用域。</p><p>例如上面的 2.1 第一个例子，使用 <code>let</code> 声明后就不会报错。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// 声明全局变量</span>
<span class="token keyword">let</span> tmp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>tmp<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 该语句会进行变量提升</span>
        <span class="token keyword">let</span> tmp <span class="token operator">=</span> <span class="token string">&#39;hello world&#39;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 成功输出当前时间</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>ES6 允许块级作用域的任意嵌套。（禁止 禁止套娃）</li></ul><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token punctuation">{</span>
  <span class="token keyword">let</span> insane <span class="token operator">=</span> <span class="token string">&#39;Hello World&#39;</span><span class="token punctuation">;</span>
  <span class="token punctuation">{</span> <span class="token keyword">let</span> insane <span class="token operator">=</span> <span class="token string">&#39;Hello World&#39;</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token comment">// 不报错</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>块级作用域的出现，实际上使得获得广泛应用的匿名立即执行函数表达式不再必要了。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// IIFE 写法</span>
<span class="token punctuation">(</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> tmp <span class="token operator">=</span> <span class="token operator">...</span><span class="token punctuation">;</span>
    <span class="token operator">...</span>
<span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 块级作用域写法</span>
<span class="token punctuation">{</span>
    <span class="token keyword">let</span> tmp <span class="token operator">=</span> <span class="token operator">...</span><span class="token punctuation">;</span>
    <span class="token operator">...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="三、-const-关键词" tabindex="-1"><a class="header-anchor" href="#三、-const-关键词"><span>三、 const 关键词</span></a></h2><h3 id="_3-1-基本用法" tabindex="-1"><a class="header-anchor" href="#_3-1-基本用法"><span>3.1 基本用法</span></a></h3><ul><li><code>const</code> 声明一个只读的常量。一旦声明，<strong>常量的值就不能改变</strong>。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token constant">PI</span> <span class="token operator">=</span> <span class="token number">3.1415</span><span class="token punctuation">;</span>
<span class="token constant">PI</span> <span class="token comment">// 3.1415</span>

<span class="token comment">// 不能改变其值</span>
<span class="token constant">PI</span> <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span> <span class="token comment">// Uncaught TypeError: Assignment to constant variable.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>const</code> 声明的变量不得改变值，这意味着，<code>const</code> <strong>一旦声明变量，就必须立即初始化</strong>，不能留到以后赋值。不然就声明了一个无意义的变量。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> foo<span class="token punctuation">;</span>
<span class="token comment">// SyntaxError: Missing initializer in const declaration</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>const</code> 关键词与 <code>let</code> 一样，有块级作用域、存在暂时性死区和不允许重复声明。</li></ul><h3 id="_3-2-本质" tabindex="-1"><a class="header-anchor" href="#_3-2-本质"><span>3.2 本质</span></a></h3><p><code>const</code> 对于基本类型来说，保存的是其值，所以可以看成是常量。</p><p>而对于复合类型来说，保存的是指向该数据的 <strong>地址</strong>，所以你因此可以修改地址里的数据，不能真正看成一个常量。因此，将一个对象声明为常量必须非常小心。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> foo <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// 为 foo 添加一个属性，可以成功</span>
foo<span class="token punctuation">.</span>prop <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span>
foo<span class="token punctuation">.</span>prop <span class="token comment">// 123</span>

<span class="token comment">// 将 foo 指向另一个对象，就会报错</span>
foo <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment">// Uncaught TypeError: Assignment to constant variable.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果真的想将对象冻结，应该使用 <code>Object.freeze</code> 方法。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> foo <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">freeze</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 常规模式时，下面一行不起作用；</span>
<span class="token comment">// 严格模式时，该行会报错 Uncaught TypeError: Cannot add property prop, object is not extensible</span>
foo<span class="token punctuation">.</span>prop <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>但只是该对象不能增加或者删除元素，如果对象里的元素是复合类型，<strong>依然可以修改元素里的数据</strong>。所以元素也需要冻结。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">var</span> <span class="token function-variable function">constantize</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">obj</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
	<span class="token comment">// 冻结本身对象</span>
    Object<span class="token punctuation">.</span><span class="token function">freeze</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token comment">// 遍历对象里的所有元素</span>
    Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span> <span class="token punctuation">(</span><span class="token parameter">key<span class="token punctuation">,</span> i</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token comment">// 如果元素为对象，则递归调用本方法冻结</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token keyword">typeof</span> obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string">&#39;object&#39;</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">constantize</span><span class="token punctuation">(</span> obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="四、顶层对象的属性" tabindex="-1"><a class="header-anchor" href="#四、顶层对象的属性"><span>四、顶层对象的属性</span></a></h2><p>顶层对象，在浏览器环境指的是 <code>window</code> 对象，在 Node 指的是 <code>global</code> 对象。</p><p>ES5 之中，顶层对象的属性与全局变量是等价的，<u>你声明了一个全局对象，就等于在顶层对象添加一个属性</u>。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>window<span class="token punctuation">.</span>a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
a <span class="token comment">// 1</span>

a <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
window<span class="token punctuation">.</span>a <span class="token comment">// 2</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>但顶层对象的属性与全局变量挂钩，被认为是 JavaScript 语言最大的设计败笔之一。所以尽量少用 <code>var</code> 声明变量，而具体表现在下面：</p><blockquote><ul><li>首先是没法在编译时就报出当前变量未声明却使用了的错误，只有运行时才能知道。（调试噩梦） <ul><li>因为你可以随时使用 <code>window.xxx = yyy</code> 来添加全局变量，而编译器不会去 window 对象查找是否有这个变量。</li></ul></li><li>其次，程序员很容易不知不觉地就创建了全局变量（比如打字出错），<code>studnet = xxx</code> 之类的。</li><li>最后，顶层对象的属性是到处可以读写的，这非常不利于模块化编程，不同模块之间会污染变量。</li></ul></blockquote><p>现在 ES6 改变了这现象。</p><ul><li><p>方面规定，为了保持兼容性，<code>var</code> 命令和 <code>function</code> 命令声明的全局变量，依旧是顶层对象的属性；</p></li><li><p>另一方面规定，<code>let </code>命令、<code>const </code>命令、<code>class</code> 命令声明的全局变量，<strong>不属于顶层对象的属性</strong>。</p></li></ul><h2 id="五、globalthis-对象" tabindex="-1"><a class="header-anchor" href="#五、globalthis-对象"><span>五、globalThis 对象</span></a></h2><p>JavaScript 语言存在一个顶层对象，它提供全局环境（即全局作用域），<strong>所有代码都是在这个环境中运行</strong>。但是，<strong>顶层对象在各种实现里面是不统一的</strong>。</p><ul><li>浏览器的顶层对象： <code>window</code>，<code>self</code>。</li><li>Web Worker 的顶层对象：<code>self</code>。</li><li>Node 的顶层对象是 <code>global</code>。</li></ul><p>然而 ES2020（ES11） 在语言标准的层面，引入 globalThis 作为顶层对象。也就是说，任何环境下，globalThis 都是存在的，都可以从它拿到顶层对象，指向全局环境下的this。</p><h2 id="六、变量的解构赋值" tabindex="-1"><a class="header-anchor" href="#六、变量的解构赋值"><span>六、变量的解构赋值</span></a></h2><h3 id="_6-1-基本用法" tabindex="-1"><a class="header-anchor" href="#_6-1-基本用法"><span>6.1 基本用法</span></a></h3><ul><li>ES6 允许按照一定模式，从 <strong>数组</strong> 和 <strong>对象</strong> 中提取值，对变量进行赋值，这被称为解构（Destructuring）。</li></ul><p>以前，为变量赋值，只能直接指定值。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> b <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> c <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>ES6 允许写成下面这样，一行语句就搞定。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">let</span> <span class="token punctuation">[</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

a <span class="token comment">// 1</span>
b <span class="token comment">// 2</span>
c <span class="token comment">// 3</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>本质上，这种写法属于 “ 模式匹配 ” ，只要等号两边的模式相同，左边的变量就会被赋予对应的值。将数据换成变量就可以。</p><p>下面是一些使用嵌套数组进行解构的例子。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// 1. 变量和数值一一对应</span>
<span class="token keyword">let</span> <span class="token punctuation">[</span>foo<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">[</span>bar<span class="token punctuation">]</span><span class="token punctuation">,</span> baz<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
foo <span class="token comment">// 1</span>
bar <span class="token comment">// 2</span>
baz <span class="token comment">// 3</span>

<span class="token comment">// 2. 扩展运算符</span>
<span class="token keyword">let</span> <span class="token punctuation">[</span>head<span class="token punctuation">,</span> <span class="token operator">...</span>tail<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
head <span class="token comment">// 1</span>
tail <span class="token comment">// [2, 3, 4]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果左边和右边的数量不一致，就会导致不完全解构。</p><ul><li>左边数量大于右边，没有对应到的变量的值就等于 <code>undefined</code>。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">let</span> <span class="token punctuation">[</span>bar<span class="token punctuation">,</span> foo<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

bar <span class="token comment">// 1</span>
foo <span class="token comment">// undefined</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>左边的数量小于右边，并不会发生什么事情，属于不完全解构，但是可以成功。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">let</span> <span class="token punctuation">[</span>x<span class="token punctuation">,</span> y<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
x <span class="token comment">// 1</span>
y <span class="token comment">// 2</span>

<span class="token keyword">let</span> <span class="token punctuation">[</span>a<span class="token punctuation">,</span> <span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token punctuation">,</span> d<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
a <span class="token comment">// 1</span>
b <span class="token comment">// 2</span>
d <span class="token comment">// 4</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>如果等号的右边不是数组（或者严格地说，不是可遍历的结构），那么将会报错。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">let</span> <span class="token punctuation">[</span>foo<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>

<span class="token comment">// 报错 Uncaught TypeError: 1 is not iterable</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_6-2-默认值" tabindex="-1"><a class="header-anchor" href="#_6-2-默认值"><span>6.2 默认值</span></a></h3><ul><li>使用默认值的情况：ES6 内部使用严格相等运算符（===），判断一个位置是否有值，如果没有值才会使用默认值。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// 1. 没有数据对应也代表 undefined</span>
<span class="token keyword">let</span> <span class="token punctuation">[</span>foo <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
foo <span class="token comment">// true</span>

<span class="token comment">// 2. 使用了默认值的变量，不会影响其他变量</span>
<span class="token keyword">let</span> <span class="token punctuation">[</span>x<span class="token punctuation">,</span> y <span class="token operator">=</span> <span class="token string">&#39;b&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// x=&#39;a&#39;, y=&#39;b&#39;</span>

<span class="token comment">// 3. 直接写 undefined 也可以</span>
<span class="token keyword">let</span> <span class="token punctuation">[</span>x<span class="token punctuation">,</span> y <span class="token operator">=</span> <span class="token string">&#39;b&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span> <span class="token keyword">undefined</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// x=&#39;a&#39;, y=&#39;b&#39;</span>

<span class="token comment">// 4. null 并不严格相等 undefined</span>
<span class="token keyword">let</span> <span class="token punctuation">[</span>x <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token keyword">null</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
x <span class="token comment">// null</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>如果默认值是一个表达式，那么这个表达式是惰性求值的，即只有在用到的时候，才会求值。<strong>就等于声明了一个函数表达式一样</strong>，声明函数表达式不会去执行函数。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;aaa&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">let</span> <span class="token punctuation">[</span>x <span class="token operator">=</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token comment">// 等价于下面的代码</span>
<span class="token keyword">let</span> x<span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 一个函数表达式</span>
    x <span class="token operator">=</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    x <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>默认值可以引用解构赋值的其他变量，但该变量必须已经声明。 <ul><li>执行顺序是从左往右依次赋值</li></ul></li></ul><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">let</span> <span class="token punctuation">[</span>x <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> y <span class="token operator">=</span> x<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    
<span class="token comment">// x=1; y=1</span>
<span class="token comment">// x使用默认值，则x为1；y使用默认值，y的默认值为x，所以y=1</span>

<span class="token keyword">let</span> <span class="token punctuation">[</span>x <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> y <span class="token operator">=</span> x<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    
<span class="token comment">// x=2; y=2</span>
<span class="token comment">// x不使用默认值，则x为1；y使用默认值，y的默认值为x，所以y=2</span>

<span class="token keyword">let</span> <span class="token punctuation">[</span>x <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> y <span class="token operator">=</span> x<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span> 
<span class="token comment">// x=1; y=2</span>
<span class="token comment">// x不使用默认值，则x为1；y的默认值为x，但不使用默认值，所以y=2</span>

<span class="token keyword">let</span> <span class="token punctuation">[</span>x <span class="token operator">=</span> y<span class="token punctuation">,</span> y <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>     
<span class="token comment">// ReferenceError: y is not defined</span>
<span class="token comment">// x使用默认值，x的默认值为y，y没有定义所以报错</span>

<span class="token keyword">let</span> <span class="token punctuation">[</span>x <span class="token operator">=</span> y<span class="token punctuation">,</span> y <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  
<span class="token comment">// x=2; y=1</span>
<span class="token comment">// x不使用默认值，所以x=y不会执行，则不会报错，但肯定不推荐这样写</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="七、对象的解构赋值" tabindex="-1"><a class="header-anchor" href="#七、对象的解构赋值"><span>七、对象的解构赋值</span></a></h2><h3 id="_7-1-普通用法" tabindex="-1"><a class="header-anchor" href="#_7-1-普通用法"><span>7.1 普通用法</span></a></h3><p>解构不仅可以用于数组，还可以用于对象。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">let</span> <span class="token punctuation">{</span> foo<span class="token punctuation">,</span> bar <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">foo</span><span class="token operator">:</span> <span class="token string">&#39;aaa&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">bar</span><span class="token operator">:</span> <span class="token string">&#39;bbb&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
foo <span class="token comment">// &quot;aaa&quot;</span>
bar <span class="token comment">// &quot;bbb&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其实上面的完整写法为：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">let</span> <span class="token punctuation">{</span> <span class="token literal-property property">foo</span><span class="token operator">:</span> foo<span class="token punctuation">,</span> <span class="token literal-property property">bar</span><span class="token operator">:</span> bar <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">foo</span><span class="token operator">:</span> <span class="token string">&#39;aaa&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">bar</span><span class="token operator">:</span> <span class="token string">&#39;bbb&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>在 ES6 中若对象名和对象值是同一名字，则可以缩写。（详情看《对象的扩展》）所以本质上是对象的解构有下面几步：</p><ul><li><p>左边和右边 <strong>都是一个对象</strong>。</p></li><li><p>在左边查找 <strong>所有</strong> 属性名一致的变量。</p></li><li><p>然后再在右边查找与左边一样的属性名。</p></li><li><p>最后将右边的值赋值给左边的变量。</p></li><li><p>多（左）对一（右）的关系</p></li></ul><hr><p>使用对象缩写通常会这么用。</p><ul><li>第 2 行： <ul><li>因为 Math 本身也是个对象，所以可以进行解构。</li><li>对象里面有很多方法，而方法也可以用 <code>方法名: function(){}</code> 来表示，所以左边为方法名就可以将对象里的方法提取出来。</li><li>可以起到简写方法名的作用</li></ul></li><li>第 11 行和第 14 行：使用了提取出来的变量。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// 例一</span>
<span class="token keyword">let</span> <span class="token punctuation">{</span> log<span class="token punctuation">,</span> sin<span class="token punctuation">,</span> cos <span class="token punctuation">}</span> <span class="token operator">=</span> Math<span class="token punctuation">;</span>
<span class="token comment">// 等价于 </span>
<span class="token comment">// let { log: log, sin: sin, cos: cos } </span>
<span class="token comment">// = { </span>
<span class="token comment">// log: function log() {}, </span>
<span class="token comment">// sin: function sin() {}, </span>
<span class="token comment">// cos: function cos() {} </span>
<span class="token comment">// }</span>

<span class="token function">sin</span><span class="token punctuation">(</span><span class="token number">3.14159</span><span class="token punctuation">)</span> <span class="token comment">// sin(PI)=0 </span>
<span class="token comment">// 0.00000265358979335273</span>

<span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">// log(e)1 = 0 当x=1时，任何对数等于0</span>
<span class="token comment">// 0</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><strong>对象解构依然会失败</strong>，失败赋值的变量的值等于 <code>undefined</code>。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">let</span> <span class="token punctuation">{</span>foo<span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token literal-property property">bar</span><span class="token operator">:</span> <span class="token string">&#39;baz&#39;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
foo <span class="token comment">// undefined</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_7-2-嵌套用法" tabindex="-1"><a class="header-anchor" href="#_7-2-嵌套用法"><span>7.2 嵌套用法</span></a></h3><ul><li>与数组一样，解构也可以用于 <strong>嵌套结构</strong> 的对象。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">p</span><span class="token operator">:</span> <span class="token punctuation">[</span>
        <span class="token string">&#39;Hello&#39;</span><span class="token punctuation">,</span>
        <span class="token punctuation">{</span> <span class="token literal-property property">y</span><span class="token operator">:</span> <span class="token string">&#39;World&#39;</span> <span class="token punctuation">}</span>
    <span class="token punctuation">]</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">let</span> <span class="token punctuation">{</span> <span class="token literal-property property">p</span><span class="token operator">:</span> <span class="token punctuation">[</span>x<span class="token punctuation">,</span> <span class="token punctuation">{</span> y <span class="token punctuation">}</span><span class="token punctuation">]</span> <span class="token punctuation">}</span> <span class="token operator">=</span> obj<span class="token punctuation">;</span>
x <span class="token comment">// &quot;Hello&quot;</span>
y <span class="token comment">// &quot;World&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意，这时 <code>p</code> 是属性名，也称为【模式】，不是变量，<strong>因此不会被赋值</strong>。如果 <code>p</code> 也要作为变量赋值，可以写成下面这样。其实就是多定义一个变量名为 p 的变量。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">p</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token string">&#39;Hello&#39;</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span> <span class="token literal-property property">y</span><span class="token operator">:</span> <span class="token string">&#39;World&#39;</span> <span class="token punctuation">}</span>
  <span class="token punctuation">]</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">let</span> <span class="token punctuation">{</span> p<span class="token punctuation">,</span> <span class="token literal-property property">p</span><span class="token operator">:</span> <span class="token punctuation">[</span>x<span class="token punctuation">,</span> <span class="token punctuation">{</span> y <span class="token punctuation">}</span><span class="token punctuation">]</span> <span class="token punctuation">}</span> <span class="token operator">=</span> obj<span class="token punctuation">;</span>
<span class="token comment">// 等价于 let { p: p, p: [x, { y }] } = obj;</span>

x <span class="token comment">// &quot;Hello&quot;</span>
y <span class="token comment">// &quot;World&quot;</span>
p <span class="token comment">// [&quot;Hello&quot;, {y: &quot;World&quot;}]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>更复杂的情况：如果进行变量赋值的时候，两边依然是对象，就会进一步触发对象解构。（一般也不会这样写，可读性太差）</li></ul><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> node <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">loc</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">start</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">line</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
      <span class="token literal-property property">column</span><span class="token operator">:</span> <span class="token number">5</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">let</span> <span class="token punctuation">{</span> loc<span class="token punctuation">,</span> <span class="token literal-property property">loc</span><span class="token operator">:</span> <span class="token punctuation">{</span> start <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token literal-property property">loc</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">start</span><span class="token operator">:</span> <span class="token punctuation">{</span> line <span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token operator">=</span> node<span class="token punctuation">;</span>

line <span class="token comment">// 1</span>
loc  <span class="token comment">// Object {start: Object}</span>
start <span class="token comment">// Object {line: 1, column: 5}</span>

<span class="token comment">// 第一个变量赋值：</span>
<span class="token comment">// loc = { start: {line: 1,column: 5} }</span>

<span class="token comment">// 第二个变量赋值：</span>
<span class="token comment">// { start } = { start: {line: 1,column: 5} }</span>
<span class="token comment">// 这时触发第二次对象解构得：start = { line: 1,column: 5 }</span>

<span class="token comment">// 第三个变量赋值：</span>
<span class="token comment">// { start: { line } } = { start: {line: 1,column: 5} }</span>
<span class="token comment">// 这时触发第二次对象解构得： { line } = { line: 1,column: 5 }</span>
<span class="token comment">// 这时触发第三次对象解构得： line = 1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>对于左边没有赋值成功的变量，如果再进行解构则会报错。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">let</span> <span class="token punctuation">{</span> <span class="token literal-property property">foo</span><span class="token operator">:</span> <span class="token punctuation">{</span>bar<span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">baz</span><span class="token operator">:</span> <span class="token string">&#39;baz&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment">// 报错</span>

<span class="token comment">// foo 没有解构成功，所以 {bar} 变量赋值失败，其值为 undefined</span>
<span class="token comment">// 由于左边是对象，所以会继续解构，取到了 bar 变量，</span>
<span class="token comment">// 但右边是 undefined，取其里面的值就会报错</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_7-3-读取到原型链" tabindex="-1"><a class="header-anchor" href="#_7-3-读取到原型链"><span>7.3 读取到原型链</span></a></h3><p>对象解构的右边会读取到其原型链上的值。毕竟在原型链上的值，对象可以通过 <code>对象.变量名</code> 来获取到。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> obj1 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> obj2 <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">foo</span><span class="token operator">:</span> <span class="token string">&#39;bar&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// 将obj2设置为obj1的原型</span>
Object<span class="token punctuation">.</span><span class="token function">setPrototypeOf</span><span class="token punctuation">(</span>obj1<span class="token punctuation">,</span> obj2<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> <span class="token punctuation">{</span> foo <span class="token punctuation">}</span> <span class="token operator">=</span> obj1<span class="token punctuation">;</span>
<span class="token comment">// 等价于 const { foo: foo } = obj1.foo;</span>
<span class="token comment">// 再解析成 const { foo: foo } = { foo: &#39;bar&#39; }</span>
<span class="token comment">// 最后进行赋值 foo = &#39;bar&#39;</span>

foo <span class="token comment">// &quot;bar&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_7-4-默认值" tabindex="-1"><a class="header-anchor" href="#_7-4-默认值"><span>7.4 默认值</span></a></h3><p>对象的解构赋值也可以赋默认值，数组 <strong>判断右边的值</strong> 是否等于 <code>undefined</code>，对象的解构赋值也一样。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">var</span> <span class="token punctuation">{</span>x <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token keyword">undefined</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
x <span class="token comment">// 3</span>

<span class="token keyword">var</span> <span class="token punctuation">{</span>x <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
x <span class="token comment">// null</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,140),o=[p];function c(l,i){return s(),a("div",null,o)}const d=n(t,[["render",c],["__file","ES6-上.html.vue"]]),k=JSON.parse('{"path":"/%E5%AD%A6%E4%B9%A0/%E5%89%8D%E7%AB%AF/%E5%8E%9F%E7%94%9FJS/ES6-%E4%B8%8A.html","title":"ES6-上","lang":"zh-CN","frontmatter":{"description":"ES6-上 一、let ES6 新增了 let 命令，用来声明变量。 1.1 let作用域 （1）声明变量 它的用法类似于var，但是所声明的变量，只在let 命令 所在的代码块内有效。 下面为例子： 下面的代码中使用 let 声明的变量 a ，在第 6 行就无法输出，而使用 var 声明的变量 b 就可以在 第 7 行输出。 for循环的计数器，就很...","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/%E5%AD%A6%E4%B9%A0/%E5%89%8D%E7%AB%AF/%E5%8E%9F%E7%94%9FJS/ES6-%E4%B8%8A.html"}],["meta",{"property":"og:site_name","content":"博客演示"}],["meta",{"property":"og:title","content":"ES6-上"}],["meta",{"property":"og:description","content":"ES6-上 一、let ES6 新增了 let 命令，用来声明变量。 1.1 let作用域 （1）声明变量 它的用法类似于var，但是所声明的变量，只在let 命令 所在的代码块内有效。 下面为例子： 下面的代码中使用 let 声明的变量 a ，在第 6 行就无法输出，而使用 var 声明的变量 b 就可以在 第 7 行输出。 for循环的计数器，就很..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-02-24T04:33:47.000Z"}],["meta",{"property":"article:author","content":"hahg"}],["meta",{"property":"article:modified_time","content":"2024-02-24T04:33:47.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"ES6-上\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-02-24T04:33:47.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"hahg\\"}]}"]]},"headers":[{"level":2,"title":"一、let","slug":"一、let","link":"#一、let","children":[{"level":3,"title":"1.1 let作用域","slug":"_1-1-let作用域","link":"#_1-1-let作用域","children":[]},{"level":3,"title":"1.2  不存在变量提升","slug":"_1-2-不存在变量提升","link":"#_1-2-不存在变量提升","children":[]},{"level":3,"title":"1.3 暂时性死区","slug":"_1-3-暂时性死区","link":"#_1-3-暂时性死区","children":[]},{"level":3,"title":"1.4 不允许重复声明","slug":"_1-4-不允许重复声明","link":"#_1-4-不允许重复声明","children":[]}]},{"level":2,"title":"二、块级作用域","slug":"二、块级作用域","link":"#二、块级作用域","children":[{"level":3,"title":"2.1 为什么需要块级作用域？","slug":"_2-1-为什么需要块级作用域","link":"#_2-1-为什么需要块级作用域","children":[]},{"level":3,"title":"2.2 ES6 的块级作用域","slug":"_2-2-es6-的块级作用域","link":"#_2-2-es6-的块级作用域","children":[]}]},{"level":2,"title":"三、 const 关键词","slug":"三、-const-关键词","link":"#三、-const-关键词","children":[{"level":3,"title":"3.1 基本用法","slug":"_3-1-基本用法","link":"#_3-1-基本用法","children":[]},{"level":3,"title":"3.2 本质","slug":"_3-2-本质","link":"#_3-2-本质","children":[]}]},{"level":2,"title":"四、顶层对象的属性","slug":"四、顶层对象的属性","link":"#四、顶层对象的属性","children":[]},{"level":2,"title":"五、globalThis 对象","slug":"五、globalthis-对象","link":"#五、globalthis-对象","children":[]},{"level":2,"title":"六、变量的解构赋值","slug":"六、变量的解构赋值","link":"#六、变量的解构赋值","children":[{"level":3,"title":"6.1 基本用法","slug":"_6-1-基本用法","link":"#_6-1-基本用法","children":[]},{"level":3,"title":"6.2 默认值","slug":"_6-2-默认值","link":"#_6-2-默认值","children":[]}]},{"level":2,"title":"七、对象的解构赋值","slug":"七、对象的解构赋值","link":"#七、对象的解构赋值","children":[{"level":3,"title":"7.1 普通用法","slug":"_7-1-普通用法","link":"#_7-1-普通用法","children":[]},{"level":3,"title":"7.2 嵌套用法","slug":"_7-2-嵌套用法","link":"#_7-2-嵌套用法","children":[]},{"level":3,"title":"7.3 读取到原型链","slug":"_7-3-读取到原型链","link":"#_7-3-读取到原型链","children":[]},{"level":3,"title":"7.4 默认值","slug":"_7-4-默认值","link":"#_7-4-默认值","children":[]}]}],"git":{"createdTime":1708749227000,"updatedTime":1708749227000,"contributors":[{"name":"hahg2000","email":"61403802+hahg2000@users.noreply.github.com","commits":1}]},"readingTime":{"minutes":13.31,"words":3993},"filePathRelative":"学习/前端/原生JS/ES6-上.md","localizedDate":"2024年2月24日","excerpt":"\\n<h2>一、let</h2>\\n<p>ES6 新增了 <code>let</code> 命令，用来声明变量。</p>\\n<h3>1.1 let作用域</h3>\\n<h4>（1）声明变量</h4>\\n<ul>\\n<li>它的用法类似于<code>var</code>，但是所声明的变量，只在<code>let</code> 命令 <strong>所在的代码块内有效</strong>。</li>\\n</ul>\\n<hr>\\n<p>下面为例子：</p>\\n<p>下面的代码中使用 <code>let</code> 声明的变量 a ，在第 6 行就无法输出，而使用 <code>var</code> 声明的变量 b 就可以在 第 7 行输出。</p>","autoDesc":true}');export{d as comp,k as data};
