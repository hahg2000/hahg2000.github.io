import{_ as o,W as e,X as c,Y as n,Z as s,$ as p,a2 as t,C as l}from"./framework-0bc3c581.js";const u={},i=n("h1",{id:"算法三-7月28",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#算法三-7月28","aria-hidden":"true"},"#"),s(" 算法三-7月28")],-1),k=n("h2",{id:"十八、-最接近的三数之和",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#十八、-最接近的三数之和","aria-hidden":"true"},"#"),s(" 十八、 "),n("strong",null,"最接近的三数之和")],-1),r={href:"https://mp.weixin.qq.com/s?__biz=MzU4NDE3MTEyMA==&mid=2247484458&idx=2&sn=60450b940e15b4e20026aa0f496c9cb1&chksm=fd9caf35caeb2623c907517b4d3328c6aba56ed1ed386a996fd174ce00c44ecb446734c95768&cur_album_id=1715134171561410565&scene=189#wechat_redirect",target:"_blank",rel:"noopener noreferrer"},d=t(`<blockquote><p>给定一个包括 n 个整数的数组 nums 和 一个目标值 target。找出 nums 中的三个整数，使得它们的和与 target 最接近。返回这三个数的和。</p><p>假定每组输入只存在唯一答案。</p><p>示例：</p><ul><li>输入：nums = [-1,2,1,-4], target = 1</li><li>输出：2</li><li>解释：与 target 最接近的和是 2 (-1 + 2 + 1 = 2) 。</li></ul><p>提示：</p><ul><li>3 &lt;= nums.length &lt;= 10<sup>3</sup></li><li>-10<sup>3</sup> &lt;= nums[i] &lt;= 10<sup>3</sup></li><li>-10<sup>4</sup> &lt;= target &lt;= 10<sup>4</sup></li></ul></blockquote><h3 id="_1-略解1" tabindex="-1"><a class="header-anchor" href="#_1-略解1" aria-hidden="true">#</a> （1）略解1</h3><p>这个和三数之和一样的思路，需要：这里是最接近目标数，所以更新最终结果之前，需要判断是否比现在的结果更接近。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
  <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">threeSumClosest</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> t<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token comment">// 排序数组</span>
    <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 初始化答案，用于比较是否最接近target</span>
    <span class="token keyword">int</span> ans <span class="token operator">=</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> nums<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> nums<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> n <span class="token operator">=</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
    
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// 去除重复数字</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> nums<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>
      <span class="token comment">// 初始化左右两个指针</span>
      <span class="token keyword">int</span> j <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> k <span class="token operator">=</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
      <span class="token keyword">while</span> <span class="token punctuation">(</span>j <span class="token operator">&lt;</span> k<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> sum <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> nums<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token comment">// 判断当前是否最接近目标数</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>sum <span class="token operator">-</span> t<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>ans <span class="token operator">-</span> t<span class="token punctuation">)</span><span class="token punctuation">)</span> ans <span class="token operator">=</span> sum<span class="token punctuation">;</span>
        
        <span class="token comment">// 如果相等直接结束函数</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>ans <span class="token operator">==</span> t<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token keyword">return</span> t<span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>sum <span class="token operator">&gt;</span> t<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token comment">// 大于target则移动k</span>
          k<span class="token operator">--</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>sum <span class="token operator">&lt;</span> t<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token comment">// 小于target则移动j</span>
          j<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> ans<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>时间复杂度：排序的复杂度为 O ( logn ) ，对于每个 i 而言，最坏的情况 j 和 k 都要扫描一遍数组的剩余部分，复杂度为 O ( n<sup>2</sup> )。整体复杂度为 O ( n<sup>2</sup> )</p><p>空间复杂度：O ( 1 )</p><h2 id="十九、托普利茨矩阵" tabindex="-1"><a class="header-anchor" href="#十九、托普利茨矩阵" aria-hidden="true">#</a> 十九、托普利茨矩阵</h2>`,7),m={href:"https://mp.weixin.qq.com/s?__biz=MzU4NDE3MTEyMA==&mid=2247484556&idx=2&sn=7f2aabbcb2362eb3ccadb401c96c2ea7&chksm=fd9caf93caeb2685ce46cdeed4f4d266b96978f3aec9cf4bd0ba51ce8d12975a44eaf66c4401&cur_album_id=1715134171561410565&scene=189#wechat_redirect",target:"_blank",rel:"noopener noreferrer"},v=t(`<blockquote><p>给你一个 m x n 的矩阵 matrix 。如果这个矩阵是托普利茨矩阵，返回 true ；否则，返回 false 。</p><p>如果矩阵上 <strong>每一条</strong> 由左上到右下的对角线上的元素都相同，那么这个矩阵是 托普利茨矩阵 。</p><ul><li>输入：matrix =</li></ul><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>[
	[1, 2, 3, 4],
	[5, 1, 2, 3],
	[9, 5, 1, 2]
]
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>输出：true</li><li>解释：在上述矩阵中, 其对角线为: &quot;[9]&quot;, &quot;[5, 5]&quot;, &quot;[1, 1, 1]&quot;, &quot;[2, 2, 2]&quot;, &quot;[3, 3]&quot;, &quot;[4]&quot;。 各条对角线上的所有元素均相同, 因此答案是 True 。</li></ul><p>提示：</p><ul><li>m == matrix.length</li><li>n == matrix[i].length</li><li>1 &lt;= m, n &lt;= 20</li><li>0 &lt;= matrix[i][j] &lt;= 99</li></ul><p>进阶：</p><ul><li>如果矩阵存储在磁盘上，并且内存有限，以至于一次最多只能将矩阵的一行加载到内存中，该怎么办？</li><li>如果矩阵太大，以至于一次只能将不完整的一行加载到内存中，该怎么办？</li></ul></blockquote><h3 id="_1-略解1-1" tabindex="-1"><a class="header-anchor" href="#_1-略解1-1" aria-hidden="true">#</a> （1）略解1</h3><p>最直观的方式就是向我们平常那样扫描每一个对角线。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
  <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isToeplitzMatrix</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> matrix<span class="token punctuation">)</span> <span class="token punctuation">{</span>

    <span class="token comment">// 在第1行向右扫描数字</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span> i <span class="token operator">&lt;</span> matrix<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// 记录对角线上的第1个数</span>
      <span class="token keyword">int</span> first <span class="token operator">=</span> matrix<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
      <span class="token comment">// 然后向右下角遍历</span>
      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span> j <span class="token operator">&lt;</span> matrix<span class="token punctuation">.</span>length <span class="token operator">&amp;&amp;</span> j <span class="token operator">+</span> i <span class="token operator">&lt;</span> matrix<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length <span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>first <span class="token operator">!=</span> matrix<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">+</span> i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    
    <span class="token comment">// 在第1列向下扫描数字</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span> <span class="token punctuation">;</span> i <span class="token operator">&lt;</span> matrix<span class="token punctuation">.</span>length <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// 记录对角线上的第1个数</span>
      <span class="token keyword">int</span> first <span class="token operator">=</span> matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
      <span class="token comment">// 然后向右下角遍历 </span>
      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span> j <span class="token operator">&lt;</span> matrix<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length <span class="token operator">&amp;&amp;</span> j <span class="token operator">+</span> i <span class="token operator">&lt;</span> matrix<span class="token punctuation">.</span>length <span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>first <span class="token operator">!=</span> matrix<span class="token punctuation">[</span>j <span class="token operator">+</span> i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-略解2" tabindex="-1"><a class="header-anchor" href="#_2-略解2" aria-hidden="true">#</a> （2）略解2</h3><p>但这样太麻烦，我们需要找到其中的规律，利用好循环这个特点。</p><p>做法：每次遍历的时候，判断左上角的数和当前的数是否相等。</p><p>原理：只要对角线上有不同的数字，遍历每个数字的时候必然会发现。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
  <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isToeplitzMatrix</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> matrix<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> m <span class="token operator">=</span> matrix<span class="token punctuation">.</span>length<span class="token punctuation">,</span> n <span class="token operator">=</span> matrix<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span>
    <span class="token comment">// 从第2行开始遍历</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// 每行从第2列遍历</span>
      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">!=</span> matrix<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-略解3" tabindex="-1"><a class="header-anchor" href="#_3-略解3" aria-hidden="true">#</a> （3）略解3</h3><p>第 3 个解法就很妙，但代码不太好实现。</p><p>思路：遍历每行，将当前行的倒数第 1 个元素去掉，比较下一行去掉第 1 个元素的数组。其实就是第 1 个解法的集体版，一次性将当前行的所有对角进行比较。</p><p>但在 Java 里不太好删除第 1 个元素和倒数第 1 个元素，我们可以使用 Javascript 来解决（最近好久没有写前端，有点生疏了。。。。）</p><ul><li>第 3 行和第 6 行：使用了 ES6 的扩展运算符，目的是将数组内容复制出来，不然在删除元素时，会影响到原数组。使用其他方法也可以。</li><li>比较数组：因为数组里 <strong>都是基本类型，而且顺序都一致</strong>，所以可以投机，将数组转成字符串后直接比较。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">isToeplitzMatrix</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">matrix</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> matrix<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> top <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span>matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span>
    top<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

    <span class="token keyword">let</span> bottom <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span>matrix<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span>
    bottom<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>top<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> bottom<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token boolean">false</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> <span class="token boolean">true</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-进阶" tabindex="-1"><a class="header-anchor" href="#_4-进阶" aria-hidden="true">#</a> （4）进阶</h3><ul><li>如果矩阵存储在磁盘上，并且内存有限，以至于一次最多只能将矩阵的一行加载到内存中，该怎么办？</li></ul><p>在覆盖上一行之前进行判断即可。</p><ul><li>如果矩阵太大，以至于一次只能将不完整的一行加载到内存中，该怎么办？</li></ul><p>存储的时候按照「数组」的形式进行存储（行式存储），然后读取的时候计算偏移量直接读取其「左上角」或者「右下角」的值。</p><h2 id="二十、-四数之和" tabindex="-1"><a class="header-anchor" href="#二十、-四数之和" aria-hidden="true">#</a> 二十、 <strong>四数之和</strong></h2>`,21),b={href:"https://mp.weixin.qq.com/s?__biz=MzU4NDE3MTEyMA==&mid=2247484556&idx=1&sn=8fd60c49374a3e46115bde19ae385b6e&chksm=fd9caf93caeb268545fbbb031ad7d3230cc85cd64a4875d79dcd7e4749f3cec77e5f6062d08c&cur_album_id=1715134171561410565&scene=189#wechat_redirect",target:"_blank",rel:"noopener noreferrer"},w=t(`<blockquote><p>给定一个包含 n 个整数的数组 nums 和一个目标值 target，判断 nums 中是否存在四个元素 a，b，c 和 d ，使得 a + b + c + d 的值与 target 相等？</p><p>找出所有满足条件且不重复的四元组。</p><p>注意：答案中不可以包含重复的四元组。</p><p>示例：</p><ul><li>给定数组 nums = [1, 0, -1, 0, -2, 2]，和 target = 0。</li><li>满足要求的四元组集合为：[ [-1, 0, 0, 1], [-2, -1, 1, 2], [-2, 0, 0, 2] ]</li></ul></blockquote><h3 id="_1-略解1-2" tabindex="-1"><a class="header-anchor" href="#_1-略解1-2" aria-hidden="true">#</a> （1）略解1</h3><p>四数之和与之前的三数之和的思路一样，不过是多了一层循环。i 和 j 循环每一个字符，然后 k 和 p 作为两个指针进行移动。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
  <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> <span class="token function">fourSum</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> t<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> n <span class="token operator">=</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> ans <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 确定第一个数</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> 
      <span class="token comment">// 对第一个数进行去重（相同的数只取第一个）</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> nums<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span> 
      <span class="token comment">// 确定第二个数</span>
      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> 
        <span class="token comment">// 对第二个数进行去重（相同的数只取第一个）</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">&gt;</span> i <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> nums<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span> 
        
        <span class="token comment">// 确定k和p两个指针，即第三个数和第四个数</span>
        <span class="token keyword">int</span> k <span class="token operator">=</span> j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> p <span class="token operator">=</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>k <span class="token operator">&lt;</span> p<span class="token punctuation">)</span> <span class="token punctuation">{</span>

          <span class="token comment">// 对第三个数进行去重（相同的数只取第一个）</span>
          <span class="token keyword">while</span> <span class="token punctuation">(</span>k <span class="token operator">&gt;</span> j <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> k <span class="token operator">&lt;</span> n <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">==</span> nums<span class="token punctuation">[</span>k <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> k<span class="token operator">++</span><span class="token punctuation">;</span> 
          
          <span class="token comment">// 如果 k 跳过相同元素之后的位置超过了 p，本次循环结束</span>
          <span class="token keyword">if</span> <span class="token punctuation">(</span>k <span class="token operator">&gt;=</span> p<span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>

          <span class="token comment">// 计算总和</span>
          <span class="token keyword">int</span> sum <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> nums<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">+</span> nums<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">;</span>
          <span class="token comment">// 如果相等则添加到答案里</span>
          <span class="token keyword">if</span> <span class="token punctuation">(</span>sum <span class="token operator">==</span> t<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            ans<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// 然后移动左指针</span>
            k<span class="token operator">++</span><span class="token punctuation">;</span>
          <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>sum <span class="token operator">&gt;</span> t<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 如果大了移动右指针</span>
            p<span class="token operator">--</span><span class="token punctuation">;</span>
          <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>sum <span class="token operator">&lt;</span> t<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 如果小了移动左指针</span>
            k<span class="token operator">++</span><span class="token punctuation">;</span>
          <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> ans<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>时间复杂度：<code>i</code> 和 <code>j</code> 是直接枚举确定，复杂度为 ，当确定下来 <code>i</code> 和 <code>j</code> 之后，通过双指针确定 <code>k</code> 和 <code>p</code> ，也就是对于每一组 <code>i</code> 和 <code>j</code> 而言复杂度为 O ( n ) 。总的复杂度为 O ( n<sup>3</sup> )</li><li>空间复杂度：O( n<sup>2</sup> )</li></ul><h3 id="_2-总结普遍情况" tabindex="-1"><a class="header-anchor" href="#_2-总结普遍情况" aria-hidden="true">#</a> （2）总结普遍情况</h3><p>在力扣评论里，有老哥已经总结了 n 数之和问题的通解。</p>`,7),f={href:"https://leetcode.cn/problems/4sum/solution/2sum-3sum-4sum-nsum-by-23wewerwer/",target:"_blank",rel:"noopener noreferrer"},h=n("h2",{id:"二十一、猜字谜",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#二十一、猜字谜","aria-hidden":"true"},"#"),s(" 二十一、猜字谜")],-1),y={href:"https://mp.weixin.qq.com/s?__biz=MzU4NDE3MTEyMA==&mid=2247484598&idx=1&sn=36c9bf700771fd84ebf1ad11300260dc&chksm=fd9cafa9caeb26bf620abe89f79f4dd225e0c01dcec59965e1f9f7f75860e84695205b732282&cur_album_id=1715134171561410565&scene=189#wechat_redirect",target:"_blank",rel:"noopener noreferrer"},g=t(`<blockquote><p>外国友人仿照中国字谜设计了一个英文版猜字谜小游戏，请你来猜猜看吧。</p><p>字谜的迷面 puzzle 按字符串形式给出，如果一个单词 word 符合下面两个条件，那么它就可以算作谜底：</p><ul><li>单词 word 中包含谜面 puzzle 的第一个字母。</li><li>单词 word 中的每一个字母都可以在谜面 puzzle 中找到。</li></ul><p>例如，如果字谜的谜面是 &quot;abcdefg&quot;，那么可以作为谜底的单词有 &quot;faced&quot;, &quot;cabbage&quot;, 和 &quot;baggage&quot;；而 &quot;beefed&quot;（不含字母 &quot;a&quot;）以及 &quot;based&quot;（其中的 &quot;s&quot; 没有出现在谜面中）都不能作为谜底。</p><p>返回一个答案数组 answer，数组中的每个元素 answer[i] 是在给出的单词列表 words 中可以作为字谜迷面 puzzles[i] 所对应的谜底的单词数目。</p><p>示例：</p><ul><li>输入：words = [&quot;aaaa&quot;,&quot;asas&quot;,&quot;able&quot;,&quot;ability&quot;,&quot;actt&quot;,&quot;actor&quot;,&quot;access&quot;], puzzles = [&quot;aboveyz&quot;,&quot;abrodyz&quot;,&quot;abslute&quot;,&quot;absoryz&quot;,&quot;actresz&quot;,&quot;gaswxyz&quot;]</li><li>输出：[1,1,3,2,4,0]</li><li>解释： <ul><li>1 个单词可以作为 &quot;aboveyz&quot; 的谜底 : &quot;aaaa&quot;</li><li>1 个单词可以作为 &quot;abrodyz&quot; 的谜底 : &quot;aaaa&quot;</li><li>3 个单词可以作为 &quot;abslute&quot; 的谜底 : &quot;aaaa&quot;, &quot;asas&quot;, &quot;able&quot;</li><li>2 个单词可以作为 &quot;absoryz&quot; 的谜底 : &quot;aaaa&quot;, &quot;asas&quot;</li><li>4 个单词可以作为 &quot;actresz&quot; 的谜底 : &quot;aaaa&quot;, &quot;asas&quot;, &quot;actt&quot;, &quot;access&quot;没有单词可以作为 &quot;gaswxyz&quot; 的谜底，因为列表中的单词都不含字母 &#39;g&#39;。</li></ul></li></ul><p>提示：</p><ul><li>1 &lt;= words.length &lt;= 10<sup>5</sup></li><li>4 &lt;= words[i].length &lt;= 50</li><li>1 &lt;= puzzles.length &lt;= 10<sup>4</sup></li><li>puzzles[i].length == 7</li><li>words[i][j], puzzles[i][j] 都是小写英文字母。</li><li>每个 puzzles[i] 所包含的字符都不重复。</li></ul></blockquote><h3 id="_1-略解1-3" tabindex="-1"><a class="header-anchor" href="#_1-略解1-3" aria-hidden="true">#</a> （1）略解1</h3><p>这道题是困难题，所以暴力解法一定行不同。那先看下暴力解法。</p><p>题目简单来说就是谜面的第 1 个字符要在谜底里，而且谜底的全部字符在谜面里。</p><p>所以直接遍历两个数组，数组里再有个循环，来判断谜面的所有字符是否在谜底里。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
  <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> <span class="token function">findNumOfValidWords</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> words<span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> puzzles<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> ans <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 遍历谜面数组</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> puzzles<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// 用于存放当前谜面所对应谜底的数量</span>
      <span class="token keyword">int</span> wNum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
      <span class="token class-name">String</span> pTemp <span class="token operator">=</span> puzzles<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
      <span class="token comment">// 取出谜面的第1个字符</span>
      <span class="token keyword">char</span> pFisrtWord <span class="token operator">=</span> pTemp<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      
      <span class="token comment">// 遍历谜底数组</span>
      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> words<span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">String</span> wTemp <span class="token operator">=</span> words<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>
				<span class="token comment">// 判断是否符合开头标准</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>wTemp<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>pFisrtWord <span class="token operator">+</span> <span class="token string">&quot;&quot;</span> <span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token class-name">StringBuilder</span> sb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span>wTemp<span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token keyword">boolean</span> flag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
          <span class="token comment">// 遍历谜底的所有字符</span>
          <span class="token keyword">while</span> <span class="token punctuation">(</span>sb<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 如果谜底里有1个字符不存在于谜面中，则直接退出循环</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>pTemp<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>sb<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
              flag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
              <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
              sb<span class="token punctuation">.</span><span class="token function">deleteCharAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
          <span class="token punctuation">}</span>
          <span class="token comment">// 如果遍历完成后，每个字符都存在谜面中，则记录当前的谜底</span>
          <span class="token keyword">if</span> <span class="token punctuation">(</span>flag<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            wNum<span class="token operator">++</span><span class="token punctuation">;</span>
          <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
      ans<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>wNum<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> ans<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>时间复杂度：O( words.length * puzzles.length * words[i].length )，遍历谜面数组需要 10<sup>5</sup> ，遍历谜底数组需要 10<sup>4</sup> ，单单两层遍历就已经 10<sup>9</sup> ，远大于 10<sup>7</sup> ，这还没加上遍历字符串的字符，所以必定超时。</li><li>空间复杂度：O ( puzzles.length )</li></ul><h3 id="_2-状态压缩" tabindex="-1"><a class="header-anchor" href="#_2-状态压缩" aria-hidden="true">#</a> （2）状态压缩</h3><p>这道题需要使用状态压缩。根据题目可知，谜面的长度只有 7，而谜底的长度高达 50。</p><p><strong>所以不妨将谜面的所有组合遍历出来</strong>，然后再对比谜底，再对比谜底数组，就能知道有多少谜底对应了。</p><p>假设 <code>puzzle</code> 是 <code>gabc</code> ，则取重复字符的谜底有可能为几类呢？</p><ul><li><p>排列组合一下： <code>g</code>、<code>ga</code>、<code>gb</code>、<code>gc</code>、<code>gab</code>、<code>gac</code>、<code>gbc</code>、<code>gabc</code></p></li><li><p>我们需要状态压缩下，使用 0 和 1 代替，只保留字符是否存在的信息。</p><ul><li>例如 <code>g</code> ：1000（对应原字符串）</li><li><code>ga</code> ：1100</li><li><code>gab</code> ：1110</li></ul></li><li><p>然后我们将谜面也可以这样表示</p></li></ul><p>谜面可以出现重复字符而且字符顺序可以改变。我们使用位运算来记录所出现的字符。</p><ul><li><code>t &gt;&gt; u &amp; 1</code> ： <ul><li><code>t &gt;&gt; u</code> ：将 t 向右位移到 u 指向的位置</li><li><code>&amp; 1</code> ：与 1 比较，如果是 0 则返回 0 ；如果是 1 返回 1。用于判断当前位是否等于 1</li></ul></li><li><code>t += 1 &lt;&lt; u</code> ：将指定位为 1</li><li>最后返回的是记录了当前字符串，26 个字母所出现的情况</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 将 str 所包含的字母用二进制标识</span>
<span class="token comment">// 如果 str = abz 则对应的二进制为 100...011 (共 26 位，从右往左是 a - z)</span>
<span class="token keyword">int</span> <span class="token function">getBin</span><span class="token punctuation">(</span><span class="token class-name">String</span> str<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">int</span> t <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> cs <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">char</span> c <span class="token operator">:</span> cs<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 每一位字符所对应二进制数字中哪一位</span>
    <span class="token keyword">int</span> u <span class="token operator">=</span> c <span class="token operator">-</span> <span class="token char">&#39;a&#39;</span><span class="token punctuation">;</span>
    <span class="token comment">// 如果当前位置为 0，代表还没记录过，则进行记录 (不重复记录)</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>t <span class="token operator">&gt;&gt;</span> u <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> t <span class="token operator">+=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> u<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> t<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后将每个这个变量存在 map 里，key 为字母出现情况，value 为出现次数。如果有一样的字母出现情况就加 1 。<strong>最后就需要将字母出现情况和谜面比较。</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> <span class="token function">findNumOfValidWords</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> ws<span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> ps<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 转用 「哈希表」来统计出所有的 word 所对应的二进制数值</span>
  <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> w <span class="token operator">:</span> ws<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> t <span class="token operator">=</span> <span class="token function">getBin</span><span class="token punctuation">(</span>w<span class="token punctuation">)</span><span class="token punctuation">;</span>
    map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> map<span class="token punctuation">.</span><span class="token function">getOrDefault</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token comment">// 判定每个 puzzle 有多少个谜底</span>
  <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> ans <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> p <span class="token operator">:</span> ps<span class="token punctuation">)</span> ans<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token function">getCnt</span><span class="token punctuation">(</span>map<span class="token punctuation">,</span> p<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> ans<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后我们需要固定谜底的首字符，然后通过循环计算出可能的谜面。</p><ul><li>第 10 行 <code>i &lt; (1 &lt;&lt; (m - 1)</code> ：<code>1 &lt;&lt; (m-1)</code> 相当于 2<sup>m-1</sup> ，因为考虑到其他字符的两种状态（取或者不取）。</li><li>第 16 行 <code>if (((i &gt;&gt; (j - 1)) &amp; 1) != 0) u += 1 &lt;&lt; (cs[j] - &#39;a&#39;);</code> ： <ul><li><code>i &gt;&gt; (j - 1)</code> ：我们使用 i 变量的二进制，来表示谜面的字母情况，然后取出变量 i 的指定位置的数字（j-1）</li><li><code>(i &gt;&gt; (j - 1)) &amp; 1) != 0</code> ：判断指定位（j-1）是否等于 1</li><li><code>(cs[j] - &#39;a&#39;)</code> ：找到当前字母在 26 个字母的位置</li><li><code>u += 1 &lt;&lt; (cs[j] - &#39;a&#39;);</code> ：将指定位置的数字置为 1 ，即更新当前字符串字母出现的情况。</li></ul></li><li>第 19 行 <code>if (map.containsKey(u)) ans += map.get(u);</code><ul><li><code>map.containsKey(u)</code> ：变量 u 表示的是谜底 26 个字母出现的情况，然后在 map 查找是否有谜底相同</li><li><code>ans += map.get(u)</code> ：如果在 map 查找到则将出现的次数相加，最后得到的是所有谜面所对应的谜底情况。</li></ul></li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">int</span> <span class="token function">getCnt</span><span class="token punctuation">(</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> map<span class="token punctuation">,</span> <span class="token class-name">String</span> str<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">int</span> ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token keyword">int</span> m <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> cs <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// 当前 puzzle 的首个字符在二进制数值中的位置</span>
  <span class="token keyword">int</span> first <span class="token operator">=</span> cs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token char">&#39;a&#39;</span><span class="token punctuation">;</span>
  <span class="token comment">// 我们需要先固定 puzzle 的首位字母，然后枚举剩余的 6 位是否保留</span>
  <span class="token comment">// 由于是二进制，每一位共有 0 和 1 两种选择，因此共有 2^6 种可能性，也就是 2^6 = 1 &lt;&lt; (7 - 1) = 64 种</span>
  <span class="token comment">// i 代表了所有「保留首个字母」的子集的「后六位」的二进制表示</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span>m <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// u 代表了当前可能的谜底。先将首字母置为1</span>
    <span class="token keyword">int</span> u <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> first<span class="token punctuation">;</span>
    <span class="token comment">// 枚举谜面的「首个字母」之后的位数</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// 如果当前位为 1，代表该位置要保留，将该位置的字母追加到谜底 u 中</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>i <span class="token operator">&gt;&gt;</span> <span class="token punctuation">(</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> u <span class="token operator">+=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span>cs<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token char">&#39;a&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 查询这样的字符是否出现在 \`words\` 中，出现了多少次</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>u<span class="token punctuation">)</span><span class="token punctuation">)</span> ans <span class="token operator">+=</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>u<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> ans<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>时间复杂度： <ul><li>首先遍历 words 的数组，然后遍历每一个 word 的全部字符，来计算出字母出现情况。</li><li>接着遍历 puzzles 的数组，然后遍历每一个 puzzle，因为 puzzle 最长为 7，所以可以看作常数。</li><li>则相加起来为：<code>O( words.length * words[i].length + puzzles.length )</code></li></ul></li><li>空间复杂度：<code>word</code> 和 <code>puzzle</code> 分别具有最大长度和固定长度，使用空间主要取决于量数组的长度。复杂度：<code>O( words.length + puzzles.length )</code></li></ul><h2 id="二十二、删除链表的倒数第-n-个结点" tabindex="-1"><a class="header-anchor" href="#二十二、删除链表的倒数第-n-个结点" aria-hidden="true">#</a> 二十二、删除链表的倒数第 N 个结点</h2>`,22),q={href:"https://mp.weixin.qq.com/s?__biz=MzU4NDE3MTEyMA==&mid=2247484598&idx=2&sn=eba1872ff8297ce0bebe36736b76eb87&chksm=fd9cafa9caeb26bfdcf240996d22e3be915ef666e3c2b543ce5975e39c1307a8fb92d1bc6ecf&cur_album_id=1715134171561410565&scene=189#wechat_redirect",target:"_blank",rel:"noopener noreferrer"},_=t(`<blockquote><p>给你一个链表，删除链表的倒数第 n 个结点，并且返回链表的头结点。</p><p>进阶：你能尝试使用一趟扫描实现吗？</p><p>示例 1：</p><ul><li>输入：head = [1,2,3,4,5], n = 2</li><li>输出：[1,2,3,5]</li></ul><p>示例 2：</p><ul><li>输入：head = [1], n = 1</li><li>输出：[]</li></ul><p>提示：</p><ul><li>链表中结点的数目为 <code>sz</code></li><li>1 &lt;= sz &lt;= 30</li><li>0 &lt;= Node.val &lt;= 100</li><li>1 &lt;= n &lt;= sz</li></ul></blockquote><h3 id="_1-快慢指针" tabindex="-1"><a class="header-anchor" href="#_1-快慢指针" aria-hidden="true">#</a> （1）快慢指针</h3><p>这道题难度是中等，其实思路很简单，有点简单题的趋势。使用的是快慢指针。</p><p>因为在现实生活中，可能会遇到类似的问题。例如短的尺子量长的东西，尺子不断移动，最后移动到最后就是倒数长度，尺子头尾就类似于快慢指针。</p><p>这里设计到指针，在之前有提过，遇到链表问题，建议设置空的头指针，可以简化边界值判断。</p><ul><li>如果链表长度为 1 ，则需要判断 <code> if (head.next == null) return null;</code></li><li>如果链表长度为 2，并且 n = 2，即删除的是第 1 个元素，尾指针会指向 null，则不能执行第 10 行 <code>last.next != null</code> ，需要额外判断该种情况。当尾指针指向 null 时，直接返回 <code>first.next</code></li><li>如果加上空的头指针： <ul><li>长度为 1，头指针指向空头指针，尾指针指向链表元素，然后删除元素—— <code>first.next = first.next.next</code>，这时 <code>first.next.next</code> 是可以取到 null，而不是报错。</li><li>长度为 2，并且 n = 2，这时尾指针会指向链表最后一个元素，第 10 行 <code>last.next</code> 不会报错。</li></ul></li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
  <span class="token keyword">public</span> <span class="token class-name">ListNode</span> <span class="token function">removeNthFromEnd</span><span class="token punctuation">(</span><span class="token class-name">ListNode</span> head<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 新建空的头指针</span>
    <span class="token class-name">ListNode</span> empty <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 将空头指针连接上原来链表</span>
    empty<span class="token punctuation">.</span>next <span class="token operator">=</span> head<span class="token punctuation">;</span>
    <span class="token comment">// 将头尾指针指向空头指针</span>
    <span class="token class-name">ListNode</span> first <span class="token operator">=</span> empty<span class="token punctuation">;</span>
    <span class="token class-name">ListNode</span> last <span class="token operator">=</span> empty<span class="token punctuation">;</span>
    
    <span class="token comment">// 移动尾指针</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      last <span class="token operator">=</span> last<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    <span class="token comment">// 同时移动头尾指针</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>last<span class="token punctuation">.</span>next <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      first <span class="token operator">=</span> first<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
      last <span class="token operator">=</span> last<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 删除元素</span>
    first<span class="token punctuation">.</span>next <span class="token operator">=</span> first<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next<span class="token punctuation">;</span>

    <span class="token keyword">return</span> empty<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>时间复杂度：需要扫描的长度为链表的长度。复杂度为 O ( n )</li><li>空间复杂度：O ( 1 )</li></ul><h2 id="二十三、-至少有k个重复字符的最长子串" tabindex="-1"><a class="header-anchor" href="#二十三、-至少有k个重复字符的最长子串" aria-hidden="true">#</a> 二十三、 <strong>至少有K个重复字符的最长子串</strong></h2>`,9),x={href:"https://mp.weixin.qq.com/s?__biz=MzU4NDE3MTEyMA==&mid=2247484728&idx=1&sn=c72b71bc0b6fce4cf29ca756a8a4eb36&chksm=fd9cae27caeb2731b785e76ae1966688f6a6661977916e25926a357117b7932caa3b51815361&cur_album_id=1715134171561410565&scene=189#wechat_redirect",target:"_blank",rel:"noopener noreferrer"},j=t(`<blockquote><p>给你一个字符串 s 和一个整数 k ，请你找出 s 中的最长子串， 要求该子串中的每一字符出现次数都不少于 k 。</p><p>返回这一子串的长度。</p><p>示例 1：</p><ul><li>输入：s = &quot;aaabb&quot;, k = 3</li><li>输出：3</li><li>解释：最长子串为 &quot;aaa&quot; ，其中 &#39;a&#39; 重复了 3 次。</li></ul><p>示例 2：</p><ul><li>输入：s = &quot;ababbc&quot;, k = 2</li><li>输出：5</li><li>解释：最长子串为 &quot;ababb&quot; ，其中 &#39;a&#39; 重复了 2 次， &#39;b&#39; 重复了 3 次。</li></ul><p>提示：</p><ul><li>1 &lt;= s.length &lt;= 10<sup>4</sup></li><li>s 仅由小写英文字母组成</li><li>1 &lt;= k &lt;= 10<sup>5</sup></li></ul></blockquote><h3 id="_1-略解1-4" tabindex="-1"><a class="header-anchor" href="#_1-略解1-4" aria-hidden="true">#</a> （1）略解1</h3><p>这道题用的思路和困难题有的一拼。</p><p>难点：无论是加上字符还删除字符，都有可能使子串变得符合要求或者不符合要求，没有普遍情况。</p><p>例如：</p><ul><li>加上了 <strong>额外的 1 种字符</strong>，子串为【aabb】，n = 2，加上 1 个 “ c ”，变得【aabbc】这时该子串就不符合要求了。</li><li>这时再加上 1 个 “ c ”，变得【aabbcc】，就符合要求了</li><li>所以这时不能直接使用滑动窗口</li></ul><p>根据上面的例子，知道可以从字符种数入手。从移动指针后判断是否符合要求，到判断是否符合字符种数。</p><p>当我们使用双指针的时候：</p><ol><li>右端点往右移动必然会导致字符类型数量增加（或不变）</li><li>左端点往右移动必然会导致字符类型数量减少（或不变）</li></ol><p>这样就有了 <strong>二段性质</strong> ，同时本题说明，字符串只有 26 种小写字母，所以从字符种数入手是可行的。</p><p>具体代码如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
  <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">longestSubstring</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> n <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> cs <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> cnt <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">26</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    
    <span class="token comment">// 遍历26次，每次加多1种字符</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> p <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> p <span class="token operator">&lt;=</span> <span class="token number">26</span><span class="token punctuation">;</span> p<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span>cnt<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token comment">// tot 代表 [j, i] 区间所有的字符种类数量；sum 代表满足要求的字符种数</span>
      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> tot <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 计算当前字符在数组中的位置</span>
        <span class="token keyword">int</span> u <span class="token operator">=</span> cs<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token char">&#39;a&#39;</span><span class="token punctuation">;</span>
        cnt<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>
        
        <span class="token comment">// 如果添加到 cnt 之后为 1，说明字符总数 +1</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>cnt<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> tot<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token comment">// 如果添加到 cnt 之后等于 k，说明该字符从不达标变为达标，达标数量 + 1</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>cnt<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">==</span> k<span class="token punctuation">)</span> sum<span class="token operator">++</span><span class="token punctuation">;</span>
        
        <span class="token comment">// 当区间所包含的字符种类数量 tot 超过了当前限定的数量 p，那么我们要删除掉一些字母，即「左指针」右移</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>tot <span class="token operator">&gt;</span> p<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token keyword">int</span> t <span class="token operator">=</span> cs<span class="token punctuation">[</span>j<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token char">&#39;a&#39;</span><span class="token punctuation">;</span>
          cnt<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token operator">--</span><span class="token punctuation">;</span>
          <span class="token comment">// 如果添加到 cnt 之后为 0，说明字符总数-1</span>
          <span class="token keyword">if</span> <span class="token punctuation">(</span>cnt<span class="token punctuation">[</span>t<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> tot<span class="token operator">--</span><span class="token punctuation">;</span>
          <span class="token comment">// 如果添加到 cnt 之后等于 k - 1，说明该字符从达标变为不达标，达标数量 - 1</span>
          <span class="token keyword">if</span> <span class="token punctuation">(</span>cnt<span class="token punctuation">[</span>t<span class="token punctuation">]</span> <span class="token operator">==</span> k <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> sum<span class="token operator">--</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        
        <span class="token comment">// 如果符合要求的字符种数等于当前所限制的字符种数，</span>
        <span class="token comment">// 则代表当前子串符合标准</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>tot <span class="token operator">==</span> sum<span class="token punctuation">)</span> ans <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span> i <span class="token operator">-</span> j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> ans<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-总结" tabindex="-1"><a class="header-anchor" href="#_2-总结" aria-hidden="true">#</a> （2）总结</h3><p>题目的要求是每个字符的数量符合目标。当加上字符时，需要同时计算字符种数和该字符的数量。</p><p>这时就需要限制字符种数来计算字符数量。即枚举每种字符种数，来不断判断是否符合题目要求。这道题目和猜字谜的思路一样，都是根据枚举少的来去判断多的</p><h2 id="二十四、最长有效括号" tabindex="-1"><a class="header-anchor" href="#二十四、最长有效括号" aria-hidden="true">#</a> 二十四、最长有效括号</h2>`,16),z={href:"https://mp.weixin.qq.com/s?__biz=MzU4NDE3MTEyMA==&mid=2247484728&idx=2&sn=c1f24a09cf6cfa7d6637ef11c98a8cc8&chksm=fd9cae27caeb2731858e5d1b9b42963a7dace00d7dc9dd8613f7f752e1d446aadaced81bca91&cur_album_id=1715134171561410565&scene=189#wechat_redirect",target:"_blank",rel:"noopener noreferrer"},M=t(`<blockquote><p>给你一个只包含 <code>&#39;(&#39;</code> 和 <code>&#39;)&#39;</code> 的字符串，找出最长有效（格式正确且连续）括号子串的长度。</p><p>示例 1：</p><ul><li>输入：s = &quot;(()&quot;</li><li>输出：2</li><li>解释：最长有效括号子串是 &quot;()&quot;</li></ul><p>示例 2：</p><ul><li>输入：s = &quot;)()())&quot;</li><li>输出：4</li><li>解释：最长有效括号子串是 &quot;()()&quot;</li></ul><p>提示：</p><ul><li>0 &lt;= s.length &lt;= 3 * 10<sup>4</sup></li><li><code>s[i]</code> 为 <code>&#39;(&#39;</code> 或 <code>&#39;)&#39;</code></li></ul></blockquote><h3 id="_1-栈解法" tabindex="-1"><a class="header-anchor" href="#_1-栈解法" aria-hidden="true">#</a> （1）栈解法</h3><p>这道题主要思路不难，就是使用栈来解决。但里面还需要额外加上指针。</p><p>首先考虑栈里面有 “ ( ” 的情况：</p><ul><li>遍历完整个字符串后栈里依然有括号 <ul><li>括号不影响与前面子串的联系：“ (() ”</li><li>括号影响与前面子串的联系： “ ()(() ” ，遍历完整个字符串后，会发现存在的这个括号（第 3 个字符）会与前面的子串分隔开来，我们需要确定 <strong>前面的子串和后面的子串哪个长度大</strong></li><li>后面的子串计算长度需要：这个括号的下标和结束当前子串的下标</li></ul></li></ul><p>然后假设栈里面存的是每一个 “ ( ” 在字符串的下标，这个括号的下标就获取得到，使用变量 <code>j</code> 保存，那么如何确定什么情况<strong>当前子串结束</strong>？</p><p>答案是：很难确定，<strong>只有后面发现了分隔子串的括号</strong>，像上面的 “ ()(() ”，只有遍历全部字符串才能发现，后面 3 个字符 “ (() ” 不能与前面的 “ () ” 合并成一个子串。但有一种情况是必确定当前子串结束，栈空遇到 “ ) ”，这时直接更新变量 <code>j</code></p><p><strong>所以当栈不为空时，计算每一个出栈的子串长度，然后比较答案。</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
  <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">longestValidParentheses</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 新建栈</span>
    <span class="token class-name">Deque</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> stack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayDeque</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> j <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// 如果为 ( 则进行入栈</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token char">&#39;(&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        stack<span class="token punctuation">.</span><span class="token function">addLast</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token comment">// 如果栈不为空，则弹栈，否则更新变量j</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>stack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token comment">// 弹栈操作</span>
          stack<span class="token punctuation">.</span><span class="token function">pollLast</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          
          <span class="token comment">// 如果弹栈后栈不为空，则计算当前子串长度</span>
          <span class="token comment">// 如果为空，就将指向空串</span>
          <span class="token keyword">int</span> top <span class="token operator">=</span> j<span class="token punctuation">;</span>
          <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>stack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> top <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">peekLast</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          ans <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span> i <span class="token operator">-</span> top<span class="token punctuation">)</span><span class="token punctuation">;</span>                   
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
          j <span class="token operator">=</span> i<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> ans<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>总结：虽然这道题核心思想不难，但要实现题目要求，要需要注意很多细节，例如上面代码第 19 ~ 23 行，如果不了解这几行代码的思想，就很难完美解出这道题。</p><ul><li>时间复杂度：每个字符最多进栈和出栈一次。复杂度为 O ( 1 )</li><li>空间复杂度：O ( n )</li></ul><h2 id="二十五、有效的括号" tabindex="-1"><a class="header-anchor" href="#二十五、有效的括号" aria-hidden="true">#</a> 二十五、有效的括号</h2>`,12),E={href:"https://mp.weixin.qq.com/s?__biz=MzU4NDE3MTEyMA==&mid=2247484862&idx=2&sn=191f7a472c03144c38e2d792a53287aa&chksm=fd9caea1caeb27b7115e1927d7130dcbebbf28c8b943420cec315d32f20a75cf42a38cc2cb0b&cur_album_id=1715134171561410565&scene=189#wechat_redirect",target:"_blank",rel:"noopener noreferrer"},A=t(`<blockquote><p>这是 LeetCode 上的**「20. 有效的括号」**，难度为 <strong>Easy</strong>。</p><p>给定一个只包括 &#39;(&#39;，&#39;)&#39;，&#39;{&#39;，&#39;}&#39;，&#39;[&#39;，&#39;]&#39; 的字符串，判断字符串是否有效。</p><p>有效字符串需满足：</p><ol><li>左括号必须用相同类型的右括号闭合。</li><li>左括号必须以正确的顺序闭合。</li></ol><p>注意空字符串可被认为是有效字符串。</p><p>示例 1:</p><ul><li>输入: &quot;()&quot;</li><li>输出: true</li></ul><p>示例 2:</p><ul><li>输入: &quot;()[]{}&quot;</li><li>输出: true</li></ul><p>示例 3:</p><ul><li>输入: &quot;(]&quot;</li><li>输出: false</li></ul></blockquote><h3 id="_1-哈希表解法" tabindex="-1"><a class="header-anchor" href="#_1-哈希表解法" aria-hidden="true">#</a> （1）哈希表解法</h3><p>这道题是当前一面德科时遇到的题目，如果知道 Java 的栈结构对象，就会很简单，否则就需要模拟栈。（当时就是模拟栈，然后模拟了很长时间，最后没完全做出来，真是蛋疼）</p><p>题目说明有三种括号的对应关系，对应关系就会想到可以使用哈希表解决。</p><p>思路：如果左括号入栈，否则出栈并与当前字符匹配</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
  <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isValid</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">Deque</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Character</span><span class="token punctuation">&gt;</span></span> stack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayDeque</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Character</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> charArray <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 建立哈希表</span>
    <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Character</span><span class="token punctuation">,</span> <span class="token class-name">Character</span><span class="token punctuation">&gt;</span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
    map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token char">&#39;)&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;(&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token char">&#39;}&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;{&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token char">&#39;]&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;[&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span> i <span class="token operator">&lt;</span> charArray<span class="token punctuation">.</span>length <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// 如果在哈希表中对应不上，则该字符是左括号，进行入栈</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>charArray<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        stack<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>charArray<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token comment">// 遇到右括号则出栈，然后再判断是否对应</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>stack<span class="token punctuation">.</span><span class="token function">pollLast</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>charArray<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> 
          <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    
    <span class="token comment">//  如果循环结束了，栈不为空，则说明是无效括号</span>
    <span class="token comment">//  这样写也可以 return d.isEmpty();</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>stack<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>时间复杂度：对字符串 <code>s</code> 扫描一遍。复杂度为 O ( n )</li><li>空间复杂度：使用的哈希表空间固定，不随着样本数量变大而变大。复杂度为 O ( 1 )</li></ul><h3 id="_2-ascii-差值解法" tabindex="-1"><a class="header-anchor" href="#_2-ascii-差值解法" aria-hidden="true">#</a> （2）ASCII 差值解法</h3><p>我们可以使用三个括号的 ASCII 码的规律来代替哈希表。</p><ul><li><p><code>(</code> 和 <code>)</code> 分别对应 -7 和 -8；</p></li><li><p><code>[</code> 和 <code>]</code> 分别对应 43 和 45；</p></li><li><p><code>{</code> 和 <code>}</code> 分别对应 75 和 77。</p></li><li><p>规律：不同的括号之间差距很大，但左右括号之间最多差距 2</p></li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">isValid</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token class-name">Deque</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Character</span><span class="token punctuation">&gt;</span></span> stack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayDeque</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Character</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">char</span> c <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">==</span> <span class="token char">&#39;(&#39;</span> <span class="token operator">||</span> c <span class="token operator">==</span> <span class="token char">&#39;{&#39;</span> <span class="token operator">||</span> c <span class="token operator">==</span> <span class="token char">&#39;[&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      stack<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      <span class="token comment">// 根据差距来判断对应关系</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>stack<span class="token punctuation">.</span><span class="token function">peekLast</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>stack<span class="token punctuation">.</span><span class="token function">pollLast</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> c<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  
  <span class="token keyword">if</span> <span class="token punctuation">(</span>stack<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>时间复杂度：对字符串 <code>s</code> 扫描一遍。复杂度为 O ( n )</li><li>空间复杂度：O ( n )</li></ul><h2 id="二十六、有效的数独" tabindex="-1"><a class="header-anchor" href="#二十六、有效的数独" aria-hidden="true">#</a> 二十六、有效的数独</h2>`,13),S={href:"https://mp.weixin.qq.com/s?__biz=MzU4NDE3MTEyMA==&mid=2247484943&idx=2&sn=ab31bfb50389d4faffe4eb2be89323c6&chksm=fd9cad10caeb2406316519444c08f1ba8817996e87e18b5c09eaa753be1cca654a911dd25327&cur_album_id=1715134171561410565&scene=189#wechat_redirect",target:"_blank",rel:"noopener noreferrer"},N=t(`<blockquote><p>这是 LeetCode 上的**「36. 有效的数独」**，难度为 <strong>Medium</strong>。</p><p>判断一个 9x9 的数独是否有效。只需要根据以下规则，验证已经填入的数字是否有效即可。</p><ul><li>数字 1-9 在每一行只能出现一次。</li><li>数字 1-9 在每一列只能出现一次。</li><li>数字 1-9 在每一个以粗实线分隔的 3x3 宫内只能出现一次。</li></ul><p>数独部分空格内已填入了数字，空白格用 &#39;.&#39; 表示。</p><p>示例 1:</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>输入:[  
[&quot;5&quot;,&quot;3&quot;,&quot;.&quot;,&quot;.&quot;,&quot;7&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;],  [&quot;6&quot;,&quot;.&quot;,&quot;.&quot;,&quot;1&quot;,&quot;9&quot;,&quot;5&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;],  [&quot;.&quot;,&quot;9&quot;,&quot;8&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;6&quot;,&quot;.&quot;],  [&quot;8&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;6&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;3&quot;],  [&quot;4&quot;,&quot;.&quot;,&quot;.&quot;,&quot;8&quot;,&quot;.&quot;,&quot;3&quot;,&quot;.&quot;,&quot;.&quot;,&quot;1&quot;],  [&quot;7&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;2&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;6&quot;],  [&quot;.&quot;,&quot;6&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;2&quot;,&quot;8&quot;,&quot;.&quot;],  [&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;4&quot;,&quot;1&quot;,&quot;9&quot;,&quot;.&quot;,&quot;.&quot;,&quot;5&quot;],  [&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;.&quot;,&quot;8&quot;,&quot;.&quot;,&quot;.&quot;,&quot;7&quot;,&quot;9&quot;]
]
输出: true
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote><h3 id="_1-哈希表解法-1" tabindex="-1"><a class="header-anchor" href="#_1-哈希表解法-1" aria-hidden="true">#</a> （1）哈希表解法</h3><p>我们考虑到行下标与行数据的关系，所以使用哈希表。key 放的是 下标，value 放的是集合，list 和 set 都可以</p><p>然后在出现数字的位置，判断行、列和 9 * 9 区域是否有相同的数字。</p><ul><li><p>问题：给定一个位置，需要计算出是哪个 9 * 9 的区域</p></li><li><p>答：行下标 【0-8】，列下标【0-8】。</p><ul><li>【0，1，2 列】的区域下标为 0。【3，4，5 列】区域下标为 1。可知区域的列下标确定为 <code>j / 3</code>，因为【0,1,2 / 3 = 0；3,4,5 / 3 = 1】</li><li>【0，1，2 行】的区域下标为 0。【3，4，5 行】区域下标为 1。可知区域的列下标确定为 <code>i / 3</code></li><li>当知道了区域的行下标和列下标就知道了是哪个区域的：行下标 * 3 + 列下标，即 <code>i / 3 * 3 + j / 3</code></li></ul></li></ul><p>详细代码如下：代码实现方面，和人做数独的方式有点不同。</p><ul><li>人判断数独是先拿到所有数字，再判断每一个数字是否重复</li><li>而下面代码中，<strong>最开始是没有任何数字</strong>，先判断每一个数字是否重复，再添加到集合里。这种方式可以证明是正确的： <ul><li>如果有重复的数字，第 1 次出现不会发现，并添加到集合里；但第 2 次出现一定会与第 1 次比较一次，所以一定会发现</li></ul></li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
  <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isValidSudoku</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> board<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">Set</span><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> row  <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> col <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> area <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 初始化每个数据</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">9</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      row<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      col<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      area<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">9</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">9</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 如果是&quot;.&quot; 则不判断</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>board<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">&#39;.&#39;</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>
        <span class="token comment">// 取出board里的值</span>
        <span class="token keyword">int</span> c <span class="token operator">=</span> board<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token char">&#39;1&#39;</span><span class="token punctuation">;</span>
        <span class="token comment">// 计算区域的下标</span>
        <span class="token keyword">int</span> idx <span class="token operator">=</span> i <span class="token operator">/</span> <span class="token number">3</span> <span class="token operator">*</span> <span class="token number">3</span> <span class="token operator">+</span> j <span class="token operator">/</span> <span class="token number">3</span><span class="token punctuation">;</span>
        <span class="token comment">// 使用Set自带方法判断当前数字是否在集合里</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>row<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>col<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>area<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>idx<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token comment">// 如果不在则添加到集合里</span>
          row<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>
          col<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>
          area<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>idx<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
          <span class="token comment">// 在的话就说明不是有效的数独</span>
          <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-数组解法" tabindex="-1"><a class="header-anchor" href="#_2-数组解法" aria-hidden="true">#</a> （2）数组解法</h3><p>大多数的哈希表计数问题，都能转换为使用数组解决。</p><p>使用数组模拟哈希表就能实现题目。因为下标可以代表信息，数组里面的数据就可以 <strong>使用布尔值</strong>，代表当前格出现过数字。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
  <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isValidSudoku</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> board<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 存储每行、每列和每个区域</span>
    <span class="token keyword">boolean</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> row <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">boolean</span><span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">,</span> col <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">boolean</span><span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">,</span> area <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">boolean</span><span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        
    
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">9</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">9</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>board<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">&#39;.&#39;</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> c <span class="token operator">=</span> board<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token char">&#39;1&#39;</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> idx <span class="token operator">=</span> i <span class="token operator">/</span> <span class="token number">3</span> <span class="token operator">*</span> <span class="token number">3</span> <span class="token operator">+</span> j <span class="token operator">/</span> <span class="token number">3</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>row<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>c<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>col<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>c<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>area<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token punctuation">[</span>c<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token comment">// 将指定格设置为true</span>
          row<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>c<span class="token punctuation">]</span> <span class="token operator">=</span> col<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>c<span class="token punctuation">]</span> <span class="token operator">=</span> area<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token punctuation">[</span>c<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
          <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>时间复杂度：因为数组是 9 * 9 ，不会改变的，所以两个解法的时间复杂度不会改变，都为 O ( 1 )</p></li><li><p>空间复杂度：O ( 1 )</p></li></ul><h2 id="二十七、解数独" tabindex="-1"><a class="header-anchor" href="#二十七、解数独" aria-hidden="true">#</a> 二十七、解数独</h2>`,14),T={href:"https://mp.weixin.qq.com/s?__biz=MzU4NDE3MTEyMA==&mid=2247484943&idx=1&sn=1ab3463af9251e6be7579e013e8a92b5&chksm=fd9cad10caeb2406173821ba655513e20f86b304b335993f94a440e157ceed324f948c7130ad&cur_album_id=1715134171561410565&scene=189#wechat_redirect",target:"_blank",rel:"noopener noreferrer"},L=t(`<blockquote><p>这是 LeetCode 上的**「37. 解数独」**，难度为 <strong>Hard</strong>。</p><p>编写一个程序，通过填充空格来解决数独问题。</p><p>一个数独的解法需遵循如下规则：</p><ul><li>数字 1-9 在每一行只能出现一次。</li><li>数字 1-9 在每一列只能出现一次。</li><li>数字 1-9 在每一个以粗实线分隔的 3x3 宫内只能出现一次。空白格用 &#39;.&#39; 表示。</li><li>提示： <ul><li>给定的数独序列只包含数字 1-9 和字符 &#39;.&#39; 。</li><li>你可以假设给定的数独只有唯一解。</li><li>给定数独永远是 9x9 形式的。</li></ul></li></ul></blockquote><h3 id="_1-回溯解法" tabindex="-1"><a class="header-anchor" href="#_1-回溯解法" aria-hidden="true">#</a> （1）回溯解法</h3><p>写过数独的都应该很明白这道题的思路。笔写数独的时候，都会用铅笔，因为便于回溯，擦掉之前写过的数字。</p><p>但如果按照填数字、看是否重复、找下一个空位的循环来写代码，会有点麻烦。我在写代码中就遇到一些麻烦：</p><ul><li>找下一个空位时，需要两层循环来遍历数组，如果找到了就要退出两层循环，这里就要用到 <strong>一个额外的标志位</strong>。</li><li>结果出来后如何退出所有递归？<strong>额外定义一个静态布尔类型变量</strong>，一旦找不到下一个空位时，就将变量置为 <code>true</code>，然后在<strong>递归和循环前面加上判断</strong>。</li><li>总的来说，过于冗余，而且不符合之前所说的回溯模板。</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span>路径<span class="token punctuation">,</span> 选择列表<span class="token punctuation">,</span> 结果集<span class="token punctuation">)</span><span class="token operator">:</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>满足结束条件<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  结果集<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>路径<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">for</span> <span class="token punctuation">(</span>选择 in 选择列表<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  做选择，修改路径<span class="token punctuation">;</span>
  <span class="token function">dfs</span><span class="token punctuation">(</span>路径’<span class="token punctuation">,</span> 选择列表<span class="token punctuation">,</span> 结果集<span class="token punctuation">)</span><span class="token punctuation">;</span>
  撤销选择，撤回修改<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>那么下面开始设计总体代码：</p><ul><li>递归函数的 <strong>参数</strong>： <ul><li>路径——当前的坐标 <code>int x, int y</code> ；</li><li>选择列表——原二维数组 <code>char[][] board </code> ；</li><li>结果集——无，直接填写到选择列表里</li></ul></li><li>退出当前递归的条件： <ul><li>判断当前格不可以填数字</li><li>当行下标为 9 时</li><li>列下标为 9 时，退出递归并换行操作</li></ul></li><li>传递是否结束： <ul><li>使用返回布尔值来告诉之前的代码递归的结果。例如下面代码，如果当前不可以填数字，则将下一个空格的返回值作为自己的返回值</li></ul></li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 列下标为 9 时，换行操作</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>y <span class="token operator">==</span> <span class="token number">9</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token function">dfs</span><span class="token punctuation">(</span>board<span class="token punctuation">,</span> x <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 行下标为 9 时结束</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">==</span> <span class="token number">9</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
<span class="token comment">// 如果不可以填数字，则判断下一个空格</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>board<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token char">&#39;.&#39;</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token function">dfs</span><span class="token punctuation">(</span>board<span class="token punctuation">,</span> x<span class="token punctuation">,</span> y <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>填数字的规则： <ul><li>如果当前数字在往后递归的路途中，证明了当前数字不适合，则将需要撤销选择，如第 8 ~ 9 行</li><li>如果已经知道结束了，就需要退出循环，迅速退出每一个递归函数。如第 5 ~ 6 行</li><li>如果 9 个数字都循环完毕，则说明需要返回到上一层，即返回 false，但这个 false 不能写死，<strong>因为填写完全部数字也是要退出循环</strong>。 根据第 1 小点，可知如果数字不适合，是要撤销选择，所以在最后可以 <strong>判断当前空格是否为数字</strong>，如果是数字则代表已经填完全部数字，否则代表 9 个数字不适合这个空格。<code>return board[x][y] != &#39;.&#39;;</code></li></ul></li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">9</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>row<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>col<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>cell<span class="token punctuation">[</span>x <span class="token operator">/</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span>y <span class="token operator">/</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 将数字填入表格中</span>
    board<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token char">&#39;1&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 更新状态位</span>
    row<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> col<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> cell<span class="token punctuation">[</span>x <span class="token operator">/</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span>y <span class="token operator">/</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token comment">// 根据之后的结果来执行不同的操作</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">dfs</span><span class="token punctuation">(</span>board<span class="token punctuation">,</span> x<span class="token punctuation">,</span> y <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// 如果返回true则代表已经填完整个数独，直接退出循环</span>
      <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      <span class="token comment">// 否则将清空当前位置，继续填写下一个数字</span>
      board<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">&#39;.&#39;</span><span class="token punctuation">;</span>
      row<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> col<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> cell<span class="token punctuation">[</span>x <span class="token operator">/</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span>y <span class="token operator">/</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">return</span> board<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token char">&#39;.&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-完整代码" tabindex="-1"><a class="header-anchor" href="#_2-完整代码" aria-hidden="true">#</a> （2）完整代码</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
  <span class="token keyword">boolean</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> row <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">boolean</span><span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token keyword">boolean</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> col <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">boolean</span><span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token keyword">boolean</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> cell <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">boolean</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">solveSudoku</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> board<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">9</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">9</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>board<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token char">&#39;.&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token keyword">int</span> t <span class="token operator">=</span> board<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token char">&#39;1&#39;</span><span class="token punctuation">;</span>
          row<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>t<span class="token punctuation">]</span> <span class="token operator">=</span> col<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>t<span class="token punctuation">]</span> <span class="token operator">=</span> cell<span class="token punctuation">[</span>i <span class="token operator">/</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">/</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span>t<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token function">dfs</span><span class="token punctuation">(</span>board<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">boolean</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> board<span class="token punctuation">,</span> <span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>y <span class="token operator">==</span> <span class="token number">9</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token function">dfs</span><span class="token punctuation">(</span>board<span class="token punctuation">,</span> x <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">==</span> <span class="token number">9</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>board<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token char">&#39;.&#39;</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token function">dfs</span><span class="token punctuation">(</span>board<span class="token punctuation">,</span> x<span class="token punctuation">,</span> y <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">9</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>row<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>col<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>cell<span class="token punctuation">[</span>x <span class="token operator">/</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span>y <span class="token operator">/</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        board<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token char">&#39;1&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        row<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> col<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> cell<span class="token punctuation">[</span>x <span class="token operator">/</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span>y <span class="token operator">/</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">dfs</span><span class="token punctuation">(</span>board<span class="token punctuation">,</span> x<span class="token punctuation">,</span> y <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
          board<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">&#39;.&#39;</span><span class="token punctuation">;</span>
          row<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> col<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> cell<span class="token punctuation">[</span>x <span class="token operator">/</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span>y <span class="token operator">/</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> board<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token char">&#39;.&#39;</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>时间复杂度：在固定 9 * 9 的棋盘里，具有一个枚举方案的最大值（极端情况，假设我们的棋盘刚开始是空的，这时候每一个格子都要枚举，每个格子都有可能从 1 枚举到 9，所以枚举次数为 9 * 9 * 9 = 729），即复杂度不随数据变化而变化。复杂度为 O ( 1 )</li><li>空间复杂度：在固定 9*9 的棋盘里，复杂度不随数据变化而变化。复杂度为 O ( 1 )</li></ul>`,14);function D(O,C){const a=l("ExternalLinkIcon");return e(),c("div",null,[i,k,n("p",null,[s("原题链接："),n("a",r,[s("https://mp.weixin.qq.com/s?__biz=MzU4NDE3MTEyMA==&mid=2247484458&idx=2&sn=60450b940e15b4e20026aa0f496c9cb1&chksm=fd9caf35caeb2623c907517b4d3328c6aba56ed1ed386a996fd174ce00c44ecb446734c95768&cur_album_id=1715134171561410565&scene=189#wechat_redirect"),p(a)])]),d,n("p",null,[s("原题链接："),n("a",m,[s("https://mp.weixin.qq.com/s?__biz=MzU4NDE3MTEyMA==&mid=2247484556&idx=2&sn=7f2aabbcb2362eb3ccadb401c96c2ea7&chksm=fd9caf93caeb2685ce46cdeed4f4d266b96978f3aec9cf4bd0ba51ce8d12975a44eaf66c4401&cur_album_id=1715134171561410565&scene=189#wechat_redirect"),p(a)])]),v,n("p",null,[s("原题链接："),n("a",b,[s("https://mp.weixin.qq.com/s?__biz=MzU4NDE3MTEyMA==&mid=2247484556&idx=1&sn=8fd60c49374a3e46115bde19ae385b6e&chksm=fd9caf93caeb268545fbbb031ad7d3230cc85cd64a4875d79dcd7e4749f3cec77e5f6062d08c&cur_album_id=1715134171561410565&scene=189#wechat_redirect"),p(a)])]),w,n("p",null,[s("例如："),n("a",f,[s("https://leetcode.cn/problems/4sum/solution/2sum-3sum-4sum-nsum-by-23wewerwer/"),p(a)])]),h,n("p",null,[s("原题链接："),n("a",y,[s("https://mp.weixin.qq.com/s?__biz=MzU4NDE3MTEyMA==&mid=2247484598&idx=1&sn=36c9bf700771fd84ebf1ad11300260dc&chksm=fd9cafa9caeb26bf620abe89f79f4dd225e0c01dcec59965e1f9f7f75860e84695205b732282&cur_album_id=1715134171561410565&scene=189#wechat_redirect"),p(a)])]),g,n("p",null,[s("原题链接："),n("a",q,[s("https://mp.weixin.qq.com/s?__biz=MzU4NDE3MTEyMA==&mid=2247484598&idx=2&sn=eba1872ff8297ce0bebe36736b76eb87&chksm=fd9cafa9caeb26bfdcf240996d22e3be915ef666e3c2b543ce5975e39c1307a8fb92d1bc6ecf&cur_album_id=1715134171561410565&scene=189#wechat_redirect"),p(a)])]),_,n("p",null,[s("原题链接： "),n("a",x,[s("https://mp.weixin.qq.com/s?__biz=MzU4NDE3MTEyMA==&mid=2247484728&idx=1&sn=c72b71bc0b6fce4cf29ca756a8a4eb36&chksm=fd9cae27caeb2731b785e76ae1966688f6a6661977916e25926a357117b7932caa3b51815361&cur_album_id=1715134171561410565&scene=189#wechat_redirect"),p(a)])]),j,n("p",null,[s("原题链接："),n("a",z,[s("https://mp.weixin.qq.com/s?__biz=MzU4NDE3MTEyMA==&mid=2247484728&idx=2&sn=c1f24a09cf6cfa7d6637ef11c98a8cc8&chksm=fd9cae27caeb2731858e5d1b9b42963a7dace00d7dc9dd8613f7f752e1d446aadaced81bca91&cur_album_id=1715134171561410565&scene=189#wechat_redirect"),p(a)])]),M,n("p",null,[s("原题链接："),n("a",E,[s("https://mp.weixin.qq.com/s?__biz=MzU4NDE3MTEyMA==&mid=2247484862&idx=2&sn=191f7a472c03144c38e2d792a53287aa&chksm=fd9caea1caeb27b7115e1927d7130dcbebbf28c8b943420cec315d32f20a75cf42a38cc2cb0b&cur_album_id=1715134171561410565&scene=189#wechat_redirect"),p(a)])]),A,n("p",null,[s("原题链接："),n("a",S,[s("https://mp.weixin.qq.com/s?__biz=MzU4NDE3MTEyMA==&mid=2247484943&idx=2&sn=ab31bfb50389d4faffe4eb2be89323c6&chksm=fd9cad10caeb2406316519444c08f1ba8817996e87e18b5c09eaa753be1cca654a911dd25327&cur_album_id=1715134171561410565&scene=189#wechat_redirect"),p(a)])]),N,n("p",null,[s("原题链接："),n("a",T,[s("https://mp.weixin.qq.com/s?__biz=MzU4NDE3MTEyMA==&mid=2247484943&idx=1&sn=1ab3463af9251e6be7579e013e8a92b5&chksm=fd9cad10caeb2406173821ba655513e20f86b304b335993f94a440e157ceed324f948c7130ad&cur_album_id=1715134171561410565&scene=189#wechat_redirect"),p(a)])]),L])}const I=o(u,[["render",D],["__file","算法三-7月28.html.vue"]]);export{I as default};
