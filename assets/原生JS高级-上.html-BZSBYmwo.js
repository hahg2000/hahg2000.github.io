import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as s,c as a,f as t}from"./app-B9MLl3uI.js";const p={},e=t(`<h1 id="原生js高级-上" tabindex="-1"><a class="header-anchor" href="#原生js高级-上"><span>原生JS高级-上</span></a></h1><h2 id="一、数据类型" tabindex="-1"><a class="header-anchor" href="#一、数据类型"><span>一、数据类型</span></a></h2><h3 id="_1-1-分类" tabindex="-1"><a class="header-anchor" href="#_1-1-分类"><span>1.1 分类</span></a></h3><p>数据类型分为 <strong>基本 / 值</strong> 类型 和 <strong>对象 / 引用</strong> 类型。</p><p>基本类型分为：</p><table><thead><tr><th>关键字</th><th>内容</th><th>关键字</th><th>内容</th></tr></thead><tbody><tr><td><strong>String</strong></td><td>任意字符串</td><td><strong>boolean</strong></td><td>true/false</td></tr><tr><td><strong>Number</strong></td><td>任意的数字</td><td><strong>undefined</strong></td><td>undefined</td></tr><tr><td><strong>null</strong></td><td>null（空对象）</td><td></td><td></td></tr></tbody></table><p>对象类型分为：</p><table><thead><tr><th>关键字</th><th>内容</th><th>关键字</th><th>内容</th></tr></thead><tbody><tr><td><strong>Object</strong></td><td>任意对象</td><td><strong>Function</strong></td><td>特别的对象，可以执行</td></tr><tr><td><strong>Array</strong></td><td>特别的对象，内部有序，可以使用下标访问</td><td></td><td></td></tr></tbody></table><h3 id="_1-2-判断" tabindex="-1"><a class="header-anchor" href="#_1-2-判断"><span>1.2 判断</span></a></h3><p>判断数据类型可以使用两种方法：</p><ol><li><p><code>typeof 数据</code> ，返回的是 <span style="color:red;">字符串</span>，<u>表示未经计算的操作数的类型</u>；</p></li><li><p><code>object instanceof constructor</code> ，返回的是 <strong>布尔值</strong>，用于检测构造函数的 <code>prototype</code> 属性是否出现在某个 <strong>实例对象</strong> 的 <span style="color:red;">原型链</span>上。</p></li></ol><p>例子1：因为 <code>typeof </code> 运算符返回的是未经计算的操作数的类型，所以有时会失效。不能区分 null 与 一般对象和数组 与 一般对象。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// null 与 一般对象</span>
<span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token keyword">null</span> <span class="token operator">===</span> <span class="token keyword">typeof</span> obj<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//true</span>

<span class="token comment">// 数组 与 一般对象</span>
<span class="token keyword">var</span> array <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> array <span class="token operator">===</span> <span class="token keyword">typeof</span> obj<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>例子2：<code>instanceof</code> 运算符专门用来判断 Object，Array 与 Function。具体的会在后面的原型链来介绍。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// 一般对象</span>
<span class="token keyword">var</span> b1 <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token comment">// 数组 </span>
    <span class="token literal-property property">b2</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">&#39;abc&#39;</span><span class="token punctuation">,</span> console<span class="token punctuation">.</span>log<span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token comment">// 函数</span>
    <span class="token function-variable function">b3</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;b3()&#39;</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b1 <span class="token keyword">instanceof</span> <span class="token class-name">Object</span><span class="token punctuation">,</span> <span class="token keyword">typeof</span> b1<span class="token punctuation">)</span> <span class="token comment">// true &#39;object&#39;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b1<span class="token punctuation">.</span>b2 <span class="token keyword">instanceof</span> <span class="token class-name">Array</span><span class="token punctuation">,</span> <span class="token keyword">typeof</span> b1<span class="token punctuation">.</span>b2<span class="token punctuation">)</span> <span class="token comment">// true &#39;object&#39;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b1<span class="token punctuation">.</span>b3 <span class="token keyword">instanceof</span> <span class="token class-name">Function</span><span class="token punctuation">,</span> <span class="token keyword">typeof</span> b1<span class="token punctuation">.</span>b3<span class="token punctuation">)</span> <span class="token comment">// true &#39;function&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_1-3-undefined与null" tabindex="-1"><a class="header-anchor" href="#_1-3-undefined与null"><span>1.3 undefined与null</span></a></h3><h4 id="_1-undefined与null的区别" tabindex="-1"><a class="header-anchor" href="#_1-undefined与null的区别"><span>（1）undefined与null的区别</span></a></h4><ul><li>undefined：定义了但没有赋值，常见的是 <code>对象.对象中没有的属性</code>。</li><li>null：定义了又赋值了，但赋值的值是 <code>null</code>，通常使用 <code>对象 = null</code>，来清空指定对象。</li></ul><h4 id="_2-使用null的场景" tabindex="-1"><a class="header-anchor" href="#_2-使用null的场景"><span>（2）使用null的场景</span></a></h4><ul><li>初始赋值，表明将要赋值为对象。</li><li>操作结束前，让对象成为垃圾对象（被垃圾回收器回收）。</li></ul><h4 id="_3-变量类型与数据类型" tabindex="-1"><a class="header-anchor" href="#_3-变量类型与数据类型"><span>（3）变量类型与数据类型</span></a></h4><ul><li>数据类型：基本类型和对象类型</li><li>变量类型 <ul><li>简单来说，变量的内存里存的是什么东西。</li><li>基本类型：保存的就是基本类型的数据，与立即寻址相关。</li><li>引用类型：保存的是地址值，与直接寻址相关。</li></ul></li><li>但一般不会严格区分这两个类型。</li></ul><h2 id="二、数据与内存" tabindex="-1"><a class="header-anchor" href="#二、数据与内存"><span>二、数据与内存</span></a></h2><h3 id="_2-1-概念" tabindex="-1"><a class="header-anchor" href="#_2-1-概念"><span>2.1 概念</span></a></h3><h4 id="_1-什么是数据" tabindex="-1"><a class="header-anchor" href="#_1-什么是数据"><span>（1）什么是数据？</span></a></h4><p>这个数据是计算机方面的，其代表了特定信息的东西，本质上是 0101.....</p><p>数据的特点之一：可运算。逻辑运算与算术运算。</p><h4 id="_2-什么是内存" tabindex="-1"><a class="header-anchor" href="#_2-什么是内存"><span>（2）什么是内存？</span></a></h4><ul><li><p>内存条通电后产生的 <strong>临时的</strong> 可存储数据的空间。</p></li><li><p>内存的生命周期：内存条插上 ==&gt; 通电 ==&gt; 产生内存空间 ==&gt; 存储数据 ==&gt; 操作数据 ==&gt; 断电 ==&gt; 内存空间与数据消失</p></li><li><p>内存的两类数据：<strong>直接使用的数据</strong> 与 <strong>地址值</strong>，与变量类型相似。</p></li><li><p>内存的主要组成部分：</p><ul><li>栈：存放全局变量和局部变量；</li><li>堆：对象以及占用空间较大的数据。</li></ul></li></ul><h4 id="_3-什么是变量" tabindex="-1"><a class="header-anchor" href="#_3-什么是变量"><span>（3）什么是变量？</span></a></h4><ul><li>分配的内存空间的里面的数据是可变的。</li><li>由变量名和变量值组成。</li><li>变量名用于查找栈中需要用到的数据，变量值用于就是我们需要使用的数据。</li></ul><h3 id="_2-2-相关问题" tabindex="-1"><a class="header-anchor" href="#_2-2-相关问题"><span>2.2 相关问题</span></a></h3><h4 id="_1-问题一" tabindex="-1"><a class="header-anchor" href="#_1-问题一"><span>（1）问题一</span></a></h4><p>问：<code>var a = xxx</code> ，a 变量的内存中保存数据类型是什么？</p><p>答：如果 xxx 是基本数据，内存保存的是 <strong>这个基本数据</strong>。</p><p>如果 xxx 是对象，则内存保存的是对象在堆里的 <strong>地址值</strong>。</p><p>如果 xxx 是变量，则保存的是 xxx 变量里内存里的 <strong>数据</strong>。</p><h4 id="_2-问题二" tabindex="-1"><a class="header-anchor" href="#_2-问题二"><span>（2）问题二</span></a></h4><p>问：关于引用变量赋值问题</p><p>答：若 n 个变量都指向同一块内存空间，通过一个变量修改内存空间的数据，其他变量能感知到。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// 创建变量，变量指向一个对象的内存空间</span>
<span class="token keyword">var</span> obj1 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">&quot;张三&quot;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token comment">// 创建另一个变量，指向同一个内存空间</span>
<span class="token keyword">var</span> obj2 <span class="token operator">=</span> obj1<span class="token punctuation">;</span>
<span class="token comment">// 使用obj1修改内存空间的值</span>
obj1<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&quot;李四&quot;</span><span class="token punctuation">;</span>
<span class="token comment">// obj2也可以感知到</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj2<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出&quot;李四&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-问题三" tabindex="-1"><a class="header-anchor" href="#_3-问题三"><span>（3）问题三</span></a></h4><p>下面有两段代码，他们的输出是什么？</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// 代码段1</span>
<span class="token keyword">var</span> obj1 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">&quot;张三&quot;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">fn1</span> <span class="token punctuation">(</span><span class="token parameter">obj</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    obj<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&quot;李四&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token function">fn1</span><span class="token punctuation">(</span>obj1<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj1<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>	<span class="token comment">// 输出?</span>

<span class="token comment">// 代码段2</span>

<span class="token keyword">var</span> obj2 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">&quot;张三&quot;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">fn2</span> <span class="token punctuation">(</span><span class="token parameter">obj</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    obj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">&quot;李四&quot;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token function">fn2</span><span class="token punctuation">(</span>obj2<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj2<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 输出?</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><p>答：第一个输出 “ 李四 ”，第二个输出 ” 张三 “。</p><p>解析：【若函数有形参，则在执行函数前，会执行这行代码 <code>var 形参 = 实参;</code> 则上面的代码就会执行 <code>var obj = obj1;</code>】</p><ul><li><p>第一段代码：与问题二一致，obj 局部变量 和 obj1 全局变量都指向了 同一块内存空间，所以通过 obj 局部变量修改，obj1 全局变量也可以看到。</p></li><li><p>第二段代码：将 obj 局部变量指向 <strong>一个新内存空间</strong>，空间里的数据是一个新对象。函数执行完，<strong>释放 obj 局部变量，局部变量里的对象成为垃圾对象</strong>。所以本质上也 <strong>没有修改 obj1 的指向</strong>，如下图。</p></li></ul><p>总结：通过形参传进来的地址值，我们 <strong>只能对地址值里的内容进行修改</strong>，无法修改指向该地址的变量。</p><h4 id="_4-问题四" tabindex="-1"><a class="header-anchor" href="#_4-问题四"><span>（4）问题四</span></a></h4><p>问：在 JS 调用函数时传递变量参数时，是值传递还是引用传递？</p><p>答：有两种说法：</p><ul><li><strong>都是值传递</strong>，都是传 <strong>变量内存里的值</strong>，不过内存里面的值可能是 <strong>基本数据</strong> 也可能是 <strong>地址值数据</strong>。</li><li><strong>可能是值传递</strong>，传进去的数据是基本类型，不能对传进来的变量进行修改。 <strong>也可能是引用传递</strong>，传进来的数据是地址值，可以通过地址值对传进来的变量进行修改。</li><li>总的来说，<strong>传地址不是传变量在栈中的地址，而是引用类型在堆中的地址</strong>。</li></ul><h4 id="_5-问题五" tabindex="-1"><a class="header-anchor" href="#_5-问题五"><span>（5）问题五</span></a></h4><p>问：JS 引擎如何管理内存？</p><p>答：</p><ol><li>内存生命周期： <ol><li>分配小内存空间，得到它的使用权。</li><li>存储数据，可以反复进行操作。</li><li>释放小内存空间。</li></ol></li><li>释放内存： <ol><li>局部变量：函数执行完自动释放。</li><li>全局变量：window 对象销毁时，即关闭浏览器。</li></ol></li></ol><h2 id="三、对象" tabindex="-1"><a class="header-anchor" href="#三、对象"><span>三、对象</span></a></h2><h3 id="_3-1-引入" tabindex="-1"><a class="header-anchor" href="#_3-1-引入"><span>3.1 引入</span></a></h3><ol><li>什么是对象?</li></ol><ul><li>用来保存多个数据的 <strong>容器</strong>。</li><li>一个对象可以代表现实中的一个事物。</li></ul><ol start="2"><li>为什么要用对象?</li></ol><ul><li>统一管理多个数据，<strong>便于管理与使用</strong>。</li></ul><ol start="3"><li>对象的组成</li></ol><ul><li>属性: 属性名（<strong>字符串</strong>）和属性值（任意）组成</li><li>方法: 一种特别的属性（属性值是函数）</li></ul><ol start="4"><li>如何访问对象内部数据?</li></ol><ul><li><code>对象.属性名</code>: 编码简单，但有些情况不能用。</li><li><code>对象[&#39;属性名&#39;]</code>: 编码麻烦,，能通用。</li></ul><h3 id="_3-2-相关问题" tabindex="-1"><a class="header-anchor" href="#_3-2-相关问题"><span>3.2 相关问题</span></a></h3><p>问：什么时候必须使用 <code>对象[&#39;属性名&#39;]</code> 来访问属性呢？</p><p>答：1. 属性名含特殊字符，例如 “ - ”。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// 不能这样子添加</span>
<span class="token comment">// obj.context-type = &quot;text/javascript&quot;</span>

<span class="token comment">// 必须这样的添加</span>
obj<span class="token punctuation">[</span><span class="token string">&quot;context-type&quot;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;text/javascript&quot;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>当属性名为变量时</li></ol><p>如果使用 <code>对象.变量名</code> 来访问 <strong>属性名为变量值</strong> 的属性，就会当成访问 <strong>属性名为变量名</strong> 的属性，如第 6 、7 行所示。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>obj<span class="token punctuation">[</span><span class="token string">&quot;context-type&quot;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;text/javascript&quot;</span><span class="token punctuation">;</span>
obj<span class="token punctuation">[</span><span class="token string">&quot;attrName&quot;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;attrName&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">fn1</span> <span class="token punctuation">(</span><span class="token parameter">attrName</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment">// 不能使用</span>
    <span class="token comment">// console.log(obj.attrName); </span>
    <span class="token comment">// 其等价于 console.log(obj[&quot;attrName&quot;]); // 输出 attrName</span>

    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">[</span>attrName<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出 text/javascript</span>
<span class="token punctuation">}</span>

<span class="token function">fn1</span><span class="token punctuation">(</span><span class="token string">&quot;context-type&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="四、函数" tabindex="-1"><a class="header-anchor" href="#四、函数"><span>四、函数</span></a></h2><h3 id="_4-1-简介" tabindex="-1"><a class="header-anchor" href="#_4-1-简介"><span>4.1 简介</span></a></h3><ol><li>什么是函数?</li></ol><ul><li>具有特定功能的 n 条语句的 <strong>封装体</strong>。</li><li><strong>只有函数是可执行的</strong>， 其它类型的数据是不可执行的</li><li><strong>函数也是对象</strong>。</li></ul><ol start="2"><li>为什么要用函数?</li></ol><ul><li><strong>提高代码复用</strong>，相同执行的代码不用写多几遍，直接调用函数即可。</li><li><strong>便于阅读和交流</strong>，函数已经把详细的代码封装起来，看函数名就可以大概知道其作用，不用看完这个函数里的代码。</li></ul><ol start="3"><li>如何定义函数?</li></ol><ul><li><strong>函数声明</strong>。<code>funtion fn1(){}</code></li><li><strong>表达式</strong>。<code>var fn2 = funtion() {}</code></li></ul><ol start="4"><li>如何调用(执行)函数?</li></ol><ul><li><code>test()</code> ：<strong>直接调用</strong>。</li><li><code>new test()</code> ：<strong>new 关键字</strong> 调用，<code>test()</code> 函数为构造函数。</li><li><code>obj.test()</code> ：利用 <strong>对象</strong> 来调用。</li><li><code>test.call/apply(obj)</code> ：**临时 ** 让 test 成为 obj 的方法进行调用。</li></ul><h3 id="_4-2-回调函数" tabindex="-1"><a class="header-anchor" href="#_4-2-回调函数"><span>4.2 回调函数</span></a></h3><ol><li>什么函数才是回调函数? <ol><li>我们自己定义的。</li><li>我们没有 <strong>亲自</strong> 调用它。</li><li>但 <strong>最终它执行了</strong>（在某个时刻或某个条件下）</li></ol></li><li>常见的回调函数? <ol><li><strong>dom事件回调函数</strong>，调用者为发生事件的 dom 元素。</li><li><strong>定时器回调函数</strong>，调用者为 window。</li><li><strong>ajax请求回调函数</strong>。</li><li><strong>生命周期回调函数</strong>。</li></ol></li></ol><h3 id="_4-3-iife" tabindex="-1"><a class="header-anchor" href="#_4-3-iife"><span>4.3 IIFE</span></a></h3><h4 id="_1-理解" tabindex="-1"><a class="header-anchor" href="#_1-理解"><span>（1）理解</span></a></h4><p>IIFE，全称 Immediately Invoked Function Expression，<strong>立即调用函数表达式</strong>。</p><p>其实就是 <strong>立即执行的匿名函数</strong>。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// (</span>
<span class="token comment">//   function () {</span>
<span class="token comment">//     函数内容</span>
<span class="token comment">//   }</span>
<span class="token comment">// )()</span>
<span class="token punctuation">(</span>
    <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-作用" tabindex="-1"><a class="header-anchor" href="#_2-作用"><span>（2）作用</span></a></h4><ul><li><strong>隐藏实现</strong>，将多条语句封装成了一个匿名函数。</li><li><strong>不会污染外部（全局）命名空间</strong>，因为其属于函数作用域。</li><li>用它来编码 JS 模块，下面举一个简单例子。</li></ul><hr><p><code>$().addA()</code>：第 29 行调用步骤：</p><p>调用步骤：</p><ol><li><code>$</code> 取到一个函数。</li></ol><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">addA</span><span class="token operator">:</span> addA
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li><p>执行这个函数，<code>$()</code> ，其返回值为一个对象 <code>{addA: addA}</code>，即 <code>$() == {addA: addA}</code> 。</p></li><li><p>取对象里的属性值，【对象.属性名】，<code>$().addA</code> 。</p></li><li><p>再执行属性值的内容，<code>$().addA()</code>，在外部执行内部的函数。</p></li></ol><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token punctuation">(</span>
    <span class="token comment">// 匿名函数</span>
    <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 定义一个变量</span>
        <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token comment">// 在函数中添加操作变量</span>
        <span class="token keyword">function</span> <span class="token function">addA</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token comment">// 将往window对象中添加属性，属性值为一个函数</span>
        window<span class="token punctuation">.</span><span class="token function-variable function">$</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 函数里返回一个对象，对象值为addA函数</span>
            <span class="token keyword">return</span> <span class="token punctuation">{</span>
                <span class="token literal-property property">addA</span><span class="token operator">:</span> addA
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token comment">// 调用步骤：1.$取到一个函数</span>
<span class="token comment">// function () {</span>
<span class="token comment">//   return {</span>
<span class="token comment">//     addA: addA</span>
<span class="token comment">//   }</span>
<span class="token comment">// }</span>
<span class="token comment">// 2.执行这个函数，$(),返回值为一个对象 {addA: addA}，即$() == {addA: addA}</span>
<span class="token comment">// 3.取对象里的属性值，【对象.属性名】，$().addA</span>
<span class="token comment">// 4.再执行属性值的内容，$().addA()，我们可以在外部执行内部的函数</span>
<span class="token function">$</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addA</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-4-this" tabindex="-1"><a class="header-anchor" href="#_4-4-this"><span>4.4 this</span></a></h3><h4 id="_1-this是什么" tabindex="-1"><a class="header-anchor" href="#_1-this是什么"><span>（1）this是什么</span></a></h4><ul><li>任何函数本质上都是通过某个对象来调用的，就如同 <strong>通过对象来调用里的属性对象</strong>，如果没有直接指定就是window。</li><li>所有函数内部都有一个<strong>隐含变量</strong> <code>this</code>。</li><li>它的值是调用函数的 <strong>当前对象</strong>。</li></ul><h4 id="_2-如何确定this的值" tabindex="-1"><a class="header-anchor" href="#_2-如何确定this的值"><span>（2）如何确定this的值</span></a></h4><table><thead><tr><th>代码</th><th>this 的值</th></tr></thead><tbody><tr><td><code>test()</code></td><td><code>window</code></td></tr><tr><td><code>p.test()</code></td><td><code>p</code></td></tr><tr><td><code>var p = new test()</code></td><td><code>p</code></td></tr><tr><td><code>test.call(obj)</code></td><td><code>obj</code></td></tr></tbody></table><h3 id="_4-5-分号问题" tabindex="-1"><a class="header-anchor" href="#_4-5-分号问题"><span>4.5 分号问题</span></a></h3><ol><li>JS 一条语句的后面可以不加分号</li><li>是否加分号是编码风格问题</li><li>下面两种情况下不加分号会有问题，解决办法：在 “ ( ” 和 “ [ ” 前面加 “ ; ”。</li></ol><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// 第一种，前面代码后面是 () 符号</span>
<span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">1</span>
<span class="token punctuation">(</span>
    <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment">// 第二种，前面代码后面是 [] 符号</span>
<span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token number">1</span>
<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="五、原型" tabindex="-1"><a class="header-anchor" href="#五、原型"><span>五、原型</span></a></h2><h3 id="_5-1-原型引入" tabindex="-1"><a class="header-anchor" href="#_5-1-原型引入"><span>5.1 原型引入</span></a></h3><p>在之前有提到过 构造函数中有一个原型对象，放入原型对象的值，每一个实例对象可以访问到。</p><p>构造函数的原型对象本质上是一个新的空对象，而这个对象里面有 <code>constructor</code> 对象可以访问的构造函数，如下图所示。</p><figure><img src="https://raw.githubusercontent.com/hahg2000/SSMPic/main/高级-原型引入.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="_5-2-显式原型与隐式原型" tabindex="-1"><a class="header-anchor" href="#_5-2-显式原型与隐式原型"><span>5.2 显式原型与隐式原型</span></a></h3><p>上面所说的 <code>函数.prototype</code> ，<strong>函数的原型对象</strong> 我们有时会称之为 <strong>显式原型</strong>，而函数的 **实例对象 **有一个 <strong>隐式原型</strong> <code>__proto__</code> 可以通过这个属性访问到 <strong>函数的显示原型</strong>。</p><p>所以我们可知：<span style="color:red;">实例对象的隐式原型 等于 构造函数的显式原型</span>。</p><p>不论是函数的显式原型 还是 实例对象的隐式原型，都是在创建时 <strong>自动生成</strong> 的。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">var</span> p1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">&quot;张三&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 实例对象.__proto__ 已弃用 </span>
<span class="token comment">// 改用 Object.getPrototypeOf(实例对象)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token class-name">Person</span><span class="token punctuation">.</span>prototype <span class="token operator">===</span> Object<span class="token punctuation">.</span><span class="token function">getPrototypeOf</span><span class="token punctuation">(</span>p1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><img src="https://raw.githubusercontent.com/hahg2000/picture/Senior-JS/高级-显式原型和隐式原型.png" style="zoom:80%;"><div class="hint-container warning"><p class="hint-container-title">注意</p><p>我们现在都可以直接操作显式原型和隐式原型，但不建议操作隐式原型。</p></div><h3 id="_5-3-原型链" tabindex="-1"><a class="header-anchor" href="#_5-3-原型链"><span>5.3 原型链</span></a></h3><p>有时我们在使用 <code>对象.toString()</code> 方法时，会有点好奇，我们都没有添加函数到对象里面，为什么可以使用？</p><p>其实这有点像 Java 里的 <strong>继承</strong>，而这里的原理是 JS 会根据 <strong>原型链</strong> 来寻找我们需要的函数。</p><h4 id="_1-概念" tabindex="-1"><a class="header-anchor" href="#_1-概念"><span>（1）概念</span></a></h4><p>原型链，别名 <strong>隐式原型链</strong>，就是根据 <strong>隐式原型</strong> 来 <strong>寻找我们需要的属性</strong>。</p><p>访问一个对象的属性的步骤：</p><ol><li>先在自身属性中查找，找到返回。</li><li>如果没有，再沿着 __proto__ 这条链向上查找, 找到返回。</li><li>如果最终没找到，返回undefined。</li></ol><h4 id="_2-深入" tabindex="-1"><a class="header-anchor" href="#_2-深入"><span>（2）深入</span></a></h4><p>上面说过，实例对象才有 <strong>隐式原型</strong>，但 JS 会通过 <strong>隐式原型链</strong> 来寻找我们需要的属性。</p><p>所以说在 <strong>隐式原型链</strong> 中的 <strong>每一个</strong> 对象都是 <strong>实例对象</strong>。</p><p>假设有下面几行代码。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">var</span> p1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">&quot;张三&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

p1<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol><li>首先寻找到的是 p1 的 <strong>隐式原型</strong>，也就是 <code>Person()</code> 构造函数的 <strong>显式对象</strong>，即 <code>Person.prototype</code>，发现没有 <code>toString()</code> 函数。</li><li>然后就继续寻找到 【Person() 函数的显式对象】的 【隐式原型】，就是 <code>Object()</code> 构造函数的【显式对象】，即 <code>Object.prototype</code> 。因为显式 <strong>对象</strong> 可以看作是 <code>Object()</code> 构造函数的所实例化的，即 <code>Person.prototype = new Object()</code>。</li><li><code>Object()</code> 函数的显式原型中有 <code>toString()</code> 函数，所以不用继续往上找了，而 【Object() 函数的显式原型】的 隐式原型是 <code>null</code> ，即 【Object() 函数的显式原型】 是 <strong>原型链的终点</strong>。</li></ol><p>详细如下图所示：</p><img src="https://raw.githubusercontent.com/hahg2000/picture/Senior-JS/原型链示例1.png" style="zoom:80%;"><h4 id="_3-继续深入" tabindex="-1"><a class="header-anchor" href="#_3-继续深入"><span>（3）继续深入</span></a></h4><p>问：构造函数是否有隐式原型，就像上图的 <code>Person()</code> 和 <code>Object()</code>？</p><p>思考：构造函数对象 是哪个函数 <code>new</code> 来？即 <code>var 构造函数对象 = new xxx();</code></p><hr><p>答：其实是 Function() 来 new 出来的，<strong>每一个函数都是他来创建的</strong>，即 <code>var Person = new Function();</code>。</p><p>所以可以推出【 <code>Person()</code> 的隐式原型 是 <code>Function()</code> 的显式原型】。</p><p>那其实 <code>Function()</code> 函数也是 <code>Function()</code> 创建的，也就是说 <strong>自己创造自己</strong>。根据上句话，就可以得出 <strong>Function() 函数的显式原型和隐式原型是指向同一个对象</strong>。</p><p>再上图继续添加内容：</p><figure><img src="https://raw.githubusercontent.com/hahg2000/picture/Senior-JS/原型链示例2.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>总结：</p><ol><li>任何对象，包括函数的原型链最后都是 <code>Object.prototype</code>；</li><li>任何函数的隐式原型都是 <code>Function()</code> 构造函数的显式原型—— <code>Function.prototype</code></li></ol><h4 id="_4-使用规则" tabindex="-1"><a class="header-anchor" href="#_4-使用规则"><span>（4）使用规则</span></a></h4><ol><li>读取对象的属性值时：会 <strong>自动</strong> 到原型链中查找。</li><li>设置对象的属性值时：不会查找原型链，如果当前对象中没有此属性，<strong>直接添加此属性到对象里并设置其值</strong>。</li><li>方法一般定义在原型中；属性一般通过构造函数定义在对象本身上，除非每一个实例对象的这个属性都一致。</li></ol><h3 id="_5-4-探索instanceof" tabindex="-1"><a class="header-anchor" href="#_5-4-探索instanceof"><span>5.4 探索instanceof</span></a></h3><h4 id="_1-instanceof是如何判断的" tabindex="-1"><a class="header-anchor" href="#_1-instanceof是如何判断的"><span>（1）instanceof是如何判断的</span></a></h4><ul><li>表达式：<code>object instanceof constructor</code></li><li>如果 constructor 的显式原型对象 在 object 的原型链上, 返回 true, 否则返回 false。</li></ul><h4 id="_2-案例1" tabindex="-1"><a class="header-anchor" href="#_2-案例1"><span>（2）案例1</span></a></h4><p>案例1：有一个 Foo() 构造函数，然后使用构造函数创建了一个 f1 的实例对象。</p><p>问：第 3 ~ 4 行输出什么？</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">Foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token punctuation">}</span>
<span class="token keyword">var</span> f1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>f1 <span class="token keyword">instanceof</span> <span class="token class-name">Foo</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>f1 <span class="token keyword">instanceof</span> <span class="token class-name">Object</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><p>答：true；true。</p><p>解析：很简单的一个例子，f1 是 Foo() 所创建的，所以第 3 行是 true；</p><p>而根据第 5.3 节的第（3）点的总结：</p><blockquote><p>任何对象，包括函数的原型链最后都是 <code>Object.prototype</code></p></blockquote><p>所以可以知道 Object 的显式原型对象是在 f1 的原型链上，所以第 4 行为 true。</p><h4 id="_3-案例2" tabindex="-1"><a class="header-anchor" href="#_3-案例2"><span>（3）案例2</span></a></h4><p>案例2 问：下面的输出是什么？</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object <span class="token keyword">instanceof</span> <span class="token class-name">Function</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object <span class="token keyword">instanceof</span> <span class="token class-name">Object</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Function <span class="token keyword">instanceof</span> <span class="token class-name">Function</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Function <span class="token keyword">instanceof</span> <span class="token class-name">Object</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">Foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object <span class="token keyword">instanceof</span>  <span class="token class-name">Foo</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><p>答：第 1 ~ 4 行，true；第 7 行 false。</p><p>解析：第 1 和 第 4 行很明显是 true ，还是是那句话：</p><blockquote><p>任何对象，包括函数的原型链最后都是 <code>Object.prototype</code>。</p></blockquote><p>第 2 和 第 3 行根据下面这句话，得出是 true。</p><blockquote><p>任何函数的隐式原型都是 <code>Function()</code> 构造函数的显式原型—— <code>Function.prototype</code></p></blockquote><p>无论是 Function 还是 Object 都是构造函数。</p><h3 id="_5-5-测试题" tabindex="-1"><a class="header-anchor" href="#_5-5-测试题"><span>5.5 测试题</span></a></h3><h4 id="_1-第一题" tabindex="-1"><a class="header-anchor" href="#_1-第一题"><span>（1）第一题</span></a></h4><p>A 是一个函数，然后在 A 函数的显式原型添加一个 n 属性，然后使用函数创建了一个 b 实例对象。</p><p>接下来将 A 的显式原型重新赋值一个对象，再使用新的 A 函数创建一个 c 实例对象。</p><p>问：b 对象和 c 对象里面有什么属性？</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">var</span> <span class="token function-variable function">A</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

<span class="token class-name">A</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>n <span class="token operator">=</span> <span class="token number">1</span>

<span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token class-name">A</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">n</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>
    <span class="token literal-property property">m</span><span class="token operator">:</span> <span class="token number">3</span>
<span class="token punctuation">}</span>

<span class="token keyword">var</span> c <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span>n<span class="token punctuation">,</span> b<span class="token punctuation">.</span>m<span class="token punctuation">,</span> c<span class="token punctuation">.</span>n<span class="token punctuation">,</span> c<span class="token punctuation">.</span>m<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><p>答：1；undefined；2；3</p><p>解析：这道题有点涉及到内存的知识，首先 b 实例对象的隐式原型指向了 A 函数的显式原型，在 A 函数换显式原型时，之前的显式原型 b 的隐式原型依然引用他，所以不会被回收。</p><p>而然后会再使用 A 函数来创建 c 实例对象，c 的隐式原型自然会指向 A 函数的新显式原型。</p><h4 id="_2-第二题" tabindex="-1"><a class="header-anchor" href="#_2-第二题"><span>（2）第二题</span></a></h4><p>F 是一个构造函数，然后使用 F 创建一个 f 实例对象，再往 Object 的显式原型和 Function 的显式原型分别添加一个函数。</p><p>问：可以通过哪些方式来获取到这些函数，例如第 9 ~ 第 12 行？</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">var</span> <span class="token function-variable function">F</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">a</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;a()&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token class-name">Function</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">b</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;b()&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> f <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">F</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
f<span class="token punctuation">.</span><span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
f<span class="token punctuation">.</span><span class="token function">b</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token constant">F</span><span class="token punctuation">.</span><span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token constant">F</span><span class="token punctuation">.</span><span class="token function">b</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><p>答：可以；报错；可以；可以。</p><p>解析：f 是实例对象，由之前原型链那里得知，Object 显式原型里的属性任何对象都可以使用，例如 <code>f.toString()</code> 。而 f 是实例对象不是函数对象，所以和 Function 没有一点关系。</p><p>F 是函数对象，即是函数又是对象，所以 Function 和 Object 的显式原型都可以访问到。</p><h2 id="六、执行上下文" tabindex="-1"><a class="header-anchor" href="#六、执行上下文"><span>六、执行上下文</span></a></h2><h3 id="_6-1-引入" tabindex="-1"><a class="header-anchor" href="#_6-1-引入"><span>6.1 引入</span></a></h3><p>执行上下文，Execution Context，个人觉得也可以翻译为代码的 <strong>执行环境</strong>。这就像语文中的阅读理解中的题目：“ 联系上下文，作者在xxx时的心情如何？”</p><p>每到一些特定的语句就会创建一个新的 执行环境。Javascript 中的执行环境分为三种：</p><ul><li><strong>全局环境</strong>：JavaScript 代码运行起来会首先进入该环境。</li><li><strong>函数环境</strong>：当函数被调用执行时，会进入当前函数的环境中执行代码。</li><li>eval（不建议使用，可忽略）。</li></ul><h3 id="_6-2-执行上下文栈" tabindex="-1"><a class="header-anchor" href="#_6-2-执行上下文栈"><span>6.2 执行上下文栈</span></a></h3><p>当 Javascript 执行代码时，一定会有多个 <strong>执行环境</strong>，而这些执行环境被存放到栈中，这个栈被称为 <strong>执行上下文栈</strong>。</p><p>执行到一个新的函数，就将新的函数的执行环境压栈；执行完一个函数，就将这个函数的执行环境弹栈。</p><p>执行环境的生命周期大致分为两部分：<strong>创建阶段</strong> 和 <strong>代码执行阶段</strong>。</p><h4 id="_1-创建阶段" tabindex="-1"><a class="header-anchor" href="#_1-创建阶段"><span>（1）创建阶段</span></a></h4><p>在创建阶段中会做三个事情：生成变量对象、建立作用域链和确定 this 的指向。</p><ol><li>生成变量对象</li></ol><p><strong>变量对象</strong>，Variable Object，VO，就像在栈里存的变量名和变量值。</p><p><strong>步骤：</strong></p><ul><li>建立 arguments 对象。检查传进来的参数，建立该对象下的属性与属性值。</li><li>检查当前环境的函数声明，也就是使用 function 关键字声明的函数。在变量对象中以函数名建立一个属性，属性值为指向该函数所在内存地址的引用，即 在栈中先建立函数。</li><li>检查当前环境中的变量声明，每找到一个变量声明，就在变量对象中 <strong>以变量名建立一个属性，属性值为undefined</strong>。如果该变量名的属性已经存在，为了防止同名的函数被修改为undefined，则会直接跳过，原属性值不会被修改。 即使这样写，输出 a 也是 1 <code>var a = 1; var a; console.log(a);</code></li></ul><p>下面举一个例子：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token parameter">number</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
    <span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;add&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token function">fn</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面的代码中的生成变量对象的结果如下图，而在代码执行阶段，变量对象会变为活动对象（Active Object），里面的属性就可以访问了，也就是说可以进行赋值操作了。</p><img src="https://raw.githubusercontent.com/hahg2000/picture/Senior-JS/变量对象建立结果.png" style="zoom:80%;"><ol start="2"><li>建立作用域链</li></ol><p>作用域链会在下一章介绍。</p><ol start="3"><li>确定 this 的指向</li></ol><p>之前简单介绍了 this 的取值，现在深入了解下。</p><h4 id="_2-确定this的指向" tabindex="-1"><a class="header-anchor" href="#_2-确定this的指向"><span>（2）确定this的指向</span></a></h4><p>this 的值用一句话描述就是 “ <strong>哪个对象调用函数，函数的 this 就指向他。</strong>&quot;</p><p>这里简单说明严格模式：<u>在严格模式下，如果没有显式地指明调用对象来调用对象，则 this 就是 undefined</u>。</p><p>然会我们用例子来讲解：</p><p><strong>例子1：</strong></p><p>在全局变量中定义了变量 a，a 的值为 20；然后定义了一个对象。</p><p>问：第 9 ~ 10 行输出什么？</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span>
    <span class="token literal-property property">c</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>a <span class="token operator">+</span> <span class="token number">20</span><span class="token punctuation">,</span>
    <span class="token function-variable function">fn</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>a<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><p>答：40 ；10</p><p>解析：在执行到第 2 行时，会将可以计算属性值计算出来，并添加到 window 的属性中，而 对象的 <code>{ }</code> <strong>不会形成新的作用域</strong>，所以这里的 this 指向 window 。</p><p>而第 10 行中，我们 <strong>使用了 obj 对象来调用属性</strong>，所以 this 是 obj。</p><p><strong>例子2：</strong></p><p>在全局变量中定义了变量 a，a 的值为 20；然后定义了一个对象，对象里有一个函数。然后使用不同的方式调用该函数。</p><p>问：第 8 行和第 11 行输出什么？</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> foo <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span>
    <span class="token function-variable function">getA</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>a<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>foo<span class="token punctuation">.</span><span class="token function">getA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">var</span> test <span class="token operator">=</span> foo<span class="token punctuation">.</span>getA<span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><p>答：10 ； 20。</p><p>解析：第 8 行可以看作是 foo 对象来调用 getA() 函数；</p><p>而第 11 行可以看作是将函数的代码块的地址用一个变量存放，再 <strong>单独</strong> 执行函数，这里的 this 就是 undefined 。在非严格模式下， this 自动从 undefined 变为 window；如果在严格模式下，将报错。</p><p>可以将代码改写成如下，会更好理解：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>
<span class="token keyword">function</span> <span class="token function">getA</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>a<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">var</span> foo <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span>
    <span class="token literal-property property">getA</span><span class="token operator">:</span> getA
<span class="token punctuation">}</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>foo<span class="token punctuation">.</span><span class="token function">getA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 10</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">getA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 非严格模式：20；严格模式：报错</span>
<span class="token comment">// console.log(window.getA()); 输出 20</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>例子3：</strong></p><p>定义了两个函数，一个函数的作用是调用传进来的函数参数，另一个作用是输出信息。然后定义了一个对象，对象里有一个属性引用了输出信息的函数。</p><p>问：控制台输出是什么？</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>a<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">active</span><span class="token punctuation">(</span><span class="token parameter">fn</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 真实调用者，为独立调用</span>
<span class="token punctuation">}</span>

<span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span>
    <span class="token literal-property property">getA</span><span class="token operator">:</span> foo
<span class="token punctuation">}</span>

<span class="token function">active</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>getA<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><p>答：20。</p><p>解析：obj.getA 将 foo() 函数的代码块放进了一个函数里，注意这里并没有执行 foo() 函数。在传进了函数后，才单独执行，所以函数的 this 为 undefined，在非严格模式模式中，自动转换为 window，故为 20。</p><h4 id="_3-测试题" tabindex="-1"><a class="header-anchor" href="#_3-测试题"><span>（3）测试题</span></a></h4><p>下面有几道关于变量提升的测试题，问下面会输出什么？</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// 题目1</span>
<span class="token keyword">function</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>
<span class="token keyword">var</span> a<span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> a<span class="token punctuation">)</span>

<span class="token comment">// 题目2</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>b <span class="token keyword">in</span> window<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span>

<span class="token comment">// 题目3</span>
<span class="token keyword">var</span> c <span class="token operator">=</span> <span class="token number">1</span>
<span class="token keyword">function</span> <span class="token function">c</span><span class="token punctuation">(</span><span class="token parameter">c</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span>
    <span class="token keyword">var</span> c <span class="token operator">=</span> <span class="token number">3</span>
<span class="token punctuation">}</span>
<span class="token function">c</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><p>答：function；undefined；报错。</p><p>解析：1. 因为函数提升先于变量提升，函数提升是执行环境的创建阶段中生成变量对象的第二步，而变量提升是第三步。而使用 var 重复声明变量，是不会覆盖之前的值，所以 a 依然是函数。</p><ol start="2"><li>因为在 ES5 中没有块级作用域，所以任何 var 声明都会在执行环境的创建阶段执行，所以题目 2 和下面代码一致。</li></ol><div class="language-text line-numbers-mode" data-ext="text" data-title="text"><pre class="language-text"><code>var b;
if (!(b in window)) {
    b = 1;
}
console.log(b)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li>第 13 行执行了赋值操作。虽然使用 var 重复声明变量，是不会覆盖之前的值，但执行赋值操作，就会覆盖之前的值，所以 18 行的 c 是一个数字。</li></ol><h4 id="_4-总结" tabindex="-1"><a class="header-anchor" href="#_4-总结"><span>（4）总结</span></a></h4><p>我们可以根据上面的一些知识总结一下，执行上下文的特点：</p><ul><li>单线程；</li><li>同步执行，只有栈顶的上下文处于执行中，其他上下文需要等待；</li><li>全局上下文只有唯一的一个，它在浏览器关闭时出栈；</li><li>函数的执行上下文的个数没有限制；</li><li>每次某个函数被调用，就会有个新的执行上下文为其创建，即使是调用的自身函数，也是如此。</li></ul><h2 id="七、作用域链" tabindex="-1"><a class="header-anchor" href="#七、作用域链"><span>七、作用域链</span></a></h2><h3 id="_7-1-作用域" tabindex="-1"><a class="header-anchor" href="#_7-1-作用域"><span>7.1 作用域</span></a></h3><h4 id="_1-理解-1" tabindex="-1"><a class="header-anchor" href="#_1-理解-1"><span>（1）理解</span></a></h4><ul><li>作用域就是一块 &quot; 地盘 &quot; ， 一个代码段所在的区域，即在上下文栈中的内容。</li></ul><ul><li>它是 <strong>静态</strong> 的（相对于上下文对象），<strong>在编写代码时就确定了</strong>。</li></ul><h4 id="_2-分类" tabindex="-1"><a class="header-anchor" href="#_2-分类"><span>（2）分类</span></a></h4><ul><li><p>全局作用域</p></li><li><p>函数作用域</p></li><li><p>没有块作用域（ES6有了）</p></li></ul><h4 id="_3-作用" tabindex="-1"><a class="header-anchor" href="#_3-作用"><span>（3）作用</span></a></h4><ul><li>隔离变量，不同作用域下同名变量不会有冲突。</li></ul><h3 id="_7-2-作用域链" tabindex="-1"><a class="header-anchor" href="#_7-2-作用域链"><span>7.2 作用域链</span></a></h3><h4 id="_1-理解-2" tabindex="-1"><a class="header-anchor" href="#_1-理解-2"><span>（1）理解</span></a></h4><ul><li><strong>多个上下级关系的作用域形成的链</strong>，它的方向是从下向上的（从内到外）；</li><li><strong>查找变量时就是沿着作用域链来查找的</strong>。</li></ul><h4 id="_2-查找规则" tabindex="-1"><a class="header-anchor" href="#_2-查找规则"><span>（2）查找规则</span></a></h4><p>在当前作用域下的执行上下文中查找对应的属性，如果有直接返回， 否则就去 <strong>根据作用域链去上一级作用域</strong> 寻找，<strong>直到寻找到全局作用域</strong>。如果还没有则报错。</p><h3 id="_7-3-与执行上下文的区别" tabindex="-1"><a class="header-anchor" href="#_7-3-与执行上下文的区别"><span>7.3 与执行上下文的区别</span></a></h3><ol><li>区别1</li></ol><ul><li>每个函数都会创建自己的作用域，作用域在函数定义时就已经确定了，而不是在函数调用时。</li><li>在函数执行时，执行上下文对象的创建阶段中就会 <strong>建立作用域链</strong>。</li></ul><ol start="2"><li>区别2</li></ol><ul><li>作用域是静态的,，只要函数定义好了就一直存在， 且不会再变化</li><li>上下文环境是动态的,，调用函数时创建，函数调用结束时上下文环境就会被释放。</li></ul><ol start="3"><li>联系</li></ol><p>下面举一个例子来说明一下作用域链与执行上下文的联系。</p><p>下面有一段代码，请问输出的是什么？函数之间的作用域链与执行上下文是怎样的？</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// 全局变量</span>
<span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>

<span class="token comment">// 全局函数，用于输出a</span>
<span class="token keyword">function</span> <span class="token function">logNum</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token parameter">number</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token comment">// 将a加上number</span>
    <span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token parameter">number</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        a <span class="token operator">+=</span> number<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">add</span><span class="token punctuation">(</span>number<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">logNum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token function">count</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><p>答：输出的是 2。</p><p>执行的作用域上下文栈的情况如下图：</p><figure><img src="https://raw.githubusercontent.com/hahg2000/picture/Senior-JS/上下文栈实例.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>为了探究作用域链的情况，将画出第 15 行 和 第 16 行的代码执行时的上下文的具体内容。</p><p>因为函数的作用域链 <strong>在定义函数时已经形成了</strong>，不管在哪调用它，都会按照作用域链寻找属性。</p><p>例如，<code>logNum()</code> 函数是定义在全局作用域上的，所以 <strong>其执行时是在全局作用域上寻找</strong>，即 a 的值为 2，如图中的粉色线所示。</p><p>而 <code>add()</code> 函数是定义在函数作用域上的，所以 <strong>其执行时是在定义自己的函数作用域上寻找</strong>，即 a 的值为 1，如图中的蓝线所示。</p><figure><img src="https://raw.githubusercontent.com/hahg2000/picture/Senior-JS/作用域链实例.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="八、闭包" tabindex="-1"><a class="header-anchor" href="#八、闭包"><span>八、闭包</span></a></h2><h3 id="_8-1-引入" tabindex="-1"><a class="header-anchor" href="#_8-1-引入"><span>8.1 引入</span></a></h3><p>之前我们在使用循环来为多个按钮绑定单击事件时，使用了第 10 ~ 14 行的代码，发现是不可行的，因为变量 i 没有固定到函数里。</p><p>而我们当时是使用的是 第 16 ~ 21 行代码，将每个元素节点添加属性，然后再点击时获取这个属性。</p><div class="language-html line-numbers-mode" data-ext="html" data-title="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span><span class="token punctuation">&gt;</span></span>测试1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span><span class="token punctuation">&gt;</span></span>测试2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span><span class="token punctuation">&gt;</span></span>测试3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
    <span class="token keyword">var</span> btns <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">&quot;button&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//  for(var i=0; i&lt;btns.length; i++) {</span>
<span class="token comment">//      btns[i].onclick = function(){</span>
<span class="token comment">//          console.log(i);</span>
<span class="token comment">//      }</span>
<span class="token comment">//  }</span>

    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> btns<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        btns<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>index <span class="token operator">=</span> i<span class="token punctuation">;</span>
        btns<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里需要解决的问题就是如何将 i 变量固定到每个函数中？</p><p>在 ES6 中将 var 改为 let 修饰符就可以实现，因为 ES6 中新添加了块级作用域，所以每一个循环就会形成一个块级作用域，每一个块级作用域就会存放一个独立的 i 变量。</p><p>而在 ES5 我们可以使用闭包来解决。</p><h3 id="_8-2-简介" tabindex="-1"><a class="header-anchor" href="#_8-2-简介"><span>8.2 简介</span></a></h3><h4 id="_1-产生闭包的条件" tabindex="-1"><a class="header-anchor" href="#_1-产生闭包的条件"><span>（1）产生闭包的条件</span></a></h4><p>闭包是一种特殊的对象。</p><p>它由两部分组成。执行上下文（代号A），以及在该执行上下文中创建的函数（代号B）。当B执行时，如果访问了A中变量对象中的值，那么闭包就会产生。</p><p>通俗点的话就是：当一个内部函数引用外部函数的变量时，就产生了闭包。</p><p>从上面的的概念可以总结出产生闭包的条件：</p><ul><li>函数嵌套； <ul><li>内部函数使用了外部函数的数据（变量/函数）。</li></ul></li></ul><h4 id="_2-闭包的作用" tabindex="-1"><a class="header-anchor" href="#_2-闭包的作用"><span>（2）闭包的作用</span></a></h4><p>作用：可以使原本要被回收的变量，继续储存在内存中。</p><p>下面举一个例子：在一个函数中，将内部函数存放到全局变量中，然后再单独执行。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// 设置一个全局变量</span>
<span class="token keyword">var</span> fn <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
<span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
    <span class="token keyword">function</span> <span class="token function">innnerFoo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    fn <span class="token operator">=</span> innnerFoo<span class="token punctuation">;</span> <span class="token comment">// 将innnerFoo的引用，赋值给全局变量中的fn</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 此处的保留的innerFoo的引用</span>
<span class="token punctuation">}</span>

<span class="token comment">// 将fn赋值</span>
<span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 执行fn</span>
<span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出 2</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上面的例子中，foo() 函数执行完毕之后，按照常理，其执行环境生命周期会结束，所占内存被垃圾收集器释放。但是通过<code>fn = innerFoo</code>，函数 innerFoo 的引用被保留了下来，复制给了全局变量 fn。</p><p>这个行为，导致了 <code>foo()</code> 函数的变量对象，也 <strong>被保留了下来</strong>。于是，函数 fn 在函数 bar 内部执行时，依然可以访问这个被保留下来的变量对象。所以此刻仍然能够访问到变量 a 的值。</p><h3 id="_8-3-使用chrome观察闭包" tabindex="-1"><a class="header-anchor" href="#_8-3-使用chrome观察闭包"><span>8.3 使用chrome观察闭包</span></a></h3><p>我们可以使用 chrome 的开发者工具来观察闭包。</p><p>第一步：打开 chrome 浏览器，按下 F12。</p><p>第二步：在浏览器运行代码。</p><p>第三步：在开发者工具的标签栏上选中 “ Sources ”。</p><figure><img src="https://raw.githubusercontent.com/hahg2000/picture/Senior-JS/chrome查看闭包1.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>第四步：在代码中设置断点，点击代码左边的代码行数。</p><figure><img src="https://raw.githubusercontent.com/hahg2000/picture/Senior-JS/chrome查看闭包2.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>第五步：刷新页面，执行几步，查看最右边信息。可以看到闭包的形成。我们也可以使用开发者工具查看作用域链、执行上下文栈和 this 的值。</p><img src="https://raw.githubusercontent.com/hahg2000/picture/Senior-JS/chrome查看闭包3.png" style="zoom:80%;"><h3 id="_8-4-闭包的应用" tabindex="-1"><a class="header-anchor" href="#_8-4-闭包的应用"><span>8.4 闭包的应用</span></a></h3><p>我们可以使用闭包来实现一些应用：</p><ul><li>柯里化</li><li>模块</li></ul><p>下面来细讲一下模块：</p><h4 id="_1-模块的特点" tabindex="-1"><a class="header-anchor" href="#_1-模块的特点"><span>（1）模块的特点</span></a></h4><ul><li>具有特定功能的 js 文件。</li></ul><ul><li>将所有的数据和功能都封装在一个函数内部，就像 Java 中的 private。</li></ul><ul><li>只向外暴露一个 或者 n 个方法的对象或函数。</li><li>模块的使用者，只需要通过模块暴露的对象调用方法来实现对应的功能。</li></ul><h4 id="_2-特点1" tabindex="-1"><a class="header-anchor" href="#_2-特点1"><span>（2）特点1</span></a></h4><blockquote><p>具有特定功能的 js 文件。</p></blockquote><p>一般我们定义模块会在一个全新的 js 文件，方便多次使用。</p><p>那我们新建一个新的 js 文件，名为 myModule.js ，然后文件里创建一个函数，名为 logMsg。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// myModule.js</span>

<span class="token keyword">function</span> <span class="token function">logMsg</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
 
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-特点2" tabindex="-1"><a class="header-anchor" href="#_3-特点2"><span>（3）特点2</span></a></h4><blockquote><p>将所有的数据和功能都封装在一个函数内部，就像 Java 中的 private。</p></blockquote><p>我们将所有的数据封装到函数里，外面就访问不到里面的数据。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">logMsg</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> msg <span class="token operator">=</span> <span class="token string">&quot;This is a MSG&quot;</span><span class="token punctuation">;</span>

  <span class="token keyword">function</span> <span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;doSomething() &quot;</span><span class="token operator">+</span>msg<span class="token punctuation">.</span>toUpperCase<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  
  <span class="token keyword">function</span> <span class="token function">doOtherthing</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;doOtherthing() &quot;</span><span class="token operator">+</span>msg<span class="token punctuation">.</span>toLowerCase<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在外部无法获取和修改 mgs 的值。但我们需要向外部暴露我们需要的函数。</p><h4 id="_4-特点4" tabindex="-1"><a class="header-anchor" href="#_4-特点4"><span>（4）特点4</span></a></h4><blockquote><p>只向外暴露一个 或者 n 个方法的对象或函数。</p></blockquote><p>如果我们只需要暴露一个函数，直接返回即可。但如果需要暴露多个函数，则需要将函数封装成对象，再返回出去。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">logMsg</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> msg <span class="token operator">=</span> <span class="token string">&#39;This is a MSG&#39;</span>

  <span class="token keyword">function</span> <span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;doSomething() &#39;</span> <span class="token operator">+</span> msg<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">function</span> <span class="token function">doOtherthing</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;doOtherthing() &#39;</span> <span class="token operator">+</span> msg<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>

  <span class="token comment">// 暴露一个函数</span>
  <span class="token comment">// return doOtherthing;</span>

  <span class="token comment">// 暴露多个函数</span>
  <span class="token keyword">return</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">doSomething</span><span class="token operator">:</span> doSomething<span class="token punctuation">,</span>
    <span class="token literal-property property">doOtherthing</span><span class="token operator">:</span> doOtherthing<span class="token punctuation">,</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>而我们需要这样使用：就像调用外部函数里的内部函数一样调用。<code>xxx.内部函数名()</code></p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">var</span> logMsg <span class="token operator">=</span> <span class="token function">logMsg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

logMsg<span class="token punctuation">.</span><span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们也可以使用另一种方式来暴露内部函数——立即调用函数表达式：</p><ul><li>第 1 行最开始的冒号最好加上，因为防止上一行代码因为没写冒号而报错。</li><li>第 1 行的函数形参和 第 17 行的函数实参，建议加上，因为防止代码压缩时报错。</li><li>第 13 ~ 16 行中，通过往 window 对象添加属性，向外暴露指定的函数。而使用只需要 <code>window.内部函数名()</code> 即可调用，不用先声明一个变量，再使用这个变量调用内部函数。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token punctuation">;</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">window</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> msg <span class="token operator">=</span> <span class="token string">&#39;This is a MSG&#39;</span>

  <span class="token keyword">function</span> <span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;doSomething() &#39;</span> <span class="token operator">+</span> msg<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">function</span> <span class="token function">doOtherthing</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;doOtherthing() &#39;</span> <span class="token operator">+</span> msg<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>

  <span class="token comment">// 通过window对象来暴露多个函数</span>
  window<span class="token punctuation">.</span>myModule <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">doSomething</span><span class="token operator">:</span> doSomething<span class="token punctuation">,</span>
    <span class="token literal-property property">doOtherthing</span><span class="token operator">:</span> doOtherthing<span class="token punctuation">,</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span>window<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_8-5-闭包的缺点" tabindex="-1"><a class="header-anchor" href="#_8-5-闭包的缺点"><span>8.5 闭包的缺点</span></a></h3><p>在介绍闭包的缺点之前，先介绍两个概念：内存泄漏和内存溢出。</p><h4 id="_1-内存泄漏" tabindex="-1"><a class="header-anchor" href="#_1-内存泄漏"><span>（1）内存泄漏</span></a></h4><p>内存泄漏，并不是内存里的数据跑到了不该到的地方，而是 <strong>因为定义了太多的全局变量，而忘记释放了之后没有用到的全部变量，导致可用内存减少</strong>，就像内存的空间泄漏一样。</p><p>而我觉得叫 <strong>内存冗余</strong> 会更好。冗余顾名思义：内存原本只需要定义一两个全局变量，但却定义了多个全局变量；内存里过多的变量占着空间却没什么用，就像古代一些朝代官员冗余一样。</p><p>常见的内存泄漏：</p><ul><li>意外的全局变量；</li><li>没有及时清理的计时器或回调函数；</li><li>闭包。</li></ul><h4 id="_2-内存溢出" tabindex="-1"><a class="header-anchor" href="#_2-内存溢出"><span>（2）内存溢出</span></a></h4><p>内存溢出，顾名思义，就是内存满了，数据要溢出来。</p><p>是一种程序运行出现的错误。<strong>当程序运行需要的内存超过了剩余的内存时，就会抛出内存溢出的错误</strong>。</p><h4 id="_3-闭包的缺点" tabindex="-1"><a class="header-anchor" href="#_3-闭包的缺点"><span>（3）闭包的缺点</span></a></h4><ol><li>函数执行完成后，函数内部的局部变量没有释放，占用内存的时间会变长。</li><li>容易造成内存泄漏</li></ol><p>解决：</p><ol><li>尽可能不用闭包。</li><li>及时释放闭包。</li></ol><h3 id="_8-6-测试题" tabindex="-1"><a class="header-anchor" href="#_8-6-测试题"><span>8.6 测试题</span></a></h3><p>这里有三道经典的测试题来测试你对闭包的理解。</p><h4 id="_1-题目一" tabindex="-1"><a class="header-anchor" href="#_1-题目一"><span>（1）题目一</span></a></h4><p>题目：定义了一个全局变量 <code>name</code> 。然后定义了一个对象 <code>object</code>，对象里也有个名字为 <code>name</code> 的属性，对象里还有个函数，函数的返回值也是个函数。最后两次调用 <code>object</code> 这个函数。</p><p>问：弹出的信息是什么？</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">//代码片段一</span>
<span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string">&quot;The Window&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> object <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">name</span> <span class="token operator">:</span> <span class="token string">&quot;My Object&quot;</span><span class="token punctuation">,</span>
    <span class="token function-variable function">getNameFunc</span> <span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token function">alert</span><span class="token punctuation">(</span>object<span class="token punctuation">.</span><span class="token function">getNameFunc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><p><strong>答：The Window；在严格模式下报错。</strong></p><p>解析：将单独的一个函数返回出去，因为返回出去的函数没有访问外部函数的变量，所以没有产生闭包。所以 this 是 undefined ，在非严格模式下自动转为 window 对象，而在严格模式下不会自动转为 window 对象。</p><h4 id="_2-题目二" tabindex="-1"><a class="header-anchor" href="#_2-题目二"><span>（2）题目二</span></a></h4><p>题目：在上面的基础上，添加了第 5 行，将 this 存到一个变量 that，然后再使用 that 访问属性。</p><p>问：弹出的信息是什么？</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string">&quot;The Window&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> object <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;My Object&quot;</span><span class="token punctuation">,</span>
    <span class="token function-variable function">getNameFunc</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">var</span> that <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> that<span class="token punctuation">.</span>name<span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token function">alert</span><span class="token punctuation">(</span>object<span class="token punctuation">.</span><span class="token function">getNameFunc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//?</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><p><strong>答：My Object。</strong></p><p>解析：因为第 6 ~ 8 行中访问了外部函数的变量 that，所以产生了闭包。而第 11 行调用时是使用 obj 来调用，所以 this 的值就为 obj 变量。</p><h4 id="_3-题目三" tabindex="-1"><a class="header-anchor" href="#_3-题目三"><span>（3）题目三</span></a></h4><p>题目：定义一个一个函数 fun，然后里面输出第二个参数，返回值是一个对象，对象里有一个同名的属性，其属性值为一个函数，函数的返回值为当前函数再次调用的结果。</p><p>问：下面输出什么？</p><p>提示：这道题主要考察的是闭包的生命周期。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token parameter">n<span class="token punctuation">,</span>o</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span>
        <span class="token function-variable function">fun</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">m</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token function">fun</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  a<span class="token punctuation">.</span><span class="token function">fun</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  a<span class="token punctuation">.</span><span class="token function">fun</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  a<span class="token punctuation">.</span><span class="token function">fun</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>	<span class="token comment">//undefined,?,?,?</span>
<span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fun</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fun</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fun</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>	<span class="token comment">//undefined,?,?,?</span>
<span class="token keyword">var</span> c <span class="token operator">=</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fun</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  c<span class="token punctuation">.</span><span class="token function">fun</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  c<span class="token punctuation">.</span><span class="token function">fun</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>	<span class="token comment">//undefined,?,?,?</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><p>解析：首先先看第 9 行的 <code>var a = fun(0); a.fun(1);</code>：</p><ol><li><p>调用 <code>fun(0)</code> ，因为第二个参数省略，所以第 2 行输出 <code>undefined</code> 。</p></li><li><p>返回的是一个对象，产生了闭包，所以变量 a 为 <code>{ fun: function(m){return fun(m, 0)} }</code></p></li><li><p><code>a.fun(1)</code>：获取到属性名为 <code>fun</code> 的属性值，再执行这个属性值，即执行这个函数 <code>function(1){return fun(1, 0)}</code></p></li><li><p>执行函数中又要继续调用函数 <code>fun(1, 0)</code> ，输出的第二个参数所以输出 0，产生了新的闭包，但我们没有用变量接收，所以闭包被回收。</p></li></ol><p>其他的依次类推，继续从第 3 步开始执行，发现我们都是使用 <code>{ fun: function(m){return fun(m, 0)} }</code> 这个闭包，而我们输出的是第二参数，第二个参数没有发生改变。</p><p><strong>所以第 9 行的答案是：undefined；0；0；0。</strong></p><hr><p>然后看第 10 行，从这个链式结构可以看出，前面的函数的调用会使用到前面的闭包。</p><ol><li><p>变量 <code>fun(0)</code> 为 <code>{ fun: function(m){return fun(m, 0)} }</code>；</p></li><li><p><code>fun(0).fun(1)</code> ：执行 <code>function(1){return fun(1, 0)}</code>；</p></li><li><p>执行完毕后的返回值为 <code>fun(1,0)</code>，即 输出 0，返回一个对象，对象为 <code>{ fun: function(m){return fun(m, 1)} }</code>；</p></li><li><p>再使用这个对象调用 <code>fun(2)</code> ，即执行函数 <code>function(2){return fun(2, 1)}</code>；</p></li><li><p>而计算返回值会继续执行 <code>fun(2,1)</code> ，会输出 1，再返回一个对象，对象为 <code>{ fun: function(m){return fun(m, 2)} }</code>；</p></li><li><p>依次类推，得出最后输出 2。</p></li></ol><p><strong>所以第 10 行的答案是：undefined；0；1；2。</strong></p><hr><p>第 11 行就是结合上面两个的情况，有链式调用，也有重复调用。</p><p>变量 c 所存的闭包是 <code>{ fun: function(m){return fun(m, 1)} }</code> ，所以最后两个输出 1</p><p><strong>所以第 11 行的答案是：undefined；0；1；1。</strong></p>`,391),o=[e];function c(i,l){return s(),a("div",null,o)}const d=n(p,[["render",c],["__file","原生JS高级-上.html.vue"]]),k=JSON.parse('{"path":"/%E5%AD%A6%E4%B9%A0/%E5%89%8D%E7%AB%AF/%E5%8E%9F%E7%94%9FJS/%E5%8E%9F%E7%94%9FJS%E9%AB%98%E7%BA%A7-%E4%B8%8A.html","title":"原生JS高级-上","lang":"zh-CN","frontmatter":{"description":"原生JS高级-上 一、数据类型 1.1 分类 数据类型分为 基本 / 值 类型 和 对象 / 引用 类型。 基本类型分为： 对象类型分为： 1.2 判断 判断数据类型可以使用两种方法： typeof 数据 ，返回的是 字符串，表示未经计算的操作数的类型； object instanceof constructor ，返回的是 布尔值，用于检测构造函数的...","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/%E5%AD%A6%E4%B9%A0/%E5%89%8D%E7%AB%AF/%E5%8E%9F%E7%94%9FJS/%E5%8E%9F%E7%94%9FJS%E9%AB%98%E7%BA%A7-%E4%B8%8A.html"}],["meta",{"property":"og:site_name","content":"博客演示"}],["meta",{"property":"og:title","content":"原生JS高级-上"}],["meta",{"property":"og:description","content":"原生JS高级-上 一、数据类型 1.1 分类 数据类型分为 基本 / 值 类型 和 对象 / 引用 类型。 基本类型分为： 对象类型分为： 1.2 判断 判断数据类型可以使用两种方法： typeof 数据 ，返回的是 字符串，表示未经计算的操作数的类型； object instanceof constructor ，返回的是 布尔值，用于检测构造函数的..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://raw.githubusercontent.com/hahg2000/SSMPic/main/%E9%AB%98%E7%BA%A7-%E5%8E%9F%E5%9E%8B%E5%BC%95%E5%85%A5.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-02-24T04:33:47.000Z"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:alt","content":"原生JS高级-上"}],["meta",{"property":"article:author","content":"hahg"}],["meta",{"property":"article:modified_time","content":"2024-02-24T04:33:47.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"原生JS高级-上\\",\\"image\\":[\\"https://raw.githubusercontent.com/hahg2000/SSMPic/main/%E9%AB%98%E7%BA%A7-%E5%8E%9F%E5%9E%8B%E5%BC%95%E5%85%A5.png\\",\\"https://raw.githubusercontent.com/hahg2000/picture/Senior-JS/%E5%8E%9F%E5%9E%8B%E9%93%BE%E7%A4%BA%E4%BE%8B2.png\\",\\"https://raw.githubusercontent.com/hahg2000/picture/Senior-JS/%E4%B8%8A%E4%B8%8B%E6%96%87%E6%A0%88%E5%AE%9E%E4%BE%8B.png\\",\\"https://raw.githubusercontent.com/hahg2000/picture/Senior-JS/%E4%BD%9C%E7%94%A8%E5%9F%9F%E9%93%BE%E5%AE%9E%E4%BE%8B.png\\",\\"https://raw.githubusercontent.com/hahg2000/picture/Senior-JS/chrome%E6%9F%A5%E7%9C%8B%E9%97%AD%E5%8C%851.png\\",\\"https://raw.githubusercontent.com/hahg2000/picture/Senior-JS/chrome%E6%9F%A5%E7%9C%8B%E9%97%AD%E5%8C%852.png\\"],\\"dateModified\\":\\"2024-02-24T04:33:47.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"hahg\\"}]}"]]},"headers":[{"level":2,"title":"一、数据类型","slug":"一、数据类型","link":"#一、数据类型","children":[{"level":3,"title":"1.1 分类","slug":"_1-1-分类","link":"#_1-1-分类","children":[]},{"level":3,"title":"1.2 判断","slug":"_1-2-判断","link":"#_1-2-判断","children":[]},{"level":3,"title":"1.3 undefined与null","slug":"_1-3-undefined与null","link":"#_1-3-undefined与null","children":[]}]},{"level":2,"title":"二、数据与内存","slug":"二、数据与内存","link":"#二、数据与内存","children":[{"level":3,"title":"2.1 概念","slug":"_2-1-概念","link":"#_2-1-概念","children":[]},{"level":3,"title":"2.2 相关问题","slug":"_2-2-相关问题","link":"#_2-2-相关问题","children":[]}]},{"level":2,"title":"三、对象","slug":"三、对象","link":"#三、对象","children":[{"level":3,"title":"3.1 引入","slug":"_3-1-引入","link":"#_3-1-引入","children":[]},{"level":3,"title":"3.2 相关问题","slug":"_3-2-相关问题","link":"#_3-2-相关问题","children":[]}]},{"level":2,"title":"四、函数","slug":"四、函数","link":"#四、函数","children":[{"level":3,"title":"4.1 简介","slug":"_4-1-简介","link":"#_4-1-简介","children":[]},{"level":3,"title":"4.2 回调函数","slug":"_4-2-回调函数","link":"#_4-2-回调函数","children":[]},{"level":3,"title":"4.3 IIFE","slug":"_4-3-iife","link":"#_4-3-iife","children":[]},{"level":3,"title":"4.4 this","slug":"_4-4-this","link":"#_4-4-this","children":[]},{"level":3,"title":"4.5 分号问题","slug":"_4-5-分号问题","link":"#_4-5-分号问题","children":[]}]},{"level":2,"title":"五、原型","slug":"五、原型","link":"#五、原型","children":[{"level":3,"title":"5.1 原型引入","slug":"_5-1-原型引入","link":"#_5-1-原型引入","children":[]},{"level":3,"title":"5.2 显式原型与隐式原型","slug":"_5-2-显式原型与隐式原型","link":"#_5-2-显式原型与隐式原型","children":[]},{"level":3,"title":"5.3 原型链","slug":"_5-3-原型链","link":"#_5-3-原型链","children":[]},{"level":3,"title":"5.4 探索instanceof","slug":"_5-4-探索instanceof","link":"#_5-4-探索instanceof","children":[]},{"level":3,"title":"5.5 测试题","slug":"_5-5-测试题","link":"#_5-5-测试题","children":[]}]},{"level":2,"title":"六、执行上下文","slug":"六、执行上下文","link":"#六、执行上下文","children":[{"level":3,"title":"6.1 引入","slug":"_6-1-引入","link":"#_6-1-引入","children":[]},{"level":3,"title":"6.2 执行上下文栈","slug":"_6-2-执行上下文栈","link":"#_6-2-执行上下文栈","children":[]}]},{"level":2,"title":"七、作用域链","slug":"七、作用域链","link":"#七、作用域链","children":[{"level":3,"title":"7.1 作用域","slug":"_7-1-作用域","link":"#_7-1-作用域","children":[]},{"level":3,"title":"7.2 作用域链","slug":"_7-2-作用域链","link":"#_7-2-作用域链","children":[]},{"level":3,"title":"7.3 与执行上下文的区别","slug":"_7-3-与执行上下文的区别","link":"#_7-3-与执行上下文的区别","children":[]}]},{"level":2,"title":"八、闭包","slug":"八、闭包","link":"#八、闭包","children":[{"level":3,"title":"8.1 引入","slug":"_8-1-引入","link":"#_8-1-引入","children":[]},{"level":3,"title":"8.2 简介","slug":"_8-2-简介","link":"#_8-2-简介","children":[]},{"level":3,"title":"8.3 使用chrome观察闭包","slug":"_8-3-使用chrome观察闭包","link":"#_8-3-使用chrome观察闭包","children":[]},{"level":3,"title":"8.4  闭包的应用","slug":"_8-4-闭包的应用","link":"#_8-4-闭包的应用","children":[]},{"level":3,"title":"8.5 闭包的缺点","slug":"_8-5-闭包的缺点","link":"#_8-5-闭包的缺点","children":[]},{"level":3,"title":"8.6 测试题","slug":"_8-6-测试题","link":"#_8-6-测试题","children":[]}]}],"git":{"createdTime":1708749227000,"updatedTime":1708749227000,"contributors":[{"name":"hahg2000","email":"61403802+hahg2000@users.noreply.github.com","commits":1}]},"readingTime":{"minutes":32.96,"words":9889},"filePathRelative":"学习/前端/原生JS/原生JS高级-上.md","localizedDate":"2024年2月24日","excerpt":"\\n<h2>一、数据类型</h2>\\n<h3>1.1 分类</h3>\\n<p>数据类型分为 <strong>基本 / 值</strong> 类型 和 <strong>对象 / 引用</strong> 类型。</p>\\n<p>基本类型分为：</p>\\n<table>\\n<thead>\\n<tr>\\n<th>关键字</th>\\n<th>内容</th>\\n<th>关键字</th>\\n<th>内容</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td><strong>String</strong></td>\\n<td>任意字符串</td>\\n<td><strong>boolean</strong></td>\\n<td>true/false</td>\\n</tr>\\n<tr>\\n<td><strong>Number</strong></td>\\n<td>任意的数字</td>\\n<td><strong>undefined</strong></td>\\n<td>undefined</td>\\n</tr>\\n<tr>\\n<td><strong>null</strong></td>\\n<td>null（空对象）</td>\\n<td></td>\\n<td></td>\\n</tr>\\n</tbody>\\n</table>","autoDesc":true}');export{d as comp,k as data};
