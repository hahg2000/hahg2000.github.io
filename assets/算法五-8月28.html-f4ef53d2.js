import{_ as e,W as o,X as l,Y as n,Z as s,$ as p,a2 as a,C as c}from"./framework-0bc3c581.js";const i={},u=n("h1",{id:"算法五-8月28",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#算法五-8月28","aria-hidden":"true"},"#"),s(" 算法五-8月28")],-1),r=n("h2",{id:"三十七、统计所有可行路径",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#三十七、统计所有可行路径","aria-hidden":"true"},"#"),s(" 三十七、统计所有可行路径")],-1),k=n("p",null,"原题链接：",-1),d={href:"https://mp.weixin.qq.com/s?__biz=MzU4NDE3MTEyMA==&mid=2247485297&idx=1&sn=5ee4ce31c42d368af0653f60aa263c82&chksm=fd9cac6ecaeb25787e6da90423c5467e1679da0a8aaf1a3445475199a8f148d8629e851fea57&cur_album_id=1715134171561410565&scene=189#wechat_redirect",target:"_blank",rel:"noopener noreferrer"},m=a(`<blockquote><p>给你一个 互不相同 的整数数组，其中 <code>locations[i]</code> 表示第 i 个城市的位置。同时给你 <code>start</code>，<code>finish</code> 和 <code>fuel</code> 分别表示出发城市、目的地城市和你初始拥有的汽油总量</p><p>每一步中，如果你在城市 i ，你可以选择任意一个城市 j ，满足 <code>j != i</code> 且 <code>0 &lt;= j &lt; locations.length</code> ，并移动到城市 j 。从城市 i 移动到 j 消耗的汽油量为 <code>|locations[i] - locations[j]|</code></p><p>请你返回从 start 到 finish 所有可能路径的数目。</p><p>由于答案可能很大， 请将它对 10<sup>9</sup> + 7 取余后返回</p><p>示例 1：</p><ul><li>输入：locations = [2,3,6,8,4], start = 1, finish = 3, fuel = 5</li><li>输出：4</li><li>解释：以下为所有可能路径，每一条都用了 5 单位的汽油： <ul><li>1 -&gt; 3 （3 -&gt; 8）</li><li>1 -&gt; 2 -&gt; 3 （3 -&gt; 6 -&gt; 8 ）</li><li>1 -&gt; 4 -&gt; 3 （3 -&gt; 4 -&gt; 8 ）</li><li>1 -&gt; 4 -&gt; 2 -&gt; 3 （3 -&gt; 4 -&gt; 6 -&gt; 8 ）</li></ul></li></ul><p>提示：</p><ul><li>2 &lt;= locations.length &lt;= 100</li><li>1 &lt;= locations[i] &lt;= 10<sup>9</sup></li><li>所有 locations 中的整数 互不相同</li><li>0 &lt;= start, finish &lt; locations.length</li><li>1 &lt;= fuel &lt;= 200</li></ul></blockquote><h3 id="_1-思路" tabindex="-1"><a class="header-anchor" href="#_1-思路" aria-hidden="true">#</a> （1）思路</h3><p>首先理解题意：给出起始城市和终点城市，然后给出一定的油量，计算出有几条路径。</p><p>前面几天的题目，本质上对应的模型其实是：<strong>特定「起点」，明确且有限的「移动方向」（转移状态），求解所有状态中的最优值。</strong></p><p>但本题只是告诉了我们移动规则，没有告诉我们具体该如何移动。<strong>一定程度上，你可以将此类问题理解成另外一种【路径问题】。</strong></p><p>这道题的数据范围也只有 10<sup>2</sup>，很多同学会想到 DFS。但是之前讲过，单纯的 DFS 由于是指数级别的复杂度，通常数据范围不出超过 30。不过，「记忆化搜索」可以符合题目的时间复杂度。</p><h3 id="_2-找递归出口" tabindex="-1"><a class="header-anchor" href="#_2-找递归出口" aria-hidden="true">#</a> （2）找递归出口</h3><p>我们知道，如果要实现 DFS 的话，通常有以下几个步骤：</p><ol><li>设计好递归函数的「入参」和「出参」</li><li><strong>设置好递归函数的出口（Base Case）</strong></li><li>编写「最小单元」处理逻辑</li></ol><p>【对于大多数的 DFS 来说，第 1 步和第 3 步都很好实现，<strong>而找 Base Case 通常是三部曲中最难的</strong>。】</p><p>以本题为例，我们来剖析一下「该如何找 Base Case」。</p><ul><li><p><strong>首先要明确，所谓的找 Base Case，其实是在确定什么样的情况下，算一次有效/无效。</strong></p><ul><li>对于本题，找 Base Case 其实就是在确定：什么样的情况下，算是 0 条路径；什么样的情况下，算是 1 条路径。</li></ul></li><li><p><strong>然后再在 DFS 过程中，不断的累加有效情况（算作路径数量为 1）的个数作为答案。</strong></p><ul><li>这是 DFS 的本质，也是找 Base Case 的思考过程。</li><li>回到本题，对于 <strong>有效情况</strong> 的确立，十分简单直接，如果我们当前所在的位置就是目的位置 <strong>且不能到任何一个地方</strong> 的话，那就算成是一条有效路径，我们可以对路径数量进行 +1。</li></ul></li><li><p>那么如何确立 <strong>无效情况</strong> 呢？</p><ul><li>一个直观的感觉是 <strong>当油量消耗完，所在位置又不在最终位置 ，那么就算走到头了，算是一次「无效情况」，可以终止递归。</strong></li></ul></li></ul><p>逻辑上这没有错，但是存在油量始终无法为零的情况。</p><p>考虑以下样例数据：</p><ul><li><p>locations = [0,2,2,2], start = 0, finish = 3, fuel = 1</p></li><li><p>我们当前位置在 0，想要到达 3，但是油量为 1，无法移动到任何位置。</p></li></ul><p>因此还要增加一个限制条件：<strong>油量不为 0，但无法再移动到任何位置，且不在目的位置，也算是一次「无效情况」，可以终止递归。</strong></p><h3 id="_3-记忆化搜索" tabindex="-1"><a class="header-anchor" href="#_3-记忆化搜索" aria-hidden="true">#</a> （3）记忆化搜索</h3><p>我们将使用缓存来记忆之前搜索过的路径。</p><ul><li>缓存器的设计也十分简单，使用二维数组 <code>cache[n][fuel+1]</code> 进行记录即可。（fuel + 1 的长度是为了能取到 <code>cache[x][fuel]</code> ）</li><li>我们用 <code>cache[i][fuel]</code> 代表从位置 i 出发，当前剩余的油量为 fuel 的前提下，<strong>到达目标位置</strong> 的「路径数量」。</li><li>之所以能采取「缓存中间结果」这样的做法，是因为 <strong>在 i 和 fuel 确定的情况下，其到达目的地的路径数量是唯一确定的</strong>。因为目的位置不会动，当 i 和 fuel 也不动的话，那么所有条件都固定了，到达目的位置的路径数量也不会动</li><li>每次都使用到之前计算过的数据，就有点像之前几题的动态规划的思路了。</li></ul><h3 id="_4-代码分段实现" tabindex="-1"><a class="header-anchor" href="#_4-代码分段实现" aria-hidden="true">#</a> （4）代码分段实现</h3><p>首先实现递归退出条件，退出条件也涉及到递归的最后一层，也就是条件最小范围的一层。只有最后一层设计正确，上面几层才能正确地滚雪球。</p><p>根据第 （2）点知道了退出递归的条件：</p><ul><li>最小逻辑的有效路径： <ul><li>当前所在的位置就是目的地 <strong>且不能到任何一个地方</strong></li></ul></li><li>无效路径： <ul><li>当油量消耗完，所在位置又不在最终位置</li><li>油量不为 0，但不能到任何一个地方，且不在目的位置。</li></ul></li></ul><p>有效和无效的第 2 点都需要遍历每一个地方，来确定不能到任何一个地方，所以将这两个情况写在一起。</p><ul><li><code>start</code> ：代表当前递归的起始位置</li><li><code>fuel</code> ：当前递归所拥有的油量</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">boolean</span> hasNext <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> locations<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 排除掉当前格到当前格的情况</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">!=</span> start<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> need <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>locations<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> locations<span class="token punctuation">[</span>start<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>	
    <span class="token comment">// 油量大于移动所需的量，则证明可以到达其他位置</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>fuel <span class="token operator">&gt;=</span> need<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      hasNext <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
      <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// 有效情况</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>hasNext <span class="token operator">&amp;&amp;</span> start <span class="token operator">==</span> end<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  cache<span class="token punctuation">[</span>start<span class="token punctuation">]</span><span class="token punctuation">[</span>fuel<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>hasNext <span class="token operator">&amp;&amp;</span> start <span class="token operator">!=</span> end<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 无效情况</span>
  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">// 第15~20行可以简写成下面</span>
<span class="token comment">// if (fuel != 0 &amp;&amp; !hasNext) {</span>
<span class="token comment">//  int a= cache[u][fuel] = u==end?1:0;</span>
<span class="token comment">//  return a;</span>
<span class="token comment">// }</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>无效的第 1 点很好写，直接判断即可。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">if</span> <span class="token punctuation">(</span>fuel <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> start <span class="token operator">!=</span> end<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  cache<span class="token punctuation">[</span>start<span class="token punctuation">]</span><span class="token punctuation">[</span>fuel<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接着就需要写出 <strong>「最小单元」处理逻辑</strong> ，也就是 <strong>如何处理最小单元的返回值</strong>。每次把路线加起来就行。</p><p>但代码注意几个地方：</p>`,30),v=n("li",null,[n("code",null,"sum"),s(" 代表当前递归的路线总和。初始化的时候不单单只赋值 0，有时要赋值 1，例如当前为目的位置。如第 1 行所示。")],-1),b=n("code",null,"sum",-1),h=n("li",null,[s("为什么要对 10"),n("sup",null,"9"),s(" + 7 取余？（整型的取值范围为 -2147483648～2147483647 —— -2 * 10"),n("sup",null,"9"),s("～ 2 * 10"),n("sup",null,"9"),s(" ）")],-1),y=n("li",null,"似乎是可以将较大的数变成较小的数。原理好像涉及到一些模运算的性质。待研究。",-1),g={href:"https://www.geeksforgeeks.org/modulo-1097-1000000007/",target:"_blank",rel:"noopener noreferrer"},w={href:"https://www.quora.com/What-exactly-is-print-it-modulo-10-9-+-7-in-competitive-programming-web-sites",target:"_blank",rel:"noopener noreferrer"},f=n("li",null,[s("在循环每个起始位置时，"),n("strong",null,"判断当前有的油量能不能到达指定位置，不能到达则可以不进入下一个递归"),s("。如第 5 行所示。 "),n("ul",null,[n("li",null,[s("因为进入递归后返回的是 0，"),n("code",null,"sum += 0"),s(" 和不进入递归一样。")]),n("li",null,[s("如果不想判断的话，需要改动无效的第 1 点，返回 0 的条件改为 "),n("code",null,"fuel < 0 || (fuel == 0 && start != end)")])])],-1),x=n("li",null,"最后需要将当前结果记录到缓存中。如第 12 行所示。",-1),_=a(`<div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">int</span> sum <span class="token operator">=</span> u <span class="token operator">==</span> end <span class="token operator">?</span> <span class="token number">1</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> locations<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">!=</span> start<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> need <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>locations<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> locations<span class="token punctuation">[</span>start<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
    <span class="token keyword">if</span> <span class="token punctuation">(</span>fuel <span class="token operator">&gt;=</span> need<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      sum <span class="token operator">+=</span> <span class="token function">dfs</span><span class="token punctuation">(</span>locations<span class="token punctuation">,</span> i<span class="token punctuation">,</span> end<span class="token punctuation">,</span> fuel <span class="token operator">-</span> need<span class="token punctuation">)</span><span class="token punctuation">;</span>
    	sum <span class="token operator">%=</span> <span class="token constant">MOD</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

cache<span class="token punctuation">[</span>start<span class="token punctuation">]</span><span class="token punctuation">[</span>fuel<span class="token punctuation">]</span> <span class="token operator">=</span> sum<span class="token punctuation">;</span>
<span class="token keyword">return</span> sum<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上面的全部内容都是说明如何填充缓冲，现在需要使用缓冲。使用缓冲的条件是当前条件已经计算过了。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">if</span> <span class="token punctuation">(</span>cache<span class="token punctuation">[</span>start<span class="token punctuation">]</span><span class="token punctuation">[</span>fuel<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">return</span> cache<span class="token punctuation">[</span>start<span class="token punctuation">]</span><span class="token punctuation">[</span>fuel<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个可能有点抽象，在哪个地方会使用到缓冲，所以第（6）点运行一遍代码。</p><h3 id="_5-全部代码" tabindex="-1"><a class="header-anchor" href="#_5-全部代码" aria-hidden="true">#</a> （5）全部代码</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> mod <span class="token operator">=</span> <span class="token number">1000000007</span><span class="token punctuation">;</span>
    
    <span class="token comment">// 缓存器：用于记录「特定状态」下的结果</span>
    <span class="token comment">// cache[i][fuel] 代表从位置 i 出发，当前剩余的油量为 fuel 的前提下，到达目标位置的「路径数量」</span>
    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> cache<span class="token punctuation">;</span>
    
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">countRoutes</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> ls<span class="token punctuation">,</span> <span class="token keyword">int</span> start<span class="token punctuation">,</span> <span class="token keyword">int</span> end<span class="token punctuation">,</span> <span class="token keyword">int</span> fuel<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> n <span class="token operator">=</span> ls<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
        
        <span class="token comment">// 初始化缓存器</span>
        <span class="token comment">// 之所以要全部初始化为 -1</span>
        <span class="token comment">// 是为了区分「某个状态下路径数量为 0」和「某个状态尚未没计算过」两种情况</span>
        cache <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span>fuel <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span>cache<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        
        <span class="token keyword">return</span> <span class="token function">dfs</span><span class="token punctuation">(</span>ls<span class="token punctuation">,</span> start<span class="token punctuation">,</span> end<span class="token punctuation">,</span> fuel<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    <span class="token doc-comment comment">/**
     * 计算「路径数量」
     * <span class="token keyword">@param</span> <span class="token parameter">ls</span> 入参 locations
     * <span class="token keyword">@param</span> <span class="token parameter">u</span> 当前所在位置（ls 的下标）
     * <span class="token keyword">@param</span> <span class="token parameter">end</span> 目标哦位置（ls 的下标）
     * <span class="token keyword">@param</span> <span class="token parameter">fuel</span> 剩余油量
     * <span class="token keyword">@return</span> 在位置 u 出发，油量为 fuel 的前提下，到达 end 的「路径数量」
     */</span>
    <span class="token keyword">int</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> ls<span class="token punctuation">,</span> <span class="token keyword">int</span> u<span class="token punctuation">,</span> <span class="token keyword">int</span> end<span class="token punctuation">,</span> <span class="token keyword">int</span> fuel<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 如果缓存器中已经有答案，直接返回</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>cache<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">[</span>fuel<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> cache<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">[</span>fuel<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        
        <span class="token keyword">int</span> n <span class="token operator">=</span> ls<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
        <span class="token comment">// base case 1：如果油量为 0，且不在目标位置</span>
        <span class="token comment">// 将结果 0 写入缓存器并返回</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>fuel <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> u <span class="token operator">!=</span> end<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            cache<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">[</span>fuel<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> 
        
        <span class="token comment">// base case 2：油量不为 0，且无法到达任何位置</span>
        <span class="token comment">// 将结果 0 写入缓存器并返回</span>
        <span class="token keyword">boolean</span> hasNext <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">!=</span> u<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">int</span> need <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>ls<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">-</span> ls<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    
                <span class="token keyword">if</span> <span class="token punctuation">(</span>fuel <span class="token operator">&gt;=</span> need<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    hasNext <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
                    <span class="token keyword">break</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>fuel <span class="token operator">!=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>hasNext<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">int</span> a <span class="token operator">=</span> cache<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">[</span>fuel<span class="token punctuation">]</span> <span class="token operator">=</span> u <span class="token operator">==</span> end <span class="token operator">?</span> <span class="token number">1</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> a<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        
        <span class="token comment">// 计算油量为 fuel，从位置 u 到 end 的路径数量</span>
        <span class="token comment">// 由于每个点都可以经过多次，如果 u = end，那么本身就算一条路径</span>
        <span class="token keyword">int</span> sum <span class="token operator">=</span> u <span class="token operator">==</span> end <span class="token operator">?</span> <span class="token number">1</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">!=</span> u<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">int</span> need <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>ls<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> ls<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>fuel <span class="token operator">&gt;=</span> need<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    sum <span class="token operator">+=</span> <span class="token function">dfs</span><span class="token punctuation">(</span>ls<span class="token punctuation">,</span> i<span class="token punctuation">,</span> end<span class="token punctuation">,</span> fuel <span class="token operator">-</span> need<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    sum <span class="token operator">%=</span> mod<span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        cache<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">[</span>fuel<span class="token punctuation">]</span> <span class="token operator">=</span> sum<span class="token punctuation">;</span>
        <span class="token keyword">return</span> sum<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,6),M=n("ul",null,[n("li",null,[s("时间复杂度：最坏情况下共有 n * fuel 个状态需要计算（填满整个 cache 数组）。每计算一个状态需要遍历一次 locations 数组，例如上面代码中的第 63 ~ 73 行，复杂度为 "),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mi",null,"O"),n("mo",{stretchy:"false"},"("),n("mi",null,"n"),n("mo",{stretchy:"false"},")")]),n("annotation",{encoding:"application/x-tex"},"O ( n )")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),n("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"O"),n("span",{class:"mopen"},"("),n("span",{class:"mord mathnormal"},"n"),n("span",{class:"mclose"},")")])])]),s(" 。整体复杂度为 "),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mi",null,"O"),n("mo",{stretchy:"false"},"("),n("msup",null,[n("mi",null,"n"),n("mn",null,"2")]),n("mi",null,"f"),n("mi",null,"u"),n("mi",null,"e"),n("mi",null,"l"),n("mo",{stretchy:"false"},")")]),n("annotation",{encoding:"application/x-tex"},"O ( n^{2} fuel )")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"1.0641em","vertical-align":"-0.25em"}}),n("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"O"),n("span",{class:"mopen"},"("),n("span",{class:"mord"},[n("span",{class:"mord mathnormal"},"n"),n("span",{class:"msupsub"},[n("span",{class:"vlist-t"},[n("span",{class:"vlist-r"},[n("span",{class:"vlist",style:{height:"0.8141em"}},[n("span",{style:{top:"-3.063em","margin-right":"0.05em"}},[n("span",{class:"pstrut",style:{height:"2.7em"}}),n("span",{class:"sizing reset-size6 size3 mtight"},[n("span",{class:"mord mtight"},[n("span",{class:"mord mtight"},"2")])])])])])])])]),n("span",{class:"mord mathnormal",style:{"margin-right":"0.10764em"}},"f"),n("span",{class:"mord mathnormal"},"u"),n("span",{class:"mord mathnormal"},"e"),n("span",{class:"mord mathnormal",style:{"margin-right":"0.01968em"}},"l"),n("span",{class:"mclose"},")")])])])]),n("li",null,[s("空间复杂度："),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mi",null,"O"),n("mo",{stretchy:"false"},"("),n("msup",null,[n("mi",null,"n"),n("mn",null,"2")]),n("mi",null,"f"),n("mi",null,"u"),n("mi",null,"e"),n("mi",null,"l"),n("mo",{stretchy:"false"},")")]),n("annotation",{encoding:"application/x-tex"},"O ( n^{2} fuel )")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"1.0641em","vertical-align":"-0.25em"}}),n("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"O"),n("span",{class:"mopen"},"("),n("span",{class:"mord"},[n("span",{class:"mord mathnormal"},"n"),n("span",{class:"msupsub"},[n("span",{class:"vlist-t"},[n("span",{class:"vlist-r"},[n("span",{class:"vlist",style:{height:"0.8141em"}},[n("span",{style:{top:"-3.063em","margin-right":"0.05em"}},[n("span",{class:"pstrut",style:{height:"2.7em"}}),n("span",{class:"sizing reset-size6 size3 mtight"},[n("span",{class:"mord mtight"},[n("span",{class:"mord mtight"},"2")])])])])])])])]),n("span",{class:"mord mathnormal",style:{"margin-right":"0.10764em"}},"f"),n("span",{class:"mord mathnormal"},"u"),n("span",{class:"mord mathnormal"},"e"),n("span",{class:"mord mathnormal",style:{"margin-right":"0.01968em"}},"l"),n("span",{class:"mclose"},")")])])])])],-1),N=a(`<h3 id="_6-初步运行代码" tabindex="-1"><a class="header-anchor" href="#_6-初步运行代码" aria-hidden="true">#</a> （6）初步运行代码</h3><p>以题目中的示例为例子，<code>locations = [2,3,6,8,4], start = 1, finish = 3, fuel = 5</code>，位置表示使用数组中的值</p><ul><li>起始位置为 3，最终位置为 8。</li><li>首先遍历将每一个作为开始位置。 <ul><li>【3 -&gt; 2】：剩余油量 4</li><li>【3 -&gt; 6】：剩余油量 2</li><li>【3 -&gt; 8】：剩余油量 0</li><li>【3 -&gt; 4】：剩余油量 4</li></ul></li><li>然后再深度遍历第 1 条路径【3 -&gt; 2】，起点为 2，拥有油量 4 <ul><li>【2 -&gt; 3】：剩余油量 3 <ul><li>【3 -&gt; 2】：剩余油量 2，在油耗尽之前无法到达，所以路径为 0 <ul><li>【2 -&gt; 3】：剩余油量 1，在油耗尽之前无法到达，所以路径为 0 <ul><li>【3 -&gt; 2】：剩余油量 0</li><li>【3 -&gt; 6】：油量不足</li><li><strong>【3 -&gt; 8】：油量不足</strong></li><li>【3 -&gt; 4】：剩余油量 0</li></ul></li><li>【2 -&gt; 6】：油量不足</li><li><strong>【2 -&gt; 8】：油量不足</strong></li><li>【2 -&gt; 4】：剩余油量 0</li></ul></li><li>【3 -&gt; 6】：剩余油量 0</li><li><strong>【3 -&gt; 8】：油量不足</strong></li><li>【3 -&gt; 4】：剩余油量 2，在油耗尽之前无法到达，所以路径为 0 <ul><li>【4 -&gt; 2】：剩余油量 0</li><li>【4 -&gt; 3】：剩余油量 1，由上面可知，从 3 开始，油量为 1，路径为 0</li><li>【4 -&gt; 6】：剩余油量 0</li><li><strong>【4 -&gt; 8】：油量不足</strong></li></ul></li></ul></li><li>【2 -&gt; 6】：剩余油量 0</li><li><strong>【2 -&gt; 8】：油量不足</strong></li><li>【2 -&gt; 4】：剩余油量 2，路径为 0 <ul><li>由上面可知，从 4 开始，油量为 2，路径为 0</li></ul></li></ul></li><li>由上可知，该递归了大半天，最后只能得出【3 -&gt; 2】是不能走的路。那能不能进行剪枝，不用递归那么深就能知道结果呢？ <ul><li>答案是可以的，当走一步不能从起点到终点，那么走多步也不能到达终点。从日常生活可知，直线走多步和走一步，所走路程一致，如果不直线走，则走的路程会更多。</li><li>回到上面例子中，从 3 到达 2 的时候，油量剩余 4，而【2 -&gt; 8】需要油量 6，就可知直接返回 0 了，不用再递归下去了。</li></ul></li><li>那么代码该怎么写呢？放到代码中的哪个部分 <ul><li>前面代码部分是判断是否是有效还是无效条件，用于结束递归。</li><li>无效条件包括 <strong>油为 0 且不目的位置</strong>、<strong>油不为 0 且不能到任何位置</strong></li><li>可以发现判断 <strong>一步是否能走到目的位置</strong>，也包括了两个无效条件： <ul><li>油为 0，当然无法一步到达目的位置</li><li>不能到任何位置，当前也无法一步到达目的位置</li></ul></li><li>所以直接将这两个无效条件删除替换成一步判断代码，如下所示第 10 ~ 14 行。</li></ul></li></ul><p>注：代码中 start 变量使用了 u 变量代替</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">int</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> ls<span class="token punctuation">,</span> <span class="token keyword">int</span> u<span class="token punctuation">,</span> <span class="token keyword">int</span> end<span class="token punctuation">,</span> <span class="token keyword">int</span> fuel<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 如果缓存中已经有答案，直接返回</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>cache<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">[</span>fuel<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> cache<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">[</span>fuel<span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token comment">// 如果一步到达不了，说明从位置 u 不能到达 end 位置</span>
  <span class="token comment">// 将结果 0 写入缓存器并返回</span>
  <span class="token comment">// 同时包含了两个无效条件</span>
  <span class="token keyword">int</span> need <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>ls<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">-</span> ls<span class="token punctuation">[</span>end<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>need <span class="token operator">&gt;</span> fuel<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    cache<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">[</span>fuel<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">int</span> n <span class="token operator">=</span> ls<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
  <span class="token comment">// 计算油量为 fuel，从位置 u 到 end 的路径数量</span>
  <span class="token comment">// 由于每个点都可以经过多次，如果 u = end，那么本身就算一条路径</span>
  <span class="token keyword">int</span> sum <span class="token operator">=</span> u <span class="token operator">==</span> end <span class="token operator">?</span> <span class="token number">1</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">!=</span> u<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      need <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>ls<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> ls<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>fuel <span class="token operator">&gt;=</span> need<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        sum <span class="token operator">+=</span> <span class="token function">dfs</span><span class="token punctuation">(</span>ls<span class="token punctuation">,</span> i<span class="token punctuation">,</span> end<span class="token punctuation">,</span> fuel <span class="token operator">-</span> need<span class="token punctuation">)</span><span class="token punctuation">;</span>
        sum <span class="token operator">%=</span> mod<span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  cache<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">[</span>fuel<span class="token punctuation">]</span> <span class="token operator">=</span> sum<span class="token punctuation">;</span>
  <span class="token keyword">return</span> sum<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_7-动态规划思路" tabindex="-1"><a class="header-anchor" href="#_7-动态规划思路" aria-hidden="true">#</a> （7）动态规划思路</h3><p>原文链接：</p>`,7),O={href:"https://mp.weixin.qq.com/s?__biz=MzU4NDE3MTEyMA==&mid=2247485319&idx=1&sn=95a3dc9c97ca57185de792ca70924afe&chksm=fd9cac98caeb258ebea466f59378670a90af1cb3015ae70922e1d04ac711a5b8d8d853ac5e7d&cur_album_id=1715134171561410565&scene=189#wechat_redirect",target:"_blank",rel:"noopener noreferrer"},j=a(`<p>上面使用了递归算法，在上面的思路中，已经有了动态规划的模型，我们可以将其提取出来，使用之前的解法来实现。</p><ul><li>cache 数组是我们要求的数据，最终答案为 <code>cache[start][fuel]</code></li><li><strong>递归的退出条件</strong> 就是作为动态规划的最小单元。 <ul><li>退出条件是油量最小的时候，所以动态规划就将油量从 0 开始遍历</li></ul></li><li><strong>向下递归的动作</strong> 就是动态规划的状态转移 <ul><li>向下递归的动作是把一个位置作为终点，然后再减取相应的油量</li><li>状态转移就是遍历当前所有能去的位置。用方程来写就是 <code>cache[start][fuel] += cache[k][fuel - need]</code> ，k 代表下一个位置。注意因为是取数组中的值，所以 <code>fuel - need</code> 不能为负数，如递归代码一样。</li></ul></li></ul><p>然后代码如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
  <span class="token keyword">int</span> mod <span class="token operator">=</span> <span class="token number">1000000007</span><span class="token punctuation">;</span>
  <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">countRoutes</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> ls<span class="token punctuation">,</span> <span class="token keyword">int</span> start<span class="token punctuation">,</span> <span class="token keyword">int</span> end<span class="token punctuation">,</span> <span class="token keyword">int</span> fuel<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> n <span class="token operator">=</span> ls<span class="token punctuation">.</span>length<span class="token punctuation">;</span>

    <span class="token comment">// f[i][j] 代表从位置 i 出发，当前油量为 j 时，到达目的地的路径数</span>
    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> f <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span>fuel <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

    <span class="token comment">// 对于本身位置就在目的地的状态，路径数为 1</span>
    <span class="token comment">// 这里处理本身位置在目的地的情况，</span>
    <span class="token comment">// 因为在下面遍历的时候需要排除起始位置是目的位置的情况</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> fuel<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> f<span class="token punctuation">[</span>end<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    
    <span class="token comment">// 从小到大枚举油量</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> cur <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> cur <span class="token operator">&lt;=</span> fuel<span class="token punctuation">;</span> cur<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// 遍历起始位置</span>
      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 遍历下一个的位置</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">!=</span> k<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">int</span> need <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>ls<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> ls<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>cur <span class="token operator">&gt;=</span> need<span class="token punctuation">)</span> <span class="token punctuation">{</span>
              f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>cur<span class="token punctuation">]</span> <span class="token operator">+=</span> f<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>cur<span class="token operator">-</span>need<span class="token punctuation">]</span><span class="token punctuation">;</span>
              f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>cur<span class="token punctuation">]</span> <span class="token operator">%=</span> mod<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
          <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> f<span class="token punctuation">[</span>start<span class="token punctuation">]</span><span class="token punctuation">[</span>fuel<span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,4),I=n("ul",null,[n("li",null,[s("时间复杂度：在代码中，很明显有三层循环，复杂度分别为 n、n、fuel，所以整体复杂度为 "),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mi",null,"O"),n("mo",{stretchy:"false"},"("),n("msup",null,[n("mi",null,"n"),n("mn",null,"2")]),n("mi",null,"f"),n("mi",null,"u"),n("mi",null,"e"),n("mi",null,"l"),n("mo",{stretchy:"false"},")")]),n("annotation",{encoding:"application/x-tex"},"O ( n^{2} fuel )")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"1.0641em","vertical-align":"-0.25em"}}),n("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"O"),n("span",{class:"mopen"},"("),n("span",{class:"mord"},[n("span",{class:"mord mathnormal"},"n"),n("span",{class:"msupsub"},[n("span",{class:"vlist-t"},[n("span",{class:"vlist-r"},[n("span",{class:"vlist",style:{height:"0.8141em"}},[n("span",{style:{top:"-3.063em","margin-right":"0.05em"}},[n("span",{class:"pstrut",style:{height:"2.7em"}}),n("span",{class:"sizing reset-size6 size3 mtight"},[n("span",{class:"mord mtight"},[n("span",{class:"mord mtight"},"2")])])])])])])])]),n("span",{class:"mord mathnormal",style:{"margin-right":"0.10764em"}},"f"),n("span",{class:"mord mathnormal"},"u"),n("span",{class:"mord mathnormal"},"e"),n("span",{class:"mord mathnormal",style:{"margin-right":"0.01968em"}},"l"),n("span",{class:"mclose"},")")])])])]),n("li",null,[s("空间复杂度："),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mi",null,"O"),n("mo",{stretchy:"false"},"("),n("msup",null,[n("mi",null,"n"),n("mn",null,"2")]),n("mi",null,"f"),n("mi",null,"u"),n("mi",null,"e"),n("mi",null,"l"),n("mo",{stretchy:"false"},")")]),n("annotation",{encoding:"application/x-tex"},"O ( n^{2} fuel )")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"1.0641em","vertical-align":"-0.25em"}}),n("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"O"),n("span",{class:"mopen"},"("),n("span",{class:"mord"},[n("span",{class:"mord mathnormal"},"n"),n("span",{class:"msupsub"},[n("span",{class:"vlist-t"},[n("span",{class:"vlist-r"},[n("span",{class:"vlist",style:{height:"0.8141em"}},[n("span",{style:{top:"-3.063em","margin-right":"0.05em"}},[n("span",{class:"pstrut",style:{height:"2.7em"}}),n("span",{class:"sizing reset-size6 size3 mtight"},[n("span",{class:"mord mtight"},[n("span",{class:"mord mtight"},"2")])])])])])])])]),n("span",{class:"mord mathnormal",style:{"margin-right":"0.10764em"}},"f"),n("span",{class:"mord mathnormal"},"u"),n("span",{class:"mord mathnormal"},"e"),n("span",{class:"mord mathnormal",style:{"margin-right":"0.01968em"}},"l"),n("span",{class:"mclose"},")")])])])])],-1),C=a('<h3 id="_8-总结" tabindex="-1"><a class="header-anchor" href="#_8-总结" aria-hidden="true">#</a> （8）总结</h3><p>至此，我们只利用 DFS 的方法签名与主逻辑，就写出了「动态规划」解法。</p><p>我再帮你来总结一下这个过程：</p><ol><li><p>从 DFS 方法签名出发。<strong>分析哪些入参是可变的，将其作为 DP 数组的维度</strong>，这道题 fuel 和起始位置可变，就作为了数组的两个维度。<strong>将返回值作为 DP 数组的存储值</strong>，这道题就是将每个递归的路径数量存储在数组里</p></li><li><p>**从 DFS 的主逻辑可以抽象中单个状态的计算方法。**这道题是以将 <strong>其余点作为终点</strong> 的思路提取出来</p></li></ol><p>其中第一点对应了「动态规划」的「状态定义」，第二点对应了「动态规划」的「状态方程转移」。</p><h2 id="三十八、设计哈希集合" tabindex="-1"><a class="header-anchor" href="#三十八、设计哈希集合" aria-hidden="true">#</a> 三十八、设计哈希集合</h2><p>原题链接：</p>',7),z={href:"https://mp.weixin.qq.com/s?__biz=MzU4NDE3MTEyMA==&mid=2247485333&idx=1&sn=717ccedd7ad0c838e775332ef864cc27&chksm=fd9cac8acaeb259c04deedb940f73167aabb112efddd27a2b5c4f3b9646f0fcd3166e0d8f7ae&cur_album_id=1715134171561410565&scene=189#wechat_redirect",target:"_blank",rel:"noopener noreferrer"},D=a(`<blockquote><p>这是 LeetCode 上的**「705. 设计哈希集合」**，难度为 <strong>Easy</strong>。</p><p>不使用任何内建的哈希表库设计一个哈希集合（HashSet）。</p><p>实现 MyHashSet 类：</p><ul><li>void add(key) 向哈希集合中插入值 key</li><li>bool contains(key) 返回哈希集合中是否存在这个值 key</li><li>void remove(key) 将给定值 key 从哈希集合中删除。如果哈希集合中没有这个值，什么也不做</li></ul><p>提示：</p><ul><li>0 &lt;= key &lt;= 10<sup>6</sup></li><li>最多调用 104 次 add、remove 和 contains 。</li></ul><p>进阶：你可以不使用内建的哈希集合库解决此问题吗？</p></blockquote><h3 id="_1-数组解法" tabindex="-1"><a class="header-anchor" href="#_1-数组解法" aria-hidden="true">#</a> （1）数组解法</h3><p>因为 key 限制了是 int 类型，并且范围不超过 10<sup>6</sup> ，再加上运行时间的限制，使用数组解法是比较容易通过的。</p><p>思路：开辟一个足够大的数组，然后将传来的数直接取下标，看是否存在。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">MyHashSet</span> <span class="token punctuation">{</span>
    <span class="token keyword">boolean</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nodes <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">boolean</span><span class="token punctuation">[</span><span class="token number">1000009</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        nodes<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">remove</span><span class="token punctuation">(</span><span class="token keyword">int</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        nodes<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">contains</span><span class="token punctuation">(</span><span class="token keyword">int</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> nodes<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,5),q=n("ul",null,[n("li",null,[s("时间复杂度："),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mi",null,"O"),n("mo",{stretchy:"false"},"("),n("mn",null,"1"),n("mo",{stretchy:"false"},")")]),n("annotation",{encoding:"application/x-tex"},"O ( 1 )")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),n("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"O"),n("span",{class:"mopen"},"("),n("span",{class:"mord"},"1"),n("span",{class:"mclose"},")")])])])]),n("li",null,[s("空间复杂度："),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mi",null,"O"),n("mo",{stretchy:"false"},"("),n("mn",null,"1"),n("mo",{stretchy:"false"},")")]),n("annotation",{encoding:"application/x-tex"},"O ( 1 )")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),n("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"O"),n("span",{class:"mopen"},"("),n("span",{class:"mord"},"1"),n("span",{class:"mclose"},")")])])])])],-1),L=a(`<h3 id="_2-链表数组解法" tabindex="-1"><a class="header-anchor" href="#_2-链表数组解法" aria-hidden="true">#</a> （2）链表数组解法</h3><p>如果用普通的链表的话，时间复杂度会很高，所以就将链表和哈希结合，可以优化时间复杂度。</p><p>注：力扣运行普通链表耗时 242 ms，链表哈希结合 11 ms</p><ul><li>链表和数组结合 <ul><li>储存方式：数组存放链表头节点。数组可以直接获取指定位置，链表用于解决哈希冲突，在同一格的话，就插入到链表里</li><li>计算哈希码的方式：数组长度可以不用太大，但一定要把 key 均匀地放到每个格上。详细代码如第 87 ~ 94 行。</li><li>增加：先根据 key 获取到数组的指定位置，再判断是否存在链表，如果不存在则新建链表，存在则添加到链表里。删除和判断是否存在也一样思路。</li></ul></li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">MyHashSet</span> <span class="token punctuation">{</span>
  <span class="token comment">// 由于使用的是「链表」，这个值可以取得很小</span>
  <span class="token class-name">Node</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nodes <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">[</span><span class="token number">10009</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 根据 key 获取哈希桶的位置</span>
    <span class="token keyword">int</span> idx <span class="token operator">=</span> <span class="token function">getIndex</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token class-name">Node</span> loc <span class="token operator">=</span> nodes<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token punctuation">,</span> tmp <span class="token operator">=</span> loc<span class="token punctuation">;</span>
    
		<span class="token comment">// 判断链表中是否已经存在</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>loc <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token class-name">Node</span> prev <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
      
      <span class="token keyword">while</span> <span class="token punctuation">(</span>tmp <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 如果存在则直接结束添加</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>tmp<span class="token punctuation">.</span>key <span class="token operator">==</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span> 
          <span class="token keyword">return</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// 不断地移动指针</span>
        prev <span class="token operator">=</span> tmp<span class="token punctuation">;</span>
        tmp <span class="token operator">=</span> tmp<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      tmp <span class="token operator">=</span> prev<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    <span class="token comment">// 利用key新建一个节点</span>
    <span class="token class-name">Node</span> node <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 头插法</span>
    <span class="token comment">// 插入到头部</span>
    <span class="token comment">// node.next = loc;</span>
    <span class="token comment">// 更新数组</span>
    <span class="token comment">// nodes[idx] = node;</span>

    <span class="token comment">// 尾插法 </span>
    <span class="token comment">// 如果tmp为null代表链表为空，则需要更新数组</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>tmp <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      tmp<span class="token punctuation">.</span>next <span class="token operator">=</span> node<span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      nodes<span class="token punctuation">[</span>idx<span class="token punctuation">]</span> <span class="token operator">=</span> node<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">remove</span><span class="token punctuation">(</span><span class="token keyword">int</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> idx <span class="token operator">=</span> <span class="token function">getIndex</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Node</span> loc <span class="token operator">=</span> nodes<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>loc <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token class-name">Node</span> prev <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
      <span class="token keyword">while</span> <span class="token punctuation">(</span>loc <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>loc<span class="token punctuation">.</span>key <span class="token operator">==</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token keyword">if</span> <span class="token punctuation">(</span>prev <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            prev<span class="token punctuation">.</span>next <span class="token operator">=</span> loc<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
          <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            nodes<span class="token punctuation">[</span>idx<span class="token punctuation">]</span> <span class="token operator">=</span> loc<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
          <span class="token punctuation">}</span>
          <span class="token keyword">return</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        prev <span class="token operator">=</span> loc<span class="token punctuation">;</span>
        loc <span class="token operator">=</span> loc<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">contains</span><span class="token punctuation">(</span><span class="token keyword">int</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> idx <span class="token operator">=</span> <span class="token function">getIndex</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Node</span> loc <span class="token operator">=</span> nodes<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>loc <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">while</span> <span class="token punctuation">(</span>loc <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>loc<span class="token punctuation">.</span>key <span class="token operator">==</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        loc <span class="token operator">=</span> loc<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Node</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> key<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">Node</span> next<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">Node</span><span class="token punctuation">(</span><span class="token keyword">int</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>key <span class="token operator">=</span> key<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">int</span> <span class="token function">getIndex</span><span class="token punctuation">(</span><span class="token keyword">int</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 因为 nodes 的长度只有 10009，对应的十进制的 10011100011001（总长度为 32 位，其余高位都是 0）</span>
    <span class="token comment">// 为了让 key 对应的 hash 高位也参与运算，这里对 hashCode 进行右移异或</span>
    <span class="token comment">// 使得 hashCode 的高位随机性和低位随机性都能体现在低 16 位中</span>
    <span class="token keyword">int</span> hash <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
    hash <span class="token operator">^=</span> <span class="token punctuation">(</span>hash <span class="token operator">&gt;&gt;&gt;</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> hash <span class="token operator">%</span> nodes<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-分桶数组解法" tabindex="-1"><a class="header-anchor" href="#_3-分桶数组解法" aria-hidden="true">#</a> （3）分桶数组解法</h3><p>分桶数组解法：</p><ul><li>做法：将数组中的每个数字的每一位代表一个 key 值</li><li>原理：这样数组中的每个元素就代表了 32 个数，题目中 key 的范围为 10<sup>6</sup> ，10<sup>6</sup> / 32 = 31250，所以定义一个大于 31250 长度的数组就可以包含全部的数了。 <ul><li>在力扣中，三千多长度的数组的内存（48.8 MB）大于四千长度（46.6 MB），可能是虚拟机优化问题</li></ul></li><li>好处：用数组找出大概位置，用位运算找出具体位置。数组取数和位运算取数都是很省时的操作。 <ul><li>增加运算：<code>(1 &lt;&lt; loc)</code> —— 得到一个只有指定位为 1 其他位为 0 的数；<code>bs[bucket] | (1 &lt;&lt; loc)</code> —— 使用或运算，不改变其他的位置的情况下，将指定位置的数改为 1</li><li>删除运算：<code>~(1 &lt;&lt; loc)</code> ——得到一个只有指定位置为 0 其他位为 1 的数；<code>bs[bucket] | (1 &lt;&lt; loc)</code> —— 使用与运算，不改变其他的位置的情况下，将指定位置的数改为 0</li><li>得到具体位置：<code>(bs[bucket] &gt;&gt; loc) &amp; 1</code> 将最后一位变为指定位置，然后与运算 1 ，就可以得到指定位置的数字</li></ul></li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">MyHashSet</span> <span class="token punctuation">{</span>
  <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bs <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">40000</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  
  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 获取桶下标</span>
    <span class="token keyword">int</span> bucketIdx <span class="token operator">=</span> key <span class="token operator">/</span> <span class="token number">32</span><span class="token punctuation">;</span>
    <span class="token comment">// 获取具体位数</span>
    <span class="token keyword">int</span> bitIdx <span class="token operator">=</span> key <span class="token operator">%</span> <span class="token number">32</span><span class="token punctuation">;</span>
    <span class="token function">setVal</span><span class="token punctuation">(</span>bucketIdx<span class="token punctuation">,</span> bitIdx<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">remove</span><span class="token punctuation">(</span><span class="token keyword">int</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> bucketIdx <span class="token operator">=</span> key <span class="token operator">/</span> <span class="token number">32</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> bitIdx <span class="token operator">=</span> key <span class="token operator">%</span> <span class="token number">32</span><span class="token punctuation">;</span>
    <span class="token function">setVal</span><span class="token punctuation">(</span>bucketIdx<span class="token punctuation">,</span> bitIdx<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">contains</span><span class="token punctuation">(</span><span class="token keyword">int</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> bucketIdx <span class="token operator">=</span> key <span class="token operator">/</span> <span class="token number">32</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> bitIdx <span class="token operator">=</span> key <span class="token operator">%</span> <span class="token number">32</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token function">getVal</span><span class="token punctuation">(</span>bucketIdx<span class="token punctuation">,</span> bitIdx<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token comment">/*
  * 改变相应位置
  * @param bucket 桶下标
  * @param loc 位下标
  * @param val 判断是增加还是删除
  */</span>
  <span class="token keyword">void</span> <span class="token function">setVal</span><span class="token punctuation">(</span><span class="token keyword">int</span> bucket<span class="token punctuation">,</span> <span class="token keyword">int</span> loc<span class="token punctuation">,</span> <span class="token keyword">boolean</span> val<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>val<span class="token punctuation">)</span> <span class="token punctuation">{</span>
 			<span class="token comment">// 添加操作</span>
      <span class="token keyword">int</span> u <span class="token operator">=</span> bs<span class="token punctuation">[</span>bucket<span class="token punctuation">]</span> <span class="token operator">|</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> loc<span class="token punctuation">)</span><span class="token punctuation">;</span>
      bs<span class="token punctuation">[</span>bucket<span class="token punctuation">]</span> <span class="token operator">=</span> u<span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      <span class="token comment">// 删除操作</span>
      <span class="token keyword">int</span> u <span class="token operator">=</span> bs<span class="token punctuation">[</span>bucket<span class="token punctuation">]</span> <span class="token operator">&amp;</span> <span class="token operator">~</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> loc<span class="token punctuation">)</span><span class="token punctuation">;</span>
      bs<span class="token punctuation">[</span>bucket<span class="token punctuation">]</span> <span class="token operator">=</span> u<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">boolean</span> <span class="token function">getVal</span><span class="token punctuation">(</span><span class="token keyword">int</span> bucket<span class="token punctuation">,</span> <span class="token keyword">int</span> loc<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 获取指定位置</span>
    <span class="token keyword">int</span> u <span class="token operator">=</span> <span class="token punctuation">(</span>bs<span class="token punctuation">[</span>bucket<span class="token punctuation">]</span> <span class="token operator">&gt;&gt;</span> loc<span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> u <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,9),E=n("ul",null,[n("li",null,[s("时间复杂度："),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mi",null,"O"),n("mo",{stretchy:"false"},"("),n("mn",null,"1"),n("mo",{stretchy:"false"},")")]),n("annotation",{encoding:"application/x-tex"},"O ( 1 )")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),n("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"O"),n("span",{class:"mopen"},"("),n("span",{class:"mord"},"1"),n("span",{class:"mclose"},")")])])])]),n("li",null,[s("空间复杂度："),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mi",null,"O"),n("mo",{stretchy:"false"},"("),n("mn",null,"1"),n("mo",{stretchy:"false"},")")]),n("annotation",{encoding:"application/x-tex"},"O ( 1 )")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),n("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"O"),n("span",{class:"mopen"},"("),n("span",{class:"mord"},"1"),n("span",{class:"mclose"},")")])])])])],-1),R=n("h2",{id:"三十九、出界的路径数",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#三十九、出界的路径数","aria-hidden":"true"},"#"),s(" 三十九、出界的路径数")],-1),S=n("p",null,"原题链接：",-1),F={href:"https://mp.weixin.qq.com/s?__biz=MzU4NDE3MTEyMA==&mid=2247485426&idx=1&sn=071aec0bf5bc2e20c58f4cbb3dcb0fbc&chksm=fd9cacedcaeb25fb895cb99963dcfcde6b10268893a085eed4000b48bf070cecbdf7c81bf991&cur_album_id=1715134171561410565&scene=189#wechat_redirect",target:"_blank",rel:"noopener noreferrer"},A=a(`<blockquote><p>这是 LeetCode 上的**「576. 出界的路径数」**，难度为 <strong>Medium</strong>。</p><p>给你一个大小为 m x n 的网格和一个球。球的起始坐标为 [startRow, startColumn] 。你可以将球移到在四个方向上相邻的单元格内（可以穿过网格边界到达网格之外）。你 最多 可以移动 maxMove 次球。</p><p>给你五个整数 m、n、maxMove、startRow 以及 startColumn ，找出并返回可以将球移出边界的路径数量。因为答案可能非常大，返回对 109 + 7 取余 后的结果。</p><p>示例1：</p><ul><li>输入：m = 2, n = 2, maxMove = 2, startRow = 0, startColumn = 0</li><li>输出：6</li><li>解释：</li></ul><p>移动一次：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code> ——————————————————————————
|&lt;---	 	↑		  |					   |
 --————————————————————————
|							|					   |
 --————————————————————————
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>移动两次：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code> ————————————————————————
|  |	|     |					   |
 --|——|——————————————————
|	 ↲  ↆ    |					  |
 --——————————————————————
 
 ———————————————————————
|    -------|----↑----&gt; |
 --—————————————————————
|	          |					  |
 --—————————————————————
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>提示：</strong></p><ul><li><code>1 &lt;= m, n &lt;= 50</code></li><li><code>0 &lt;= maxMove &lt;= 50</code></li><li><code>0 &lt;= startRow &lt; m</code></li><li><code>0 &lt;= startColumn &lt; n</code></li></ul></blockquote><h3 id="_1-记忆化搜索" tabindex="-1"><a class="header-anchor" href="#_1-记忆化搜索" aria-hidden="true">#</a> （1）记忆化搜索</h3><p>这道题和第三十七题思路一致，第三十七题是一维路径，这道题是二维路径。</p><p>开始找递归出口：</p><ul><li>已经出界的情况则返回 1；</li><li>如果无法出界则返回 0，无法出界指剩余可走距离，直线向上下左右都无法出界；</li><li>已经计算过的数据直接返回。</li></ul><p>递归向下条件：</p><ul><li>向上下左右移动，剩余可走距离减一</li></ul><p>缓冲数组：</p><ul><li>三维数组，第一维和第二维代表位置，第三维代表剩余可走距离</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
  <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">MOD</span> <span class="token operator">=</span> <span class="token number">1000000007</span><span class="token punctuation">;</span>

  <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">findPaths</span><span class="token punctuation">(</span><span class="token keyword">int</span> m<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">,</span> <span class="token keyword">int</span> maxMove<span class="token punctuation">,</span> <span class="token keyword">int</span> startRow<span class="token punctuation">,</span> <span class="token keyword">int</span> startColumn<span class="token punctuation">)</span> <span class="token punctuation">{</span>

    <span class="token comment">// 可走距离在0~maxMove，所以数组要定义多一个位置</span>
    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> cache <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span>maxMove <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

    <span class="token comment">// 将第三维的数组全部置为-1</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span>cache<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">return</span> <span class="token function">dfs</span><span class="token punctuation">(</span>cache<span class="token punctuation">,</span> startRow<span class="token punctuation">,</span> startColumn<span class="token punctuation">,</span> maxMove<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token punctuation">}</span>

  <span class="token keyword">private</span> <span class="token keyword">int</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> cache<span class="token punctuation">,</span> <span class="token keyword">int</span> startRow<span class="token punctuation">,</span> <span class="token keyword">int</span> startColumn<span class="token punctuation">,</span> <span class="token keyword">int</span> maxMove<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> m <span class="token operator">=</span> cache<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
    <span class="token keyword">int</span> n <span class="token operator">=</span> cache<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span>

    <span class="token comment">// 如果已经出界则代表1个路径</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>startColumn <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">||</span> startRow <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">||</span> startColumn <span class="token operator">==</span> n <span class="token operator">||</span> startRow <span class="token operator">==</span> m<span class="token punctuation">)</span> 
      <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token comment">// 如果已经计算过则直接返回</span>
    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>cache<span class="token punctuation">[</span>startRow<span class="token punctuation">]</span><span class="token punctuation">[</span>startColumn<span class="token punctuation">]</span><span class="token punctuation">[</span>maxMove<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>
      <span class="token keyword">return</span> cache<span class="token punctuation">[</span>startRow<span class="token punctuation">]</span><span class="token punctuation">[</span>startColumn<span class="token punctuation">]</span><span class="token punctuation">[</span>maxMove<span class="token punctuation">]</span><span class="token punctuation">;</span>

    <span class="token comment">// 如果上下左右都无法出界，即到达4条边的距离都大于剩余可走距离</span>
    <span class="token comment">// 则返回0</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>startRow <span class="token operator">&gt;=</span> maxMove <span class="token operator">&amp;&amp;</span> startColumn <span class="token operator">&gt;=</span> maxMove <span class="token operator">&amp;&amp;</span> m <span class="token operator">-</span> startRow <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">&gt;=</span> maxMove
        <span class="token operator">&amp;&amp;</span> n <span class="token operator">-</span> startColumn <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">&gt;=</span> maxMove<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      cache<span class="token punctuation">[</span>startRow<span class="token punctuation">]</span><span class="token punctuation">[</span>startColumn<span class="token punctuation">]</span><span class="token punctuation">[</span>maxMove<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
      <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 下面开始递归计算路径数</span>
    
    <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token comment">// 向上</span>
    sum <span class="token operator">+=</span> <span class="token function">dfs</span><span class="token punctuation">(</span>cache<span class="token punctuation">,</span> startRow <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> startColumn<span class="token punctuation">,</span> maxMove <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    sum <span class="token operator">%=</span> <span class="token constant">MOD</span><span class="token punctuation">;</span>
    <span class="token comment">// 向下</span>
    sum <span class="token operator">+=</span> <span class="token function">dfs</span><span class="token punctuation">(</span>cache<span class="token punctuation">,</span> startRow <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> startColumn<span class="token punctuation">,</span> maxMove <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    sum <span class="token operator">%=</span> <span class="token constant">MOD</span><span class="token punctuation">;</span>
    <span class="token comment">// 向左</span>
    sum <span class="token operator">+=</span> <span class="token function">dfs</span><span class="token punctuation">(</span>cache<span class="token punctuation">,</span> startRow<span class="token punctuation">,</span> startColumn <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> maxMove <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    sum <span class="token operator">%=</span> <span class="token constant">MOD</span><span class="token punctuation">;</span>
    <span class="token comment">// 向右</span>
    sum <span class="token operator">+=</span> <span class="token function">dfs</span><span class="token punctuation">(</span>cache<span class="token punctuation">,</span> startRow<span class="token punctuation">,</span> startColumn <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> maxMove <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    sum <span class="token operator">%=</span> <span class="token constant">MOD</span><span class="token punctuation">;</span>
    <span class="token comment">// 将结果缓冲起来</span>
    cache<span class="token punctuation">[</span>startRow<span class="token punctuation">]</span><span class="token punctuation">[</span>startColumn<span class="token punctuation">]</span><span class="token punctuation">[</span>maxMove<span class="token punctuation">]</span> <span class="token operator">=</span> sum<span class="token punctuation">;</span>
    <span class="token keyword">return</span> sum<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,10),H=n("ul",null,[n("li",null,[s("时间复杂度：实际是填充三维数组，就像计算长方体的体积，长宽代表坐标，高代表剩余可走距离，所以总复杂度为： "),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mi",null,"O"),n("mo",{stretchy:"false"},"("),n("mi",null,"m"),n("mo",null,"×"),n("mi",null,"n"),n("mo",null,"×"),n("mi",null,"m"),n("mi",null,"a"),n("mi",null,"x"),n("mi",null,"M"),n("mi",null,"o"),n("mi",null,"v"),n("mi",null,"e"),n("mo",{stretchy:"false"},")")]),n("annotation",{encoding:"application/x-tex"},"O ( m \\times n \\times maxMove )")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),n("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"O"),n("span",{class:"mopen"},"("),n("span",{class:"mord mathnormal"},"m"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),n("span",{class:"mbin"},"×"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.6667em","vertical-align":"-0.0833em"}}),n("span",{class:"mord mathnormal"},"n"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),n("span",{class:"mbin"},"×"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),n("span",{class:"base"},[n("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),n("span",{class:"mord mathnormal"},"ma"),n("span",{class:"mord mathnormal"},"x"),n("span",{class:"mord mathnormal",style:{"margin-right":"0.10903em"}},"M"),n("span",{class:"mord mathnormal"},"o"),n("span",{class:"mord mathnormal",style:{"margin-right":"0.03588em"}},"v"),n("span",{class:"mord mathnormal"},"e"),n("span",{class:"mclose"},")")])])])]),n("li",null,[s("空间复杂度："),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mi",null,"O"),n("mo",{stretchy:"false"},"("),n("mi",null,"m"),n("mo",null,"×"),n("mi",null,"n"),n("mo",null,"×"),n("mi",null,"m"),n("mi",null,"a"),n("mi",null,"x"),n("mi",null,"M"),n("mi",null,"o"),n("mi",null,"v"),n("mi",null,"e"),n("mo",{stretchy:"false"},")")]),n("annotation",{encoding:"application/x-tex"},"O ( m \\times n \\times maxMove )")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),n("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"O"),n("span",{class:"mopen"},"("),n("span",{class:"mord mathnormal"},"m"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),n("span",{class:"mbin"},"×"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.6667em","vertical-align":"-0.0833em"}}),n("span",{class:"mord mathnormal"},"n"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),n("span",{class:"mbin"},"×"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),n("span",{class:"base"},[n("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),n("span",{class:"mord mathnormal"},"ma"),n("span",{class:"mord mathnormal"},"x"),n("span",{class:"mord mathnormal",style:{"margin-right":"0.10903em"}},"M"),n("span",{class:"mord mathnormal"},"o"),n("span",{class:"mord mathnormal",style:{"margin-right":"0.03588em"}},"v"),n("span",{class:"mord mathnormal"},"e"),n("span",{class:"mclose"},")")])])])])],-1),T=n("h3",{id:"_2-动态规划",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_2-动态规划","aria-hidden":"true"},"#"),s(" （2）动态规划")],-1),B=n("p",null,"上面使用了 递归 + 记忆化搜索，这小节将其转换成动态规划。",-1),U=n("ul",null,[n("li",null,"状态转移：当前格的路径等于上下左右的路径相加")],-1),V=n("p",null,[n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mi",null,"f"),n("mo",{stretchy:"false"},"["),n("mo",{stretchy:"false"},"("),n("mi",null,"x"),n("mo",{separator:"true"},","),n("mi",null,"y"),n("mo",{stretchy:"false"},")"),n("mo",{stretchy:"false"},"]"),n("mo",{stretchy:"false"},"["),n("mi",null,"s"),n("mi",null,"t"),n("mi",null,"e"),n("mi",null,"p"),n("mo",{stretchy:"false"},"]"),n("mo",null,"="),n("mi",null,"f"),n("mo",{stretchy:"false"},"["),n("mo",{stretchy:"false"},"("),n("mi",null,"x"),n("mo",null,"−"),n("mn",null,"1"),n("mo",{separator:"true"},","),n("mi",null,"y"),n("mo",{stretchy:"false"},")"),n("mo",{stretchy:"false"},"]"),n("mo",{stretchy:"false"},"["),n("mi",null,"s"),n("mi",null,"t"),n("mi",null,"e"),n("mi",null,"p"),n("mo",null,"−"),n("mn",null,"1"),n("mo",{stretchy:"false"},"]"),n("mo",null,"+"),n("mi",null,"f"),n("mo",{stretchy:"false"},"["),n("mo",{stretchy:"false"},"("),n("mi",null,"x"),n("mo",null,"+"),n("mn",null,"1"),n("mo",{separator:"true"},","),n("mi",null,"y"),n("mo",{stretchy:"false"},")"),n("mo",{stretchy:"false"},"]"),n("mo",{stretchy:"false"},"["),n("mi",null,"s"),n("mi",null,"t"),n("mi",null,"e"),n("mi",null,"p"),n("mo",null,"−"),n("mn",null,"1"),n("mo",{stretchy:"false"},"]"),n("mi",null,"f"),n("mo",{stretchy:"false"},"["),n("mo",{stretchy:"false"},"("),n("mi",null,"x"),n("mo",{separator:"true"},","),n("mi",null,"y"),n("mo",null,"−"),n("mn",null,"1"),n("mo",{stretchy:"false"},")"),n("mo",{stretchy:"false"},"]"),n("mo",{stretchy:"false"},"["),n("mi",null,"s"),n("mi",null,"t"),n("mi",null,"e"),n("mi",null,"p"),n("mo",null,"−"),n("mn",null,"1"),n("mo",{stretchy:"false"},"]"),n("mi",null,"f"),n("mo",{stretchy:"false"},"["),n("mo",{stretchy:"false"},"("),n("mi",null,"x"),n("mo",{separator:"true"},","),n("mi",null,"y"),n("mo",null,"+"),n("mn",null,"1"),n("mo",{stretchy:"false"},")"),n("mo",{stretchy:"false"},"]"),n("mo",{stretchy:"false"},"["),n("mi",null,"s"),n("mi",null,"t"),n("mi",null,"e"),n("mi",null,"p"),n("mo",null,"−"),n("mn",null,"1"),n("mo",{stretchy:"false"},"]")]),n("annotation",{encoding:"application/x-tex"},"f[(x,y)][step] = f[(x-1,y)][step-1] + f[(x+1,y)][step-1] f[(x,y-1)][step-1]f[(x,y+1)][step-1]")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),n("span",{class:"mord mathnormal",style:{"margin-right":"0.10764em"}},"f"),n("span",{class:"mopen"},"[("),n("span",{class:"mord mathnormal"},"x"),n("span",{class:"mpunct"},","),n("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),n("span",{class:"mord mathnormal",style:{"margin-right":"0.03588em"}},"y"),n("span",{class:"mclose"},")]"),n("span",{class:"mopen"},"["),n("span",{class:"mord mathnormal"},"s"),n("span",{class:"mord mathnormal"},"t"),n("span",{class:"mord mathnormal"},"e"),n("span",{class:"mord mathnormal"},"p"),n("span",{class:"mclose"},"]"),n("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),n("span",{class:"mrel"},"="),n("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),n("span",{class:"base"},[n("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),n("span",{class:"mord mathnormal",style:{"margin-right":"0.10764em"}},"f"),n("span",{class:"mopen"},"[("),n("span",{class:"mord mathnormal"},"x"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),n("span",{class:"mbin"},"−"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),n("span",{class:"base"},[n("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),n("span",{class:"mord"},"1"),n("span",{class:"mpunct"},","),n("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),n("span",{class:"mord mathnormal",style:{"margin-right":"0.03588em"}},"y"),n("span",{class:"mclose"},")]"),n("span",{class:"mopen"},"["),n("span",{class:"mord mathnormal"},"s"),n("span",{class:"mord mathnormal"},"t"),n("span",{class:"mord mathnormal"},"e"),n("span",{class:"mord mathnormal"},"p"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),n("span",{class:"mbin"},"−"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),n("span",{class:"base"},[n("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),n("span",{class:"mord"},"1"),n("span",{class:"mclose"},"]"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),n("span",{class:"mbin"},"+"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),n("span",{class:"base"},[n("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),n("span",{class:"mord mathnormal",style:{"margin-right":"0.10764em"}},"f"),n("span",{class:"mopen"},"[("),n("span",{class:"mord mathnormal"},"x"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),n("span",{class:"mbin"},"+"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),n("span",{class:"base"},[n("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),n("span",{class:"mord"},"1"),n("span",{class:"mpunct"},","),n("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),n("span",{class:"mord mathnormal",style:{"margin-right":"0.03588em"}},"y"),n("span",{class:"mclose"},")]"),n("span",{class:"mopen"},"["),n("span",{class:"mord mathnormal"},"s"),n("span",{class:"mord mathnormal"},"t"),n("span",{class:"mord mathnormal"},"e"),n("span",{class:"mord mathnormal"},"p"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),n("span",{class:"mbin"},"−"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),n("span",{class:"base"},[n("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),n("span",{class:"mord"},"1"),n("span",{class:"mclose"},"]"),n("span",{class:"mord mathnormal",style:{"margin-right":"0.10764em"}},"f"),n("span",{class:"mopen"},"[("),n("span",{class:"mord mathnormal"},"x"),n("span",{class:"mpunct"},","),n("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),n("span",{class:"mord mathnormal",style:{"margin-right":"0.03588em"}},"y"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),n("span",{class:"mbin"},"−"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),n("span",{class:"base"},[n("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),n("span",{class:"mord"},"1"),n("span",{class:"mclose"},")]"),n("span",{class:"mopen"},"["),n("span",{class:"mord mathnormal"},"s"),n("span",{class:"mord mathnormal"},"t"),n("span",{class:"mord mathnormal"},"e"),n("span",{class:"mord mathnormal"},"p"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),n("span",{class:"mbin"},"−"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),n("span",{class:"base"},[n("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),n("span",{class:"mord"},"1"),n("span",{class:"mclose"},"]"),n("span",{class:"mord mathnormal",style:{"margin-right":"0.10764em"}},"f"),n("span",{class:"mopen"},"[("),n("span",{class:"mord mathnormal"},"x"),n("span",{class:"mpunct"},","),n("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),n("span",{class:"mord mathnormal",style:{"margin-right":"0.03588em"}},"y"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),n("span",{class:"mbin"},"+"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),n("span",{class:"base"},[n("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),n("span",{class:"mord"},"1"),n("span",{class:"mclose"},")]"),n("span",{class:"mopen"},"["),n("span",{class:"mord mathnormal"},"s"),n("span",{class:"mord mathnormal"},"t"),n("span",{class:"mord mathnormal"},"e"),n("span",{class:"mord mathnormal"},"p"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),n("span",{class:"mbin"},"−"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),n("span",{class:"base"},[n("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),n("span",{class:"mord"},"1"),n("span",{class:"mclose"},"]")])])])],-1),P=n("ul",null,[n("li",null,"存储数组：这里将三维数组变为二维数组，定义位置的二维变成了一维，这样就和第三十七题一致了。"),n("li",null,[s("初始化数据：动态规划需要初始数据来滚雪球，初始数据是递归中的 "),n("strong",null,"退出递归条件"),s("，即在边缘格的时候。 "),n("ul",null,[n("li",null,[s("因为动态规划是在数组中计算，所以不会像递归一样超出数组范围。既然不能超出数组范围，那就剩余可走距离 "),n("strong",null,"从 1 开始遍历"),s("，不从 0 开始了。")]),n("li",null,[s("如果剩余可走距离是 1，就可以知道 "),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mi",null,"f"),n("mo",{stretchy:"false"},"["),n("mo",{stretchy:"false"},"("),n("mi",null,"x"),n("mo",{separator:"true"},","),n("mi",null,"y"),n("mo",{stretchy:"false"},")"),n("mo",{stretchy:"false"},"]"),n("mo",{stretchy:"false"},"["),n("mn",null,"1"),n("mo",{stretchy:"false"},"]")]),n("annotation",{encoding:"application/x-tex"},"f[(x,y)][1]")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),n("span",{class:"mord mathnormal",style:{"margin-right":"0.10764em"}},"f"),n("span",{class:"mopen"},"[("),n("span",{class:"mord mathnormal"},"x"),n("span",{class:"mpunct"},","),n("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),n("span",{class:"mord mathnormal",style:{"margin-right":"0.03588em"}},"y"),n("span",{class:"mclose"},")]"),n("span",{class:"mopen"},"["),n("span",{class:"mord"},"1"),n("span",{class:"mclose"},"]")])])]),s(" 的内容，在角落的路径为 2，在边的路径为 1，中间的路径为 0，例如下面表格")])])])],-1),W=a(`<table><thead><tr><th>2</th><th>1</th><th>1</th><th>2</th></tr></thead><tbody><tr><td><strong>1</strong></td><td>0</td><td>0</td><td><strong>1</strong></td></tr><tr><td><strong>2</strong></td><td><strong>1</strong></td><td><strong>1</strong></td><td><strong>2</strong></td></tr></tbody></table><p>全部代码如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
  <span class="token keyword">int</span> mod <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token number">1e9</span><span class="token operator">+</span><span class="token number">7</span><span class="token punctuation">;</span>
  <span class="token keyword">int</span> m<span class="token punctuation">,</span> n<span class="token punctuation">,</span> <span class="token class-name">N</span><span class="token punctuation">;</span>
  <span class="token comment">// int m, int n, int maxMove, int startRow, int startColumn</span>
  <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">findPaths</span><span class="token punctuation">(</span><span class="token keyword">int</span> _m<span class="token punctuation">,</span> <span class="token keyword">int</span> _n<span class="token punctuation">,</span> <span class="token keyword">int</span> _N<span class="token punctuation">,</span> <span class="token keyword">int</span> _i<span class="token punctuation">,</span> <span class="token keyword">int</span> _j<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    m <span class="token operator">=</span> _m<span class="token punctuation">;</span> n <span class="token operator">=</span> _n<span class="token punctuation">;</span> <span class="token class-name">N</span> <span class="token operator">=</span> _N<span class="token punctuation">;</span>

    <span class="token comment">// f[i][j] 代表从 idx 为 i 的位置出发，移动步数不超过 j 的路径数量</span>
    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> f <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>m <span class="token operator">*</span> n<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token class-name">N</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

    <span class="token comment">// 初始化边缘格子的路径数量</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 初始化第1行</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token function">add</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> f<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 初始化最后1行</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> m <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token function">add</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> f<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 初始化第1列</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token function">add</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> f<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 初始化最后1列</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">==</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token function">add</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> f<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 定义可移动的四个方向</span>
    <span class="token comment">// 便于使用循环来遍历四个方向</span>
    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> dirs <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

    <span class="token comment">// 从1开始枚举「可移动步数」</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> step <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> step <span class="token operator">&lt;=</span> <span class="token class-name">N</span><span class="token punctuation">;</span> step<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// 枚举所有的「位置」</span>
      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span> m <span class="token operator">*</span> n<span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 将一维位置转为二维位置</span>
        <span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token function">parseIdx</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> y <span class="token operator">=</span> <span class="token function">parseIdx</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token comment">// 遍历四个方向</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> d <span class="token operator">:</span> dirs<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token comment">// 计算出四个方向的x和y</span>
          <span class="token keyword">int</span> nx <span class="token operator">=</span> x <span class="token operator">+</span> d<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> ny <span class="token operator">=</span> y <span class="token operator">+</span> d<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
          <span class="token comment">// 如果位置有「相邻格子」，则「相邻格子」参与状态转移</span>
          <span class="token keyword">if</span> <span class="token punctuation">(</span>nx <span class="token operator">&gt;=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> nx <span class="token operator">&lt;</span> m <span class="token operator">&amp;&amp;</span> ny <span class="token operator">&gt;=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> ny <span class="token operator">&lt;</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            f<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>step<span class="token punctuation">]</span> <span class="token operator">+=</span> f<span class="token punctuation">[</span><span class="token function">getIndex</span><span class="token punctuation">(</span>nx<span class="token punctuation">,</span> ny<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">[</span>step <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
            f<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>step<span class="token punctuation">]</span> <span class="token operator">%=</span> mod<span class="token punctuation">;</span>
          <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 最终结果为从起始点触发，最大移动步数不超 N 的路径数量</span>
    <span class="token keyword">return</span> f<span class="token punctuation">[</span><span class="token function">getIndex</span><span class="token punctuation">(</span>_i<span class="token punctuation">,</span> _j<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token class-name">N</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token comment">// 为每个「边缘」格子，添加一条路径</span>
  <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> f<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> idx <span class="token operator">=</span> <span class="token function">getIndex</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> step <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> step <span class="token operator">&lt;=</span> <span class="token class-name">N</span><span class="token punctuation">;</span> step<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      f<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token punctuation">[</span>step<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

  <span class="token comment">// 将 (x, y) 转换为 index</span>
  <span class="token keyword">int</span> <span class="token function">getIndex</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> x <span class="token operator">*</span> n <span class="token operator">+</span> y<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token comment">// 将 index 解析回 (x, y)</span>
  <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">parseIdx</span><span class="token punctuation">(</span><span class="token keyword">int</span> idx<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>idx <span class="token operator">/</span> n<span class="token punctuation">,</span> idx <span class="token operator">%</span> n<span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3),X=n("ul",null,[n("li",null,[s("时间复杂度：两层循环的复杂度分别为 maxMove、m * n，所以总复杂度为： "),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mi",null,"O"),n("mo",{stretchy:"false"},"("),n("mi",null,"m"),n("mo",null,"×"),n("mi",null,"n"),n("mo",null,"×"),n("mi",null,"m"),n("mi",null,"a"),n("mi",null,"x"),n("mi",null,"M"),n("mi",null,"o"),n("mi",null,"v"),n("mi",null,"e"),n("mo",{stretchy:"false"},")")]),n("annotation",{encoding:"application/x-tex"},"O ( m \\times n \\times maxMove )")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),n("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"O"),n("span",{class:"mopen"},"("),n("span",{class:"mord mathnormal"},"m"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),n("span",{class:"mbin"},"×"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.6667em","vertical-align":"-0.0833em"}}),n("span",{class:"mord mathnormal"},"n"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),n("span",{class:"mbin"},"×"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),n("span",{class:"base"},[n("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),n("span",{class:"mord mathnormal"},"ma"),n("span",{class:"mord mathnormal"},"x"),n("span",{class:"mord mathnormal",style:{"margin-right":"0.10903em"}},"M"),n("span",{class:"mord mathnormal"},"o"),n("span",{class:"mord mathnormal",style:{"margin-right":"0.03588em"}},"v"),n("span",{class:"mord mathnormal"},"e"),n("span",{class:"mclose"},")")])])])]),n("li",null,[s("空间复杂度： "),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mi",null,"O"),n("mo",{stretchy:"false"},"("),n("mi",null,"m"),n("mo",null,"×"),n("mi",null,"n"),n("mo",null,"×"),n("mi",null,"m"),n("mi",null,"a"),n("mi",null,"x"),n("mi",null,"M"),n("mi",null,"o"),n("mi",null,"v"),n("mi",null,"e"),n("mo",{stretchy:"false"},")")]),n("annotation",{encoding:"application/x-tex"},"O ( m \\times n \\times maxMove )")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),n("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"O"),n("span",{class:"mopen"},"("),n("span",{class:"mord mathnormal"},"m"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),n("span",{class:"mbin"},"×"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.6667em","vertical-align":"-0.0833em"}}),n("span",{class:"mord mathnormal"},"n"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),n("span",{class:"mbin"},"×"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),n("span",{class:"base"},[n("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),n("span",{class:"mord mathnormal"},"ma"),n("span",{class:"mord mathnormal"},"x"),n("span",{class:"mord mathnormal",style:{"margin-right":"0.10903em"}},"M"),n("span",{class:"mord mathnormal"},"o"),n("span",{class:"mord mathnormal",style:{"margin-right":"0.03588em"}},"v"),n("span",{class:"mord mathnormal"},"e"),n("span",{class:"mclose"},")")])])])])],-1),Y=n("h2",{id:"四十、设计哈希映射",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#四十、设计哈希映射","aria-hidden":"true"},"#"),s(" 四十、设计哈希映射")],-1),Z=n("p",null,"原题链接：",-1),$={href:"https://mp.weixin.qq.com/s?__biz=MzU4NDE3MTEyMA==&mid=2247485436&idx=1&sn=a07c6676c412cd692038d9b4631bcaf8&chksm=fd9cace3caeb25f5cfdb5ea34d80cfa593d61e1038de022e0bf7fc0069d5763749db7d2cf682&cur_album_id=1715134171561410565&scene=189#wechat_redirect",target:"_blank",rel:"noopener noreferrer"},G=a(`<blockquote><p>这是 LeetCode 上的**「706. 设计哈希映射」**，难度为 <strong>Easy</strong>。</p><p>不使用任何内建的哈希表库设计一个哈希映射（HashMap）。</p><p>实现 MyHashMap 类：</p><ul><li>MyHashMap() 用空映射初始化对象</li><li>void put(int key, int value) 向 HashMap 插入一个键值对 (key, value) 。如果 key 已经存在于映射中，则更新其对应的值 value 。</li><li>int get(int key) 返回特定的 key 所映射的 value ；如果映射中不包含 key 的映射，返回 -1 。</li><li>void remove(key) 如果映射中存在 key 的映射，则移除 key 和它所对应的 value 。</li></ul><p>提示：</p><ul><li>0 &lt;= key, value &lt;= 10<sup>6</sup></li><li>最多调用 10<sup>4</sup> 次 put、get 和 remove 方法</li></ul><p>进阶：你能否不使用内置的 HashMap 库解决此问题？</p></blockquote><h3 id="_1-数组解法-1" tabindex="-1"><a class="header-anchor" href="#_1-数组解法-1" aria-hidden="true">#</a> （1）数组解法</h3><p>和第三十八题一致，因为限制了 key 和 value 的范围，所以可以用数组让 key 直接定位到位置。key 作为下标，value 为数组中的数据，第三十八题数组中的数据是布尔值，没什么价值。</p><ul><li>定义没有数据，可以使用整型的最大值或者 -1，下面代码使用的是整型的最大值</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">MyHashMap</span> <span class="token punctuation">{</span>
  <span class="token keyword">int</span> <span class="token constant">INF</span> <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token constant">MAX_VALUE</span><span class="token punctuation">;</span>
  <span class="token keyword">int</span> <span class="token class-name">N</span> <span class="token operator">=</span> <span class="token number">1000009</span><span class="token punctuation">;</span>
  <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token class-name">N</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  
  <span class="token keyword">public</span> <span class="token class-name">MyHashMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 初始化数组中的全部格</span>
    <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span>map<span class="token punctuation">,</span> <span class="token constant">INF</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">put</span><span class="token punctuation">(</span><span class="token keyword">int</span> key<span class="token punctuation">,</span> <span class="token keyword">int</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 因为是覆盖放入，所以不用判断之前是否存在</span>
    map<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> value<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">int</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 如果是最大值则返回-1</span>
    <span class="token keyword">return</span> map<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token constant">INF</span> <span class="token operator">?</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">:</span> map<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">remove</span><span class="token punctuation">(</span><span class="token keyword">int</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 将数据重新赋值整型的最大值</span>
    map<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token constant">INF</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,5),J=n("ul",null,[n("li",null,[s("时间复杂度："),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mi",null,"O"),n("mo",{stretchy:"false"},"("),n("mn",null,"1"),n("mo",{stretchy:"false"},")")]),n("annotation",{encoding:"application/x-tex"},"O(1)")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),n("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"O"),n("span",{class:"mopen"},"("),n("span",{class:"mord"},"1"),n("span",{class:"mclose"},")")])])])]),n("li",null,[s("空间复杂度："),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mi",null,"O"),n("mo",{stretchy:"false"},"("),n("mn",null,"1"),n("mo",{stretchy:"false"},")")]),n("annotation",{encoding:"application/x-tex"},"O(1)")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),n("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"O"),n("span",{class:"mopen"},"("),n("span",{class:"mord"},"1"),n("span",{class:"mclose"},")")])])])])],-1),K=a(`<h3 id="_2-链表数组法" tabindex="-1"><a class="header-anchor" href="#_2-链表数组法" aria-hidden="true">#</a> （2）链表数组法</h3><p>链表数组法大致的代码与第三十八题的一致，都是计算哈希值，直接定位数组中的内容，然后看是否已经存在链表。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">MyHashMap</span> <span class="token punctuation">{</span>
  <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Node</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> key<span class="token punctuation">,</span> value<span class="token punctuation">;</span>
    <span class="token class-name">Node</span> next<span class="token punctuation">;</span>
    <span class="token class-name">Node</span><span class="token punctuation">(</span><span class="token keyword">int</span> _key<span class="token punctuation">,</span> <span class="token keyword">int</span> _value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      key <span class="token operator">=</span> _key<span class="token punctuation">;</span>
      value <span class="token operator">=</span> _value<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

  <span class="token comment">// 由于使用的是「链表」，这个值可以取得很小</span>
  <span class="token class-name">Node</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nodes <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">[</span><span class="token number">10009</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">put</span><span class="token punctuation">(</span><span class="token keyword">int</span> key<span class="token punctuation">,</span> <span class="token keyword">int</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 根据 key 获取哈希桶的位置</span>
    <span class="token keyword">int</span> idx <span class="token operator">=</span> <span class="token function">getIndex</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 判断链表中是否已经存在</span>
    <span class="token class-name">Node</span> loc <span class="token operator">=</span> nodes<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token punctuation">,</span> tmp <span class="token operator">=</span> loc<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>loc <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token class-name">Node</span> prev <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
      <span class="token keyword">while</span> <span class="token punctuation">(</span>tmp <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>tmp<span class="token punctuation">.</span>key <span class="token operator">==</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span> 
          tmp<span class="token punctuation">.</span>value <span class="token operator">=</span> value<span class="token punctuation">;</span>
          <span class="token keyword">return</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        prev <span class="token operator">=</span> tmp<span class="token punctuation">;</span>
        tmp <span class="token operator">=</span> tmp<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      tmp <span class="token operator">=</span> prev<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token class-name">Node</span> node <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 头插法</span>
    <span class="token comment">// node.next = loc;</span>
    <span class="token comment">// nodes[idx] = node;</span>

    <span class="token comment">// 尾插法 </span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>tmp <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      tmp<span class="token punctuation">.</span>next <span class="token operator">=</span> node<span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      nodes<span class="token punctuation">[</span>idx<span class="token punctuation">]</span> <span class="token operator">=</span> node<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">remove</span><span class="token punctuation">(</span><span class="token keyword">int</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> idx <span class="token operator">=</span> <span class="token function">getIndex</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Node</span> loc <span class="token operator">=</span> nodes<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>loc <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token class-name">Node</span> prev <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
      <span class="token keyword">while</span> <span class="token punctuation">(</span>loc <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>loc<span class="token punctuation">.</span>key <span class="token operator">==</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token keyword">if</span> <span class="token punctuation">(</span>prev <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            prev<span class="token punctuation">.</span>next <span class="token operator">=</span> loc<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
          <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            nodes<span class="token punctuation">[</span>idx<span class="token punctuation">]</span> <span class="token operator">=</span> loc<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
          <span class="token punctuation">}</span>
          <span class="token keyword">return</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        prev <span class="token operator">=</span> loc<span class="token punctuation">;</span>
        loc <span class="token operator">=</span> loc<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">int</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> idx <span class="token operator">=</span> <span class="token function">getIndex</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Node</span> loc <span class="token operator">=</span> nodes<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>loc <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">while</span> <span class="token punctuation">(</span>loc <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>loc<span class="token punctuation">.</span>key <span class="token operator">==</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token keyword">return</span> loc<span class="token punctuation">.</span>value<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        loc <span class="token operator">=</span> loc<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">int</span> <span class="token function">getIndex</span><span class="token punctuation">(</span><span class="token keyword">int</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 因为 nodes 的长度只有 10009，对应的十进制的 10011100011001（总长度为 32 位，其余高位都是 0）</span>
    <span class="token comment">// 为了让 key 对应的 hash 高位也参与运算，这里对 hashCode 进行右移异或</span>
    <span class="token comment">// 使得 hashCode 的高位随机性和低位随机性都能体现在低 16 位中</span>
    <span class="token keyword">int</span> hash <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
    hash <span class="token operator">^=</span> <span class="token punctuation">(</span>hash <span class="token operator">&gt;&gt;&gt;</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> hash <span class="token operator">%</span> nodes<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3),Q=n("ul",null,[n("li",null,[s("时间复杂度：由于没有扩容的逻辑，最坏情况下复杂度为 "),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mi",null,"O"),n("mo",{stretchy:"false"},"("),n("mi",null,"n"),n("mo",{stretchy:"false"},")")]),n("annotation",{encoding:"application/x-tex"},"O( n )")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),n("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"O"),n("span",{class:"mopen"},"("),n("span",{class:"mord mathnormal"},"n"),n("span",{class:"mclose"},")")])])]),s(" ，因为如果一直定位到数组的同一个位置就退出成单纯的链表。一般情况下复杂度为 "),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mi",null,"O"),n("mo",{stretchy:"false"},"("),n("mn",null,"1"),n("mo",{stretchy:"false"},")")]),n("annotation",{encoding:"application/x-tex"},"O( 1 )")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),n("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"O"),n("span",{class:"mopen"},"("),n("span",{class:"mord"},"1"),n("span",{class:"mclose"},")")])])])]),n("li",null,[s("空间复杂度："),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mi",null,"O"),n("mo",{stretchy:"false"},"("),n("mn",null,"1"),n("mo",{stretchy:"false"},")")]),n("annotation",{encoding:"application/x-tex"},"O( 1 )")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),n("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"O"),n("span",{class:"mopen"},"("),n("span",{class:"mord"},"1"),n("span",{class:"mclose"},")")])])])])],-1),nn=a(`<h3 id="_3-开放寻址解法" tabindex="-1"><a class="header-anchor" href="#_3-开放寻址解法" aria-hidden="true">#</a> （3）开放寻址解法</h3><p>解决哈希冲突除了建立链表之外，还可以偏移哈希值。如果当前下标已经存在数据，则向右偏移一格，再继续判断是否存在数据。因为最多操作 10<sup>4</sup> 次，所以 Node 数组大于 10<sup>4</sup> 即可。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">MyHashMap</span> <span class="token punctuation">{</span>
  <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Node</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> key<span class="token punctuation">,</span> value<span class="token punctuation">;</span>
    <span class="token class-name">Node</span> next<span class="token punctuation">;</span>
    <span class="token keyword">boolean</span> isDeleted<span class="token punctuation">;</span>
    <span class="token class-name">Node</span><span class="token punctuation">(</span><span class="token keyword">int</span> _key<span class="token punctuation">,</span> <span class="token keyword">int</span> _value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      key <span class="token operator">=</span> _key<span class="token punctuation">;</span>
      value <span class="token operator">=</span> _value<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

  <span class="token comment">// 冲突时的偏移量</span>
  <span class="token keyword">int</span> <span class="token constant">OFFSET</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
  <span class="token class-name">Node</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nodes <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">[</span><span class="token number">10009</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">put</span><span class="token punctuation">(</span><span class="token keyword">int</span> key<span class="token punctuation">,</span> <span class="token keyword">int</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 获取到存储的下标</span>
    <span class="token keyword">int</span> idx <span class="token operator">=</span> <span class="token function">getIndex</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Node</span> node <span class="token operator">=</span> nodes<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token punctuation">;</span>
    
    <span class="token comment">// 如果不为空，则直接覆盖</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>node <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      node<span class="token punctuation">.</span>value <span class="token operator">=</span> value<span class="token punctuation">;</span>
      node<span class="token punctuation">.</span>isDeleted <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      <span class="token comment">// 为空则新建个Node对象</span>
      node <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>
      nodes<span class="token punctuation">[</span>idx<span class="token punctuation">]</span> <span class="token operator">=</span> node<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">remove</span><span class="token punctuation">(</span><span class="token keyword">int</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">Node</span> node <span class="token operator">=</span> nodes<span class="token punctuation">[</span><span class="token function">getIndex</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token comment">// 将删除的标志位置为true，这样就不会频繁地新建对象和回收对象</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>node <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> node<span class="token punctuation">.</span>isDeleted <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">int</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">Node</span> node <span class="token operator">=</span> nodes<span class="token punctuation">[</span><span class="token function">getIndex</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>node <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> node<span class="token punctuation">.</span>isDeleted <span class="token operator">?</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">:</span> node<span class="token punctuation">.</span>value<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token comment">// 当 map 中没有 key 的时候，getIndex 总是返回一个空位置</span>
  <span class="token comment">// 当 map 中包含 key 的时候，getIndex 总是返回 key 所在的位置</span>
  <span class="token keyword">int</span> <span class="token function">getIndex</span><span class="token punctuation">(</span><span class="token keyword">int</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> hash <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
    hash <span class="token operator">^=</span> <span class="token punctuation">(</span>hash <span class="token operator">&gt;&gt;&gt;</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> n <span class="token operator">=</span> nodes<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
    <span class="token keyword">int</span> idx <span class="token operator">=</span> hash <span class="token operator">%</span> n<span class="token punctuation">;</span>
    <span class="token comment">// 退出的条件：node为空，node的key等于需要找的key</span>
    <span class="token comment">// 继续循环的条件：在哈希冲突的情况下，继续寻找需要的key</span>
    <span class="token comment">// 删除操作没有将数据置为null，遍历次数就会增多</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>nodes<span class="token punctuation">[</span>idx<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> nodes<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token punctuation">.</span>key <span class="token operator">!=</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// 进行偏移</span>
      hash <span class="token operator">+=</span> <span class="token constant">OFFSET</span><span class="token punctuation">;</span>
      <span class="token comment">// 防止数组越界</span>
      idx <span class="token operator">=</span> hash <span class="token operator">%</span> n<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> idx<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3),sn=n("ul",null,[n("li",null,[s("时间复杂度：一般情况下复杂度为 "),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mi",null,"O"),n("mo",{stretchy:"false"},"("),n("mn",null,"1"),n("mo",{stretchy:"false"},")")]),n("annotation",{encoding:"application/x-tex"},"O( 1 )")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),n("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"O"),n("span",{class:"mopen"},"("),n("span",{class:"mord"},"1"),n("span",{class:"mclose"},")")])])]),s(" ，极端情况下为 "),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mi",null,"O"),n("mo",{stretchy:"false"},"("),n("mi",null,"n"),n("mo",{stretchy:"false"},")")]),n("annotation",{encoding:"application/x-tex"},"O( n )")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),n("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"O"),n("span",{class:"mopen"},"("),n("span",{class:"mord mathnormal"},"n"),n("span",{class:"mclose"},")")])])]),s("，因为如果哈希冲突严重的话，就需要遍历整个数组才可以找到空位")]),n("li",null,[s("空间复杂度："),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mi",null,"O"),n("mo",{stretchy:"false"},"("),n("mn",null,"1"),n("mo",{stretchy:"false"},")")]),n("annotation",{encoding:"application/x-tex"},"O( 1 )")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),n("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"O"),n("span",{class:"mopen"},"("),n("span",{class:"mord"},"1"),n("span",{class:"mclose"},")")])])])])],-1);function an(tn,pn){const t=c("ExternalLinkIcon");return o(),l("div",null,[u,r,k,n("p",null,[n("a",d,[s("https://mp.weixin.qq.com/s?__biz=MzU4NDE3MTEyMA==&mid=2247485297&idx=1&sn=5ee4ce31c42d368af0653f60aa263c82&chksm=fd9cac6ecaeb25787e6da90423c5467e1679da0a8aaf1a3445475199a8f148d8629e851fea57&cur_album_id=1715134171561410565&scene=189#wechat_redirect"),p(t)])]),m,n("ul",null,[v,n("li",null,[b,s(" 要对指定数字取余。如第 7 行所示。 "),n("ul",null,[h,y,n("li",null,[s("参考链接： "),n("ul",null,[n("li",null,[n("a",g,[s("https://www.geeksforgeeks.org/modulo-1097-1000000007/"),p(t)])]),n("li",null,[n("a",w,[s("https://www.quora.com/What-exactly-is-print-it-modulo-10-9-+-7-in-competitive-programming-web-sites"),p(t)])])])])])]),f,x]),_,M,N,n("p",null,[n("a",O,[s("https://mp.weixin.qq.com/s?__biz=MzU4NDE3MTEyMA==&mid=2247485319&idx=1&sn=95a3dc9c97ca57185de792ca70924afe&chksm=fd9cac98caeb258ebea466f59378670a90af1cb3015ae70922e1d04ac711a5b8d8d853ac5e7d&cur_album_id=1715134171561410565&scene=189#wechat_redirect"),p(t)])]),j,I,C,n("p",null,[n("a",z,[s("https://mp.weixin.qq.com/s?__biz=MzU4NDE3MTEyMA==&mid=2247485333&idx=1&sn=717ccedd7ad0c838e775332ef864cc27&chksm=fd9cac8acaeb259c04deedb940f73167aabb112efddd27a2b5c4f3b9646f0fcd3166e0d8f7ae&cur_album_id=1715134171561410565&scene=189#wechat_redirect"),p(t)])]),D,q,L,E,R,S,n("p",null,[n("a",F,[s("https://mp.weixin.qq.com/s?__biz=MzU4NDE3MTEyMA==&mid=2247485426&idx=1&sn=071aec0bf5bc2e20c58f4cbb3dcb0fbc&chksm=fd9cacedcaeb25fb895cb99963dcfcde6b10268893a085eed4000b48bf070cecbdf7c81bf991&cur_album_id=1715134171561410565&scene=189#wechat_redirect"),p(t)])]),A,H,T,B,U,V,P,W,X,Y,Z,n("p",null,[n("a",$,[s("https://mp.weixin.qq.com/s?__biz=MzU4NDE3MTEyMA==&mid=2247485436&idx=1&sn=a07c6676c412cd692038d9b4631bcaf8&chksm=fd9cace3caeb25f5cfdb5ea34d80cfa593d61e1038de022e0bf7fc0069d5763749db7d2cf682&cur_album_id=1715134171561410565&scene=189#wechat_redirect"),p(t)])]),G,J,K,Q,nn,sn])}const on=e(i,[["render",an],["__file","算法五-8月28.html.vue"]]);export{on as default};
