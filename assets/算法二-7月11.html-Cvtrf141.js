import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as s,c as a,f as p}from"./app-BVqESlQI.js";const t={},o=p(`<h1 id="算法二-7月11" tabindex="-1"><a class="header-anchor" href="#算法二-7月11"><span>算法二-7月11</span></a></h1><h2 id="八、两数之和" tabindex="-1"><a class="header-anchor" href="#八、两数之和"><span>八、两数之和</span></a></h2><p>原题链接：https://mp.weixin.qq.com/s?__biz=MzU4NDE3MTEyMA==&amp;mid=2247484130&amp;idx=8&amp;sn=31e3191597de49983f9db37aae074e8c&amp;chksm=fd9ca9fdcaeb20eba4699df2cd7d411bc4a29b4f21493de371c97c507b711489695dd8d3ddc7&amp;cur_album_id=1715134171561410565&amp;scene=189#wechat_redirect</p><blockquote><p>给定一个整数数组 nums 和一个整数目标值 target，请你在该数组中找出和为目标值的那两个整数，并返回它们的数组下标。</p><p>你可以假设每种输入只会对应一个答案。但是，数组中同一个元素不能使用两遍。</p><p>你可以按任意顺序返回答案。</p><p>示例 1：</p><ul><li>输入：nums = [2,7,11,15]， target = 9</li><li>输出：[0,1]</li><li>解释：因为 nums[0] + nums[1] == 9 ，返回 [0, 1] 。</li></ul><p>示例 2：</p><ul><li>输入：nums = [3,2,4]， target = 6</li><li>输出：[1,2]</li></ul><p>提示：</p><ul><li>2 &lt;= nums.length &lt;= 10<sup>3</sup></li><li>-10<sup>9</sup> &lt;= nums[i] &lt;= 10<sup>9</sup></li><li>-10<sup>9</sup> &lt;= nums[i] &lt;= 10<sup>9</sup></li><li>只会存在一个有效答案</li></ul></blockquote><h3 id="_1-略解1" tabindex="-1"><a class="header-anchor" href="#_1-略解1"><span>（1）略解1</span></a></h3><p>最简单的方法就是两层循环进行遍历，需要注意的是 i 和 j 的取值，i 取值 [ 0，n-1 ] ，j 取值 [ i+1，n ] ，这样可以防止取到重复解</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">twoSum</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> t<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">int</span> n <span class="token operator">=</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>t <span class="token operator">==</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>i<span class="token punctuation">,</span>j<span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>时间复杂度：两重循环，复杂度为 O( n<sup>2</sup> )</li><li>空间复杂度：O(1)</li></ul><h3 id="_2-略解2" tabindex="-1"><a class="header-anchor" href="#_2-略解2"><span>（2）略解2</span></a></h3><p>首先，任何优化的思路都是 <strong>“ 减少重复 ”</strong>。</p><p>从朴素解法中可以知道，逻辑上我们是先定下来一个数，然后从数组中往后找另外一个值是否存在。</p><p>然后我们找第二个数的过程中是重复扫描了数组多次，我们如果能使用到第 1 次所扫描的结果，会可以简化复杂度。判断一个数是否已经存在，直观感受就是使用哈希表。</p><p>思路：</p><ol><li>首先先将所有数字存放到哈希表中</li><li>然后循环每一个数，计算出第 2 个数的值，然后在哈希表中查找</li><li>查找之前，需要判断当前的第 1 个数是否在哈希表中，如果在的话就要删除</li></ol><p>注意：因为每次哈希表存放相同元素时，新值会覆盖旧值，所以哈希表中存放的都是相对较后面的下标</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">twoSum</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> t<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  
  <span class="token comment">// 初始化哈希表，key值为数组中的数，value值为数字所在数组的下标</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// a代表数组中的数，b代表所需要的第2个数</span>
    <span class="token keyword">int</span> a <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> b <span class="token operator">=</span> t <span class="token operator">-</span> a<span class="token punctuation">;</span>
    <span class="token comment">// 如果哈希表中存在当前的数字，则删除</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token operator">==</span> i<span class="token punctuation">)</span> map<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 然后在哈希表中查找所需要的第2个数</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>i<span class="token punctuation">,</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>最坏情况下，每个数会对应一次哈希表的插入和删除。 例如数组中没有相同的元素，哈希表都存放的是第 1 个数的下标，每次都要删除。</p><ul><li>时间复杂度：会扫描数组两次，复杂度是 O( n ) （忽略常数）</li><li>空间复杂度：使用了哈希表进行记录，复杂度是 O ( n )s</li></ul><h3 id="_3-略解3" tabindex="-1"><a class="header-anchor" href="#_3-略解3"><span>（3）略解3</span></a></h3><p>这时候不妨将思路逆转过来，遍历过程中指定第二个数，使用哈希表在第二个数的前面去找第一个数。一边加入哈希表，一边找需要的数。</p><p>因为最后都会遍历完整个数组，所以不担心会少数字。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
  <span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">twoSum</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> t<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// a代表数组中的数，b代表所需要的第2个数</span>
      <span class="token keyword">int</span> a <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> b <span class="token operator">=</span> t <span class="token operator">-</span> a<span class="token punctuation">;</span>
      <span class="token comment">// 判断哈希表中是否有b所代表的数字</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">,</span> i<span class="token punctuation">}</span><span class="token punctuation">;</span>
      <span class="token comment">// 将数组中的数放入哈希表中</span>
      map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>时间复杂度：会扫描数组一次，复杂度是 O( n ) （忽略常数）</li><li>空间复杂度：使用了哈希表进行记录，复杂度是 O ( n )</li><li>虽然第 2 种和第 3 种的复杂度一致，但第 3 种思路依然很完美</li></ul><p><strong>总结：初始化是一个比较讲究的操作，结合题目自定义初始化，会少了很多麻烦。</strong></p><p><strong>这道题将初始化和比较结合在了一起。上一道题设置虚拟头节点，将初始化放入到循环中去。</strong></p><h2 id="九、最长回文子串" tabindex="-1"><a class="header-anchor" href="#九、最长回文子串"><span>九、最长回文子串</span></a></h2><p>原题链接：https://mp.weixin.qq.com/s?__biz=MzU4NDE3MTEyMA==&amp;mid=2247484229&amp;idx=6&amp;sn=7b8c5e69f04f0b86616300bd3761c75d&amp;chksm=fd9ca85acaeb214cb2b47c277dd79245edba39f5d7be9eafe634768c6586ce620aa776edd850&amp;cur_album_id=1715134171561410565&amp;scene=189#wechat_redirect</p><blockquote><p>给你一个字符串 s，找到 s 中最长的回文子串。</p><p>示例 1：</p><ul><li>输入：s = &quot;babad&quot;</li><li>输出：&quot;bab&quot;</li><li>解释：&quot;aba&quot; 同样是符合题意的答案</li></ul><p>示例 2：</p><ul><li>输入：s = &quot;cbbd&quot;</li><li>输出：&quot;bb&quot;</li></ul><p>提示：</p><ul><li>1 &lt;= s.length &lt;= 1000</li><li>s 仅由数字和英文字母（大写和/或小写）组成</li></ul></blockquote><h3 id="_1-略解1-1" tabindex="-1"><a class="header-anchor" href="#_1-略解1-1"><span>（1）略解1</span></a></h3><p>这道题类似于第 6 题，也是找出符合条件的子串，但这道题不能使用滑动窗口来解决，因为回文串这个条件不好判断。</p><p>首先还是先使用暴力方法解决，循环遍历每个字符，作为回文串的中心，然后向左右扩展比较。</p><ul><li>回文串长度是奇数，中心是字符串的某个字符——s[i]，则判断 s[i − k] == s[i + k]， k = 1,2,3 ……</li><li>回文串长度是偶数，中心是两个字符的中间，假设—— s[i] 是中心，则判断前一个字符和 s[i] ，<code>s[i − k] == s[i + k − 1], k = 1,2,3…</code></li></ul><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">longestPalindrome</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token class-name">String</span> ans <span class="token operator">=</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 回文串为奇数</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">int</span> l <span class="token operator">=</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> r <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
      <span class="token comment">// 获取当前中心的最长回文串</span>
      <span class="token class-name">String</span> sub <span class="token operator">=</span> <span class="token function">getString</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> l<span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token comment">// 如果当前回文串的值大于之前的值，则进行替换</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>sub<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> ans<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> ans <span class="token operator">=</span> sub<span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      <span class="token comment">// 回文串为偶数</span>
      l <span class="token operator">=</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
      r <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
      sub <span class="token operator">=</span> <span class="token function">getString</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> l<span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>sub<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> ans<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> ans <span class="token operator">=</span> sub<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> ans<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 获取当前中心的最长回文串</span>
<span class="token class-name">String</span> <span class="token function">getString</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">,</span> <span class="token keyword">int</span> l<span class="token punctuation">,</span> <span class="token keyword">int</span> r<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 如果左右边界没有超出数组，并且比较的字符相等，则继续比较</span>
  <span class="token keyword">while</span> <span class="token punctuation">(</span>l <span class="token operator">&gt;=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> r <span class="token operator">&lt;</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span> <span class="token operator">==</span> s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    l<span class="token operator">--</span><span class="token punctuation">;</span>
    r<span class="token operator">++</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> s<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>l <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>时间复杂度：先枚举了 <code>s</code> 中的每个字符作为回文串的中心点，再从中心点出发左右扩展，最多扩展到边界。复杂度是 O ( n<sup>2</sup> )</li><li>空间复杂度：O (1)</li></ul><h3 id="_2-略解2-1" tabindex="-1"><a class="header-anchor" href="#_2-略解2-1"><span>（2）略解2</span></a></h3><p>有一个算法叫 Manacher 算法，其可以将时间复杂度降到 O ( n )，其用来解决 “ 回文串 ” 问题。算法比较复杂，有很多步：</p><p>参考链接：</p><ul><li>https://youtu.be/kbUiR5YWUpQ</li><li>https://www.cnblogs.com/cloudplankroader/p/10988844.html</li></ul><p>第 1 步：处理字符串</p><ul><li>操作：将字符串的所有间隔插入 “ # ” 符号，例如 “ abaabc ” ，处理完后就变成 “ #a#b#a#a#b#c ”</li><li>原因：为了处理原来字符串长度的奇偶问题，处理完后一定是奇数。</li><li>证明：“ aa ” =&gt; &quot; #a#a# &quot; ，长度 2 =&gt; 长度 5；“ a ” =&gt; &quot; #a# &quot;，长度 1 =&gt; 长度 3</li></ul><p>第 2 步：声明变量</p><p>需要说明几个变量的作用：</p><ul><li>R：最长回文串的右边界。不会经常变动，除非有新右边界超过了当前边界。</li><li>C：最长回文串的中心。不会经常变动，除非 R 更新了。也就是说 R 和 C 会同时更新</li><li>L：最长回文串的右边界关于 C 的对称。</li><li>i ：循环到的字符的下标</li><li>i&#39; ：循环到的字符关于 C 的对称的下标</li><li>pArray：数组，每个回文串的半径长度</li></ul><p>第 3 步：声明情况</p><p>i 循环的时候会遇到几种情况，操作都不同：</p><ul><li>i &gt; R ：暴力匹配，然后看下是否要更新 R、C、L 变量</li><li>i &lt;= R ：获取到 i&#39; 的值，因为 i&#39; 和 i 是对称的，所以 i&#39; 和 i 的回文情况是一样的。但需要继续看 i&#39; 的值赋值给 i 后，是否超出了 R 的值。</li><li>（i&#39; 的位置是 2 * C - i，推导 i&#39; = R - i + L，因为 R = L + (C - L)*2，所以 i&#39; = L + (C - L)*2 - i + L = 2C - i）</li><li>如果没有超出 R 的值，则直接取 i&#39; 的值</li><li>如果超出了，就只能取 i 到 R 的这个范围的回文串</li><li>如果等于 R 的值，则继续在 i&#39; 的基础上继续扩展</li></ul><p>可以证明上面三种情况：</p><ol><li>没有超出 R 的值，证明 i 的回文情况和 i&#39; 的完全一致，所以可以直接取 i&#39; 的值。和 KMP 算法类似</li><li>超出了 R 的值，假设 R 的右边是变量 b，关于 i 的对称 R&#39; 的左边是变量 a，L 的左边是变量 x，关于 i&#39; 对称的 L&#39; 的右边是变量 y。</li></ol><p>因为 i&#39; 的回文串长度是超过 L 的，x 等于 y。因为关于 C 对称关系，y 又等于 a。但因为 R 是最长回文串的边界，所以 x 不等于 b。最后等于 y 不等于 b，所以 i 为中心的回文串最多到 R 处。</p><ol start="3"><li>如果等于 R 的值，无法得知 L 的左边和 R 的右边的关系，所以需要继续扩展。</li></ol><p>下面图片比较清楚：</p><img src="https://raw.githubusercontent.com/hahg2000/picture/vue/Manacher图解.png" style="zoom:60%;"><p>第 4 步：继续循环不断地移动 i</p><p>下面为全部代码：为了简化代码，不只第 3 种情况（i 的值与 i 到 R 的距离一致）进行扩展搜索。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">longestPalindrome</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> s<span class="token punctuation">;</span>
  <span class="token comment">// 处理字符串</span>
  <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> chars <span class="token operator">=</span> <span class="token function">manacherString</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>
  
  <span class="token comment">// n代表新字符串长度</span>
  <span class="token keyword">int</span> n <span class="token operator">=</span> chars<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
  <span class="token comment">// pArr存放每个字符的最长回文串长度</span>
  <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> pArr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token comment">// 初始化C，R，和最长回文串的中心pos</span>
  <span class="token keyword">int</span> <span class="token class-name">C</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token class-name">R</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> pos <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
  <span class="token comment">// 将最大值初始化为整型的最小值</span>
  <span class="token keyword">int</span> max <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token constant">MIN_VALUE</span><span class="token punctuation">;</span>
  
  <span class="token comment">// 遍历每一次字符</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 判断i是否小于R，如果小于则在取i&#39;的值与i到右边界的距离比较，取最小值</span>
    pArr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> i <span class="token operator">&lt;</span> <span class="token class-name">R</span> <span class="token operator">?</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>pArr<span class="token punctuation">[</span><span class="token class-name">C</span> <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">-</span> i<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token class-name">R</span> <span class="token operator">-</span> i<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">;</span>的
    <span class="token comment">// 然后i&#39;的值的基础上继续扩展</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">+</span> pArr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> n <span class="token operator">&amp;&amp;</span> i <span class="token operator">-</span> pArr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&gt;</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>chars<span class="token punctuation">[</span>i <span class="token operator">+</span> pArr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">==</span> chars<span class="token punctuation">[</span>i <span class="token operator">-</span> pArr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        pArr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    
    <span class="token comment">// 如果i的右边界大于R，则更新R和C</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">+</span> pArr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&gt;</span> <span class="token class-name">R</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token class-name">R</span> <span class="token operator">=</span> i <span class="token operator">+</span> pArr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
      <span class="token class-name">C</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    <span class="token comment">// 判断当前回文串的长度是否为最大</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>pArr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&gt;</span> max<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      max <span class="token operator">=</span> pArr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
      pos <span class="token operator">=</span> i<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  
  <span class="token comment">// 取出最长的半径长度</span>
  <span class="token keyword">int</span> offset <span class="token operator">=</span> pArr<span class="token punctuation">[</span>pos<span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token comment">// 将字符串还原</span>
  <span class="token class-name">StringBuilder</span> sb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> pos <span class="token operator">-</span> offset <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> pos <span class="token operator">+</span> offset <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>chars<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token char">&#39;#&#39;</span><span class="token punctuation">)</span> sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>chars<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> sb<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 往字符串加入#符号的方法</span>
<span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">manacherString</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> chars <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">char</span><span class="token punctuation">[</span>s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> idx <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> chars<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    chars<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>i <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">?</span> <span class="token char">&#39;#&#39;</span> <span class="token operator">:</span> s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>idx<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> chars<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-详解2" tabindex="-1"><a class="header-anchor" href="#_3-详解2"><span>（3）详解2</span></a></h3><p>假设现在有一个字符串 &quot; abaabc &quot; ，进行字符串处理后 “ #a#b#a#a#b#c# ”</p><ol><li>现在先遍历第 1 个字符，i = 0，R = -1，C = -1。i &gt; R，所以对于第 1 个 # 为中心，搜索回文串。没有搜索任何字符就遇到了字符串边界，所以回文半径为 1，即 pArray[1] = 1。然后更新 R 和 C，C = 0；这里将 R 指向右边界的下一个字符，便于操作，所以 R = 1</li><li>然后遍历第 2 个字符，i = 1，R = 1，C = 0。i = R，但关于 C 对称无字符，所以直接搜索回文串。搜索了 “ #a# ”，所以回文半径为 3，pArray[1] = 3。R = 3，C = 1</li><li>然后遍历第 3 个字符，i = 2，R = 3，C = 1。i &lt; R，看 pArray[i&#39;] 的值，i&#39; = 0，pArray[0] = 1；然后看与 R 的距离，R - i = 3 - 2 = 1，所以去哪个都行，pArray[2] = 1</li><li>然后遍历第 4 个字符，i = 3，R = 3，C = 1。i = R，但关于 C 对称无字符，所以直接搜索回文串。搜索了 “ #a#b#a# ”，所以回文半径为 4，pArray[3] = 4。R = 7，C = 3</li><li>然后遍历第 5 个字符，i = 4，R = 7，C = 3。i &lt; R，看 pArray[i&#39;] 的值，i&#39; = 2，pArray[2] = 1；然后看与 R 的距离，R - i = 7 - 4 = 3，所以取最小值，pArray[4] = 1</li></ol><h2 id="十、-整数反转" tabindex="-1"><a class="header-anchor" href="#十、-整数反转"><span>十、 <strong>整数反转</strong></span></a></h2><p>原题链接：https://mp.weixin.qq.com/s?__biz=MzU4NDE3MTEyMA==&amp;mid=2247484229&amp;idx=5&amp;sn=6884cd97b248c71e8be57ebc5d68596e&amp;chksm=fd9ca85acaeb214c2387dad51736521c846d6daf036bb9db95f300ffbb8b14b578e92fa6628e&amp;cur_album_id=1715134171561410565&amp;scene=189#wechat_redirect</p><blockquote><p>给出一个 32 位的有符号整数，你需要将这个整数中每位上的数字进行反转。</p><p>注意：</p><p>假设我们的环境只能存储得下 32 位的有符号整数，则其数值范围为 [ -2<sup>-31</sup>, 2<sup>31</sup>− 1 ]。</p><p>请根据这个假设，如果反转后整数溢出那么就返回 0</p></blockquote><h3 id="_1-略解1-2" tabindex="-1"><a class="header-anchor" href="#_1-略解1-2"><span>（1）略解1</span></a></h3><p>这道题在第 3 题的时候已经有相关思路了，就是如何判断当前整数溢出的思路。这次需要分别判断负数和正数</p><ul><li><p>如果是正数，原来 <code>ans * 10 + x % 10 &gt; Integer.MAX_VALUE </code> ，变为 <code>ans &gt; (Integer.MAX_VALUE - x % 10) / 10</code></p></li><li><p>如果是负数，原来 <code>ans * 10 - x % 10 &lt; Integer.MIN_VALUE </code> ，变为 <code>ans * 10 &gt; (Integer.MIN_VALUE + x % 10) / 10</code></p></li></ul><p>然后就不断循环遍历每一个数就可以了。其中反转意思就是，将原始的数字从个位开始进栈，所以从第 1 次循环开始，答案右移并加上个位数</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">reverse</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">int</span> ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token keyword">while</span> <span class="token punctuation">(</span>x <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// x为正数的判溢出条件</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> ans <span class="token operator">&gt;</span> <span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token constant">MAX_VALUE</span> <span class="token operator">-</span> x <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token comment">// x为负数的判溢出条件</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> ans <span class="token operator">&lt;</span> <span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token constant">MIN_VALUE</span> <span class="token operator">-</span> x <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token comment">// 答案右移一位，再加上个位数</span>
    ans <span class="token operator">=</span> ans <span class="token operator">*</span> <span class="token number">10</span> <span class="token operator">+</span> x <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">;</span>
    <span class="token comment">// 将已经加上的数去掉</span>
    x <span class="token operator">/=</span> <span class="token number">10</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> ans<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>时间复杂度：数字 x 的位数大约有 lg x 位（10<sup>位数</sup> ≈ x ）。复杂度为 O ( lg x )</p><p>空间复杂度：O ( 1 )</p><h2 id="十一、数字转罗马数字" tabindex="-1"><a class="header-anchor" href="#十一、数字转罗马数字"><span>十一、数字转罗马数字</span></a></h2><p>原题链接：https://mp.weixin.qq.com/s?__biz=MzU4NDE3MTEyMA==&amp;mid=2247484229&amp;idx=4&amp;sn=5f096dbcd6d5d915f7ac0cfcaa99f8a1&amp;chksm=fd9ca85acaeb214cb5004edc947177a80b59df11861c5fcc61814c47c527949d285b65818545&amp;cur_album_id=1715134171561410565&amp;scene=189#wechat_redirect</p><blockquote><p>罗马数字包含以下七种字符：I（1）， V（5）， X（10）， L（50），C（100），D（500） 和 M（100）。</p><p>通常情况下，罗马数字中小的数字在大的数字的右边，表示加法。 如果小的数字在大的数字的左边，表示减法，但只有六种情况。</p><ul><li>I 可以放在 V (5) 和 X (10) 的左边，来表示 4 和 9。</li><li>X 可以放在 L (50) 和 C (100) 的左边，来表示 40 和 90。</li><li>C 可以放在 D (500) 和 M (1000) 的左边，来表示 400 和 900。</li></ul><p>给定一个整数，将其转为罗马数字。输入确保在 1 到 3999 的范围内。</p><p>示例 1 ：</p><ul><li>输入: 58</li><li>输出: &quot; LVIII &quot;</li><li>解释: L = 50, V = 5, III = 3.</li></ul><p>示例 2:</p><ul><li>输入: 1994</li><li>输出: &quot; MCMXCIV &quot;</li><li>解释: M = 1000, CM = 900, XC = 90, IV = 4.</li></ul></blockquote><h3 id="_1-略解1-3" tabindex="-1"><a class="header-anchor" href="#_1-略解1-3"><span>（1）略解1</span></a></h3><p>这道题有点简单，使用贪心算法即可，类似于经典的背包问题，每次装单位体积价值最大的物品。这里是每次看当前位数最接近哪个罗马数字。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">// 按大小排列罗马数字所代表的值</span>
<span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> val <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token number">1000</span><span class="token punctuation">,</span><span class="token number">900</span><span class="token punctuation">,</span><span class="token number">500</span><span class="token punctuation">,</span><span class="token number">400</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">90</span><span class="token punctuation">,</span><span class="token number">50</span><span class="token punctuation">,</span><span class="token number">40</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token comment">// 将罗马数字与上面的数组对齐</span>
<span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> str <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token string">&quot;M&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;CM&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;D&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;CD&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;C&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;XC&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;L&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;XL&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;X&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;IX&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;V&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;IV&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;I&quot;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">intToRoman</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 存放罗马数字</span>
  <span class="token class-name">StringBuilder</span> sb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// 退出循环条件有两个：</span>
  <span class="token comment">// 1. 主要条件是x&gt;0，如果x被减完了当然就要退出循环</span>
  <span class="token comment">// 2. 另一个条件只是习惯写法，因为下面代码要取数组的值，</span>
  <span class="token comment">// 但x&gt;0时，i永远不会超过数组的长度，所以不加上也可以</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> val<span class="token punctuation">.</span>length <span class="token operator">&amp;&amp;</span> x <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 取出罗马数字所代表的值</span>
    <span class="token keyword">int</span> cv <span class="token operator">=</span> val<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token comment">// 取出罗马数字</span>
    <span class="token class-name">String</span> cs <span class="token operator">=</span> str<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token comment">// 如果当前的输入值大于罗马数字，则继续循环减取罗马数字的值</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>x <span class="token operator">&gt;=</span> cv<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// 最终结果不断添加罗马数字</span>
      sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>cs<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token comment">// 输入值不断减少</span>
      x <span class="token operator">-=</span> cv<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> sb<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>时间复杂度：计算量与最终罗马数字的长度成正比。对于每一位阿拉伯数字，罗马数字最多用 4 个字母表示。</li></ul><p>例如个位数，最大的单个罗马数字是 9，其次是 5、1。9 对于 5 和 5 对于 1，都差距 4，理论上 8(VIII)，4(IIII)，但由于有罗马数字 4(IV)，所以最多差距 VIII，则罗马数字的长度最多不超过阿拉伯数字长度的 4 倍。阿拉伯数字的长度约为 lgn ，因此罗马数字的长度不超过 4 * lgn 。复杂度为 O(lgn)</p><ul><li>空间复杂度：虽然使用了两个数组记录罗马字符和数值，但消耗的空间固定，不随着样本大小而变化。复杂度为 O(1)</li></ul><h2 id="十二、最长公共前缀" tabindex="-1"><a class="header-anchor" href="#十二、最长公共前缀"><span>十二、最长公共前缀</span></a></h2><p>原题链接：https://mp.weixin.qq.com/s?__biz=MzU4NDE3MTEyMA==&amp;mid=2247484229&amp;idx=3&amp;sn=6a5fe467fc450b397c67f8ae45d4d2b7&amp;chksm=fd9ca85acaeb214c8b4993324b4faded8f6724d18849273f07065253faef31c3bba834bb4e59&amp;cur_album_id=1715134171561410565&amp;scene=189#wechat_redirect</p><blockquote><p>编写一个函数来查找字符串数组中的最长公共前缀。</p><p>如果不存在公共前缀，返回空字符串 &quot;&quot;。</p><p>示例 1：</p><ul><li>输入：strs = [&quot;flower&quot;,&quot;flow&quot;,&quot;flight&quot;]</li><li>输出：&quot;fl&quot;</li></ul><p>示例 2：</p><ul><li>输入：strs = [&quot;dog&quot;,&quot;racecar&quot;,&quot;car&quot;]</li><li>输出：&quot;&quot;解释：输入不存在公共前缀。</li></ul><p>提示：</p><ul><li>0 &lt;= strs.length &lt;= 200</li><li>0 &lt;= strs[i].length &lt;= 200</li><li>strs[i] 仅由小写英文字母组成</li></ul></blockquote><h3 id="_1-略解1-4" tabindex="-1"><a class="header-anchor" href="#_1-略解1-4"><span>（1）略解1</span></a></h3><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">longestCommonPrefix</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> ss<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token class-name">String</span> ans <span class="token operator">=</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>
  <span class="token comment">// 如果数组为空则直接返回空字符串</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>ss<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> ans<span class="token punctuation">;</span>
  
  <span class="token comment">// 这个循环用于取出字符串的每个字符</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token constant">MAX_VALUE</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 取出第1个字符串</span>
    <span class="token class-name">String</span> s <span class="token operator">=</span> ss<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token comment">// 如果当前的i已经超过第1字符串的长度，</span>
    <span class="token comment">// 证明最长公共前缀不会继续增加了，直接返回结果</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&gt;=</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> ans<span class="token punctuation">;</span>
    <span class="token comment">// 取出某个字符</span>
    <span class="token keyword">char</span> c <span class="token operator">=</span> ss<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 再对字符串数组进行遍历</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> item <span class="token operator">:</span> ss<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// 如果当前的i超过某个字符串的长度，或者取出的字符不相等，</span>
      <span class="token comment">// 则直接返回结果</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&gt;=</span> item<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span> item<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">!=</span> c<span class="token punctuation">)</span> <span class="token keyword">return</span> ans<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 能到这行证明当前字符每个字符串都有，所以添加到结果里</span>
    ans <span class="token operator">+=</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> ans<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>说明：判断条件不一定要写成 i &lt; Integer.MAX_VALUE，题目给出了范围是 200 以内，写成 i &lt;= 200 也可以。不影响执行效率。</p><ul><li><p>时间复杂度：对于 n 个字符串，都需要遍历到公共前缀长度 m。复杂度为 O (nm)</p></li><li><p>空间复杂度：需要存储公共前缀作为答案返回。复杂度为 O (m)</p></li></ul><hr><p>总结：这道题写了我快一个小时，主要还是思路不够明确。</p><ul><li>要明确需要的数据，这道题需要的是字符串；</li><li>明确循环的目的，这道题第 1 个循环遍历字符串，第 2 个循环遍历数组；</li><li>明确数据更新的条件，这道题是当有字符不相等，或者该位置的字符不存在。</li><li>最后注意一下边界问题，这道题是 <code>string.charAt()</code> 方法的边界问题。</li></ul><h2 id="十三、盛最多水的容器" tabindex="-1"><a class="header-anchor" href="#十三、盛最多水的容器"><span>十三、盛最多水的容器</span></a></h2><p>原题链接：https://mp.weixin.qq.com/s?__biz=MzU4NDE3MTEyMA==&amp;mid=2247484229&amp;idx=2&amp;sn=e3d730a608987d3c764f17578ab4e8af&amp;chksm=fd9ca85acaeb214cb2ab0e66b3ee5f8b20a5159aef56e23b92669669b039187836d53ce48bb7&amp;cur_album_id=1715134171561410565&amp;scene=189#wechat_redirect</p><blockquote><p>给你 <code>n</code> 个非负整数 <code>a1，a2，...，an</code>，每个数代表坐标中的一个点 <code>(i, ai)</code> 。</p><p>在坐标内画 <code>n</code> 条垂直线，垂直线 <code>i</code> 的两个端点分别为 <code>(i, ai)</code> 和 <code>(i, 0)</code> 。</p><p>找出其中的两条线，使得它们与 <code>x</code> 轴共同构成的容器可以容纳最多的水。</p><p>示例 1：</p><ul><li>输入：[1,8,6,2,5,4,8,3,7]</li><li>输出：49</li><li>解释：图中垂直线代表输入数组 [1,8,6,2,5,4,8,3,7]。在此情况下，容器能够容纳水（表示为蓝色部分）的最大值为 49。</li></ul><p>示例 2：</p><ul><li>输入：height = [1,1]</li><li>输出：1</li></ul></blockquote><img src="https://raw.githubusercontent.com/hahg2000/picture/vue/question_11.jpg" style="zoom:80%;"><p>提示：</p><ul><li>n = height.length</li><li>2 &lt;= n &lt;= 3 * 10<sup>4</sup></li><li>0 &lt;= height[i] &lt;= 3 * 10<sup>4</sup></li></ul><h3 id="_1-略解1-5" tabindex="-1"><a class="header-anchor" href="#_1-略解1-5"><span>（1）略解1</span></a></h3><p>首先是暴力解法，暴力解法就是一个一个遍历，然后计算每个面积，选出那个最大的面积。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">maxArea</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> height<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> n <span class="token operator">=</span> height<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
        <span class="token keyword">int</span> ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">int</span> w <span class="token operator">=</span> j <span class="token operator">-</span> i<span class="token punctuation">;</span>
                <span class="token keyword">int</span> h <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>height<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> height<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                ans <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>w <span class="token operator">*</span> h<span class="token punctuation">,</span> ans<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> ans<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-略解2-2" tabindex="-1"><a class="header-anchor" href="#_2-略解2-2"><span>（2）略解2</span></a></h3><p>第 2 个解法：双指针 + 贪心解法</p><p>左右指针 i 、j 都指向一个数，然后向中间移动。w 为 i、j 的距离，代表矩形的底；然后 i 、j 所指向的数字，最小的为矩形的高 h。</p><p>首先考虑两种情况：</p><ul><li>移动高的指针：w 一定变小 <ul><li>移动后的数字比之前小，h 可能变小，因为 w 一定变小，所以 面积一定变小。</li><li>移动后的数字比之前相等，因为 w 变小，所以 面积变小。</li><li>移动后的数字比之前大，h 不变（木桶效应），因为 w 变小，所以 面积变小。</li><li>总结：不能移动两个指针较高的</li></ul></li><li>移动低的指针：w 一定变小 <ul><li>移动后的数字比之前小，h 一定变小，再加上 w 变小，所以 面积一定变小。</li><li>移动后的数字比之前相等，h 不变，w 一定变小，所以 面积一定变小。</li><li>移动后的数字比之前大，h 变大，但 w 变小，所以 <strong>面积可能变大</strong>。</li></ul></li><li>但是否符合贪心选择性质？ <ul><li>贪心选择性质： 一个问题的整体最优解可通过一系列局部的最优解的选择达到，并且每次的选择可以依赖以前作出的选择，但不依赖于后面要作出的选择。</li><li>两个指针一个在开头，一个在结尾，如果需要移动指针来找比初始的大的面积，就一定只能移动高度较低的，否则不可能比初始的大。当移动后无论面积是增加还是减少，只能不断移动高度较低的，才有可能找到比现在大的值。所以每次只根据当前的指针的高度来移动，符合局部最优解。</li></ul></li></ul><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">maxArea</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> height<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">int</span> n <span class="token operator">=</span> height<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
  <span class="token comment">// 初始化两个指针</span>
  <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> j <span class="token operator">=</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
  <span class="token keyword">int</span> ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token comment">// 当i=j时就可以退出循环了</span>
  <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> j<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 判断当前的面积是否大于已记录的答案</span>
    ans <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span> <span class="token punctuation">(</span>j <span class="token operator">-</span> i<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>height<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> height<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 根据高度移动不同的指针</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>height<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> height<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      i<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      j<span class="token operator">--</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> ans<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>时间复杂度：会对整个数组扫描一遍。复杂度为 O ( n )</li><li>空间复杂度：O (1)</li></ul><h2 id="十四、绝对差不超过限制的最长连续子数组" tabindex="-1"><a class="header-anchor" href="#十四、绝对差不超过限制的最长连续子数组"><span>十四、绝对差不超过限制的最长连续子数组</span></a></h2><p>原题链接：https://mp.weixin.qq.com/s?__biz=MzU4NDE3MTEyMA==&amp;mid=2247484403&amp;idx=1&amp;sn=9311c773c488d8b9573e5b0e3be9445e&amp;chksm=fd9ca8eccaeb21fa5d1febd26cef4d4fe94e6600f5d2426d9cad43012a94c409d44c0bd2b5ec&amp;cur_album_id=1715134171561410565&amp;scene=189#wechat_redirect</p><blockquote><p>给你一个整数数组 nums ，和一个表示限制的整数 limit，请你返回最长连续子数组的长度，该子数组中的任意两个元素之间的绝对差必须小于或者等于 limit 。</p><p>如果不存在满足条件的子数组，则返回 0 。</p><p>示例 1：</p><ul><li>输入：nums = [8,2,4,7], limit = 4</li><li>输出：2</li><li>解释：所有子数组如下： <ul><li>[8] 最大绝对差 |8-8| = 0 &lt;= 4.</li><li>[8,2] 最大绝对差 |8-2| = 6 &gt; 4.</li><li>[8,2,4] 最大绝对差 |8-2| = 6 &gt; 4.</li><li>[8,2,4,7] 最大绝对差 |8-2| = 6 &gt; 4.</li><li>[2] 最大绝对差 |2-2| = 0 &lt;= 4.</li><li>[2,4] 最大绝对差 |2-4| = 2 &lt;= 4.</li><li>[2,4,7] 最大绝对差 |2-7| = 5 &gt; 4.</li><li>[4] 最大绝对差 |4-4| = 0 &lt;= 4.</li><li>[4,7] 最大绝对差 |4-7| = 3 &lt;= 4.</li><li>[7] 最大绝对差 |7-7| = 0 &lt;= 4.</li><li>因此，满足题意的最长子数组的长度为 2 。</li></ul></li></ul><p>提示：</p><ul><li>1 &lt;= nums.length &lt;= 10^5</li><li>1 &lt;= nums[i] &lt;= 10^9</li><li>0 &lt;= limit &lt;= 10^9</li></ul></blockquote><h3 id="_1-二分解法" tabindex="-1"><a class="header-anchor" href="#_1-二分解法"><span>（1）二分解法</span></a></h3><p>对数解法就是二分法。</p><p>二分的是结果数组的长度，如果结果数组的长度超过原数组的一半，则长度继续扩大，否则长度减少。</p><ol><li>变量 r 代表结果数组长度</li><li>变量 mid 代表数组长度的一半</li><li><code>check()</code> 方法检测被分成两部分的数组是否符合题目条件（数组里的绝对差不超过限制）。如果超过了，则将变量 l 变大，使数组长度边长；否则将 r 变小，使数组长度变小。</li></ol><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">longestSubarray</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> limit<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">int</span> n <span class="token operator">=</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
  <span class="token keyword">int</span> l <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> r <span class="token operator">=</span> n<span class="token punctuation">;</span>
  <span class="token keyword">while</span> <span class="token punctuation">(</span>l <span class="token operator">&lt;</span> r<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 计算中间的数的下标</span>
    <span class="token keyword">int</span> mid <span class="token operator">=</span> l <span class="token operator">+</span> r <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&gt;&gt;</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">check</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> mid<span class="token punctuation">,</span> limit<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// 将mid赋值给l，使l变大</span>
      l <span class="token operator">=</span> mid<span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      <span class="token comment">// 将mid-1赋值给r，使r变小</span>
      r <span class="token operator">=</span> mid <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> r<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>主要还是看 <code>check()</code> 方法的实现方式：分别创建两个队列，然后找出顺序和逆序的子序列，然后比较顺序的第 1 个元素和逆序的第 1 个元素。</p><ol><li>第 3 行：使用到是 Deque 单调队列，用于存放顺序（<code>Min</code>）和逆序（<code>Max</code>）子序列，<strong>里面存放的是下标</strong>。</li><li>第 4 行：循环的起始条件是 <code>r = 0，l = r - len + 1</code>，这个模仿队列一个元素一个元素加进去，即 r ——最右边的下标从 0 开始。</li><li>第 5 ~ 7 行： <code>max.peekFirst() &lt; l</code> ，其实是判断顺序和逆序的队列是否在变量 l 之后，如果在 l 之后，下标一定会大于 l。小于的话，就是队列的第 1 个下标不应该在队列里，则去掉第 1 个字符。</li><li>第 8 ~ 11 行：<code>nums[r] &gt;= nums[max.peekLast()]</code> ，其实就是判断当前的数字是否大于逆序的最后一个字符，如果大于则去掉最后一个字符，再继续判断，直到可以将当前数字逆序放进队列。</li><li>下面代码就是和逆序相似的操作。</li><li>第 21 ~ 23 行：<code>Math.abs(nums[max.peekFirst()] - nums[min.peekFirst()]) &lt;= limit</code> ，就是判断最大绝对差是否符合条件。<code>l &gt;= 0</code> 的条件为的是让当前的队列符合长度再进行判断。</li></ol><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">boolean</span> <span class="token function">check</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> len<span class="token punctuation">,</span> <span class="token keyword">int</span> limit<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">int</span> n <span class="token operator">=</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
  <span class="token class-name">Deque</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> max <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayDeque</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> min <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayDeque</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> r <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> l <span class="token operator">=</span> r <span class="token operator">-</span> len <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> r <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> r<span class="token operator">++</span><span class="token punctuation">,</span> l <span class="token operator">=</span> r <span class="token operator">-</span> len <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>max<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> max<span class="token punctuation">.</span><span class="token function">peekFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> l<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      max<span class="token punctuation">.</span><span class="token function">pollFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>max<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>r<span class="token punctuation">]</span> <span class="token operator">&gt;=</span> nums<span class="token punctuation">[</span>max<span class="token punctuation">.</span><span class="token function">peekLast</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      max<span class="token punctuation">.</span><span class="token function">pollLast</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    max<span class="token punctuation">.</span><span class="token function">addLast</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>min<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> min<span class="token punctuation">.</span><span class="token function">peekFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> l<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      min<span class="token punctuation">.</span><span class="token function">pollFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>min<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>r<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> nums<span class="token punctuation">[</span>min<span class="token punctuation">.</span><span class="token function">peekLast</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      min<span class="token punctuation">.</span><span class="token function">pollLast</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    min<span class="token punctuation">.</span><span class="token function">addLast</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>l <span class="token operator">&gt;=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>max<span class="token punctuation">.</span><span class="token function">peekFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">-</span> nums<span class="token punctuation">[</span>min<span class="token punctuation">.</span><span class="token function">peekFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> limit<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>时间复杂度：不断取中间的复杂度为 O(logn) ，对于每次 <code>check</code> 而言，每个元素最多入队和出队常数次，复杂度为 O( n ) 。整体复杂度为 O ( nlogn )</li><li>空间复杂度：O( n )</li></ul><h3 id="_2-双指针解法" tabindex="-1"><a class="header-anchor" href="#_2-双指针解法"><span>（2）双指针解法</span></a></h3><p>事实上我们可以直接使用 <strong>双指针解法</strong> 找到最大值。始终让右端点 <code>r</code> 右移，当不满足条件时让 <code>l</code> 进行右移。</p><p>同时，还是使用 <strong>单调队列</strong> 保存我们的区间最值，这样我们只需要对数组进行一次扫描即可得到答案。不然在移动指针的时候，如果移出了最小值，则需要重新在当前数组中找出最小。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">longestSubarray</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> limit<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">int</span> n <span class="token operator">=</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
  <span class="token keyword">int</span> ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token class-name">Deque</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> max <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayDeque</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> min <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayDeque</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> r <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> l <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> r <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> r<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 将当前的数字放入逆序队列</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>max<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>r<span class="token punctuation">]</span> <span class="token operator">&gt;=</span> nums<span class="token punctuation">[</span>max<span class="token punctuation">.</span><span class="token function">peekLast</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      max<span class="token punctuation">.</span><span class="token function">pollLast</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    max<span class="token punctuation">.</span><span class="token function">addLast</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 将当前的数字放入顺序队列</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>min<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>r<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> nums<span class="token punctuation">[</span>min<span class="token punctuation">.</span><span class="token function">peekLast</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      min<span class="token punctuation">.</span><span class="token function">pollLast</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    min<span class="token punctuation">.</span><span class="token function">addLast</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 判断绝对差是否大于限制</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>max<span class="token punctuation">.</span><span class="token function">peekFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">-</span> nums<span class="token punctuation">[</span>min<span class="token punctuation">.</span><span class="token function">peekFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> limit<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// 大于的话，移动左边的指针</span>
      l<span class="token operator">++</span><span class="token punctuation">;</span>
      <span class="token comment">// 查找当前指针是否存在两个队列里</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>max<span class="token punctuation">.</span><span class="token function">peekFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> l<span class="token punctuation">)</span> max<span class="token punctuation">.</span><span class="token function">pollFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>min<span class="token punctuation">.</span><span class="token function">peekFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> l<span class="token punctuation">)</span> min<span class="token punctuation">.</span><span class="token function">pollFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 判断双指针的距离是否为最远</span>
    ans <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span> r <span class="token operator">-</span> l <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> ans<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>时间复杂度：每个元素最多入队和出队常数次，一共遍历了一次整个字符串，复杂度为 O ( n )</li><li>空间复杂度：O ( n )</li></ul><h2 id="十五、罗马数字转数字" tabindex="-1"><a class="header-anchor" href="#十五、罗马数字转数字"><span>十五、罗马数字转数字</span></a></h2><p>原题链接：https://mp.weixin.qq.com/s?__biz=MzU4NDE3MTEyMA==&amp;mid=2247484403&amp;idx=2&amp;sn=1a8d737b73d779a08b4020f361791a2b&amp;chksm=fd9ca8eccaeb21fa052e9e592150cef10893eb0dc7829667eadf6eddd53ea4f89e4fb80e5a6c&amp;cur_album_id=1715134171561410565&amp;scene=189#wechat_redirect</p><blockquote><p>给定一个罗马数字，将其转换成整数。输入确保在 1 到 3999 的范围内。</p><p>示例 1:</p><ul><li>输入: &quot;III&quot;</li><li>输出: 3</li></ul><p>示例 2:</p><ul><li>输入: &quot;IV&quot;</li><li>输出: 4</li></ul></blockquote><h3 id="_1-略解1-6" tabindex="-1"><a class="header-anchor" href="#_1-略解1-6"><span>（1）略解1</span></a></h3><p>主要思路是：判断前面一个或者两个字符，然后将对应的值加到最终结果，再删除那个字符</p><ul><li>判断前面字符，我想到用的是 <code>string.startWith()</code> 方法，但罗马字符的长度不是唯一的，所以删除的时候需要获取当前罗马字符的长度</li><li>另一种解法就是根据罗马字符的规律。使用 map 获取当前字符和下一个字符的值，然后比较，如果当前字符的值大于下一个字符的值，就取两个字符，否则就取一个字符。</li></ul><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
  <span class="token comment">// 设计一个对应关系</span>
  <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">{</span>
    <span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;M&quot;</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;CM&quot;</span><span class="token punctuation">,</span> <span class="token number">900</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;D&quot;</span><span class="token punctuation">,</span>  <span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;CD&quot;</span><span class="token punctuation">,</span> <span class="token number">400</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;C&quot;</span><span class="token punctuation">,</span>  <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;XC&quot;</span><span class="token punctuation">,</span> <span class="token number">90</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;L&quot;</span><span class="token punctuation">,</span>  <span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;XL&quot;</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;X&quot;</span><span class="token punctuation">,</span>  <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;IX&quot;</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;V&quot;</span><span class="token punctuation">,</span>  <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;IV&quot;</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;I&quot;</span><span class="token punctuation">,</span>  <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
  
  <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">romanToInt</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// n为数组长度</span>
    <span class="token keyword">int</span> n <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// 临时字符串</span>
      <span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
      <span class="token comment">// 比较当前罗马字符的值和下一个罗马字符的值</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&lt;</span> n <span class="token operator">&amp;&amp;</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> i <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 取两个字符</span>
        str <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> i <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        i <span class="token operator">+=</span> <span class="token number">2</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token comment">// 取一个字符</span>
        str <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        i<span class="token operator">++</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      <span class="token comment">// 使用罗马字符对应相关的值</span>
      ans <span class="token operator">+=</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> ans<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>时间复杂度：对字符串 <code>s</code> 扫描一次。复杂度为 O ( n )</li><li>空间复杂度：使用了字典记录罗马字符和数值的映射关系，但消耗的空间固定，不随着样本大小而变化。复杂度为 O( 1 )</li><li>其实难点在于两点： <ul><li>找出当前字符是哪一个罗马字符——使用 <code>string.startWith()</code> 或者 <code>map.get()</code></li><li>如何维持循环——取前面的字符，再不断地删除已经取到的字符</li></ul></li></ul><h2 id="十六、-三数之和" tabindex="-1"><a class="header-anchor" href="#十六、-三数之和"><span>十六、 <strong>三数之和</strong></span></a></h2><p>原题链接：https://mp.weixin.qq.com/s?__biz=MzU4NDE3MTEyMA==&amp;mid=2247484423&amp;idx=1&amp;sn=ff37a4bb96de487601d8ea7df59ef794&amp;chksm=fd9caf18caeb260e101a6efe1809663dda5ef7d83d0f8a5df3d7e5e4edb6634f67ea39fab4cf&amp;cur_album_id=1715134171561410565&amp;scene=189#wechat_redirect</p><blockquote><p>给你一个包含 n 个整数的数组 nums，判断 nums 中是否存在三个元素 a，b，c ，使得 a + b + c = 0</p><p>请你找出所有和为 0 且不重复的三元组。</p><p>注意：答案中不可以包含重复的三元组。</p><p>示例 1：</p><ul><li>输入：nums = [ -1, 0, 1, 2, -1, -4 ]</li><li>输出：[ [-1,-1,2], [-1,0,1] ]</li></ul><p>示例 2：</p><ul><li>输入：nums = []</li><li>输出：[]</li></ul><p>提示：</p><ul><li>0 &lt;= nums.length &lt;= 3000</li><li>-10<sup>5</sup> &lt;= nums[i] &lt;= 10<sup>5</sup></li></ul></blockquote><h3 id="_1-略解1-7" tabindex="-1"><a class="header-anchor" href="#_1-略解1-7"><span>（1）略解1</span></a></h3><p>如果直接暴力解法，很简单，但是 3000<sup>3</sup> = 27000000000 = 2.7 * 10<sup>10</sup> ，远大于 10<sup>7</sup> —— 计算机的 1s 运行时间。</p><p>所以需要使用双指针来简化：i 遍历前 n - 2 个字符，然后 j 和 k 在 i 后面进行双指针移动，大于 0 移动 k，小于 0 移动 j。</p><p>有没有可能会漏掉一些答案？</p><p>假设现在 nums[i] = 0，则需要 nums[j] + nums[k] = 0，假设 <code>k = 19，nums[k] = 9，j = 5，nums[j] = -9</code>。然后当 j 向右移动时，相应的 k 也要向左移动，例如 <code>k = 15，nums[k] = 6，j = 8，nums[j] = -6</code>。</p><p>由此可得，j 和 k 会在数组中某一点对称，所以双指针可以找到所有答案。</p><p>算法步骤：</p><ul><li>首先进行 <strong>顺向排序（从小到大）</strong>，因为排序的时间复杂度是 O ( nlogn ) ，而双指针复杂度是 O ( n<sup>2</sup>）， 不用担心排序会影响时间</li><li>然后固定字符 i ，然后最后一个字符 k 在数组最后面开始向左遍历，计算下一次结果，如果下一次结果大于 0 ，则代表需要继续缩小 k 的值。</li><li>如果下一次结果（k-1）不大于 0 了，则代表下一次结果可能是目标，则判断 <code>nums[k-1] + nums[j] + nums[i]</code> 结果是否等于 0。</li><li>然后等于 0 的话记录到答案里，并向右移动 j；小于 0 的话，直接向右移动 j 。</li><li>然后 k 继续向左移动，直到遇到 j 为止。</li></ul><p>去掉重复：取到重复情况有两种可能：</p><ul><li>第 1 个数取到了曾经取到的数</li><li>第 2 个数取到了曾经取到的数</li><li><strong>所以如果当前字符和前一个字符相等，则判断下一个字符</strong></li></ul><hr><p>总代码如下面所示：</p><ul><li>第 6 行优化部分：i &lt; n 变成了 i &lt; n-2，少进了两个循环；加上了 nums[i] &lt;= 0 ，因为数组从小到大排序，所以当 i 所指向的数字大于 0 ，就说明 j、k 所指向的数字都大于 0，则三个数加起来不可能等于 0。</li></ul><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> <span class="token function">threeSum</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 数组排序</span>
  <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">int</span> n <span class="token operator">=</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
  <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> ans <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n <span class="token operator">-</span> <span class="token number">2</span> <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> nums<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> k <span class="token operator">=</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> k<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">&gt;</span> i <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> nums<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>
      <span class="token keyword">while</span> <span class="token punctuation">(</span>k <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">&gt;</span> j <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> nums<span class="token punctuation">[</span>k <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> k<span class="token operator">--</span><span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> nums<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        ans<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> ans<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="十七、电话号码的字母组合" tabindex="-1"><a class="header-anchor" href="#十七、电话号码的字母组合"><span>十七、电话号码的字母组合</span></a></h2><p>原题链接：https://mp.weixin.qq.com/s?__biz=MzU4NDE3MTEyMA==&amp;mid=2247484458&amp;idx=1&amp;sn=f09539514474189d545990987e81c0e4&amp;chksm=fd9caf35caeb2623cff000e51a58b7a5a9b9166064760d2c41dd193ed48fb3b02e574ad350e4&amp;cur_album_id=1715134171561410565&amp;scene=189#wechat_redirect</p><blockquote><p>给定一个仅包含数字 2-9 的字符串，返回所有它能表示的字母组合。</p><p>给出数字到字母的映射如下（与电话按键相同）。注意 1 不对应任何字母。</p><p>示例:</p><ul><li>输入：&quot;23&quot;</li><li>输出：[&quot;ad&quot;, &quot;ae&quot;, &quot;af&quot;, &quot;bd&quot;, &quot;be&quot;, &quot;bf&quot;, &quot;cd&quot;, &quot;ce&quot;, &quot;cf&quot;].</li></ul></blockquote><h3 id="_1-略解1-8" tabindex="-1"><a class="header-anchor" href="#_1-略解1-8"><span>（1）略解1</span></a></h3><p>这道题第一眼就是使用循环来做，但是循环的次数会根据输入的数字个数改变，所以不能使用循环。</p><p>只能使用回溯法（深度优先递归）。回溯法：当前位的字符循环完成后，就回溯到上一个字符继续循环：</p><blockquote><p>这是一道「回溯算法」的经典题。</p><p>没有思维的上的难度，考察的是对「回溯算法」的基本理解。</p><p>通常我们会如何联想到「回溯算法」呢？基本上对于那些要枚举所有方案的题目，其实都应该先想到「回溯算法」。</p><p>「回溯算法」从算法定义上来说，不一定要用 DFS 实现，但通常结合 DFS 来做，难度是最低的。</p><p>回溯算法的基本模板是：</p><ol><li>确定结束回溯过程的基础条件</li><li>然后遍历所有的 “ 选择 ”</li><li>对选择进行改变 （做选择 -&gt; 递归 -&gt; 撤销选择）</li></ol></blockquote><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span>路径<span class="token punctuation">,</span> 选择列表<span class="token punctuation">,</span> 结果集<span class="token punctuation">)</span><span class="token operator">:</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>满足结束条件<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  结果集<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>路径<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">for</span> <span class="token punctuation">(</span>选择 in 选择列表<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  做选择，修改路径<span class="token punctuation">;</span>
  <span class="token function">dfs</span><span class="token punctuation">(</span>路径’<span class="token punctuation">,</span> 选择列表<span class="token punctuation">,</span> 结果集<span class="token punctuation">)</span><span class="token punctuation">;</span>
  撤销选择，撤回修改<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面代码中，需要明确几个变量：</p><ul><li><p>路径：路径是得到最终结果前的过程，我们是需要最后拼接成的字符串，所以路径是字符串</p></li><li><p>选择列表：选择列表用来循环，例如当前数字是 2，则需要循环 【a，b，c】三次，进入三次递归。</p><p>如果想知道当前的选择列表，需要知道当前的数字。当前的数字的来源有两个——参数和取原来的字符串。如果来源是参数，则每次都要考虑下一个字符，递归的代码不太雅观。如果是取原来的字符，每次只需要传原来的字符 和 <strong>当前递归的层数</strong>。</p></li><li><p>做选择和撤销选择：做选择就是加上字符；撤销选择就是将字符串复原，删除已加上的字符。因为传进来的路径，无论是 String 还是 StringBuilder，内存空间都只有一个，如果不复原，则上层的递归使用的路径是不正确的。</p></li><li><p>满足结束条件：第 2 点里提到了当前递归的层数，而结束条件就是 i == n（0 ~ n），比原来字符串的长度多一。</p></li><li><p>结果集：使用的是 ArrayList，这样就不用计算最终数组的长度。</p></li></ul><p>下面为总体代码：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
  <span class="token comment">// 定义对应关系</span>
  <span class="token class-name">Map</span><span class="token operator">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">{</span>
    <span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;2&quot;</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token string">&quot;a&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;b&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;c&quot;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;3&quot;</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token string">&quot;d&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;e&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;f&quot;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;4&quot;</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token string">&quot;g&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;h&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;i&quot;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;5&quot;</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token string">&quot;j&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;k&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;l&quot;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;6&quot;</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token string">&quot;m&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;n&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;o&quot;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;7&quot;</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token string">&quot;p&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;q&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;r&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;s&quot;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;8&quot;</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token string">&quot;t&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;u&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;v&quot;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;9&quot;</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token string">&quot;w&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;x&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;y&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;z&quot;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
  
  <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token function">letterCombinations</span><span class="token punctuation">(</span><span class="token class-name">String</span> ds<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> n <span class="token operator">=</span> ds<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> ans <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> ans<span class="token punctuation">;</span>
    <span class="token class-name">StringBuilder</span> sb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">dfs</span><span class="token punctuation">(</span>ds<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> n<span class="token punctuation">,</span> sb<span class="token punctuation">,</span> ans<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> ans<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  
  <span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token class-name">String</span> ds<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">,</span> <span class="token class-name">StringBuilder</span> sb<span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> ans<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// if (满足结束条件) {</span>
    <span class="token comment">//   结果集.add(路径);</span>
    <span class="token comment">//   return;</span>
    <span class="token comment">// }</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      ans<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>sb<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> 
    
    <span class="token comment">// for (选择 in 选择列表) {</span>
    <span class="token comment">//   做选择，修改路径;</span>
    <span class="token comment">//   dfs(路径’, 选择列表, 结果集);</span>
    <span class="token comment">//   撤销选择，撤回修改;</span>
    <span class="token comment">// }</span>
    
    <span class="token comment">// 获取到当前字符</span>
    <span class="token class-name">String</span> key <span class="token operator">=</span> ds<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 根据字符获取到选择列表</span>
    <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> all <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 遍历选择列表</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> item <span class="token operator">:</span> all<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// 做出选择</span>
      sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token function">dfs</span><span class="token punctuation">(</span>ds<span class="token punctuation">,</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> n<span class="token punctuation">,</span> sb<span class="token punctuation">,</span> ans<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token comment">// 撤销选择</span>
      sb<span class="token punctuation">.</span><span class="token function">deleteCharAt</span><span class="token punctuation">(</span>sb<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>时间复杂度：<code>n</code> 代表字符串 <code>ds</code> 的长度，一个数字最多对应 4 个字符（7 对应 “ pqrs &quot;），即每个数字最多有 4 个字母需要被决策。复杂度为 O ( 4<sup>n</sup> )</li><li>空间复杂度：有多少种方案，就需要多少空间来存放答案。复杂度为 O ( 4<sup>n</sup> )</li></ul><p>该文档完成日期：2022年7月11日</p>`,159),e=[o];function c(l,i){return s(),a("div",null,e)}const r=n(t,[["render",c],["__file","算法二-7月11.html.vue"]]),d=JSON.parse('{"path":"/%E5%AD%A6%E4%B9%A0/%E7%AE%97%E6%B3%95/%E7%AE%97%E6%B3%95%E4%BA%8C-7%E6%9C%8811.html","title":"算法二-7月11","lang":"zh-CN","frontmatter":{"description":"算法二-7月11 八、两数之和 原题链接：https://mp.weixin.qq.com/s?__biz=MzU4NDE3MTEyMA==&mid=2247484130&idx=8&sn=31e3191597de49983f9db37aae074e8c&chksm=fd9ca9fdcaeb20eba4699df2cd7d411bc4a29b4f214...","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/%E5%AD%A6%E4%B9%A0/%E7%AE%97%E6%B3%95/%E7%AE%97%E6%B3%95%E4%BA%8C-7%E6%9C%8811.html"}],["meta",{"property":"og:site_name","content":"博客演示"}],["meta",{"property":"og:title","content":"算法二-7月11"}],["meta",{"property":"og:description","content":"算法二-7月11 八、两数之和 原题链接：https://mp.weixin.qq.com/s?__biz=MzU4NDE3MTEyMA==&mid=2247484130&idx=8&sn=31e3191597de49983f9db37aae074e8c&chksm=fd9ca9fdcaeb20eba4699df2cd7d411bc4a29b4f214..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-02-24T04:33:47.000Z"}],["meta",{"property":"article:author","content":"Mr.Hope"}],["meta",{"property":"article:modified_time","content":"2024-02-24T04:33:47.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"算法二-7月11\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-02-24T04:33:47.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr.Hope\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":2,"title":"八、两数之和","slug":"八、两数之和","link":"#八、两数之和","children":[{"level":3,"title":"（1）略解1","slug":"_1-略解1","link":"#_1-略解1","children":[]},{"level":3,"title":"（2）略解2","slug":"_2-略解2","link":"#_2-略解2","children":[]},{"level":3,"title":"（3）略解3","slug":"_3-略解3","link":"#_3-略解3","children":[]}]},{"level":2,"title":"九、最长回文子串","slug":"九、最长回文子串","link":"#九、最长回文子串","children":[{"level":3,"title":"（1）略解1","slug":"_1-略解1-1","link":"#_1-略解1-1","children":[]},{"level":3,"title":"（2）略解2","slug":"_2-略解2-1","link":"#_2-略解2-1","children":[]},{"level":3,"title":"（3）详解2","slug":"_3-详解2","link":"#_3-详解2","children":[]}]},{"level":2,"title":"十、 整数反转","slug":"十、-整数反转","link":"#十、-整数反转","children":[{"level":3,"title":"（1）略解1","slug":"_1-略解1-2","link":"#_1-略解1-2","children":[]}]},{"level":2,"title":"十一、数字转罗马数字","slug":"十一、数字转罗马数字","link":"#十一、数字转罗马数字","children":[{"level":3,"title":"（1）略解1","slug":"_1-略解1-3","link":"#_1-略解1-3","children":[]}]},{"level":2,"title":"十二、最长公共前缀","slug":"十二、最长公共前缀","link":"#十二、最长公共前缀","children":[{"level":3,"title":"（1）略解1","slug":"_1-略解1-4","link":"#_1-略解1-4","children":[]}]},{"level":2,"title":"十三、盛最多水的容器","slug":"十三、盛最多水的容器","link":"#十三、盛最多水的容器","children":[{"level":3,"title":"（1）略解1","slug":"_1-略解1-5","link":"#_1-略解1-5","children":[]},{"level":3,"title":"（2）略解2","slug":"_2-略解2-2","link":"#_2-略解2-2","children":[]}]},{"level":2,"title":"十四、绝对差不超过限制的最长连续子数组","slug":"十四、绝对差不超过限制的最长连续子数组","link":"#十四、绝对差不超过限制的最长连续子数组","children":[{"level":3,"title":"（1）二分解法","slug":"_1-二分解法","link":"#_1-二分解法","children":[]},{"level":3,"title":"（2）双指针解法","slug":"_2-双指针解法","link":"#_2-双指针解法","children":[]}]},{"level":2,"title":"十五、罗马数字转数字","slug":"十五、罗马数字转数字","link":"#十五、罗马数字转数字","children":[{"level":3,"title":"（1）略解1","slug":"_1-略解1-6","link":"#_1-略解1-6","children":[]}]},{"level":2,"title":"十六、 三数之和","slug":"十六、-三数之和","link":"#十六、-三数之和","children":[{"level":3,"title":"（1）略解1","slug":"_1-略解1-7","link":"#_1-略解1-7","children":[]}]},{"level":2,"title":"十七、电话号码的字母组合","slug":"十七、电话号码的字母组合","link":"#十七、电话号码的字母组合","children":[{"level":3,"title":"（1）略解1","slug":"_1-略解1-8","link":"#_1-略解1-8","children":[]}]}],"git":{"createdTime":1708749227000,"updatedTime":1708749227000,"contributors":[{"name":"hahg2000","email":"61403802+hahg2000@users.noreply.github.com","commits":1}]},"readingTime":{"minutes":30.95,"words":9285},"filePathRelative":"学习/算法/算法二-7月11.md","localizedDate":"2024年2月24日","excerpt":"\\n<h2>八、两数之和</h2>\\n<p>原题链接：https://mp.weixin.qq.com/s?__biz=MzU4NDE3MTEyMA==&amp;mid=2247484130&amp;idx=8&amp;sn=31e3191597de49983f9db37aae074e8c&amp;chksm=fd9ca9fdcaeb20eba4699df2cd7d411bc4a29b4f21493de371c97c507b711489695dd8d3ddc7&amp;cur_album_id=1715134171561410565&amp;scene=189#wechat_redirect</p>","autoDesc":true}');export{r as comp,d as data};
