import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as p,o as c,c as l,a as n,b as s,d as o,f as a}from"./app-B9MLl3uI.js";const i={},u=a(`<h1 id="二、单表的-curd-操作" tabindex="-1"><a class="header-anchor" href="#二、单表的-curd-操作"><span>二、单表的 CURD 操作</span></a></h1><p>​ CURD 操作，即指对数据库中实体对象的 <strong>增 Create</strong>、<strong>改 Update</strong>、<strong>查 Read</strong>、<strong>删 Delete</strong> 操作。</p><h2 id="_2-1-自定义-dao-接口实现类" tabindex="-1"><a class="header-anchor" href="#_2-1-自定义-dao-接口实现类"><span>2.1 自定义 Dao 接口实现类</span></a></h2><h3 id="_2-1-1-修改-dao-接口" tabindex="-1"><a class="header-anchor" href="#_2-1-1-修改-dao-接口"><span>2.1.1 修改 Dao 接口</span></a></h3><p><strong>IStudentDao.java</strong>：增加 增 、改 、查 、删 这四个接口方法</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IStudentDao</span> <span class="token punctuation">{</span>
	<span class="token comment">// 插入</span>
	<span class="token keyword">void</span> <span class="token function">insertStudent</span><span class="token punctuation">(</span><span class="token class-name">Student</span> student<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">void</span> <span class="token function">insertStudentCatchId</span><span class="token punctuation">(</span><span class="token class-name">Student</span> student<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token comment">// 删改</span>
	<span class="token keyword">void</span> <span class="token function">deleteStudentById</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">void</span> <span class="token function">updateStudent</span><span class="token punctuation">(</span><span class="token class-name">Student</span> student<span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token comment">// 查询所有</span>
	<span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">&gt;</span></span> <span class="token function">selectAllStudents</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Student</span><span class="token punctuation">&gt;</span></span> <span class="token function">selectStudentMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token comment">// 查询指定学生</span>
	<span class="token class-name">Student</span> <span class="token function">selectStudentById</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>
	
	<span class="token comment">// 根据姓名查询</span>
	<span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">&gt;</span></span> <span class="token function">selectStudentsByName</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-1-2-实现插入后获取-id-方法" tabindex="-1"><a class="header-anchor" href="#_2-1-2-实现插入后获取-id-方法"><span>2.1.2 实现插入后获取 id 方法</span></a></h3><h4 id="_1-修改映射文件" tabindex="-1"><a class="header-anchor" href="#_1-修改映射文件"><span>（1）修改映射文件</span></a></h4><p>​ 想在插入数据后获取其 id 的值有两种方法。</p><div class="language-mysql line-numbers-mode" data-ext="mysql" data-title="mysql"><pre class="language-mysql"><code>insert into student(name,age,socre) values(&#39;王五&#39;,25,95.5);
# 方法一
select @@identity;
# 方法二
select LAST_INSERT_ID();
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>​ 所以利用这条语句可以在插入学生信息到数据库后，自动将学生信息的 id 初始化。故在映射文件中，加入以下代码。</p><ul><li>&lt;selectKey/&gt; 标签的 resultType 来确定执行查询语句后返回值的类型，也可以用 MyBatis 内置的类型别名。</li><li>keyProperty 属性用于指定将返回的值 赋值 给插入对象的哪个属性，本例是初始化 id 属性，故填写 “ id &quot;。</li><li>order 属性决定获取 id 在 insert 语句的之前还是之后，Mysql 是先插入用户填的数据再生成 id，Oracle 是先生成 id 再插入数据。</li></ul><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>insert</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>insertStudentCatchId<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
		insert into student(name,age,score) values (#{name},#{age},#{score})
		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>selectKey</span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>int<span class="token punctuation">&quot;</span></span> <span class="token attr-name">keyProperty</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>id<span class="token punctuation">&quot;</span></span> <span class="token attr-name">order</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>AFTER<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
			select @@identity
		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>selectKey</span><span class="token punctuation">&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>insert</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-修改-dao-实现类" tabindex="-1"><a class="header-anchor" href="#_2-修改-dao-实现类"><span>（2）修改 Dao 实现类</span></a></h4><p>​ 无需大修改，只需要把之前插入的复制过来，并改变调用的方法。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Override</span>
	<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">insertStudentCatchId</span><span class="token punctuation">(</span><span class="token class-name">Student</span> student<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">try</span> <span class="token punctuation">{</span>
			sqlSession<span class="token operator">=</span><span class="token class-name">MyBatisUtils</span><span class="token punctuation">.</span><span class="token function">getSqlSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token comment">// 修改的地方</span>
			sqlSession<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token string">&quot;insertStudentCatchId&quot;</span><span class="token punctuation">,</span> student<span class="token punctuation">)</span><span class="token punctuation">;</span>
			
			sqlSession<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span><span class="token keyword">finally</span> <span class="token punctuation">{</span>
			<span class="token keyword">if</span><span class="token punctuation">(</span>sqlSession<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
				sqlSession<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-修改测试类" tabindex="-1"><a class="header-anchor" href="#_3-修改测试类"><span>（3）修改测试类</span></a></h4><p>​ 测试类需要测试 id 属性是否在插入数据后被初始化了。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
	<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test02</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token class-name">Student</span> student <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">&quot;张三&quot;</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">,</span> <span class="token number">93.5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;插入前：&quot;</span><span class="token operator">+</span>student<span class="token punctuation">)</span><span class="token punctuation">;</span>
		dao<span class="token punctuation">.</span><span class="token function">insertStudentCatchId</span><span class="token punctuation">(</span>student<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;插入后：&quot;</span><span class="token operator">+</span>student<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>​ 日志输出结果如下，可以看见 id 属性被初始化了</p><img src="https://raw.githubusercontent.com/hahg2000/SSMPic/main/20210217112150.png" style="zoom:75%;"><h3 id="_2-1-3-删除数据" tabindex="-1"><a class="header-anchor" href="#_2-1-3-删除数据"><span>2.1.3 删除数据</span></a></h3><h4 id="_1-修改映射文件-1" tabindex="-1"><a class="header-anchor" href="#_1-修改映射文件-1"><span>（1）修改映射文件</span></a></h4><p>​ Sql语句中的 “ #{ } &quot; 中的标识为占位符，会将传进来的值填入该位置。因为只有一个参数传进来，所以大括号里填什么都可以。</p><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>delete</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>deleteStudentById<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
		delete from student where id=#{xxx} 
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>delete</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-修改-dao-实现类-1" tabindex="-1"><a class="header-anchor" href="#_2-修改-dao-实现类-1"><span>（2）修改 Dao 实现类</span></a></h4><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Override</span>
	<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">deleteStudentById</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">try</span> <span class="token punctuation">{</span>
			sqlSession<span class="token operator">=</span><span class="token class-name">MyBatisUtils</span><span class="token punctuation">.</span><span class="token function">getSqlSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token comment">// 修改的地方</span>
			sqlSession<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token string">&quot;deleteStudentById&quot;</span><span class="token punctuation">,</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>
			
			sqlSession<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span><span class="token keyword">finally</span> <span class="token punctuation">{</span>
			<span class="token keyword">if</span><span class="token punctuation">(</span>sqlSession<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
				sqlSession<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span>		
	<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-修改测试类-1" tabindex="-1"><a class="header-anchor" href="#_3-修改测试类-1"><span>（3）修改测试类</span></a></h4><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
	<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test03</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		dao<span class="token punctuation">.</span><span class="token function">deleteStudentById</span><span class="token punctuation">(</span><span class="token number">35</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-1-4-修改数据" tabindex="-1"><a class="header-anchor" href="#_2-1-4-修改数据"><span>2.1.4 修改数据</span></a></h3><h4 id="_1-修改映射文件-2" tabindex="-1"><a class="header-anchor" href="#_1-修改映射文件-2"><span>（1）修改映射文件</span></a></h4><p>​ 这里 ” #{ } “ 符号里的内容，必须是传进来对象的属性名，不能随意填写。</p><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>update</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>updateStudent<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
		update student set name=#{name}, age=#{age}, score=#{score}
		where id=#{id}
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>update</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-修改-dao-实现类-2" tabindex="-1"><a class="header-anchor" href="#_2-修改-dao-实现类-2"><span>（2）修改 Dao 实现类</span></a></h4><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Override</span>
	<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">updateStudent</span><span class="token punctuation">(</span><span class="token class-name">Student</span> student<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">try</span> <span class="token punctuation">{</span>
			sqlSession<span class="token operator">=</span><span class="token class-name">MyBatisUtils</span><span class="token punctuation">.</span><span class="token function">getSqlSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token comment">// 修改的地方</span>
			sqlSession<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token string">&quot;updateStudent&quot;</span><span class="token punctuation">,</span> student<span class="token punctuation">)</span><span class="token punctuation">;</span>
			
			sqlSession<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span><span class="token keyword">finally</span> <span class="token punctuation">{</span>
			<span class="token keyword">if</span><span class="token punctuation">(</span>sqlSession<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
				sqlSession<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span>		
	<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-修改测试类-2" tabindex="-1"><a class="header-anchor" href="#_3-修改测试类-2"><span>（3）修改测试类</span></a></h4><p>​ 这里因为用于测试，所以自定义了一个 student 对象来执行更新操作。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
	<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test04</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token class-name">Student</span> student <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">&quot;李四&quot;</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">,</span> <span class="token number">93.5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		student<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span><span class="token number">45</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		dao<span class="token punctuation">.</span><span class="token function">updateStudent</span><span class="token punctuation">(</span>student<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-1-5-查询所有对象-返回-list" tabindex="-1"><a class="header-anchor" href="#_2-1-5-查询所有对象-返回-list"><span>2.1.5 查询所有对象-返回 List</span></a></h3><h4 id="_1-修改映射文件-3" tabindex="-1"><a class="header-anchor" href="#_1-修改映射文件-3"><span>（1）修改映射文件</span></a></h4><p>​ resultType 属性表明在数据库查出的每一条记录，封装成的 <strong>类型</strong>。如果主配置文件配置的别名，这里则可以使用别名。</p><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>selectAllStudents<span class="token punctuation">&quot;</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>Student<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
		select * from student
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-修改-dao-实现类-3" tabindex="-1"><a class="header-anchor" href="#_2-修改-dao-实现类-3"><span>（2）修改 Dao 实现类</span></a></h4><p>​ 用 List 来接收执行语句后返回的结果。因为不需要修改数据库的数据，所以不需要提交。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Override</span>
	<span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">&gt;</span></span> <span class="token function">selectAllStudents</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">&gt;</span></span> students <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
		<span class="token keyword">try</span> <span class="token punctuation">{</span>
			sqlSession <span class="token operator">=</span> <span class="token class-name">MyBatisUtils</span><span class="token punctuation">.</span><span class="token function">getSqlSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token comment">// 修改的地方</span>
			students <span class="token operator">=</span> sqlSession<span class="token punctuation">.</span><span class="token function">selectList</span><span class="token punctuation">(</span><span class="token string">&quot;selectAllStudents&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

			<span class="token comment">// sqlSession.commit();</span>
		<span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
			<span class="token keyword">if</span> <span class="token punctuation">(</span>sqlSession <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
				sqlSession<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span>
		<span class="token keyword">return</span> students<span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-修改测试类-3" tabindex="-1"><a class="header-anchor" href="#_3-修改测试类-3"><span>（3）修改测试类</span></a></h4><p>​ 将接收到的 List 用 ForEach 语句进行输出，查看结果。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
	<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test05</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">&gt;</span></span> students <span class="token operator">=</span> dao<span class="token punctuation">.</span><span class="token function">selectAllStudents</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">Student</span> student <span class="token operator">:</span> students<span class="token punctuation">)</span> <span class="token punctuation">{</span>		
			<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>student<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://raw.githubusercontent.com/hahg2000/SSMPic/main/20210217162933.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="_2-1-6-查询所有对象-返回-map" tabindex="-1"><a class="header-anchor" href="#_2-1-6-查询所有对象-返回-map"><span>2.1.6 查询所有对象-返回 Map</span></a></h3><h4 id="_1-修改映射文件-4" tabindex="-1"><a class="header-anchor" href="#_1-修改映射文件-4"><span>（1）修改映射文件</span></a></h4><p>​ 映射文件不用修改</p><h4 id="_2-修改-dao-实现类-4" tabindex="-1"><a class="header-anchor" href="#_2-修改-dao-实现类-4"><span>（2）修改 Dao 实现类</span></a></h4><p>​ 使用 selectMap( String statement, String mapKey ) 方法。</p><ul><li>在这个方法执行的时候，对将每条记录封装成指定对象，然后作为 Map 的 value；</li><li>然后的第二个参数是指定以对象的哪一个属性作为 Map 的 key，因为 Map 种的 key 是唯一的，所以若 key 的属性值在 DB 中不唯一，则后面查询到的值会覆盖前面的值，即查询到的一定是 DB 中该同名属性值的最后一条记录；</li><li>这里为了输出全部学生信息，所以第二个参数填写 “ id ”。</li></ul><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Override</span>
	<span class="token keyword">public</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">Student</span><span class="token punctuation">&gt;</span></span> <span class="token function">selectStudentMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">Student</span><span class="token punctuation">&gt;</span></span> studentsMap <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
		<span class="token keyword">try</span> <span class="token punctuation">{</span>
			sqlSession <span class="token operator">=</span> <span class="token class-name">MyBatisUtils</span><span class="token punctuation">.</span><span class="token function">getSqlSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token comment">// 修改的地方</span>
			studentsMap <span class="token operator">=</span> sqlSession<span class="token punctuation">.</span><span class="token function">selectMap</span><span class="token punctuation">(</span><span class="token string">&quot;selectAllStudents&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;id&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

			<span class="token comment">// sqlSession.commit();</span>
		<span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
			<span class="token keyword">if</span> <span class="token punctuation">(</span>sqlSession <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
				sqlSession<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span>
		<span class="token keyword">return</span> studentsMap<span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-修改测试类-4" tabindex="-1"><a class="header-anchor" href="#_3-修改测试类-4"><span>（3）修改测试类</span></a></h4><p>​ 在测试类中，接收 Map 后逐个输出。Map 输出有四种。</p>`,58),d={href:"https://www.cnblogs.com/damoblog/p/9124937.html",target:"_blank",rel:"noopener noreferrer"},k=a(`<ul><li>第一种方法：在for循环中使用entries实现Map的遍历；</li><li>第二种方法：在for循环中遍历key或者values，一般适用于只需要map中的key或者value时使用；</li><li>第三种方法：通过Iterator遍历；</li><li>第四种方法：通过键找值遍历，这种方式的效率比较低，因为本身从键取值是耗时的操作。</li></ul><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
	<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test06</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">Student</span><span class="token punctuation">&gt;</span></span> studentsMap <span class="token operator">=</span> dao<span class="token punctuation">.</span><span class="token function">selectStudentMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		
		<span class="token comment">// 第一种方法：在for循环中使用entries实现Map的遍历</span>
		<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">Map<span class="token punctuation">.</span>Entry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">Student</span><span class="token punctuation">&gt;</span></span> entry <span class="token operator">:</span> studentsMap<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
		  <span class="token class-name">Integer</span> mapKey <span class="token operator">=</span> entry<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
		  <span class="token class-name">Student</span> mapValue <span class="token operator">=</span> entry<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		  <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;key=&quot;</span><span class="token operator">+</span>mapKey<span class="token operator">+</span><span class="token string">&quot;，value=&quot;</span><span class="token operator">+</span>mapValue<span class="token punctuation">)</span><span class="token punctuation">;</span>  
		<span class="token punctuation">}</span>
		 
		
		<span class="token comment">/*
		 * 第二种方法：在for循环中遍历key或者values，一般适用于只需要map中的key或者value时使用
		 * 输出 key
		 * for(Integer key : studentsMap.keySet()){ System.out.println(key); }
		 * 输出 value 
		 * for(Student value : studentsMap.values()){ System.out.println(value);
		 * }
		 */</span>
		
		<span class="token comment">/*
		 * 第三种方法：通过Iterator遍历
		 * Iterator&lt;Entry&lt;Integer, Student&gt;&gt; entries = studentsMap.entrySet().iterator(); 
		 * while(entries.hasNext()){ 
		 * Entry&lt;Integer,Student&gt; entry = entries.next(); 
		 * Integer key = entry.getKey(); 
		 * Student value = entry.getValue(); 
		 * System.out.println(key+&quot;:&quot;+value); }
		 */</span>
		
		<span class="token comment">/*
		 * 第四种方法：通过键找值遍历，这种方式的效率比较低，因为本身从键取值是耗时的操作
		 * for(Integer key : studentsMap.keySet()){ 
		 * Student value = studentsMap.get(key); 
		 * System.out.println(key+&quot;:&quot;+value); }
		 */</span>
	<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>​ 输出结果如下：</p><img src="https://raw.githubusercontent.com/hahg2000/SSMPic/main/20210218111928.png" style="zoom:70%;"><h3 id="_2-1-7-查询单个对象" tabindex="-1"><a class="header-anchor" href="#_2-1-7-查询单个对象"><span>2.1.7 查询单个对象</span></a></h3><h4 id="_1-修改映射文件-5" tabindex="-1"><a class="header-anchor" href="#_1-修改映射文件-5"><span>（1）修改映射文件</span></a></h4><p>​ 因为传进来的值只有一个，所以 &quot; #{ } &quot; 里的值可以任意填写。</p><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>selectStudentById<span class="token punctuation">&quot;</span></span>  <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>Student<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
		select * from student where id=#{jjj}
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-修改-dao-实现类-5" tabindex="-1"><a class="header-anchor" href="#_2-修改-dao-实现类-5"><span>（2）修改 Dao 实现类</span></a></h4><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Override</span>
	<span class="token keyword">public</span> <span class="token class-name">Student</span> <span class="token function">selectStudentById</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token class-name">Student</span> student<span class="token operator">=</span><span class="token keyword">null</span><span class="token punctuation">;</span>
		<span class="token keyword">try</span> <span class="token punctuation">{</span>
			sqlSession <span class="token operator">=</span> <span class="token class-name">MyBatisUtils</span><span class="token punctuation">.</span><span class="token function">getSqlSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token comment">// 修改的地方</span>
			student <span class="token operator">=</span> sqlSession<span class="token punctuation">.</span><span class="token function">selectOne</span><span class="token punctuation">(</span><span class="token string">&quot;selectStudentById&quot;</span><span class="token punctuation">,</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>

			<span class="token comment">// sqlSession.commit();</span>
		<span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
			<span class="token keyword">if</span> <span class="token punctuation">(</span>sqlSession <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
				sqlSession<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span>
		<span class="token keyword">return</span> student<span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-修改测试类-5" tabindex="-1"><a class="header-anchor" href="#_3-修改测试类-5"><span>（3）修改测试类</span></a></h4><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
	<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test07</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token class-name">Student</span> student <span class="token operator">=</span> dao<span class="token punctuation">.</span><span class="token function">selectStudentById</span><span class="token punctuation">(</span><span class="token number">44</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>student<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-1-8-模糊查询" tabindex="-1"><a class="header-anchor" href="#_2-1-8-模糊查询"><span>2.1.8 模糊查询</span></a></h3><h4 id="_1-修改映射文件-6" tabindex="-1"><a class="header-anchor" href="#_1-修改映射文件-6"><span>（1）修改映射文件</span></a></h4><p>​ 在进行模糊查询时，需要进行字符串的拼接。SQL 中的字符串的拼接使用的是 <strong>函数 concat(arg1, arg2, ...)</strong> 或者直接以 <strong>空格</strong> 间隔。这两种都是以 <strong>动态参数</strong> 的形式出现在SQL语句中的。</p><img src="https://raw.githubusercontent.com/hahg2000/SSMPic/main/20210220123624.png" style="zoom:70%;"><p>​ 还可使用如下方式，只是需要注意，“ \${ } ” 符号中只能填写 value，不能使用其它。这种方式是纯粹的 <strong>字符串拼接</strong> ，直接将参数拼接到了 SQL 语句中。这种方式可能会 <strong>发生 SQL 注入</strong>。</p><img src="https://raw.githubusercontent.com/hahg2000/SSMPic/main/20210220122726.png" style="zoom:70%;"><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>selectStudentsByName<span class="token punctuation">&quot;</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>Student<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
		<span class="token comment">&lt;!-- 这两种是以动态参数填写到 SQL 语句中
		select * from student where name like concat(&#39;%&#39;,#{ooo},&#39;%&#39;)
		select * from student where name like &#39;%&#39; #{ooo} &#39;%&#39; --&gt;</span>
		
		<span class="token comment">&lt;!-- 这种方式是单纯的字符串拼接 --&gt;</span>     
		select * from student where name like &#39;%\${value}%&#39;
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-修改-dao-实现类-6" tabindex="-1"><a class="header-anchor" href="#_2-修改-dao-实现类-6"><span>（2）修改 Dao 实现类</span></a></h4><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Override</span>
	<span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">&gt;</span></span> <span class="token function">selectStudentsByName</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">&gt;</span></span> students<span class="token punctuation">;</span>
		<span class="token keyword">try</span> <span class="token punctuation">{</span>
			sqlSession <span class="token operator">=</span> <span class="token class-name">MyBatisUtils</span><span class="token punctuation">.</span><span class="token function">getSqlSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token comment">// 修改的地方</span>
			students <span class="token operator">=</span> sqlSession<span class="token punctuation">.</span><span class="token function">selectList</span><span class="token punctuation">(</span><span class="token string">&quot;selectStudentsByName&quot;</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>

			sqlSession<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
			<span class="token keyword">if</span> <span class="token punctuation">(</span>sqlSession <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
				sqlSession<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span>
		<span class="token keyword">return</span> students<span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-修改测试类-6" tabindex="-1"><a class="header-anchor" href="#_3-修改测试类-6"><span>（3）修改测试类</span></a></h4><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
	<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test08</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">&gt;</span></span> students <span class="token operator">=</span> dao<span class="token punctuation">.</span><span class="token function">selectStudentsByName</span><span class="token punctuation">(</span><span class="token string">&quot;王&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">Student</span> student <span class="token operator">:</span> students<span class="token punctuation">)</span> <span class="token punctuation">{</span>		
			<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>student<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_2-2-属性名与字段名不一致的解决" tabindex="-1"><a class="header-anchor" href="#_2-2-属性名与字段名不一致的解决"><span>2.2 属性名与字段名不一致的解决</span></a></h2><h3 id="_2-1-1-修改-student-表" tabindex="-1"><a class="header-anchor" href="#_2-1-1-修改-student-表"><span>2.1.1 修改 Student 表</span></a></h3><p>​ 修改了前三个字段名，最后一个 sroce 字段没有修改</p><img src="https://raw.githubusercontent.com/hahg2000/SSMPic/main/20210218204456.png" style="zoom:80%;"><h3 id="_2-1-2-修改映射文件" tabindex="-1"><a class="header-anchor" href="#_2-1-2-修改映射文件"><span>2.1.2 修改映射文件</span></a></h3><p>​ 修改 selectStudentById 的 SQL 语句</p><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>selectStudentById<span class="token punctuation">&quot;</span></span>  <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>Student<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
		<span class="token comment">&lt;!-- 之前的 SQL 语句
		select id,name,age,score from student where id=#{jjj} --&gt;</span>
		<span class="token comment">&lt;!-- 现在的 SQL 语句 --&gt;</span>
		select tid,tname,tage,score from student where tid=#{jjj}
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-1-3-直接运行" tabindex="-1"><a class="header-anchor" href="#_2-1-3-直接运行"><span>2.1.3 直接运行</span></a></h3><ul><li><p>若直接运行，不会报错，但输出接收数据的对象，会发现部分的属性是空的。</p></li><li><p>根据日志可知，查出了结果。</p></li><li><p>所以是将查询结果 <strong>映射</strong> 到对象的对应属性出现了问题。</p></li></ul><p>​ <img src="https://raw.githubusercontent.com/hahg2000/SSMPic/main/20210218205638.png" style="zoom:70%;"></p><h3 id="_2-1-4-使用别名" tabindex="-1"><a class="header-anchor" href="#_2-1-4-使用别名"><span>2.1.4 使用别名</span></a></h3><p>​ 使用别名，修改起来简单但修改的数量多的时候会比较麻烦。</p><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>selectStudentById<span class="token punctuation">&quot;</span></span>  <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>Student<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
	<span class="token comment">&lt;!-- 之前的 SQL 语句
	select tid,tname,tage,score from student where id=#{jjj} --&gt;</span>
	<span class="token comment">&lt;!-- 现在的 SQL 语句 --&gt;</span>
	select tid id,tname name,tage age,score from student where tid=#{jjj}
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-1-5-使用结果映射-resultmap" tabindex="-1"><a class="header-anchor" href="#_2-1-5-使用结果映射-resultmap"><span>2.1.5 使用结果映射 resultMap</span></a></h3><pre><code>将 resultType 属性改成 resultMap 属性，因为要将查询出来的结果交给 &amp;lt;resultMap/&gt; 标签进行映射处理，再进行封装，其属性值为指定的 resultMap 的 id 属性。
</code></pre><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>selectStudentById<span class="token punctuation">&quot;</span></span>  <span class="token attr-name">resultMap</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>studentMapper<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
	select tid,tname,tage,score from student where tid=#{jjj}
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>使用了&lt;resultMap/&gt; 标签的两个属性； <ul><li>type 属性定义封装对象的类型；</li><li>id 属性用于标识该标签。</li></ul></li><li>&lt;id/&gt; 标签用于指定封装对象主键的映射，&lt;result/&gt; 标签用于指定其他字段名的映射，用到了它们的两个属性。 <ul><li>column 属性填写数据库的字段名；</li><li>property 属性填写对象的属性名。</li></ul></li></ul><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resultMap</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>Student<span class="token punctuation">&quot;</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>studentMapper<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>tid<span class="token punctuation">&quot;</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>id<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>tname<span class="token punctuation">&quot;</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>name<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>tage<span class="token punctuation">&quot;</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>age<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resultMap</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_2-3-mappper-动态代理" tabindex="-1"><a class="header-anchor" href="#_2-3-mappper-动态代理"><span>2.3 Mappper 动态代理</span></a></h2><p>​ 在前面例子中自定义Dao接口实现类时发现一个问题：Dao 的实现类<u>其实并没有干什么实质性的工作</u>。它仅仅就是通过 SqlSession 的相关 API 定位到映射文件 mapper 中相应 id 的 SQL 语句，<u>真正对 DB 进行操作的工作其实是由框架通过 mapper 中的 SQL 完成的</u>。</p><p>​ 所以，MyBatis 框架可以抛开了 Dao 的实现类，直接定位到映射文件 mapper 中的相应 SQL 语句，对 DB 进行操作。这种对 Dao 的实现方式称为 **Mapper 的动态代理方式 **。</p><p>​ Mapper动态代理方式 <strong>无需</strong> 程序员实现Dao接口。接口是由MyBatis结合映射文件 <strong>自动</strong> 生成的动态代理实现的。</p><p>​ 注：以下例子已将数据库的字段名还原成 id，name，age，score。</p><h3 id="_2-3-1-映射文件的-namespace" tabindex="-1"><a class="header-anchor" href="#_2-3-1-映射文件的-namespace"><span>2.3.1 映射文件的 namespace</span></a></h3><p>​ 一般情况下，一个Dao接口的实现类方法使用的是同一个SQL映射文件中的SQL映射id。所以，MyBatis框架要求，将映射文件中 &lt;mapper/&gt; 标签的 namespace属性设为 <strong>Dao 接口的全类名</strong>，则系统会根据方法所属的 Dao 接口，自动到对应的 namespace 的映射文件中查找对应的 SQL 标签映射。</p><p>​ 简单来说，通过接口名即可定位到映射文件mapper。</p><p>​ 先将 StudentDaoImpl.java 文件删除，然后将 &lt;mapper/&gt; 标签的 namespace 属性改成以下代码。</p><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">namespace</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>com.hahg.dao.IStudentDao<span class="token punctuation">&quot;</span></span> <span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_2-3-2-dao-接口方法名" tabindex="-1"><a class="header-anchor" href="#_2-3-2-dao-接口方法名"><span>2.3.2 Dao 接口方法名</span></a></h3><p>​ MyBatis 框架要求，接口中的方法名，与映射文件中相应的 SQL 标签的 id 值相同。系统会自动根据方法名到相应的映射文件中查找同名的 SQL 映射 id。</p><p>​ <u>简单来说，通过方法名就可定位到映射文件 mapper 中相应的 SQL 语句，所以接口名与 id 值相同</u>。</p><h3 id="_2-3-3-dao-对象的获取" tabindex="-1"><a class="header-anchor" href="#_2-3-3-dao-对象的获取"><span>2.3.3 Dao 对象的获取</span></a></h3><p>​ 使用时，只需在 @Before 注解方法中调用 SqlSession 的 getMapper( Class&lt;T&gt; type ) 方法，即可获取指定接口的实现类对象。该方法的参数为指定 Dao 接口类的 class 值。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Before</span>
	<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">before</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		sqlSession <span class="token operator">=</span> <span class="token class-name">MyBatisUtils</span><span class="token punctuation">.</span><span class="token function">getSqlSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		dao <span class="token operator">=</span> sqlSession<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span><span class="token class-name">IStudentDao</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-3-4-添加细节" tabindex="-1"><a class="header-anchor" href="#_2-3-4-添加细节"><span>2.3.4 添加细节</span></a></h3><h4 id="_1-添加-after-注解方法" tabindex="-1"><a class="header-anchor" href="#_1-添加-after-注解方法"><span>（1）添加 @After 注解方法</span></a></h4><p>​ 在 @After 注解方法中关闭 SqlSession 对象。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@After</span>
	<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">after</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>sqlSession <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			sqlSession<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-添加提交方法" tabindex="-1"><a class="header-anchor" href="#_2-添加提交方法"><span>（2）添加提交方法</span></a></h4><p>​ 在 <u>增、删、改</u> 测试方法的最后，添加上 SqlSession 的 commit() 方法，完成提交。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
	<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token class-name">Student</span> student <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">&quot;张三&quot;</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">,</span> <span class="token number">93.5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		dao<span class="token punctuation">.</span><span class="token function">insertStudent</span><span class="token punctuation">(</span>student<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token comment">// 添加的 commit() 方法</span>
		sqlSession<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>

	<span class="token annotation punctuation">@Test</span>
	<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test02</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token class-name">Student</span> student <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">&quot;张三&quot;</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">,</span> <span class="token number">93.5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;插入前：&quot;</span> <span class="token operator">+</span> student<span class="token punctuation">)</span><span class="token punctuation">;</span>
		dao<span class="token punctuation">.</span><span class="token function">insertStudentCatchId</span><span class="token punctuation">(</span>student<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token comment">// 添加的 commit() 方法</span>
		sqlSession<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;插入后：&quot;</span> <span class="token operator">+</span> student<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-删除-selectstudentmap-方法" tabindex="-1"><a class="header-anchor" href="#_3-删除-selectstudentmap-方法"><span>（3）删除 selectStudentMap 方法</span></a></h4><p>​ MyBatis框架对于 Dao 查询的自动实现，底层 <u>只会调用 selectOne 与 selectList 方法</u>。而框架选择方法的标准是测试类中用于接收返回值的对象类型。</p><p>​ <u>若接收类型为 List，则自动选择 selectList 方法；否则，自动选择 selectOne 方法</u>。</p><p>​ 这里接收类型为 Map，所以框架选择了 selectOne 方法，会报错。所以这里需要删除这个selectStudentMap()方法的测试</p><h3 id="_2-3-5-多查询条件无法整体接收问题的解决" tabindex="-1"><a class="header-anchor" href="#_2-3-5-多查询条件无法整体接收问题的解决"><span>2.3.5 多查询条件无法整体接收问题的解决</span></a></h3><p>​ 在实际使用中，表单中所给出的查询条件有时是 <strong>无法将其封装为一个对象</strong>的，也就是说，查询方法只能携带多个参数，而不能携带将这多个参数进行封装的一个对象。对于这个问题，有两种解决方案。</p><h4 id="_1-封装成-map" tabindex="-1"><a class="header-anchor" href="#_1-封装成-map"><span>（1）封装成 Map</span></a></h4><p>​ 将这多个参数封装为一个Map&lt;String, Object&gt;，在 SQL 语句中提取 Map 的值。</p><h5 id="a、修改dao接口" tabindex="-1"><a class="header-anchor" href="#a、修改dao接口"><span>A、修改Dao接口</span></a></h5><p>​ 在Dao接口中添加如下方法：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">&gt;</span></span> <span class="token function">selectStudentsByMap</span><span class="token punctuation">(</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> map<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h5 id="b、修改测试类" tabindex="-1"><a class="header-anchor" href="#b、修改测试类"><span>B、修改测试类</span></a></h5><p>​ 在测试类中定义一个 HashMap ，里面存放查找数据的条件，并用 List 接收查询出来的结果。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
	<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test06</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> map<span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;nameCondition&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;张&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;ageCondition&quot;</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">&gt;</span></span> students <span class="token operator">=</span> dao<span class="token punctuation">.</span><span class="token function">selectStudentsByMap</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Student</span> student <span class="token operator">:</span> students<span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>student<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="c、修改映射文件" tabindex="-1"><a class="header-anchor" href="#c、修改映射文件"><span>C、修改映射文件</span></a></h5><p>&quot; #{ } &quot; 符号里面填的是 Map 的 key 值。</p><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>selectStudentsByMap<span class="token punctuation">&quot;</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>Student<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
		select * from student 
		where name like &#39;%&#39; #{nameCondition} &#39;%&#39;
		and age &gt; #{ageCondition}
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-多个参数逐个接收" tabindex="-1"><a class="header-anchor" href="#_2-多个参数逐个接收"><span>（2）多个参数逐个接收</span></a></h4><p>​ 对于 mapper 中的 SQL 语句，可以通过参数索引 “ #{ index } ” 的方式逐个接收每个参数。</p><p>​ index 可以有两种形式填写</p><ul><li>arg0 为第一个参数，arg1 为第二个参数，argx 为第 x+1 个参数</li><li>param1 为第一个参数，param2 为第二个参数，paramx 为第 x 个参数</li></ul><h5 id="a、修改dao接口-1" tabindex="-1"><a class="header-anchor" href="#a、修改dao接口-1"><span>A、修改Dao接口</span></a></h5><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">&gt;</span></span> <span class="token function">selectStudentsByConditions</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h5 id="b、修改测试类-1" tabindex="-1"><a class="header-anchor" href="#b、修改测试类-1"><span>B、修改测试类</span></a></h5><p>​ 将 “ 张 ” 作为第一个参数，23 作为第二个参数</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
	<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test07</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">&gt;</span></span> students <span class="token operator">=</span> dao<span class="token punctuation">.</span><span class="token function">selectStudentsByConditions</span><span class="token punctuation">(</span><span class="token string">&quot;张&quot;</span><span class="token punctuation">,</span><span class="token number">23</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Student</span> student <span class="token operator">:</span> students<span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>student<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="c、修改映射文件-1" tabindex="-1"><a class="header-anchor" href="#c、修改映射文件-1"><span>C、修改映射文件</span></a></h5><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>selectStudentsByConditions<span class="token punctuation">&quot;</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>Student<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
		select * from student 
		where name like &#39;%&#39; #{param1} &#39;%&#39;
		and age &gt; #{param2}
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_2-4动态sql" tabindex="-1"><a class="header-anchor" href="#_2-4动态sql"><span>2.4动态SQL</span></a></h2><p>​ 动态 SQL ，主要用于解决查询条件不确定的情况：在程序运行期间，根据用户提交的查询条件进行查询。</p><p>​ <u>提交的查询条件不同，执行的 SQL 语句不同</u>。若将每种可能的情况均逐一列出，对所有条件进行排列组合，将会出现大量的SQL语句。</p><p>​ 此时，可使用动态 SQL 来解决这样的问题。动态 SQL，即通过 MyBatis 提供的各种标签对条件作出判断以实现动态拼接 SQL 语句。</p><p>​ 这里的条件判断使用的表达式为 OGNL 表达式。常用的动态 SQL 标签有 &lt;if/&gt;、&lt;where/&gt;、&lt;choose/&gt;、&lt;foreach&gt;等。</p><h3 id="_2-4-1-if-标签" tabindex="-1"><a class="header-anchor" href="#_2-4-1-if-标签"><span>2.4.1 &lt;if/&gt; 标签</span></a></h3><p>​ 需求：</p><ul><li>只输入 age ，就只查询年龄大于该数字的学生信息；</li><li>只输入 name ，就只查询名字有该字符的学生信息；</li><li>若两个都输入，则查询年龄大于该数字且名字有该字符的学生信息；</li><li>若都不输入，则查询所有学生信息。</li></ul><p>​ 对于该标签的执行，当test的值为true时，会将其包含的SQL片断拼接到其所在的SQL语句中。这引发的问题是，查询条件不确定，查询条件依赖于用户提交的内容。此时，就可使用动态SQL语句，根据用户提交内容对将要执行的 SQL 进行拼接。</p><h4 id="_1-定义-dao-接口" tabindex="-1"><a class="header-anchor" href="#_1-定义-dao-接口"><span>（1）定义 Dao 接口</span></a></h4><p>​ 这里便于测试，所以形参的类型为 Student，便于在 Sql 语句中提取数据。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">&gt;</span></span> <span class="token function">selectStudentsIf</span><span class="token punctuation">(</span><span class="token class-name">Student</span> student<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_2-定义映射文件" tabindex="-1"><a class="header-anchor" href="#_2-定义映射文件"><span>（2）定义映射文件</span></a></h4><ul><li>第 3 ~ 5 行，实现若姓名不为空，则进行模糊查询；</li><li>第 6 ~ 8 行，实现若年龄不为空，则按要求查询；</li><li>where 1 = 1，用于实现两个条件都不满足时查询所有信息；</li></ul><div class="hint-container warning"><p class="hint-container-title">注意</p><p>动态 Sql 中 test 的值，建议将 &gt; 、&gt;= 等符号替换成实体符号。特别是 &lt; 符号，出现就会报错。</p><table><thead><tr><th>原符号</th><th>&lt;</th><th>&lt;=</th><th>&gt;</th><th>&gt;=</th><th>&amp;</th><th>&#39;</th><th>&quot;</th></tr></thead><tbody><tr><td>替换符号</td><td>&amp;lt;</td><td>&amp;lt;=</td><td>&amp;gt;</td><td>&amp;gt;=</td><td>&amp;amp;</td><td>&amp;apos;</td><td>&amp;quot;</td></tr></tbody></table></div><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>selectStudentsIf<span class="token punctuation">&quot;</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>Student<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
		select * from student where 1=1
		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>name!=null and name!=&#39;&#39;<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
			and name like &#39;%&#39; #{name} &#39;%&#39;
		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">&gt;</span></span>
		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>age<span class="token entity named-entity" title="&gt;">&amp;gt;</span>0<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
			and age &gt; #{age}
		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-修改测试类-7" tabindex="-1"><a class="header-anchor" href="#_3-修改测试类-7"><span>（3）修改测试类</span></a></h4><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
	<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token comment">/*
		 * 两个条件都有
		 * Student student = new Student(&quot;张&quot;,23,93.5); 
		 * 只有姓名
		 * Student student = new Student(&quot;张&quot;,0,93.5); 
		 * 只有年龄
		 * Student student = new Student(&quot;&quot;,23,93.5); 
		 */</span>
		<span class="token comment">// 两个都没有</span>
		<span class="token class-name">Student</span> student <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">&quot;&quot;</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">93.5</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
		<span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">&gt;</span></span> students <span class="token operator">=</span> dao<span class="token punctuation">.</span><span class="token function">selectStudentsIf</span><span class="token punctuation">(</span>student<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Student</span> stu <span class="token operator">:</span> students<span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>stu<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-4-2-where-标签" tabindex="-1"><a class="header-anchor" href="#_2-4-2-where-标签"><span>2.4.2 &lt;where/&gt; 标签</span></a></h3><p>​ 由上可知，在 where 后，需要添加永为真子句 1=1。当数据量很大时，每查询一条语句就会判断一次 1=1，这样会严重影响查询效率。所以可以使用 &lt;where/&gt; 标签来解决。</p><h4 id="_1-修改-dao-接口" tabindex="-1"><a class="header-anchor" href="#_1-修改-dao-接口"><span>（1）修改 Dao 接口</span></a></h4><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">&gt;</span></span> <span class="token function">selectStudentsWhere</span><span class="token punctuation">(</span><span class="token class-name">Student</span> student<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_2-修改映射文件" tabindex="-1"><a class="header-anchor" href="#_2-修改映射文件"><span>（2）修改映射文件</span></a></h4><p>​ 只需要将 “ where 1=1 ” 替换成 &lt;where/&gt; 标签。</p><p>​ 该标签的作用是，在有查询条件时会自动加上 &quot; where &quot; ；在没有查询条件时，就不会加上 &quot; where &quot; 。系统在解析 Sql 语句中，会将语句多余的 and 删除。所以第 5 行的 “ and ”，可以加上，可以删除。</p><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>selectStudentsWhere<span class="token punctuation">&quot;</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>Student<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
		select * from student
		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>where</span><span class="token punctuation">&gt;</span></span>
			<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>name!=null and name!=&#39;&#39;<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
				and name like &#39;%&#39; #{name} &#39;%&#39;
			<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">&gt;</span></span>
			<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>age<span class="token entity named-entity" title="&gt;">&amp;gt;</span>0<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
				and age &gt; #{age}
			<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">&gt;</span></span>
		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>where</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-修改测试类-8" tabindex="-1"><a class="header-anchor" href="#_3-修改测试类-8"><span>（3）修改测试类</span></a></h4><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
	<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test02</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token comment">/*
		 * 两个条件都有
		 * Student student = new Student(&quot;张&quot;,23,93.5); 
		 * 只有姓名
		 * Student student = new Student(&quot;张&quot;,0,93.5); 
		 * 只有年龄
		 * Student student = new Student(&quot;&quot;,23,93.5); 
		 */</span>
		<span class="token comment">// 两个都没有</span>
		<span class="token class-name">Student</span> student <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">&quot;&quot;</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">93.5</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
		<span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">&gt;</span></span> students <span class="token operator">=</span> dao<span class="token punctuation">.</span><span class="token function">selectStudentsWhere</span><span class="token punctuation">(</span>student<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Student</span> stu <span class="token operator">:</span> students<span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>stu<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>两个条件都没有的输出结果：</li></ul><img src="https://raw.githubusercontent.com/hahg2000/SSMPic/main/20210221164722.png" style="zoom:70%;"><ul><li>有查询条件的输出结果：</li></ul><img src="https://raw.githubusercontent.com/hahg2000/SSMPic/main/20210221165026.png" style="zoom:70%;"><h3 id="_2-4-3-choose-标签" tabindex="-1"><a class="header-anchor" href="#_2-4-3-choose-标签"><span>2.4.3 &lt;choose/&gt; 标签</span></a></h3><p>​ 需求：</p><ul><li>若姓名不为空，则只查询姓名；</li><li>若姓名为空，则只查询年龄；</li><li>若两个都为空，则不查询任何信息。</li></ul><h4 id="_1-修改-dao-接口-1" tabindex="-1"><a class="header-anchor" href="#_1-修改-dao-接口-1"><span>（1）修改 Dao 接口</span></a></h4><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">&gt;</span></span> <span class="token function">selectStudentsChoose</span><span class="token punctuation">(</span><span class="token class-name">Student</span> student<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_2-修改映射文件-1" tabindex="-1"><a class="header-anchor" href="#_2-修改映射文件-1"><span>（2）修改映射文件</span></a></h4><p>​ 该标签会从第一个 &lt;when/&gt; 标签进行判断，若 &lt;when/&gt; 标签的 test 属性值为 true 则退出 &lt;choose/&gt; 标签，若所有 &lt;when/&gt; 标签的 test 属性值都为 false ，则最后会执行 &lt;otherwise/&gt; 标签。</p><p>​ 简单来说，就像 Java 的 IF - Else IF - Else 语句。</p><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>selectStudentsChoose<span class="token punctuation">&quot;</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>Student<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    select * from student
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>where</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>choose</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>when</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>name!=null and name!=&#39;&#39;<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
                and name like &#39;%&#39; #{name} &#39;%&#39;
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>when</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>when</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>age<span class="token entity named-entity" title="&gt;">&amp;gt;</span>0<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
                and age &gt; #{age}
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>when</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>otherwise</span><span class="token punctuation">&gt;</span></span>
                1 != 1
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>otherwise</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>choose</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>where</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-修改测试类-9" tabindex="-1"><a class="header-anchor" href="#_3-修改测试类-9"><span>（3）修改测试类</span></a></h4><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
	<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test03</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

		<span class="token comment">// 两个条件都有</span>
		<span class="token comment">// Student student = new Student(&quot;张&quot;, 23, 93.5);</span>
		<span class="token comment">// 只有姓名</span>
		<span class="token comment">// Student student = new Student(&quot;张&quot;,0,93.5);</span>
		<span class="token comment">// 只有年龄</span>
		<span class="token comment">// Student student = new Student(&quot;&quot;,23,93.5);</span>
		<span class="token comment">// 两个都没有</span>
		 <span class="token class-name">Student</span> student <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">&quot;&quot;</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">93.5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

		<span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">&gt;</span></span> students <span class="token operator">=</span> dao<span class="token punctuation">.</span><span class="token function">selectStudentsChoose</span><span class="token punctuation">(</span>student<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Student</span> stu <span class="token operator">:</span> students<span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>stu<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-4-4-foreach-标签-遍历数组" tabindex="-1"><a class="header-anchor" href="#_2-4-4-foreach-标签-遍历数组"><span>2.4.4 &lt;foreach/&gt; 标签-遍历数组</span></a></h3><p>​ 需求：查询以数组存储的 id 值的学生信息。</p><h4 id="_1-修改-dao-接口-2" tabindex="-1"><a class="header-anchor" href="#_1-修改-dao-接口-2"><span>（1）修改 Dao 接口</span></a></h4><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">&gt;</span></span> <span class="token function">selectStudentsForeachArray</span><span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> studentIds<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_2-修改映射文件-2" tabindex="-1"><a class="header-anchor" href="#_2-修改映射文件-2"><span>（2）修改映射文件</span></a></h4><p>​ Sql 语句查询条件为一组数据时，使用 “ 字段名 in (a, b, c) &quot;</p><ul><li>先 用 &lt;if/&gt; 标签判断数组是否为空。数组在 MyBatis 的内置别名为 array，所以用 array 表示传进来的数组。</li><li>用到了 &lt;foreach/&gt; 标签的 5 个属性： <ul><li>collection 指定遍历的容器类型；</li><li>open 和 close 指定开始和结束符号；</li><li>item 指定数组中取出来的每一个元素的名字；</li><li>separator 以什么符号分隔；</li></ul></li></ul><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>selectStudentsForeachArray<span class="token punctuation">&quot;</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>Student<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
		<span class="token comment">&lt;!-- select * from student where id in (1,2,3) --&gt;</span>
		select * from student
		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>array != null and array.length != 0<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
			where id in
			<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>foreach</span> <span class="token attr-name">collection</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>array<span class="token punctuation">&quot;</span></span> <span class="token attr-name">open</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>(<span class="token punctuation">&quot;</span></span> <span class="token attr-name">close</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>)<span class="token punctuation">&quot;</span></span> <span class="token attr-name">item</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>myid<span class="token punctuation">&quot;</span></span>
				<span class="token attr-name">separator</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>,<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
				#{myid}
			<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>foreach</span><span class="token punctuation">&gt;</span></span>
		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>除了 array，MyBatis还有更多内置的类型别名：</p><p>基本类型：</p><table><thead><tr><th>别名</th><th>类型</th><th>别名</th><th>类型</th></tr></thead><tbody><tr><td><strong>_int</strong></td><td><strong>int</strong></td><td><strong>_integer</strong></td><td><strong>int</strong></td></tr><tr><td>_short</td><td>short</td><td>_long</td><td>long</td></tr><tr><td>_double</td><td>double</td><td>_float</td><td>float</td></tr><tr><td>_byte</td><td>byte</td><td>_boolean</td><td>boolean</td></tr></tbody></table><p>常用包装类型：</p><table><thead><tr><th>别名</th><th>类型</th><th>别名</th><th>类型</th></tr></thead><tbody><tr><td>string</td><td>String</td><td>byte</td><td>Byte</td></tr><tr><td>long</td><td>Long</td><td>short</td><td>Short</td></tr><tr><td><strong>int</strong></td><td><strong>Integer</strong></td><td><strong>integer</strong></td><td><strong>Integer</strong></td></tr><tr><td>double</td><td>Double</td><td>float</td><td>Float</td></tr><tr><td>boolean</td><td>Boolean</td><td>date</td><td>Date</td></tr><tr><td>object</td><td>Object</td><td>collection</td><td>Collection</td></tr><tr><td>list</td><td>List</td><td>arrayList</td><td>ArrayList</td></tr><tr><td>map</td><td>Map</td><td>hashMap</td><td>HashMap</td></tr><tr><td>iterator</td><td>Iterator</td><td>array</td><td>数组</td></tr></tbody></table><h4 id="_3-修改测试类-10" tabindex="-1"><a class="header-anchor" href="#_3-修改测试类-10"><span>（3）修改测试类</span></a></h4><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
	<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test03</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> studentIds<span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">41</span><span class="token punctuation">,</span><span class="token number">42</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
		<span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">&gt;</span></span> students <span class="token operator">=</span> dao<span class="token punctuation">.</span><span class="token function">selectStudentsForeachArray</span><span class="token punctuation">(</span>studentIds<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Student</span> stu <span class="token operator">:</span> students<span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>stu<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-4-4-foreach-标签-遍历基本类型的list" tabindex="-1"><a class="header-anchor" href="#_2-4-4-foreach-标签-遍历基本类型的list"><span>2.4.4 &lt;foreach/&gt; 标签-遍历基本类型的List</span></a></h3><p>​ 需求：查询以 List 存储的 id 值的学生信息。</p><h4 id="_1-修改-dao-接口-3" tabindex="-1"><a class="header-anchor" href="#_1-修改-dao-接口-3"><span>（1）修改 Dao 接口</span></a></h4><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">&gt;</span></span> <span class="token function">selectStudentsForeachList</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> studentIds<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_2-修改映射文件-3" tabindex="-1"><a class="header-anchor" href="#_2-修改映射文件-3"><span>（2）修改映射文件</span></a></h4><p>​ 只需要将 array 换成 list 即可，需要注意的是 list 的长度属性不是 length 而是 size。</p><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>selectStudentsForeachList<span class="token punctuation">&quot;</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>Student<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
		<span class="token comment">&lt;!-- select * from student where id in (1,2,3) --&gt;</span>
		select * from student
		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>list != null and list.size != 0<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
			where id in
			<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>foreach</span> <span class="token attr-name">collection</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>list<span class="token punctuation">&quot;</span></span> <span class="token attr-name">open</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>(<span class="token punctuation">&quot;</span></span> <span class="token attr-name">close</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>)<span class="token punctuation">&quot;</span></span> <span class="token attr-name">item</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>myid<span class="token punctuation">&quot;</span></span>
				<span class="token attr-name">separator</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>,<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
				#{myid}
			<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>foreach</span><span class="token punctuation">&gt;</span></span>
		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-修改测试类-11" tabindex="-1"><a class="header-anchor" href="#_3-修改测试类-11"><span>（3）修改测试类</span></a></h4><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
	<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test04</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> studentIds<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		studentIds<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">41</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		studentIds<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">42</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">&gt;</span></span> students <span class="token operator">=</span> dao<span class="token punctuation">.</span><span class="token function">selectStudentsForeachList</span><span class="token punctuation">(</span>studentIds<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Student</span> stu <span class="token operator">:</span> students<span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>stu<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-4-5-foreach-标签-遍历泛型的list" tabindex="-1"><a class="header-anchor" href="#_2-4-5-foreach-标签-遍历泛型的list"><span>2.4.5 &lt;foreach/&gt; 标签-遍历泛型的List</span></a></h3><h4 id="_1-修改-dao-接口-4" tabindex="-1"><a class="header-anchor" href="#_1-修改-dao-接口-4"><span>（1）修改 Dao 接口</span></a></h4><p>​ 使用 Student 作为泛型的类型，取出 List 中的各个 Student 对象的 id 值作为查询条件。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">&gt;</span></span> <span class="token function">selectStudentsForeachList</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">&gt;</span></span> studentIds<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_2-修改映射文件-4" tabindex="-1"><a class="header-anchor" href="#_2-修改映射文件-4"><span>（2）修改映射文件</span></a></h4><p>​ 只需要将 item 的值更改（只是便于可读），并将值中的 id 属性取出来。</p><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>selectStudentsForeachList2<span class="token punctuation">&quot;</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>Student<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
		<span class="token comment">&lt;!-- select * from student where id in (1,2,3) --&gt;</span>
		select * from student
		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>list != null and list.size != 0<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
			where id in
			<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>foreach</span> <span class="token attr-name">collection</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>list<span class="token punctuation">&quot;</span></span> <span class="token attr-name">open</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>(<span class="token punctuation">&quot;</span></span> <span class="token attr-name">close</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>)<span class="token punctuation">&quot;</span></span> <span class="token attr-name">item</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>stu<span class="token punctuation">&quot;</span></span>
				<span class="token attr-name">separator</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>,<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
				#{stu.id}
			<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>foreach</span><span class="token punctuation">&gt;</span></span>
		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-修改测试类-12" tabindex="-1"><a class="header-anchor" href="#_3-修改测试类-12"><span>（3）修改测试类</span></a></h4><p>​ 新建两个 Student 对象，并赋值 id 属性并封装成 List 。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
	<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test05</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token class-name">Student</span> stu1<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		stu1<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span><span class="token number">41</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token class-name">Student</span> stu2<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		stu2<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span><span class="token number">42</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		
		<span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">&gt;</span></span> students<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		students<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>stu1<span class="token punctuation">)</span><span class="token punctuation">;</span>
		students<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>stu2<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Student</span><span class="token punctuation">&gt;</span></span> studentsList <span class="token operator">=</span> dao<span class="token punctuation">.</span><span class="token function">selectStudentsForeachList2</span><span class="token punctuation">(</span>students<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Student</span> stu <span class="token operator">:</span> studentsList<span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>stu<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-4-6-sql-标签" tabindex="-1"><a class="header-anchor" href="#_2-4-6-sql-标签"><span>2.4.6 &lt;sql/&gt; 标签</span></a></h3><p>​ &lt;sql/&gt; 标签用于定义 Sql 片段，以便于其他 Sql 标签复用。而其他标签使用该 Sql 片段，需要使用 &lt;include/&gt; 标签。&lt;sql/&gt; 标签可以定义 Sql 语句中的任何部分。类似 Jsp 的代码块 ” &lt;% 代码块 %&gt; “。</p><p>​ 优点：便于统一修改；缺点：可读性下降</p><h4 id="_1-修改映射文件-7" tabindex="-1"><a class="header-anchor" href="#_1-修改映射文件-7"><span>（1）修改映射文件</span></a></h4><p>​ 在上例的基础上，进行修改。</p><ul><li>第 1 ~ 3 行，定义 Sql 片段。</li><li>第 7 行，使用 &lt;include/&gt; 标签将片段插入进去。</li></ul><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>sql</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>selectHead<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
		select * from student
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>sql</span><span class="token punctuation">&gt;</span></span>
	
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>selectStudentsForeachList2<span class="token punctuation">&quot;</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>Student<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token comment">&lt;!-- select * from student where id in (1,2,3) --&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span> <span class="token attr-name">refid</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>selectHead<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>list != null and list.size != 0<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
        where id in
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>foreach</span> <span class="token attr-name">collection</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>list<span class="token punctuation">&quot;</span></span> <span class="token attr-name">open</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>(<span class="token punctuation">&quot;</span></span> <span class="token attr-name">close</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>)<span class="token punctuation">&quot;</span></span> <span class="token attr-name">item</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>stu<span class="token punctuation">&quot;</span></span>
                 <span class="token attr-name">separator</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>,<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
            #{stu.id}
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>foreach</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,176);function r(v,m){const t=p("ExternalLinkIcon");return c(),l("div",null,[u,n("p",null,[s("​ 参考 "),n("a",d,[s("java中Map遍历的四种方式（博客园）"),o(t)])]),k])}const h=e(i,[["render",r],["__file","二、单表的 CURD 操作.html.vue"]]),q=JSON.parse('{"path":"/%E5%AD%A6%E4%B9%A0/%E5%90%8E%E7%AB%AF/SSM%E6%A1%86%E6%9E%B6/MyBatis3/%E4%BA%8C%E3%80%81%E5%8D%95%E8%A1%A8%E7%9A%84%20CURD%20%E6%93%8D%E4%BD%9C.html","title":"二、单表的 CURD 操作","lang":"zh-CN","frontmatter":{"tags":["SSM框架","学习","MyBatis"],"readingTime":true,"autoNext":"三、关联关系查询","description":"二、单表的 CURD 操作 ​ CURD 操作，即指对数据库中实体对象的 增 Create、改 Update、查 Read、删 Delete 操作。 2.1 自定义 Dao 接口实现类 2.1.1 修改 Dao 接口 IStudentDao.java：增加 增 、改 、查 、删 这四个接口方法 2.1.2 实现插入后获取 id 方法 （1）修改映射文件...","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/%E5%AD%A6%E4%B9%A0/%E5%90%8E%E7%AB%AF/SSM%E6%A1%86%E6%9E%B6/MyBatis3/%E4%BA%8C%E3%80%81%E5%8D%95%E8%A1%A8%E7%9A%84%20CURD%20%E6%93%8D%E4%BD%9C.html"}],["meta",{"property":"og:site_name","content":"博客演示"}],["meta",{"property":"og:title","content":"二、单表的 CURD 操作"}],["meta",{"property":"og:description","content":"二、单表的 CURD 操作 ​ CURD 操作，即指对数据库中实体对象的 增 Create、改 Update、查 Read、删 Delete 操作。 2.1 自定义 Dao 接口实现类 2.1.1 修改 Dao 接口 IStudentDao.java：增加 增 、改 、查 、删 这四个接口方法 2.1.2 实现插入后获取 id 方法 （1）修改映射文件..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://raw.githubusercontent.com/hahg2000/SSMPic/main/20210217162933.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-02-24T04:33:47.000Z"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:alt","content":"二、单表的 CURD 操作"}],["meta",{"property":"article:author","content":"hahg"}],["meta",{"property":"article:tag","content":"SSM框架"}],["meta",{"property":"article:tag","content":"学习"}],["meta",{"property":"article:tag","content":"MyBatis"}],["meta",{"property":"article:modified_time","content":"2024-02-24T04:33:47.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"二、单表的 CURD 操作\\",\\"image\\":[\\"https://raw.githubusercontent.com/hahg2000/SSMPic/main/20210217162933.png\\"],\\"dateModified\\":\\"2024-02-24T04:33:47.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"hahg\\"}]}"]]},"headers":[{"level":2,"title":"2.1 自定义 Dao 接口实现类","slug":"_2-1-自定义-dao-接口实现类","link":"#_2-1-自定义-dao-接口实现类","children":[{"level":3,"title":"2.1.1 修改 Dao 接口","slug":"_2-1-1-修改-dao-接口","link":"#_2-1-1-修改-dao-接口","children":[]},{"level":3,"title":"2.1.2 实现插入后获取 id 方法","slug":"_2-1-2-实现插入后获取-id-方法","link":"#_2-1-2-实现插入后获取-id-方法","children":[]},{"level":3,"title":"2.1.3 删除数据","slug":"_2-1-3-删除数据","link":"#_2-1-3-删除数据","children":[]},{"level":3,"title":"2.1.4 修改数据","slug":"_2-1-4-修改数据","link":"#_2-1-4-修改数据","children":[]},{"level":3,"title":"2.1.5 查询所有对象-返回 List","slug":"_2-1-5-查询所有对象-返回-list","link":"#_2-1-5-查询所有对象-返回-list","children":[]},{"level":3,"title":"2.1.6 查询所有对象-返回 Map","slug":"_2-1-6-查询所有对象-返回-map","link":"#_2-1-6-查询所有对象-返回-map","children":[]},{"level":3,"title":"2.1.7 查询单个对象","slug":"_2-1-7-查询单个对象","link":"#_2-1-7-查询单个对象","children":[]},{"level":3,"title":"2.1.8 模糊查询","slug":"_2-1-8-模糊查询","link":"#_2-1-8-模糊查询","children":[]}]},{"level":2,"title":"2.2 属性名与字段名不一致的解决","slug":"_2-2-属性名与字段名不一致的解决","link":"#_2-2-属性名与字段名不一致的解决","children":[{"level":3,"title":"2.1.1 修改 Student 表","slug":"_2-1-1-修改-student-表","link":"#_2-1-1-修改-student-表","children":[]},{"level":3,"title":"2.1.2 修改映射文件","slug":"_2-1-2-修改映射文件","link":"#_2-1-2-修改映射文件","children":[]},{"level":3,"title":"2.1.3 直接运行","slug":"_2-1-3-直接运行","link":"#_2-1-3-直接运行","children":[]},{"level":3,"title":"2.1.4 使用别名","slug":"_2-1-4-使用别名","link":"#_2-1-4-使用别名","children":[]},{"level":3,"title":"2.1.5 使用结果映射 resultMap","slug":"_2-1-5-使用结果映射-resultmap","link":"#_2-1-5-使用结果映射-resultmap","children":[]}]},{"level":2,"title":"2.3 Mappper 动态代理","slug":"_2-3-mappper-动态代理","link":"#_2-3-mappper-动态代理","children":[{"level":3,"title":"2.3.1 映射文件的 namespace","slug":"_2-3-1-映射文件的-namespace","link":"#_2-3-1-映射文件的-namespace","children":[]},{"level":3,"title":"2.3.2 Dao 接口方法名","slug":"_2-3-2-dao-接口方法名","link":"#_2-3-2-dao-接口方法名","children":[]},{"level":3,"title":"2.3.3 Dao 对象的获取","slug":"_2-3-3-dao-对象的获取","link":"#_2-3-3-dao-对象的获取","children":[]},{"level":3,"title":"2.3.4 添加细节","slug":"_2-3-4-添加细节","link":"#_2-3-4-添加细节","children":[]},{"level":3,"title":"2.3.5 多查询条件无法整体接收问题的解决","slug":"_2-3-5-多查询条件无法整体接收问题的解决","link":"#_2-3-5-多查询条件无法整体接收问题的解决","children":[]}]},{"level":2,"title":"2.4动态SQL","slug":"_2-4动态sql","link":"#_2-4动态sql","children":[{"level":3,"title":"2.4.1 <if/> 标签","slug":"_2-4-1-if-标签","link":"#_2-4-1-if-标签","children":[]},{"level":3,"title":"2.4.2 <where/> 标签","slug":"_2-4-2-where-标签","link":"#_2-4-2-where-标签","children":[]},{"level":3,"title":"2.4.3 <choose/> 标签","slug":"_2-4-3-choose-标签","link":"#_2-4-3-choose-标签","children":[]},{"level":3,"title":"2.4.4 <foreach/> 标签-遍历数组","slug":"_2-4-4-foreach-标签-遍历数组","link":"#_2-4-4-foreach-标签-遍历数组","children":[]},{"level":3,"title":"2.4.4 <foreach/> 标签-遍历基本类型的List","slug":"_2-4-4-foreach-标签-遍历基本类型的list","link":"#_2-4-4-foreach-标签-遍历基本类型的list","children":[]},{"level":3,"title":"2.4.5 <foreach/> 标签-遍历泛型的List","slug":"_2-4-5-foreach-标签-遍历泛型的list","link":"#_2-4-5-foreach-标签-遍历泛型的list","children":[]},{"level":3,"title":"2.4.6 <sql/> 标签","slug":"_2-4-6-sql-标签","link":"#_2-4-6-sql-标签","children":[]}]}],"git":{"createdTime":1708749227000,"updatedTime":1708749227000,"contributors":[{"name":"hahg2000","email":"61403802+hahg2000@users.noreply.github.com","commits":1}]},"readingTime":{"minutes":18.61,"words":5582},"filePathRelative":"学习/后端/SSM框架/MyBatis3/二、单表的 CURD 操作.md","localizedDate":"2024年2月24日","excerpt":"\\n<p>​\\tCURD 操作，即指对数据库中实体对象的 <strong>增 Create</strong>、<strong>改 Update</strong>、<strong>查 Read</strong>、<strong>删 Delete</strong> 操作。</p>\\n<h2>2.1 自定义 Dao 接口实现类</h2>\\n<h3>2.1.1 修改 Dao 接口</h3>\\n<p><strong>IStudentDao.java</strong>：增加 增 、改 、查 、删 这四个接口方法</p>\\n<div class=\\"language-java\\" data-ext=\\"java\\" data-title=\\"java\\"><pre class=\\"language-java\\"><code><span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">interface</span> <span class=\\"token class-name\\">IStudentDao</span> <span class=\\"token punctuation\\">{</span>\\n\\t<span class=\\"token comment\\">// 插入</span>\\n\\t<span class=\\"token keyword\\">void</span> <span class=\\"token function\\">insertStudent</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">Student</span> student<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\t<span class=\\"token keyword\\">void</span> <span class=\\"token function\\">insertStudentCatchId</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">Student</span> student<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\n\\t<span class=\\"token comment\\">// 删改</span>\\n\\t<span class=\\"token keyword\\">void</span> <span class=\\"token function\\">deleteStudentById</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">int</span> id<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\t<span class=\\"token keyword\\">void</span> <span class=\\"token function\\">updateStudent</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">Student</span> student<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\n\\t<span class=\\"token comment\\">// 查询所有</span>\\n\\t<span class=\\"token class-name\\">List</span><span class=\\"token generics\\"><span class=\\"token punctuation\\">&lt;</span><span class=\\"token class-name\\">Student</span><span class=\\"token punctuation\\">&gt;</span></span> <span class=\\"token function\\">selectAllStudents</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\t<span class=\\"token class-name\\">Map</span><span class=\\"token generics\\"><span class=\\"token punctuation\\">&lt;</span><span class=\\"token class-name\\">String</span><span class=\\"token punctuation\\">,</span> <span class=\\"token class-name\\">Student</span><span class=\\"token punctuation\\">&gt;</span></span> <span class=\\"token function\\">selectStudentMap</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\n\\t<span class=\\"token comment\\">// 查询指定学生</span>\\n\\t<span class=\\"token class-name\\">Student</span> <span class=\\"token function\\">selectStudentById</span><span class=\\"token punctuation\\">(</span><span class=\\"token keyword\\">int</span> id<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\t\\n\\t<span class=\\"token comment\\">// 根据姓名查询</span>\\n\\t<span class=\\"token class-name\\">List</span><span class=\\"token generics\\"><span class=\\"token punctuation\\">&lt;</span><span class=\\"token class-name\\">Student</span><span class=\\"token punctuation\\">&gt;</span></span> <span class=\\"token function\\">selectStudentsByName</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">String</span> name<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre></div>","autoDesc":true}');export{h as comp,q as data};
