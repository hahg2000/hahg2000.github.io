const n=JSON.parse(`{"key":"v-b6a940bc","path":"/%E5%AD%A6%E4%B9%A0/%E5%89%8D%E7%AB%AF/%E5%8E%9F%E7%94%9FJS/%E5%8E%9F%E7%94%9FJS%E9%AB%98%E7%BA%A7-%E4%B8%AD.html","title":"原生JS高级-中","lang":"zh-CN","frontmatter":{"description":"原生JS高级-中 一、对象创建模式 1.1 Object构造函数模式 步骤：先创建一个空 Object 对象，再添加属性和方法。 适用场景：起始时不确定对象内部数据。 问题：语句太多。 var p1 = new Object(); p1.name = '张三'; p1.age = 22; p1.dowork = function(){ console.log(\\"正在工作中\\"); }","head":[["meta",{"property":"og:url","content":"https://hahg2000.github.io/%E5%AD%A6%E4%B9%A0/%E5%89%8D%E7%AB%AF/%E5%8E%9F%E7%94%9FJS/%E5%8E%9F%E7%94%9FJS%E9%AB%98%E7%BA%A7-%E4%B8%AD.html"}],["meta",{"property":"og:title","content":"原生JS高级-中"}],["meta",{"property":"og:description","content":"原生JS高级-中 一、对象创建模式 1.1 Object构造函数模式 步骤：先创建一个空 Object 对象，再添加属性和方法。 适用场景：起始时不确定对象内部数据。 问题：语句太多。 var p1 = new Object(); p1.name = '张三'; p1.age = 22; p1.dowork = function(){ console.log(\\"正在工作中\\"); }"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-03-12T04:21:01.000Z"}],["meta",{"property":"article:modified_time","content":"2023-03-12T04:21:01.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"原生JS高级-中\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-03-12T04:21:01.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"一、对象创建模式","slug":"一、对象创建模式","link":"#一、对象创建模式","children":[{"level":3,"title":"1.1 Object构造函数模式","slug":"_1-1-object构造函数模式","link":"#_1-1-object构造函数模式","children":[]},{"level":3,"title":"1.2 对象字面量模式","slug":"_1-2-对象字面量模式","link":"#_1-2-对象字面量模式","children":[]},{"level":3,"title":"1.3 工厂模式","slug":"_1-3-工厂模式","link":"#_1-3-工厂模式","children":[]},{"level":3,"title":"1.4 自定义构造函数模式","slug":"_1-4-自定义构造函数模式","link":"#_1-4-自定义构造函数模式","children":[]},{"level":3,"title":"1.5 构造函数加上原型的组合模式","slug":"_1-5-构造函数加上原型的组合模式","link":"#_1-5-构造函数加上原型的组合模式","children":[]}]},{"level":2,"title":"二、继承模式","slug":"二、继承模式","link":"#二、继承模式","children":[]},{"level":2,"title":"三、线程机制","slug":"三、线程机制","link":"#三、线程机制","children":[{"level":3,"title":"3.1 区分进程和线程","slug":"_3-1-区分进程和线程","link":"#_3-1-区分进程和线程","children":[]},{"level":3,"title":"3.2 循环队列","slug":"_3-2-循环队列","link":"#_3-2-循环队列","children":[]},{"level":3,"title":"3.3 浏览器的渲染进程","slug":"_3-3-浏览器的渲染进程","link":"#_3-3-浏览器的渲染进程","children":[]},{"level":3,"title":"3.4 通信过程","slug":"_3-4-通信过程","link":"#_3-4-通信过程","children":[]},{"level":3,"title":"3.5 浏览器渲染流程","slug":"_3-5-浏览器渲染流程","link":"#_3-5-浏览器渲染流程","children":[]},{"level":3,"title":"3.6 事件循环进阶","slug":"_3-6-事件循环进阶","link":"#_3-6-事件循环进阶","children":[]}]}],"git":{"createdTime":1678594861000,"updatedTime":1678594861000,"contributors":[{"name":"hahg2000","email":"61403802+hahg2000@users.noreply.github.com","commits":1}]},"readingTime":{"minutes":10.81,"words":3243},"filePathRelative":"学习/前端/原生JS/原生JS高级-中.md","localizedDate":"2023年3月12日","excerpt":"<h1> 原生JS高级-中</h1>\\n<h2> 一、对象创建模式</h2>\\n<h3> 1.1 Object构造函数模式</h3>\\n<p>步骤：先创建一个空 Object 对象，再添加属性和方法。</p>\\n<p>适用场景：起始时不确定对象内部数据。</p>\\n<p>问题：语句太多。</p>\\n<div class=\\"language-javascript line-numbers-mode\\" data-ext=\\"js\\"><pre class=\\"language-javascript\\"><code><span class=\\"token keyword\\">var</span> p1 <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">Object</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\np1<span class=\\"token punctuation\\">.</span>name <span class=\\"token operator\\">=</span> <span class=\\"token string\\">'张三'</span><span class=\\"token punctuation\\">;</span>\\np1<span class=\\"token punctuation\\">.</span>age <span class=\\"token operator\\">=</span> <span class=\\"token number\\">22</span><span class=\\"token punctuation\\">;</span>\\np1<span class=\\"token punctuation\\">.</span><span class=\\"token function-variable function\\">dowork</span> <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">function</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">{</span>\\n    console<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">log</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"正在工作中\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}`);export{n as data};
