import{_ as c}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as o,o as l,c as i,a as s,b as n,d as e,w as r,f as a}from"./app-Chw2KLnS.js";const d={},u=a(`<h1 id="第-19-章-错误处理" tabindex="-1"><a class="header-anchor" href="#第-19-章-错误处理"><span>第 19 章： 错误处理</span></a></h1><p>无论使用哪门语言，错误处理都是程序员最重要--也是最容易忽视--的话题之一。在Haskell中，你会发现有两类主流的错误处理：&quot;纯&quot;的错误处理和异常。</p><p>当我们说&quot;纯&quot;的错误处理，我们是指算法不依赖任何IO Monad。我们通常会利用Haskell富于表现力的数据类型系统来实现这一类错误处理。Haskell也支持异常。由于惰性求值复杂性，Haskell中任何地方都可能抛出异常，但是只会在IO monad中被捕获。在这一章中，这两类错误处理我们都会考虑。</p><h2 id="使用数据类型进行错误处理" tabindex="-1"><a class="header-anchor" href="#使用数据类型进行错误处理"><span>使用数据类型进行错误处理</span></a></h2><p>让我们从一个非常简单的函数来开始我们关于错误处理的讨论。假设我们希望对一系列的数字执行除法运算。分子是常数，但是分母是变化的。可能我们会写出这样一个函数：</p><p>::: literalinclude /code/ch19/divby1.hs :::</p><p>非常简单，对吧？我们可以在 <code>ghci</code> 中执行这些代码：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>ghci<span class="token operator">&gt;</span> divBy <span class="token number">50</span> <span class="token punctuation">[</span><span class="token number">1,2</span>,5,8,10<span class="token punctuation">]</span>
<span class="token punctuation">[</span><span class="token number">50,25</span>,10,6,5<span class="token punctuation">]</span>
ghci<span class="token operator">&gt;</span> take <span class="token number">5</span> <span class="token punctuation">(</span>divBy <span class="token number">100</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">..</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token punctuation">[</span><span class="token number">100,50</span>,33,25,20<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个行为跟我们预期的是一致的：50 / 1 得到50，50 / 2 得到25，等等。甚至对于无穷的链表 [1..] 它也是可以工作的。如果有个0溜进去我们的链表中了，会发生什么事呢？</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>ghci<span class="token operator">&gt;</span> divBy <span class="token number">50</span> <span class="token punctuation">[</span><span class="token number">1,2</span>,0,8,10<span class="token punctuation">]</span>
<span class="token punctuation">[</span><span class="token number">50,25</span>,*** Exception: divide by zero
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>是不是很有意思？ <code>ghci</code> 开始显示输出，然后当它遇到零时发生了一个异常停止了。这是惰性求值的作用--它只按需求值。</p><p>在这一章里接下来我们会看到，缺乏一个明确的异常处理时，这个异常会使程序崩溃。这当然不是我们想要的，所以让我们思考一下更好的方式来表征这个纯函数中的错误。</p><h3 id="使用maybe" tabindex="-1"><a class="header-anchor" href="#使用maybe"><span>使用Maybe</span></a></h3><p>可以立刻想到的一个表示失败的简单的方法是使用 <code>Maybe</code> 。如果输入链表中任何地方包含了零，相对于仅仅返回一个链表并在失败的时候抛出异常，我们可以返回 <code>Nothing</code> ，或者如果没有出现零我们可以返回结果的 <code>Just</code>。下面是这个算法的实现：</p><p>::: literalinclude /code/ch19/divby2.hs :::</p><p>如果你在 <code>ghci</code> 中尝试它，你会发现它可以工作：</p><div class="language-haskell line-numbers-mode" data-ext="haskell" data-title="haskell"><pre class="language-haskell"><code><span class="token hvariable">ghci</span><span class="token operator">&gt;</span> <span class="token hvariable">divBy</span> <span class="token number">50</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">]</span>
<span class="token constant">Just</span> <span class="token punctuation">[</span><span class="token number">50</span><span class="token punctuation">,</span><span class="token number">25</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span>
<span class="token hvariable">ghci</span><span class="token operator">&gt;</span> <span class="token hvariable">divBy</span> <span class="token number">50</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">]</span>
<span class="token constant">Nothing</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>调用 <code>divBy</code> 的函数现在可以使用 <code>case</code> 语句来观察调用成功与否，就像 <code>divBy</code> 调用自己时所做的那样。</p><div class="hint-container tip"><p class="hint-container-title">Tip</p><p>你大概注意到，上面可以使用一个monadic的实现，像这样子：</p><p>::: literalinclude /code/ch19/divby2m.hs</p></div><p>出于简单考虑，在这章中我们会避免使用monadic实现，但是会指出有这种做法。 :::</p><p>[译注:原 Tip 中代码错误，在除以非0数字的情况下没有返回正确类型，因此编译不过，可以使用 <code>return</code> 或者 <code>Just</code> 来修正，此处使用 <code>Just</code>]</p><h4 id="丢失和保存惰性" tabindex="-1"><a class="header-anchor" href="#丢失和保存惰性"><span>丢失和保存惰性</span></a></h4><p>使用 <code>Maybe</code> 很方便，但是有代价。 <code>divBy</code> 将不能够再处理无限的链表输入。由于结果是一个 <code>Maybe [a]</code> ，必须要检查整个输入链表，我们才能确认不会因为存在零而返回 <code>Nothing</code> 。你可以尝试在之前的例子中验证这一点：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>ghci<span class="token operator">&gt;</span> divBy <span class="token number">100</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">..</span><span class="token punctuation">]</span> 
*** Exception: stack overflow
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>这里观察到，你没有看到部分的输出；你没得到任何输出。注意到在 <code>divBy</code> 的每一步中(除了输入链表为空或者链表开头是零的情况)，每个子序列元素的结果必须先于当前元素的结果得到。因此这个算法无法处理无穷链表，并且对于大的有限链表，它的空间效率也不高。</p><p>之前已经说过， <code>Maybe</code> 通常是一个好的选择。在这个特殊例子中，只有当我们去执行整个输入的时候我们才知道是否有问题。有时候我们可以提交发现问题，例如，在 <code>ghci</code> 中 <code>tail []</code> 会生成一个异常。我们可以很容易写一个可以处理无穷情况的 <code>tail</code> ：</p><p>::: literalinclude /code/ch19/safetail.hs :::</p><p>如果输入为空，简单的返回一个 <code>Nothing</code> ，其它情况返回结果的 <code>Just</code> 。由于在知道是否发生错误之前，我们只需要确认链表非空，在这里使用 <code>Maybe</code> 不会破坏惰性。我们可以在 <code>ghci</code> 中测试并观察跟普通的 <code>tail</code> 有何不同：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>ghci<span class="token operator">&gt;</span> <span class="token function">tail</span> <span class="token punctuation">[</span><span class="token number">1,2</span>,3,4,5<span class="token punctuation">]</span>
<span class="token punctuation">[</span><span class="token number">2,3</span>,4,5<span class="token punctuation">]</span>
ghci<span class="token operator">&gt;</span> safeTail <span class="token punctuation">[</span><span class="token number">1,2</span>,3,4,5<span class="token punctuation">]</span>
Just <span class="token punctuation">[</span><span class="token number">2,3</span>,4,5<span class="token punctuation">]</span>
ghci<span class="token operator">&gt;</span> <span class="token function">tail</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
*** Exception: Prelude.tail: empty list
ghci<span class="token operator">&gt;</span> safeTail <span class="token punctuation">[</span><span class="token punctuation">]</span>
Nothing
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里我们可以看到，我们的 <code>safeTail</code> 执行结果符合预期。但是对于无穷链表呢？我们不想打印无穷的结果的数字，所以我们用 <code>take 5 (tail [1..])</code> 以及一个类似的saftTail构建测试：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>ghci<span class="token operator">&gt;</span> take <span class="token number">5</span> <span class="token punctuation">(</span>tail <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">..</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token punctuation">[</span><span class="token number">2,3</span>,4,5,6<span class="token punctuation">]</span>
ghci<span class="token operator">&gt;</span> <span class="token keyword">case</span> safeTail <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">..</span><span class="token punctuation">]</span> of <span class="token punctuation">{</span>Nothing -<span class="token operator">&gt;</span> Nothing<span class="token punctuation">;</span> Just x -<span class="token operator">&gt;</span> Just <span class="token punctuation">(</span>take <span class="token number">5</span> x<span class="token punctuation">)</span><span class="token punctuation">}</span>
Just <span class="token punctuation">[</span><span class="token number">2,3</span>,4,5,6<span class="token punctuation">]</span>
ghci<span class="token operator">&gt;</span> take <span class="token number">5</span> <span class="token punctuation">(</span>tail <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
*** Exception: Prelude.tail: empty list
ghci<span class="token operator">&gt;</span> <span class="token keyword">case</span> safeTail <span class="token punctuation">[</span><span class="token punctuation">]</span> of <span class="token punctuation">{</span>Nothing -<span class="token operator">&gt;</span> Nothing<span class="token punctuation">;</span> Just x -<span class="token operator">&gt;</span> Just <span class="token punctuation">(</span>take <span class="token number">5</span> x<span class="token punctuation">)</span><span class="token punctuation">}</span>
Nothing
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里你可以看到 <code>tail</code> 和 <code>safeTail</code> 都可以处理无穷链表。注意我们可以更好地处理空的输入链表；而不是抛出异常，我们决定这种情况返回 <code>Nothing</code> 。我们可以获得错误处理能力却不会失去惰性。</p><p>但是我们如何将它应用到我们的 <code>divBy</code> 的例子中呢？让我们思考下现在的情况：失败是单个坏的输入的属性，而不是输入链表自身。那么将失败作为单个输出元素的属性，而不是整个输出链表怎么样？也就是说，不是一个类型为 <code>a -&gt; [a] -&gt; Maybe [a]</code> 的函数，取而代之我们使用 <code>a -&gt; [a] -&gt; [Maybe a]</code> 。这样做的好处是可以保留惰性，并且调用者可以确定是在链表中的哪里出了问题--或者甚至是过滤掉有问题的结果，如果需要的话。这里是一个实现：</p><p>::: literalinclude /code/ch19/divby3.hs :::</p><p>看下这个函数，我们再次回到使用 <code>map</code> ，这无论对简洁和惰性都是件好事。我们可以在 <code>ghci</code> 中测试它，并观察对于有限和无限链表它都可以正常工作：</p><div class="language-haskell line-numbers-mode" data-ext="haskell" data-title="haskell"><pre class="language-haskell"><code><span class="token hvariable">ghci</span><span class="token operator">&gt;</span> <span class="token hvariable">divBy</span> <span class="token number">50</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">]</span>
<span class="token punctuation">[</span><span class="token constant">Just</span> <span class="token number">50</span><span class="token punctuation">,</span><span class="token constant">Just</span> <span class="token number">25</span><span class="token punctuation">,</span><span class="token constant">Just</span> <span class="token number">10</span><span class="token punctuation">,</span><span class="token constant">Just</span> <span class="token number">6</span><span class="token punctuation">,</span><span class="token constant">Just</span> <span class="token number">5</span><span class="token punctuation">]</span>
<span class="token hvariable">ghci</span><span class="token operator">&gt;</span> <span class="token hvariable">divBy</span> <span class="token number">50</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">]</span>
<span class="token punctuation">[</span><span class="token constant">Just</span> <span class="token number">50</span><span class="token punctuation">,</span><span class="token constant">Just</span> <span class="token number">25</span><span class="token punctuation">,</span><span class="token constant">Nothing</span><span class="token punctuation">,</span><span class="token constant">Just</span> <span class="token number">6</span><span class="token punctuation">,</span><span class="token constant">Just</span> <span class="token number">5</span><span class="token punctuation">]</span>
<span class="token hvariable">ghci</span><span class="token operator">&gt;</span> <span class="token builtin">take</span> <span class="token number">5</span> <span class="token punctuation">(</span><span class="token hvariable">divBy</span> <span class="token number">100</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token operator">..</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token punctuation">[</span><span class="token constant">Just</span> <span class="token number">100</span><span class="token punctuation">,</span><span class="token constant">Just</span> <span class="token number">50</span><span class="token punctuation">,</span><span class="token constant">Just</span> <span class="token number">33</span><span class="token punctuation">,</span><span class="token constant">Just</span> <span class="token number">25</span><span class="token punctuation">,</span><span class="token constant">Just</span> <span class="token number">20</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们希望通过这个讨论你可以明白这点，不符合规范的（正如 <code>safeTail</code> 中的情况）输入和包含坏的数据的输入( <code>divBy</code> 中的情况)是有区别的。这两种情况通常需要对结果采用不同的处理。</p><h4 id="maybe-monad的用法" tabindex="-1"><a class="header-anchor" href="#maybe-monad的用法"><span>Maybe Monad的用法</span></a></h4>`,38),k=s("code",{class:"interpreted-text",role:"ref"},"使用Maybe",-1),h=s("code",null,"divby2.hs",-1),v=s("code",null,"Maybe [a]",-1),b={href:"http://rwh.readthedocs.org/en/latest/chp/14.html",target:"_blank",rel:"noopener noreferrer"},m=a(`<p>::: literalinclude /code/ch19/divby4.hs :::</p><p><code>Maybe</code> monad使得这个算法的表示看上去更好。对于 <code>Maybe</code> monad， <code>return</code> 就跟 <code>Just</code> 一样，并且 <code>fail _ = Nothing</code> ，因此我们看到任何的错误说明的字段串。我们可以用我们在 <code>divby2.hs</code> 中使用过的测试来测试这个算法：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>ghci<span class="token operator">&gt;</span> divBy <span class="token number">50</span> <span class="token punctuation">[</span><span class="token number">1,2</span>,5,8,10<span class="token punctuation">]</span>
Just <span class="token punctuation">[</span><span class="token number">50,25</span>,10,6,5<span class="token punctuation">]</span>
ghci<span class="token operator">&gt;</span> divBy <span class="token number">50</span> <span class="token punctuation">[</span><span class="token number">1,2</span>,0,8,10<span class="token punctuation">]</span>
Nothing
ghci<span class="token operator">&gt;</span> divBy <span class="token number">100</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">..</span><span class="token punctuation">]</span> 
*** Exception: stack overflow
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们写的代码实际上并不限于 <code>Maybe</code> monad。只要简单地改变类型，我们可以让它对于任何monad都能工作。让我们试一下：</p><p>::: literalinclude /code/ch19/divby5.hs :::</p><p>函数 <code>divByGeneric</code> 包含的代码 <code>divBy</code> 之前所做的一样；我们只是给它一个更通用的类型。事实上，如果不给出类型，这个类型是由 <code>ghci</code> 自动推导的。我们还为特定的类型定义了一个更方便的函数 <code>divBy</code> 。</p><p>让我们在 <code>ghci</code> 中运行一下。</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>ghci<span class="token operator">&gt;</span> :l divby5.hs
<span class="token punctuation">[</span><span class="token number">1</span> of <span class="token number">1</span><span class="token punctuation">]</span> Compiling Main             <span class="token punctuation">(</span> divby5.hs, interpreted <span class="token punctuation">)</span>
Ok, modules loaded: Main.
ghci<span class="token operator">&gt;</span> divBy <span class="token number">50</span> <span class="token punctuation">[</span><span class="token number">1,2</span>,5,8,10<span class="token punctuation">]</span>
Just <span class="token punctuation">[</span><span class="token number">50,25</span>,10,6,5<span class="token punctuation">]</span>
ghci<span class="token operator">&gt;</span> <span class="token punctuation">(</span>divByGeneric <span class="token number">50</span> <span class="token punctuation">[</span><span class="token number">1,2</span>,5,8,10<span class="token punctuation">]</span><span class="token punctuation">)</span>::<span class="token punctuation">(</span>Integral a <span class="token operator">=</span><span class="token operator">&gt;</span> Maybe <span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">)</span>
Just <span class="token punctuation">[</span><span class="token number">50,25</span>,10,6,5<span class="token punctuation">]</span>
ghci<span class="token operator">&gt;</span> divByGeneric <span class="token number">50</span> <span class="token punctuation">[</span><span class="token number">1,2</span>,5,8,10<span class="token punctuation">]</span>
<span class="token punctuation">[</span><span class="token number">50,25</span>,10,6,5<span class="token punctuation">]</span>
ghci<span class="token operator">&gt;</span> divByGeneric <span class="token number">50</span> <span class="token punctuation">[</span><span class="token number">1,2</span>,0,8,10<span class="token punctuation">]</span>
*** Exception: user error <span class="token punctuation">(</span>division by zero <span class="token keyword">in</span> divByGeneric<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>前两个例子产生的输出都跟我们之前看到的一样。由于 <code>divByGeneric</code> 没有指定返回的类型，我们要么指定一个，要么让解释器从环境中推导得到。如果我们不指定返回类型， <code>ghic</code> 推荐得到 <code>IO</code> monad。在第三和第四个例子中你可以看出来。在第四个例子中你可以看到， <code>IO</code> monad将 <code>fail</code> 转化成了一个异常。</p><p><code>mtl</code> 包中的 <code>Control.Monad.Error</code> 模块也将 <code>Either String</code> 变成了一个monad。如果你使用 <code>Either</code> ，你可以得到保存了错误信息的纯的结果，像这样子：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>ghci<span class="token operator">&gt;</span> :m +Control.Monad.Error
ghci<span class="token operator">&gt;</span> <span class="token punctuation">(</span>divByGeneric <span class="token number">50</span> <span class="token punctuation">[</span><span class="token number">1,2</span>,5,8,10<span class="token punctuation">]</span><span class="token punctuation">)</span>::<span class="token punctuation">(</span>Integral a <span class="token operator">=</span><span class="token operator">&gt;</span> Either String <span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">)</span>
Loading package mtl-1.1.0.0 <span class="token punctuation">..</span>. linking <span class="token punctuation">..</span>. done.
Right <span class="token punctuation">[</span><span class="token number">50,25</span>,10,6,5<span class="token punctuation">]</span>
ghci<span class="token operator">&gt;</span> <span class="token punctuation">(</span>divByGeneric <span class="token number">50</span> <span class="token punctuation">[</span><span class="token number">1,2</span>,0,8,10<span class="token punctuation">]</span><span class="token punctuation">)</span>::<span class="token punctuation">(</span>Integral a <span class="token operator">=</span><span class="token operator">&gt;</span> Either String <span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">)</span>
Left <span class="token string">&quot;division by zero in divByGeneric&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这让我们进入到下一个话题的讨论：使用 <code>Either</code> 返回错误信息。</p><h3 id="使用either" tabindex="-1"><a class="header-anchor" href="#使用either"><span>使用Either</span></a></h3><p><code>Either</code> 类型跟 <code>Maybe</code> 类型类似，除了一处关键的不同：对于错误或者成功（&quot; <code>Right</code> 类型&quot;），它都可以携带数据。尽管语言没有强加任何限制，按照惯例，一个返回 <code>Either</code> 的函数使用 <code>Left</code> 返回值来表示一个错误， <code>Right</code> 来表示成功。如果你觉得这样有助于记忆，你可以认为 <code>Right</code> 表式正确结果。我们可以改一下前面小节中关于 <code>Maybe</code> 时使用的 <code>divby2.hs</code> 的例子，让 <code>Either</code> 可以工作：</p><p>::: literalinclude /code/ch19/divby6.hs :::</p><p>这份代码跟 <code>Maybe</code> 的代码几乎是完全一样的；我们只是把每个 <code>Just</code> 用 <code>Right</code> 替换。<code>Left</code> 对应于 <code>Nothing</code> ，但是现在它可以携带一条信息。让我们在 <code>ghci</code> 里面运行一下：</p><blockquote><p>ghci&gt; divBy 50 [1,2,5,8,10] Right [50,25,10,6,5] ghci&gt; divBy 50 [1,2,0,8,10] Left &quot;divBy: division by 0&quot;</p></blockquote><h4 id="为错误定制数据类型" tabindex="-1"><a class="header-anchor" href="#为错误定制数据类型"><span>为错误定制数据类型</span></a></h4><p>尽管用 <code>String</code> 类型来表示错误的原因对今后很有好处，自定义的错误类型通常会更有帮助。使用自定义的错误类型我们可以知道到底是出了什么问题，并且获知是什么动作引发的这个问题。例如，让我们假设，由于某些原因，不仅仅是除0，我们还不想除以10或者20。我们可以像这样子自定义一个错误类型：</p><p>::: literalinclude /code/ch19/divby7.hs :::</p><p>现在，在出现错误时，可以通过 <code>Left</code> 数据检查导致错误的准确原因。或者，可以简单的只是通过 <code>show</code> 打印出来。下面是这个函数的应用：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>ghci<span class="token operator">&gt;</span> divBy <span class="token number">50</span> <span class="token punctuation">[</span><span class="token number">1,2</span>,5,8<span class="token punctuation">]</span>
Right <span class="token punctuation">[</span><span class="token number">50,25</span>,10,6<span class="token punctuation">]</span>
ghci<span class="token operator">&gt;</span> divBy <span class="token number">50</span> <span class="token punctuation">[</span><span class="token number">1,2</span>,5,8,10<span class="token punctuation">]</span>
Left <span class="token punctuation">(</span>ForbiddenDenominator <span class="token number">10</span><span class="token punctuation">)</span>
ghci<span class="token operator">&gt;</span> divBy <span class="token number">50</span> <span class="token punctuation">[</span><span class="token number">1,2</span>,0,8,10<span class="token punctuation">]</span>
Left DivBy0
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>::: Warning warning</p><p>所有这些 <code>Either</code> 的例子都跟我们之前的 <code>Maybe</code> 一样，都会遇到失去惰性的问题。我们将在这一章的最后用一个练习题来解决这个问题。 :::</p><h4 id="monadic地使用either" tabindex="-1"><a class="header-anchor" href="#monadic地使用either"><span>Monadic地使用Either</span></a></h4>`,25),g=s("p",null,[n("回到 "),s("code",{class:"interpreted-text",role:"ref"},"Maybe Monad的用法"),n(" 这一节，我们向你展示了如何在一个monad中使用 "),s("code",null,"Maybe"),n(" 。 "),s("code",null,"Either"),n(" 也可以在monad中使用，但是可能会复杂一点。原因是 "),s("code",null,"fail"),n(" 是硬编码的只接受 "),s("code",null,"String"),n(" 作为失败代码，因此我们必须有一种方法将这样的字符串映射成我们的 "),s("code",null,"Left"),n(" 使用的类型。正如你前面所见， "),s("code",null,"Control.Monad.Error"),n(" 为 "),s("code",null,"Either String a"),n(" 提供了内置的支持，它没有涉及到将参数映射到 "),s("code",null,"fail"),n(" 。这里我们可以将我们的例子修改为monadic风格使得 "),s("code",null,"Either"),n(" 可以工作：")],-1),y=a(`<p>::: literalinclude /code/ch19/divby8.hs :::</p><p>这里，我们需要打开 <code>FlexibleContexts</code> 语言扩展以提供 <code>divByGeneric</code> 的类型签名。 <code>divBy</code> 函数跟之前的工作方式完全一致。对于 <code>divByGeneric</code> ，我们将 <code>divByError</code> 做为 <code>Error</code> 类型类的成员，通过定义调用 <code>fail</code> 时的行为（ <code>strMsg</code> 函数）。我们还将 <code>Right</code> 转化成 <code>return</code> ，将 <code>Left</code> 转化成 <code>throwError</code> 进行泛化。</p><h2 id="异常" tabindex="-1"><a class="header-anchor" href="#异常"><span>异常</span></a></h2><p>许多语言中都有异常处理，包括Haskell。异常很有用，因为当发生故障时，它提供了一种简单的处理方法，即使故障离发生的地方沿着函数调用链走了几层。有了异常，不需要检查每个函数调用的返回值是否发生了错误，不需要注意去生成表示错误的返回值，像C程序员必须这么做。在Haskell中，由于有 monad 以及 <code>Either</code> 和 <code>Maybe</code> 类型，你通常可以在纯的代码中达到同样的效果而不需要使用异常和异常处理。</p><p>有些问题--尤其是涉及到IO调用--需要处理异常。在Haskell中，异常可能会在程序的任何地方抛出。然而，由于计算顺序是不确定的，异常只可以在 <code>IO</code> monad中捕获。Haskell异常处理不涉及像Python或者Java中那样的特殊语法。捕获和处理异常的技术是--真令人惊讶--函数。</p><h3 id="异常第一步" tabindex="-1"><a class="header-anchor" href="#异常第一步"><span>异常第一步</span></a></h3><p>在 <code>Control.Exception</code> 模块中，定义了各种跟异常相关的函数和类型。 <code>Exception</code> 类型是在那里定义的；所有的异常的类型都是 <code>Exception</code> 。还有用于捕获和处理异常的函数。让我们先看一看 <code>try</code> ，它的类型是 <code>IO a -&gt; IO (Either Exception a)</code> 。它将异常处理包装在 <code>IO</code> 中。如果有异常抛出，它会返回一个 <code>Left</code> 值表示异常；否则，返回原始结果到 <code>Right</code> 值。让我们在 <code>ghci</code> 中运行一下。我们首先触发一个未处理的异常，然后尝试捕获它。</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>ghci<span class="token operator">&gt;</span> :m Control.Exception
ghci<span class="token operator">&gt;</span> <span class="token builtin class-name">let</span> x <span class="token operator">=</span> <span class="token number">5</span> <span class="token variable"><span class="token variable">\`</span>div<span class="token variable">\`</span></span> <span class="token number">0</span>
ghci<span class="token operator">&gt;</span> <span class="token builtin class-name">let</span> y <span class="token operator">=</span> <span class="token number">5</span> <span class="token variable"><span class="token variable">\`</span>div<span class="token variable">\`</span></span> <span class="token number">1</span>
ghci<span class="token operator">&gt;</span> print x
*** Exception: divide by zero
ghci<span class="token operator">&gt;</span> print y
<span class="token number">5</span>
ghci<span class="token operator">&gt;</span> try <span class="token punctuation">(</span>print x<span class="token punctuation">)</span>
Left divide by zero
ghci<span class="token operator">&gt;</span> try <span class="token punctuation">(</span>print y<span class="token punctuation">)</span>
<span class="token number">5</span>
Right <span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意到在 <code>let</code> 语句中没有抛出异常。这是意料之中的，是因为惰性求值；除以零只有到打印 <code>x</code> 的值的时候才需要计算。还有，注意 <code>try (print y)</code> 有两行输出。第一行是由 <code>print</code> 产生的，它在终端上显示5。第二个是由 <code>ghci</code> 生成的，这个表示 <code>print y</code> 的返回值为 <code>()</code> 并且没有抛出异常。</p><h3 id="惰性和异常处理" tabindex="-1"><a class="header-anchor" href="#惰性和异常处理"><span>惰性和异常处理</span></a></h3><p>既然你知道了 <code>try</code> 是如何工作的，让我们试下另一个实验。让我们假设我们想捕获 <code>try</code> 的结果用于后续的计算，这样我们可以处理除的结果。我们大概会这么做：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>ghci<span class="token operator">&gt;</span> result <span class="token operator">&lt;</span>- try <span class="token punctuation">(</span>return x<span class="token punctuation">)</span>
Right *** Exception: divide by zero
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>这里发生了什么？让我们拆成一步一步看，先试下另一个例子：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>ghci<span class="token operator">&gt;</span> <span class="token builtin class-name">let</span> z <span class="token operator">=</span> undefined
ghci<span class="token operator">&gt;</span> try <span class="token punctuation">(</span>print z<span class="token punctuation">)</span>
Left Prelude.undefined
ghci<span class="token operator">&gt;</span> result <span class="token operator">&lt;</span>- try <span class="token punctuation">(</span>return z<span class="token punctuation">)</span>
Right *** Exception: Prelude.undefined
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>跟之前一样，将 <code>undefined</code> 赋值给 <code>z</code> 没什么问题。问题的关键，以及前面的迷惑，都在于惰性求值。准确地说，是在于 <code>return</code> ，它没有强制它的参数的执行；它只是将它包装了一下。这样， <code>try (return undefined)</code> 的结果应该是 <code>Right undefined</code> 。现在， <code>ghci</code> 想要将这个结果显示在终端上。它将运行到打印&quot;Right&quot;，但是 <code>undefined</code> 无法打印（或者说除以零的结果无法打印）。因此你看到了异常信息，它是来源于 <code>ghci</code> 的，而不是你的程序。</p><p>这是一个关键点。让我们想想为什么之前的例子可以工作，而这个不可以。之前，我们把 <code>print x</code> 放在了 <code>try</code> 里面。打印一些东西的值，固然是需要执行它的，因此，异常在正确的地方被检测到了。但是，仅仅是使用 <code>return</code> 并不会强制计算的执行。为了解决这个问题， <code>Control.Exception</code> 模块中定义了一个 <code>evaluate</code> 函数。它的行为跟 <code>return</code> 类似，但是会让参数立即执行。让我们试一下：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>ghci<span class="token operator">&gt;</span> <span class="token builtin class-name">let</span> z <span class="token operator">=</span> undefined
ghci<span class="token operator">&gt;</span> result <span class="token operator">&lt;</span>- try <span class="token punctuation">(</span>evaluate z<span class="token punctuation">)</span>
Left Prelude.undefined
ghci<span class="token operator">&gt;</span> result <span class="token operator">&lt;</span>- try <span class="token punctuation">(</span>evaluate x<span class="token punctuation">)</span>
Left divide by zero
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>看，这就是我们想要的答案。无论对于 <code>undefiined</code> 还是除以零的例子，都可以正常工作。</p><div class="hint-container tip"><p class="hint-container-title">Tip</p><p>记住：任何时候你想捕获纯的代码中抛出的异常，在你的异常处理函数中使用 <code>evaluate</code> 而不是 <code>return</code> 。</p></div><h3 id="使用handle" tabindex="-1"><a class="header-anchor" href="#使用handle"><span>使用handle</span></a></h3><p>通常，你可能希望如果一块代码中没有任何异常发生，就执行某个动作，否则执行不同的动作。对于像这种场合，有一个叫做 <code>handle</code> 的函数。这个函数的类型是 <code>(Exception -&gt; IO a) -&gt; IO a -&gt; IO a</code> 。即是说，它需要两个参数：前一个是一个函数，当执行后一个动作发生异常的时候它会被调用。下面是我们使用的一种方式：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>ghci<span class="token operator">&gt;</span> :m Control.Exception
ghci<span class="token operator">&gt;</span> <span class="token builtin class-name">let</span> x <span class="token operator">=</span> <span class="token number">5</span> <span class="token variable"><span class="token variable">\`</span>div<span class="token variable">\`</span></span> <span class="token number">0</span>
ghci<span class="token operator">&gt;</span> <span class="token builtin class-name">let</span> y <span class="token operator">=</span> <span class="token number">5</span> <span class="token variable"><span class="token variable">\`</span>div<span class="token variable">\`</span></span> <span class="token number">1</span>
ghci<span class="token operator">&gt;</span> handle <span class="token punctuation">(</span><span class="token punctuation">\\</span>_ -<span class="token operator">&gt;</span> putStrLn <span class="token string">&quot;Error calculating result&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>print x<span class="token punctuation">)</span>
Error calculating result
ghci<span class="token operator">&gt;</span> handle <span class="token punctuation">(</span><span class="token punctuation">\\</span>_ -<span class="token operator">&gt;</span> putStrLn <span class="token string">&quot;Error calculating result&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>print y<span class="token punctuation">)</span>
<span class="token number">5</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>像这样，如果计算中没有错误发生，我们可以打印一条好的信息。这当然要比除以零出错时程序崩溃要好。</p><h3 id="选择性地处理异常" tabindex="-1"><a class="header-anchor" href="#选择性地处理异常"><span>选择性地处理异常</span></a></h3><p>上面的例子的一个问题是，对于任何异常它都是打印 &quot;Error calculating result&quot;。可能会有些其它不是除零的异常。例如，显示输出时可能会发生错误，或者纯的代码中可能抛出一些其它的异常。</p><p><code>handleJust</code> 函数就是处理这种情况的。它让你指定一个测试来决定是否对给定的异常感兴趣。让我们看一下：</p><p>::: literalinclude /code/ch19/hj1.hs :::</p><p><code>cacheIt</code> 定义了一个函数，这个函数会决定我们对给定的异常是否感兴趣。如果是，它会返回 <code>Just</code> ，否则返回 <code>Nothing</code> 。还有， <code>Just</code> 中附带的值会被传到我们的处理函数中。现在我们可以很好地使用 <code>safePrint</code> 了：</p><blockquote><p>ghci&gt; :l hj1.hs [1 of 1] Compiling Main ( hj1.hs, interpreted ) Ok, modules loaded: Main. ghci&gt; let x = 5 [div]{.title-ref} 0 ghci&gt; let y = 5 [div]{.title-ref} 1 ghci&gt; safePrint x Caught error: divide by zero ghci&gt; safePrint y 5</p></blockquote><p><code>Control.Exception</code> 模块还提供了一些可以在 <code>handleJust</code> 中使用的函数，以便于我们将异常的范围缩小到我们所关心的类别。例如，有个函数 <code>arithExceptions</code> 类型是 <code>Exception -&gt; Maybe ArithException</code> 可以挑选出任意的 <code>ArithException</code> 异常，但是会忽略掉其它。我们可以像这样使用它：</p><p>::: literalinclude /code/ch19/hj2.hs :::</p><p>用这种方式，我们可以捕获所有 <code>ArithException</code> 类型的异常，但是仍然让其它的异常通过，不捕获也不修改。我们可以看到它是这样工作的：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>ghci<span class="token operator">&gt;</span> :l hj2.hs
<span class="token punctuation">[</span><span class="token number">1</span> of <span class="token number">1</span><span class="token punctuation">]</span> Compiling Main             <span class="token punctuation">(</span> hj2.hs, interpreted <span class="token punctuation">)</span>
Ok, modules loaded: Main.
ghci<span class="token operator">&gt;</span> <span class="token builtin class-name">let</span> x <span class="token operator">=</span> <span class="token number">5</span> <span class="token variable"><span class="token variable">\`</span>div<span class="token variable">\`</span></span> <span class="token number">0</span>
ghci<span class="token operator">&gt;</span> <span class="token builtin class-name">let</span> y <span class="token operator">=</span> <span class="token number">5</span> <span class="token variable"><span class="token variable">\`</span>div<span class="token variable">\`</span></span> <span class="token number">1</span>
ghci<span class="token operator">&gt;</span> safePrint x
Caught arithmetic error: divide by zero
ghci<span class="token operator">&gt;</span> safePrint y
<span class="token number">5</span>       
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中特别感兴趣的是，你大概注意到了 <code>ioErrors</code> 测试，这是跟一大类的I/O相关的异常。</p><h3 id="i-o异常" tabindex="-1"><a class="header-anchor" href="#i-o异常"><span>I/O异常</span></a></h3><p>大概在任何程序中异常最大的来源就是I/O。在处理外部世界的时候所有事情都可能出错：磁盘满了，网络断了，或者你期望文件里面有数据而文件却是空的。在Haskell中，I/O异常就跟其它的异常一样可以用 <code>Exception</code> 数据类型来表示。另一方面，由于有这么多类型的I/O异常，有一个特殊的模块-- <code>System.IO.Error</code> 专门用于处理它们。</p><p><code>System.IO.Error</code> 定义了两个函数： <code>catch</code> 和 <code>try</code> ，跟 <code>Control.Exception</code> 中的类似，它们都是用于处理异常的。然而，不像 <code>Control.Exception</code> 中的函数，这些函数只会捕获I/O错误，而不处理其它类型异常。在Haskell中，所有I/O错误有一个共同类型 <code>IOError</code> ，它的定义跟 <code>IOException</code> 是一样的。</p><p>::: Tip tip</p><p>当心你使用的哪个名字 因为 <code>System.IO.Error</code> 和 <code>Control.Exception</code> 定义了同样名字的函数，如果你将它们都导入你的程序，你将收到一个错误信息说引用的函数有歧义。你可以通过 <code>qualified</code> 引用其中一个或者另一个，或者将其中一个或者另一个的符号隐藏。</p><p>注意 <code>Prelude</code> 导出的是 <code>System.IO.Error</code> 中的 <code>catch</code> ，而不是 <code>ControlException</code> 中提供的。记住，前者只捕获I/O错误，而后者捕获所有的异常。换句话说，你要的几乎总是 <code>Control.Exception</code> 中的那个 <code>catch</code> ，而不是默认的那个。 :::</p>`,40),E={href:"http://rwh.readthedocs.org/en/latest/chp/7.html#handle",target:"_blank",rel:"noopener noreferrer"},x=s("code",null,"mainloop",-1),f=a('<p>::: literalinclude /code/ch19/toupper-impch20.hs :::</p><p>这里，我们使用 <code>System.IO.Error</code> 中的 <code>try</code> 来检测是否 <code>hGetLine</code> 抛出一个 <code>IOError</code> 。如果是，我们使用 <code>isEOFError</code> （在 <code>System.IO.Error</code> 中定义）来看是否抛出异常表明我们到达了文件末尾。如果是的，我们退出循环。如果是其它的异常，我们调用 <code>ioError</code> 重新抛出它。</p><p>有许多的这种测试和方法可以从 <code>System.IO.Error</code> 中定义的 <code>IOError</code> 中提取信息。我们推荐你在需要的时候去查一下库的参考页。</p><h3 id="抛出异常" tabindex="-1"><a class="header-anchor" href="#抛出异常"><span>抛出异常</span></a></h3><p>到现在为止，我们已经详细地讨论了异常处理。还有另外一个困惑：抛出异常。到目前为止这一章我们所接触到的例子中，都是由Haskell为你抛出异常的。然后你也可以自己抛出任何异常。我们会告诉你怎么做。</p><p>你将会注意到这些函数大部分似乎返回一个类型为 <code>a</code> 或者 <code>IO a</code> 的值。这意味着这个函数似乎可以返回任意类型的值。事实上，由于这些函数会抛出异常，一般情况下它们决不&quot;返回&quot;任何东西。这些返回值让你可以在各种各样的上下文中使用这些函数，不同的上下文需要不同的类型。</p><p>让我们使用函数 <code>Control.Exception</code> 来开始我们的抛出异常的教程。最通用的函数是 <code>throw</code> ，它的类型是 <code>Exception -&gt; a</code> 。这个函数可以抛出任何的 <code>Exception</code> ，并且可以用于纯的上下文中。还有一个类型为 <code>Exception -&gt; IO a</code> 的函数 <code>throwIO</code> 在 <code>IO</code> monad中抛出异常。这两个函数都需要一个 <code>Exception</code> 用于抛出。你可以手工制作一个 <code>Exception</code> ，或者重用之前创建的 <code>Exception</code> 。</p><p>还有一个函数 <code>ioError</code> ，它在 <code>Control.Exception</code> 和 <code>System.IO.Error</code> 中定义都是相同的，它的类型是 <code>IOError -&gt; IO a</code> 。当你想生成任意的I/O相关的异常的时候可以使用它。</p><h3 id="动态异常" tabindex="-1"><a class="header-anchor" href="#动态异常"><span>动态异常</span></a></h3><p>这需要使用两个很不常用的Haskell模块: <code>Data.Dynamic</code> 和 <code>Data.Typeable</code> 。我们不会讲太多关于这些模块，但是告诉你当你需要制作自己的动态异常类型时，可以使用这些工具。</p>',10),q=s("code",null,"SqlError",-1),B=a(`<p>::: literalinclude /code/ch19/dynexc.hs :::</p><p>通过继承 <code>Typeable</code> 类型类，我们使这个类型可用于动态的类型编程。为了让GHC自动生成一个 <code>Typeable</code> 实例，我们要开启 <code>DeriveDataTypeable</code> 语言扩展。</p><p>现在，让我们定义一个 <code>catchSql</code> 和一个 <code>handleSql</code> 用于捕猎一个 <code>SqlError</code> 异常。注意常规的 <code>catch</code> 和 <code>handle</code> 函数无法捕猎我们的 <code>SqlError</code> ，因为它不是 <code>Exception</code> 类型的。</p><p>::: literalinclude /code/ch19/dynexc1.hs :::</p><p>[译注：原文中文件名是dynexc.hs，但是跟前面的冲突了，所以这里重命名为dynexc1.hs]</p><p>这些函数仅仅是在 <code>catchDyn</code> 外面包了很薄的一层，类型是 <code>Typeable exception =&gt; IO a -&gt; (exception -&gt; IO a) -&gt; IO a</code> 。这里我们简单地限定了它的类型使得它只捕猎SQL异常。</p><p>正常地，当一个异常抛出，但是没有在任何地方被捕获，程序会崩溃并显示异常到标准错误输出。然而，对于动态异常，系统不会知道该如何显示它，因此你将仅仅会看到一个的&quot;unknown exception&quot;消息，这可能没太大帮助。我们可以提供一个辅助函数，这样应用可以写成，比如说 <code>main = handleSqlError $ do ...</code> ，使抛出的异常可以显示。下面是如何写 <code>handleSqlError</code> ：</p><p>::: literalinclude /code/ch19/dynexc2.hs :::</p><p>[译注：原文中是dynexc.hs，这里重命名过文件]</p><p>最后，让我们给出一个如何抛出 <code>SqlError</code> 异常的例子。下面的函数做的就是这件事：</p><p>::: literalinclude /code/ch19/dynexc3.hs :::</p><p>::: Tip tip</p><p>提醒一下， <code>evaluate</code> 跟 <code>return</code> 类似但是会立即计算它的参数。 :::</p><p>这样我们的动态异常的支持就完成了。代码很多，你大概不需要这么多代码，但是我们想要给你一个动态异常自身的例子以及和它相关的工具。事实上，这里的例子几乎就反映在HDBC库中。让我们在 <code>ghci</code> 中试一下：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>ghci<span class="token operator">&gt;</span> :l dynexc.hs
<span class="token punctuation">[</span><span class="token number">1</span> of <span class="token number">1</span><span class="token punctuation">]</span> Compiling Main             <span class="token punctuation">(</span> dynexc.hs, interpreted <span class="token punctuation">)</span>
Ok, modules loaded: Main.
ghci<span class="token operator">&gt;</span> throwSqlErrorIO <span class="token string">&quot;state&quot;</span> <span class="token number">5</span> <span class="token string">&quot;error message&quot;</span>
*** Exception: <span class="token punctuation">(</span>unknown<span class="token punctuation">)</span>
ghci<span class="token operator">&gt;</span> handleSqlError $ throwSqlErrorIO <span class="token string">&quot;state&quot;</span> <span class="token number">5</span> <span class="token string">&quot;error message&quot;</span>
*** Exception: user error <span class="token punctuation">(</span>SQL error: SqlError <span class="token punctuation">{</span>seState <span class="token operator">=</span> <span class="token string">&quot;state&quot;</span>, seNativeError <span class="token operator">=</span> <span class="token number">5</span>, seErrorMsg <span class="token operator">=</span> <span class="token string">&quot;error message&quot;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
ghci<span class="token operator">&gt;</span> handleSqlError $ fail <span class="token string">&quot;other error&quot;</span>
*** Exception: user error <span class="token punctuation">(</span>other error<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里你可以看出， <code>ghci</code> 自己并不知道如何显示SQL错误。但是，你可以看到 <code>handleSqlError</code> 帮助做了这些，不过没有捕获其它的错误。最后让我们试一个自定义的handler：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>ghci<span class="token operator">&gt;</span> handleSql <span class="token punctuation">(</span>fail <span class="token builtin class-name">.</span> seErrorMsg<span class="token punctuation">)</span> <span class="token punctuation">(</span>throwSqlErrorIO <span class="token string">&quot;state&quot;</span> <span class="token number">5</span> <span class="token string">&quot;my error&quot;</span><span class="token punctuation">)</span>
*** Exception: user error <span class="token punctuation">(</span>my error<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>这里，我们自定义了一个错误处理抛出一个新的异常，构成 <code>SqlError</code> 中的 <code>seErrorMsg</code> 域。你可以看到它是按预想中那样工作的。</p><h2 id="练习" tabindex="-1"><a class="header-anchor" href="#练习"><span>练习</span></a></h2><ol><li>将 <code>Either</code> 修改成 <code>Maybe</code> 例子中的那种风格，使它保存惰性。</li></ol><h2 id="monad中的错误处理" tabindex="-1"><a class="header-anchor" href="#monad中的错误处理"><span>monad中的错误处理</span></a></h2><p>因为我们必须捕获 <code>IO</code> monad 中的异常，如果我们在一个 monad 中或者在 monad 的转化栈中使用它们，我们将跳出到 <code>IO</code> monad。这几乎肯定不是我们想要的。</p>`,22),I={href:"http://rwh.readthedocs.org/en/latest/chp/18.html#id9",target:"_blank",rel:"noopener noreferrer"},M=s("code",null,"MaybeT",-1),O=s("code",null,"ErrorT",-1),_=s("code",null,"Control.Monad.Error",-1),S=a(`<p><code>ErrorT</code> 变换器使我们可以向monad中添加异常，但是它使用了特殊的方法，跟 <code>Control.Exception</code> 模块中提供的不一样。它提供给我们一些有趣的能力。</p><ul><li>如果我们继续用 <code>ErrorT</code> 接口，在这个monad中我们可以抛出和捕获异常。</li><li>根据其它monad变换器的命名规范，这个执行函数的名字是 <code>runErrorT</code> 。当它遇到 <code>runErrorT</code> 之后，未被捕获的 <code>ErrorT</code> 异常将停止向上传递。我们不会被踢到 <code>IO</code> monad中。</li><li>我们可以控制我们的异常的类型。</li></ul><p>::: Warning warning</p><p>不要把ErrorT跟普通异常混淆 如果我们在 <code>ErrorT</code> 内面使用 <code>Control.Exception</code> 中的 <code>throw</code> 函数，我们仍然会弹出到 <code>IO</code> monad。 :::</p><p>正如其它的 <code>mtl</code> monad一样， <code>ErrorT</code> 提供的接口是由一个类型类定义的。</p><p>::: literalinclude /code/ch19/MonadError.hs :::</p><p>类型变量 <code>e</code> 代表我们想要使用的错误类型。不管我们的错误类型是什么，我们必须将它做成 <code>Error</code> 类型类的实例。</p><p>::: literalinclude /code/ch19/MonadError1.hs :::</p><p><code>ErrorT</code> 实现 <code>fail</code> 时会用到 <code>strMsg</code> 函数。它将 <code>strMsg</code> 作为一个异常抛出，将自己接收到的字符串参数传递给这个异常。对于 <code>noMsg</code> ，它是用于提供 <code>MonadPlus</code> 类型类中的 <code>mzero</code> 的实现。</p><p>为了支持 <code>strMsg</code> 和 <code>noMsg</code> 函数，我们的 <code>ParseError</code> 类型会有一个 <code>Chatty</code> 构造器。这个将用作构造器如果，比如说，有人在我们的monad中调用 <code>fail</code> 。</p><p>我们需要知道的最后一块是关于执行函数 <code>runErrorT</code> 的类型。</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>ghci<span class="token operator">&gt;</span> :t runErrorT
runErrorT :: ErrorT e m a -<span class="token operator">&gt;</span> m <span class="token punctuation">(</span>Either e a<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="一个小的解析构架" tabindex="-1"><a class="header-anchor" href="#一个小的解析构架"><span>一个小的解析构架</span></a></h3><p>为了说明 <code>ErrorT</code> 的使用，让我们开发一个类似于Parsec的解析库的基本的骨架。</p><div class="language-haskell line-numbers-mode" data-ext="haskell" data-title="haskell"><pre class="language-haskell"><code><span class="token comment">-- file: ch19/ParseInt.hs</span>
<span class="token comment">{-# LANGUAGE GeneralizedNewtypeDeriving #-}</span>

<span class="token import-statement"><span class="token keyword">import</span> Control<span class="token punctuation">.</span>Monad<span class="token punctuation">.</span>Error</span>
<span class="token import-statement"><span class="token keyword">import</span> Control<span class="token punctuation">.</span>Monad<span class="token punctuation">.</span>State</span>
<span class="token import-statement"><span class="token keyword">import</span> <span class="token keyword">qualified</span> Data<span class="token punctuation">.</span>ByteString<span class="token punctuation">.</span>Char8 <span class="token keyword">as</span> B</span>

<span class="token keyword">data</span> <span class="token constant">ParseError</span> <span class="token operator">=</span> <span class="token constant">NumericOverflow</span>
            <span class="token operator">|</span> <span class="token constant">EndOfInput</span>
            <span class="token operator">|</span> <span class="token constant">Chatty</span> <span class="token constant">String</span>
              <span class="token keyword">deriving</span> <span class="token punctuation">(</span><span class="token constant">Eq</span><span class="token punctuation">,</span> <span class="token constant">Ord</span><span class="token punctuation">,</span> <span class="token constant">Show</span><span class="token punctuation">)</span>

<span class="token keyword">instance</span> <span class="token constant">Error</span> <span class="token constant">ParseError</span> <span class="token keyword">where</span>
    <span class="token hvariable">noMsg</span>  <span class="token operator">=</span> <span class="token constant">Chatty</span> <span class="token string">&quot;oh noes!&quot;</span>
    <span class="token hvariable">strMsg</span> <span class="token operator">=</span> <span class="token constant">Chatty</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对于我们解析器的状态，我们会创建一个非常小的monad变换器栈。一个 <code>State</code> monad包含了需要解析的 <code>ByteString</code> ，在栈的顶部是 <code>ErrorT</code> 用于提供错误处理。</p><div class="language-haskell line-numbers-mode" data-ext="haskell" data-title="haskell"><pre class="language-haskell"><code><span class="token comment">-- file: ch19/ParseInt.hs</span>
<span class="token keyword">newtype</span> <span class="token constant">Parser</span> <span class="token hvariable">a</span> <span class="token operator">=</span> <span class="token constant">P</span> <span class="token punctuation">{</span>
      <span class="token hvariable">runP</span> <span class="token operator">::</span> <span class="token constant">ErrorT</span> <span class="token constant">ParseError</span> <span class="token punctuation">(</span><span class="token constant">State</span> <span class="token constant">B<span class="token punctuation">.</span>ByteString</span><span class="token punctuation">)</span> <span class="token hvariable">a</span>
    <span class="token punctuation">}</span> <span class="token keyword">deriving</span> <span class="token punctuation">(</span><span class="token constant">Monad</span><span class="token punctuation">,</span> <span class="token constant">MonadError</span> <span class="token constant">ParseError</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>和平常一样，我们将我们的monad栈包装在一个 <code>newtype</code> 中。这样做没有任意性能损耗，但是增加了类型安全。我们故意避免继承 <code>MonadState B.ByteString</code> 的实例。这意味着 <code>Parser</code> monad用户将不能够使用 <code>get</code> 或者 <code>put</code> 去查询或者修改解析器的状态。这样的结果是，我们强制自己去做一些手动提升的事情来获取在我们栈中的 <code>State</code> monad。</p><div class="language-haskell line-numbers-mode" data-ext="haskell" data-title="haskell"><pre class="language-haskell"><code><span class="token comment">-- file: ch19/ParseInt.hs</span>
<span class="token hvariable">liftP</span> <span class="token operator">::</span> <span class="token constant">State</span> <span class="token constant">B<span class="token punctuation">.</span>ByteString</span> <span class="token hvariable">a</span> <span class="token operator">-&gt;</span> <span class="token constant">Parser</span> <span class="token hvariable">a</span>
<span class="token hvariable">liftP</span> <span class="token hvariable">m</span> <span class="token operator">=</span> <span class="token constant">P</span> <span class="token punctuation">(</span><span class="token hvariable">lift</span> <span class="token hvariable">m</span><span class="token punctuation">)</span>

<span class="token hvariable">satisfy</span> <span class="token operator">::</span> <span class="token punctuation">(</span><span class="token constant">Char</span> <span class="token operator">-&gt;</span> <span class="token constant">Bool</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token constant">Parser</span> <span class="token constant">Char</span>
<span class="token hvariable">satisfy</span> <span class="token hvariable">p</span> <span class="token operator">=</span> <span class="token keyword">do</span>
  <span class="token hvariable">s</span> <span class="token operator">&lt;-</span> <span class="token hvariable">liftP</span> <span class="token hvariable">get</span>
  <span class="token keyword">case</span> <span class="token hvariable">B<span class="token punctuation">.</span>uncons</span> <span class="token hvariable">s</span> <span class="token keyword">of</span>
    <span class="token constant">Nothing</span>         <span class="token operator">-&gt;</span> <span class="token hvariable">throwError</span> <span class="token constant">EndOfInput</span>
    <span class="token constant">Just</span> <span class="token punctuation">(</span><span class="token hvariable">c</span><span class="token punctuation">,</span> <span class="token hvariable">s&#39;</span><span class="token punctuation">)</span>
        <span class="token operator">|</span> <span class="token hvariable">p</span> <span class="token hvariable">c</span>       <span class="token operator">-&gt;</span> <span class="token hvariable">liftP</span> <span class="token punctuation">(</span><span class="token hvariable">put</span> <span class="token hvariable">s&#39;</span><span class="token punctuation">)</span> <span class="token operator">&gt;&gt;</span> <span class="token builtin">return</span> <span class="token hvariable">c</span>
        <span class="token operator">|</span> <span class="token builtin">otherwise</span> <span class="token operator">-&gt;</span> <span class="token hvariable">throwError</span> <span class="token punctuation">(</span><span class="token constant">Chatty</span> <span class="token string">&quot;satisfy failed&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>catchError</code> 函数对于我们的任何非常有用，远胜于简单的错误处理。例如，我们可以很轻松地解除一个异常，将它变成更友好的形式。</p><div class="language-haskell line-numbers-mode" data-ext="haskell" data-title="haskell"><pre class="language-haskell"><code><span class="token comment">-- file: ch19/ParseInt.hs</span>
<span class="token hvariable">optional</span> <span class="token operator">::</span> <span class="token constant">Parser</span> <span class="token hvariable">a</span> <span class="token operator">-&gt;</span> <span class="token constant">Parser</span> <span class="token punctuation">(</span><span class="token constant">Maybe</span> <span class="token hvariable">a</span><span class="token punctuation">)</span>
<span class="token hvariable">optional</span> <span class="token hvariable">p</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token constant">Just</span> <span class="token operator">\`liftM\`</span> <span class="token hvariable">p</span><span class="token punctuation">)</span> <span class="token operator">\`catchError\`</span> <span class="token operator">\\</span><span class="token hvariable">_</span> <span class="token operator">-&gt;</span> <span class="token builtin">return</span> <span class="token constant">Nothing</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们的执行函数仅仅是将各层连接起来，将结果重新组织成更整洁的形式。</p><div class="language-haskell line-numbers-mode" data-ext="haskell" data-title="haskell"><pre class="language-haskell"><code><span class="token comment">-- file: ch19/ParseInt.hs</span>
<span class="token hvariable">runParser</span> <span class="token operator">::</span> <span class="token constant">Parser</span> <span class="token hvariable">a</span> <span class="token operator">-&gt;</span> <span class="token constant">B<span class="token punctuation">.</span>ByteString</span>
          <span class="token operator">-&gt;</span> <span class="token constant">Either</span> <span class="token constant">ParseError</span> <span class="token punctuation">(</span><span class="token hvariable">a</span><span class="token punctuation">,</span> <span class="token constant">B<span class="token punctuation">.</span>ByteString</span><span class="token punctuation">)</span>
<span class="token hvariable">runParser</span> <span class="token hvariable">p</span> <span class="token hvariable">bs</span> <span class="token operator">=</span> <span class="token keyword">case</span> <span class="token hvariable">runState</span> <span class="token punctuation">(</span><span class="token hvariable">runErrorT</span> <span class="token punctuation">(</span><span class="token hvariable">runP</span> <span class="token hvariable">p</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token hvariable">bs</span> <span class="token keyword">of</span>
                   <span class="token punctuation">(</span><span class="token constant">Left</span> <span class="token hvariable">err</span><span class="token punctuation">,</span> <span class="token hvariable">_</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token constant">Left</span> <span class="token hvariable">err</span>
                   <span class="token punctuation">(</span><span class="token constant">Right</span> <span class="token hvariable">r</span><span class="token punctuation">,</span> <span class="token hvariable">bs</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token constant">Right</span> <span class="token punctuation">(</span><span class="token hvariable">r</span><span class="token punctuation">,</span> <span class="token hvariable">bs</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果我们将它加载到 <code>ghci</code> 中，我们可以对它进行了一些测试。</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>ghci<span class="token operator">&gt;</span> :m +Data.Char
ghci<span class="token operator">&gt;</span> <span class="token builtin class-name">let</span> p <span class="token operator">=</span> satisfy isDigit
Loading package array-0.1.0.0 <span class="token punctuation">..</span>. linking <span class="token punctuation">..</span>. done.
Loading package bytestring-0.9.0.1 <span class="token punctuation">..</span>. linking <span class="token punctuation">..</span>. done.
Loading package mtl-1.1.0.0 <span class="token punctuation">..</span>. linking <span class="token punctuation">..</span>. done.
ghci<span class="token operator">&gt;</span> runParser p <span class="token punctuation">(</span>B.pack <span class="token string">&quot;x&quot;</span><span class="token punctuation">)</span>
Left <span class="token punctuation">(</span>Chatty <span class="token string">&quot;satisfy failed&quot;</span><span class="token punctuation">)</span>
ghci<span class="token operator">&gt;</span> runParser p <span class="token punctuation">(</span>B.pack <span class="token string">&quot;9abc&quot;</span><span class="token punctuation">)</span>
Right <span class="token punctuation">(</span><span class="token string">&#39;9&#39;</span>,<span class="token string">&quot;abc&quot;</span><span class="token punctuation">)</span>
ghci<span class="token operator">&gt;</span> runParser <span class="token punctuation">(</span>optional p<span class="token punctuation">)</span> <span class="token punctuation">(</span>B.pack <span class="token string">&quot;x&quot;</span><span class="token punctuation">)</span>
Right <span class="token punctuation">(</span>Nothing,<span class="token string">&quot;x&quot;</span><span class="token punctuation">)</span>
ghci<span class="token operator">&gt;</span> runParser <span class="token punctuation">(</span>optional p<span class="token punctuation">)</span> <span class="token punctuation">(</span>B.pack <span class="token string">&quot;9a&quot;</span><span class="token punctuation">)</span>
Right <span class="token punctuation">(</span>Just <span class="token string">&#39;9&#39;</span>,<span class="token string">&quot;a&quot;</span><span class="token punctuation">)</span>        
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="练习-1" tabindex="-1"><a class="header-anchor" href="#练习-1"><span>练习</span></a></h3><ol><li>写一个 <code>many</code> 解析器，类型是 <code>Parser a -&gt; Parser [a]</code> 。它应该执行解析直到失败。</li><li>使用 <code>many</code> 写一个 <code>int</code> 解析器，类型是 <code>Parser Int</code> 。它应该既能接受负数也能接受正数。</li><li>修改你们 <code>int</code> 解析器，如果在解析时检测到了一个数值溢出，抛出一个 <code>NumericOverflow</code> 异常。</li></ol><p><strong>注</strong></p>`,28);function w(P,C){const t=o("ExternalLinkIcon"),p=o("RouteLink");return l(),i("div",null,[u,s("p",null,[n("回到 "),k,n(" 这一节，我们有一个叫做 "),h,n(" 的示例程序。这个例子没有保存惰性，而是返回一个类型为 "),v,n(" 的值。用monadic风格也可以表达同样的算法。更多信息和monad相关背景，参考 "),s("a",b,[n("第14章Monads"),e(t)]),n(" 。这是我们新的monadic风格的算法：")]),m,g,y,s("p",null,[n("让我们看一下对我们有益的一个在I/O系统中使用异常的方法。在 "),s("a",E,[n("使用文件和句柄"),e(t)]),n(' 这一节里，我们展示了一个使用命令式风格从文件中一行一行的读取的程序。尽管我们后面也示范过更简洁的，更"Haskelly"的方式解决那个问题，让我们在这里重新审视这个例子。在 '),x,n(" 函数中，在读一行之前，我们必须明确地测试我们的输入文件是否结束。这次，我们可以检查尝试读一行是否会导致一个EOF错误，像这样子：")]),f,s("p",null,[n("在 "),e(p,{to:"/%E5%AD%A6%E4%B9%A0/Haskell%E4%B8%AD%E6%96%87%E6%96%87%E6%A1%A3/%E7%AC%AC%E4%BA%8C%E5%8D%81%E4%B8%80%E7%AB%A0%20%E4%BD%BF%E7%94%A8%E6%95%B0%E6%8D%AE%E5%BA%93%20http:/book.realworldhaskell.org/read/using-databases.html"},{default:r(()=>[n("第二十一章 使用数据库 http://book.realworldhaskell.org/read/using-databases.html")]),_:1}),n(" 中，你会看到HDBC数据库库使用动态异常来表示SQL数据库返回给应用的错误。数据库引擎返回的错误通常有三个组件：一个表示错误码的整数，一个状态，以及一条人类可读的错误消息。在这一章中我们会创建我们自己的HDBC "),q,n(" 实现。让我们从错误自身的数据结构表示开始：")]),B,s("p",null,[n("在 "),s("a",I,[n("构建以理解Monad变换器"),e(t)]),n(" 中我们定义了一个 "),M,n(" 的变换，但是它更像是一个有助于理解的东西，而不是编程的工具。幸运的是，已经有一个专门的--也更有用的--monad变换： "),O,n(" ，它是定义在 "),_,n(" 模块中的。")]),S])}const L=c(d,[["render",w],["__file","19.html.vue"]]),A=JSON.parse('{"path":"/%E5%AD%A6%E4%B9%A0/Haskell%E4%B8%AD%E6%96%87%E6%96%87%E6%A1%A3/19.html","title":"第 19 章： 错误处理","lang":"zh-CN","frontmatter":{"description":"第 19 章： 错误处理 无论使用哪门语言，错误处理都是程序员最重要--也是最容易忽视--的话题之一。在Haskell中，你会发现有两类主流的错误处理：\\"纯\\"的错误处理和异常。 当我们说\\"纯\\"的错误处理，我们是指算法不依赖任何IO Monad。我们通常会利用Haskell富于表现力的数据类型系统来实现这一类错误处理。Haskell也支持异常。由于惰性求...","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/%E5%AD%A6%E4%B9%A0/Haskell%E4%B8%AD%E6%96%87%E6%96%87%E6%A1%A3/19.html"}],["meta",{"property":"og:site_name","content":"博客演示"}],["meta",{"property":"og:title","content":"第 19 章： 错误处理"}],["meta",{"property":"og:description","content":"第 19 章： 错误处理 无论使用哪门语言，错误处理都是程序员最重要--也是最容易忽视--的话题之一。在Haskell中，你会发现有两类主流的错误处理：\\"纯\\"的错误处理和异常。 当我们说\\"纯\\"的错误处理，我们是指算法不依赖任何IO Monad。我们通常会利用Haskell富于表现力的数据类型系统来实现这一类错误处理。Haskell也支持异常。由于惰性求..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-02-25T04:39:03.000Z"}],["meta",{"property":"article:author","content":"hahg"}],["meta",{"property":"article:modified_time","content":"2024-02-25T04:39:03.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"第 19 章： 错误处理\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-02-25T04:39:03.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"hahg\\"}]}"]]},"headers":[{"level":2,"title":"使用数据类型进行错误处理","slug":"使用数据类型进行错误处理","link":"#使用数据类型进行错误处理","children":[{"level":3,"title":"使用Maybe","slug":"使用maybe","link":"#使用maybe","children":[]},{"level":3,"title":"使用Either","slug":"使用either","link":"#使用either","children":[]}]},{"level":2,"title":"异常","slug":"异常","link":"#异常","children":[{"level":3,"title":"异常第一步","slug":"异常第一步","link":"#异常第一步","children":[]},{"level":3,"title":"惰性和异常处理","slug":"惰性和异常处理","link":"#惰性和异常处理","children":[]},{"level":3,"title":"使用handle","slug":"使用handle","link":"#使用handle","children":[]},{"level":3,"title":"选择性地处理异常","slug":"选择性地处理异常","link":"#选择性地处理异常","children":[]},{"level":3,"title":"I/O异常","slug":"i-o异常","link":"#i-o异常","children":[]},{"level":3,"title":"抛出异常","slug":"抛出异常","link":"#抛出异常","children":[]},{"level":3,"title":"动态异常","slug":"动态异常","link":"#动态异常","children":[]}]},{"level":2,"title":"练习","slug":"练习","link":"#练习","children":[]},{"level":2,"title":"monad中的错误处理","slug":"monad中的错误处理","link":"#monad中的错误处理","children":[{"level":3,"title":"一个小的解析构架","slug":"一个小的解析构架","link":"#一个小的解析构架","children":[]},{"level":3,"title":"练习","slug":"练习-1","link":"#练习-1","children":[]}]}],"git":{"createdTime":1708835943000,"updatedTime":1708835943000,"contributors":[{"name":"hahg2000","email":"61403802+hahg2000@users.noreply.github.com","commits":1}]},"readingTime":{"minutes":26.35,"words":7906},"filePathRelative":"学习/Haskell中文文档/19.md","localizedDate":"2024年2月25日","excerpt":"\\n<p>无论使用哪门语言，错误处理都是程序员最重要--也是最容易忽视--的话题之一。在Haskell中，你会发现有两类主流的错误处理：\\"纯\\"的错误处理和异常。</p>\\n<p>当我们说\\"纯\\"的错误处理，我们是指算法不依赖任何IO Monad。我们通常会利用Haskell富于表现力的数据类型系统来实现这一类错误处理。Haskell也支持异常。由于惰性求值复杂性，Haskell中任何地方都可能抛出异常，但是只会在IO monad中被捕获。在这一章中，这两类错误处理我们都会考虑。</p>\\n<h2>使用数据类型进行错误处理</h2>\\n<p>让我们从一个非常简单的函数来开始我们关于错误处理的讨论。假设我们希望对一系列的数字执行除法运算。分子是常数，但是分母是变化的。可能我们会写出这样一个函数：</p>","autoDesc":true}');export{L as comp,A as data};
