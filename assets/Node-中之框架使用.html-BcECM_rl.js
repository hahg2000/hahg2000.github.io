import{_ as p}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as o,o as c,c as l,a as n,b as s,d as t,f as e}from"./app-Chw2KLnS.js";const i={},u=e(`<h1 id="node-中之框架使用" tabindex="-1"><a class="header-anchor" href="#node-中之框架使用"><span>Node-中之框架使用</span></a></h1><h2 id="一、express" tabindex="-1"><a class="header-anchor" href="#一、express"><span>一、Express</span></a></h2><p>原生的 http 在某些方面表现不足以应对我们的开发需求，所以我们就需要使用框架来加快我们的开发效率。</p><p>在 Node 中，有很多的 Web 开发框架，这里学习 express 为主。</p><h3 id="_1-1-安装使用" tabindex="-1"><a class="header-anchor" href="#_1-1-安装使用"><span>1.1 安装使用</span></a></h3><ol><li>创建一个新文件夹</li><li>在文件夹目录的命令行中，创建 package.json 文件。</li><li>然后执行 <code>npm install express --save</code> 命令。</li></ol><h3 id="_1-2-入门" tabindex="-1"><a class="header-anchor" href="#_1-2-入门"><span>1.2 入门</span></a></h3><ol><li>先创建一个 app.js ，作为当前项目的主入口。我们需要在该文件里开启服务器。</li><li>导入 express 模块。 <code>var express = require(&#39;express&#39;)</code></li><li>创建服务器应用程序。这里变量名从原来的 server 改为了 app。 现在为 <code>var app = express()</code> 原来为 <code>var server = http.createServer()</code></li><li>开启监听端口操作。 <code>app.listen(3000, ()=&gt;{ console.log(&#39;app is running...&#39;)})</code></li><li>判断请求。直接使用 <code>app.get( &#39;请求名&#39;, function(){} )</code> 即可，不需要自己使用 if 判断。</li></ol><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>app<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;/&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">request<span class="token punctuation">,</span> response</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  response<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">&#39;这里是主页！&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

app<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;/test&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">request<span class="token punctuation">,</span> response</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  response<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">&#39;这里是测试页面！&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_1-3-公开指定目录" tabindex="-1"><a class="header-anchor" href="#_1-3-公开指定目录"><span>1.3 公开指定目录</span></a></h3><p>公开指定目录调用一个 API 即可。</p><ul><li><code>app.use( &#39;请求路径&#39;, express.static(&#39;需要开放的目录&#39;) )</code></li><li>例如：<code>app.use(&#39;/public/&#39;, express.static(&#39;./public/&#39;))</code>，访问时输入的网址：<code>http://127.0.0.1:3000/public/a.js</code></li><li>如果不想每次访问 public 文件夹时都加上 “ /public ”，则可以直接省略第一个参数： <code>app.use( express.static(&#39;需要开放的目录&#39;) )</code>。</li><li>例如：<code>app.use(express.static(&#39;./public/&#39;))</code>，每次只需要访问 <code>http://127.0.0.1:3000/a.js</code> 即可。</li><li>这里使用 <code>path.join()</code> 方法来填写需要开放的目录，这里先不详写，详情请看 <strong>5.2 节</strong>。</li></ul><h3 id="_1-4-文件操作路径问题" tabindex="-1"><a class="header-anchor" href="#_1-4-文件操作路径问题"><span>1.4 文件操作路径问题</span></a></h3><p>对于填写文件路径的时候会下面几种方式：</p><ul><li><p>如果文件在同级目录上直接写文件名字： <code>&lt;img src=&quot;纱路.jpg&quot; alt=&quot;&quot;&gt;</code>。</p></li><li><p>这行是上面的完整写法，<strong>建议使用</strong>，“ ./ “ 代表当前目录： <code>&lt;img src=&quot;./纱路.jpg&quot; alt=&quot;&quot;&gt;</code></p></li><li><p>如果文件在当前目录的磁盘根目录上，以 &quot; / &quot; 开头（很少使用）：<code>&lt;img src=&quot;/纱路.jpg&quot; alt=&quot;&quot;&gt;</code></p><ul><li>如果当前文件运行在服务器上，则就代表请求网络路径的图片。</li></ul></li><li><p>如果文件在其他磁盘上，则以磁盘开头（很少使用）：<code>&lt;img src=&quot;c:/纱路.jpg&quot; alt=&quot;&quot;&gt;</code>。</p></li></ul><h3 id="_1-5-与art-template结合" tabindex="-1"><a class="header-anchor" href="#_1-5-与art-template结合"><span>1.5 与art-template结合</span></a></h3>`,16),r={href:"http://aui.github.io/art-template/zh-cn/express/index.html",target:"_blank",rel:"noopener noreferrer"},d=e(`<h4 id="_1-安装" tabindex="-1"><a class="header-anchor" href="#_1-安装"><span>（1）安装</span></a></h4><p>使用 art-template 当然需要安装他，还需要将一个连接 express 的模块。</p><div class="language-powershell line-numbers-mode" data-ext="powershell" data-title="powershell"><pre class="language-powershell"><code>npm install <span class="token operator">--</span>save art-template 
npm install <span class="token operator">--</span>save express-art-template
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-配置" tabindex="-1"><a class="header-anchor" href="#_2-配置"><span>（2）配置</span></a></h4><p>首先先配置使用 art-template。</p><p><code>app.engine(&#39;html&#39;, require(&#39;express-art-template&#39;))</code></p><ul><li>第一个参数：默认渲染文件名的后缀名。可以为 art，但由于编辑器对于 art 后缀名的文件支持不够（2021年11月7日 vscode不支持），所以首选 html。</li><li>第二个参数：加载 express-art-template。该模块可以自动将 art-template 整合到 express，所以我们不需要再单独导入 art-template。</li></ul><h4 id="_3-使用" tabindex="-1"><a class="header-anchor" href="#_3-使用"><span>（3）使用</span></a></h4><ul><li>express 为 Respone 相应对象提供了一个方法 <code>render()</code>。</li><li>使用该方法需要配置模板引擎，配置完才可以使用。</li><li>语法结构：<code>response.render(&#39;html文件名&#39;, {模板数据})</code><ul><li>第一个参数：因为 express 会自动到 views 文件夹里查找视图文件，所以直接写需要渲染的文件名即可。</li><li>第二个参数：需要渲染到网页里的数据。</li><li>如果想改变默认的 views 位置，使用该行代码 <code>app.set(&#39;views&#39;, &#39;自定义路径&#39;)</code>。</li></ul></li></ul><h3 id="_1-6-改写留言板案例" tabindex="-1"><a class="header-anchor" href="#_1-6-改写留言板案例"><span>1.6 改写留言板案例</span></a></h3><p>使用 express 来改写之前的留言板案例。</p><h4 id="_1-改写跳转展示页面" tabindex="-1"><a class="header-anchor" href="#_1-改写跳转展示页面"><span>（1）改写跳转展示页面</span></a></h4><p>直接使用 <code>get()</code> 方法来处理 “ / ”请求，使用 <code>render()</code> 方法来读取文件并渲染页面，不需要再用读写文件操作。</p><div class="hint-container warning"><p class="hint-container-title">注意</p><p><code>render()</code> 方法执行完后会自动结束发送响应</p></div><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">var</span> msg_data <span class="token operator">=</span> <span class="token punctuation">[</span>
<span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;李四&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">message</span><span class="token operator">:</span> <span class="token string">&#39;今天天气真好&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;王五&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">message</span><span class="token operator">:</span> <span class="token string">&#39;今天天气真好&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;张三&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">message</span><span class="token operator">:</span> <span class="token string">&#39;今天天气真好&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span>

app<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;/&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">request<span class="token punctuation">,</span> response</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    
  response<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token string">&#39;展示留言.html&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
  <span class="token string-property property">&#39;msg_data&#39;</span> <span class="token operator">:</span> msg_data
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-改写跳转留言页面" tabindex="-1"><a class="header-anchor" href="#_2-改写跳转留言页面"><span>（2）改写跳转留言页面</span></a></h4><p>根据跳转留言页面请求来返回页面。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>app<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;/toLeaveMsg&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">request<span class="token punctuation">,</span> response</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  response<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token string">&#39;留言板.html&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-改写接受留言数据" tabindex="-1"><a class="header-anchor" href="#_3-改写接受留言数据"><span>（3）改写接受留言数据</span></a></h4><p>express 提供了一个属性来获取 get 请求里面的数据。</p><ul><li>调用 <code>request.query</code></li></ul><p>express 还提供了一个方法来跳转页面。不需要我们再自己设置状态码和头信息。</p><ul><li>调用 <code>response.redirect(&#39;跳转路径&#39;)</code></li></ul><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>app<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;/LeaveMsg&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">request<span class="token punctuation">,</span> response</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

    <span class="token comment">// 之前的写法</span>
    <span class="token comment">// var url = request.url</span>
    <span class="token comment">// var urlObj = new URL(url, request.headers.referer).searchParams</span>
    <span class="token comment">// var tempObj = {}</span>
    <span class="token comment">// urlObj.forEach(function(value, key){</span>
    <span class="token comment">// tempObj[key] = value</span>
    <span class="token comment">// })</span>

    <span class="token comment">// 现在的写法</span>
    msg_data<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span>query<span class="token punctuation">)</span>

    <span class="token comment">// 之前的写法</span>
    <span class="token comment">// response.statusCode = 302</span>
    <span class="token comment">// response.setHeader(&#39;Location&#39;, &#39;/&#39;)</span>
    
    <span class="token comment">// 现在的写法</span>
    <span class="token comment">// 跳转到 &quot; / &quot;</span>
    response<span class="token punctuation">.</span><span class="token function">redirect</span><span class="token punctuation">(</span><span class="token string">&#39;/&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_1-7-接收post请求" tabindex="-1"><a class="header-anchor" href="#_1-7-接收post请求"><span>1.7 接收post请求</span></a></h4><ul><li>在 express v4.16 之前需要手动安装 <code>body-parser</code> 模块。</li><li>安装： <code>npm install --save body-parser</code></li></ul><p>安装后需要进行两条语句的配置</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// 导入模块</span>
<span class="token keyword">var</span> bodyParser <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;body-parser&#39;</span><span class="token punctuation">)</span>

<span class="token keyword">var</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;express&#39;</span><span class="token punctuation">)</span>

<span class="token keyword">var</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment">// 第一句配置：parse application/x-www-form-urlencoded</span>
app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>bodyParser<span class="token punctuation">.</span><span class="token function">urlencoded</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">extended</span><span class="token operator">:</span> <span class="token boolean">false</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token comment">// 第二句配置：parse application/json</span>
app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>bodyParser<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>而在 v4.16 之后，express 自己实现了 body-parser 的功能，<strong>所以不再需要额外安装 body-parser 了</strong>。</li></ul><p>直接将上面两条语句的变量改为 express 即可。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// 第一句配置：parse application/x-www-form-urlencoded</span>
app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>express<span class="token punctuation">.</span><span class="token function">urlencoded</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">extended</span><span class="token operator">:</span> <span class="token boolean">false</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token comment">// 第二句配置：parse application/json</span>
app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>express<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>配置成功后，直接调用 <code>request.body</code> 就可以获取到 post 请求的数据。</li></ul><h3 id="_1-8-读取文件里的数据" tabindex="-1"><a class="header-anchor" href="#_1-8-读取文件里的数据"><span>1.8 读取文件里的数据</span></a></h3><p>现在我们将数据持久化到文件里。文件里的数据以 JSON 格式存放。</p><h4 id="_1-新建json文件" tabindex="-1"><a class="header-anchor" href="#_1-新建json文件"><span>（1）新建json文件</span></a></h4><p>新建一个 json 格式的文件，然后在里面存放数据。json 文件的需要注意几点</p><ul><li>变量名需要使用双引号</li><li>变量值如果是字符串，需要使用双引号，不能单引号。</li><li>最后一个元素的最后面不能多加一个逗号。</li></ul><h4 id="_2-解析文件数据" tabindex="-1"><a class="header-anchor" href="#_2-解析文件数据"><span>（2）解析文件数据</span></a></h4><p>我们需要将文件里面的内容读取出来，一般都是 <code>data.toString()</code> 将读取出来的二进制数据转换为字符串。</p><ul><li>我们可以使用 <code>fs.readFile()</code> 方法的另一种重载。</li><li><code>fs.readFile( &#39;文件位置&#39;, &#39;编码类型&#39;, (err, data)=&gt;{} )</code></li><li>只要指定了编码格式，回调函数的 data 就会自动使用编码类型转为字符串。</li></ul><p>因为读取出来的是字符串，想到转为数组或者对象，调用 <code>JSON.parse(data)</code> 即可。</p><h2 id="二、curd起步" tabindex="-1"><a class="header-anchor" href="#二、curd起步"><span>二、CURD起步</span></a></h2><p>现在我们使用 express 做一个学生信息增删改查的功能。</p><h3 id="_2-1-起步" tabindex="-1"><a class="header-anchor" href="#_2-1-起步"><span>2.1 起步</span></a></h3><p>首先进行路由设计。</p><table><thead><tr><th>功能</th><th>请求</th><th>请求类型</th><th>请求参数</th></tr></thead><tbody><tr><td>跳转主页</td><td>/students</td><td>GET</td><td>无</td></tr><tr><td>跳转到添加页面</td><td>/students/new</td><td>GET</td><td>无</td></tr><tr><td>处理添加的数据</td><td>/students/new</td><td>POST</td><td>name,age,gender,hobby</td></tr><tr><td>跳转到修改页面</td><td>/students/edit</td><td>GET</td><td>无</td></tr><tr><td>处理修改的数据</td><td>/students/new</td><td>POST</td><td>id,name,age,gender,hobby</td></tr><tr><td>处理删除请求</td><td>/students/delete</td><td>GET</td><td>id</td></tr></tbody></table><h3 id="_2-2-提取路由模块" tabindex="-1"><a class="header-anchor" href="#_2-2-提取路由模块"><span>2.2 提取路由模块</span></a></h3><p>如果在主模块里面写一长串 <code>app.get(&#39;请求路径&#39;, (resquest, response)=&gt;{})</code> 方法，则会不好管理。所以这里将一长串相似的代码共同封装成一个模块。</p><h4 id="_1-原始写法" tabindex="-1"><a class="header-anchor" href="#_1-原始写法"><span>（1）原始写法</span></a></h4><p>下面代码是单独一个文件的，里面涉及到的两个变量都需要声明。</p><ul><li>fs 变量：导入文件模块即可。</li><li>app 变量：app 变量是 express 创建出来的一个服务器变量，如果新声明的话，就不是原来的那个服务器变量。这时就需要主模块传一个 app 变量。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// router.js</span>
app<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;/&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">request<span class="token punctuation">,</span> response</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

    fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">&#39;./db.json&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;utf-8&#39;</span> <span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> data</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">return</span>   response<span class="token punctuation">.</span><span class="token function">status</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">&#39;Server error&#39;</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
        response<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token string">&#39;展示留言.html&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
            <span class="token string-property property">&#39;students_info&#39;</span> <span class="token operator">:</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>如果需要要将 app 变量导入，则需要将整个路由文件包装成一个模块，导出到主模块中。</li><li>主模块再将 app 变量传入路由模块中。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// router.js</span>
<span class="token comment">// 将路由代码包装成一个模块导出</span>
module<span class="token punctuation">.</span><span class="token function-variable function">exports</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">app</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    app<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;/&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">request<span class="token punctuation">,</span> response</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">&#39;./db.json&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;utf-8&#39;</span> <span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> data</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">{</span>
                <span class="token keyword">return</span> response<span class="token punctuation">.</span><span class="token function">status</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">&#39;Server error&#39;</span><span class="token punctuation">)</span>
            <span class="token punctuation">}</span>
            response<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token string">&#39;展示留言.html&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
                <span class="token string-property property">&#39;students_info&#39;</span> <span class="token operator">:</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>
            <span class="token punctuation">}</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token comment">// app.js</span>
<span class="token comment">// 引入</span>
<span class="token keyword">var</span> router <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;./router&#39;</span><span class="token punctuation">)</span>

<span class="token comment">// 使用其方法，并将app变量传入</span>
<span class="token function">router</span><span class="token punctuation">(</span>app<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-框架写法" tabindex="-1"><a class="header-anchor" href="#_2-框架写法"><span>（2）框架写法</span></a></h4><p>express 自带了路由模块，我们可以直接使用。</p><ul><li>首先使用 <code>var router = express.Router()</code> 创建一个路由容器。</li><li>然后使用 <code>router.get(&#39;请求路径&#39;, (request, response) =&gt; {}</code> 把路由挂载在路由容器里。</li><li>最后使用 <code>module.exports = router</code> 导出路由容器。</li></ul><p>完整的代码如下：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">var</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;express&#39;</span><span class="token punctuation">)</span>

<span class="token keyword">var</span> router <span class="token operator">=</span> express<span class="token punctuation">.</span><span class="token function">Router</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

router<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;/&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">request<span class="token punctuation">,</span> response</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">&#39;./db.json&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;utf-8&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> data</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> response<span class="token punctuation">.</span><span class="token function">status</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">&#39;Server error&#39;</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>

        response<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token string">&#39;展示学生信息.html&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
            <span class="token literal-property property">students_info</span><span class="token operator">:</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> router
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>而在主模块中则导入路由容器后，挂载在 app 服务器上。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// 导入路由容器</span>
<span class="token keyword">var</span> router <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;./router&#39;</span><span class="token punctuation">)</span>

<span class="token comment">// 将路由容器挂载在 app 服务器</span>
app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>router<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container warning"><p class="hint-container-title">注意</p><p><code>app.use(router)</code> 建议写在最后面，不然可能会一些原因报错。具体的后面会介绍。</p></div><h3 id="_2-3-封装操作数据模块" tabindex="-1"><a class="header-anchor" href="#_2-3-封装操作数据模块"><span>2.3 封装操作数据模块</span></a></h3><p>接下来将数据封装成文件，专门处理数据，不关心业务，与三层架构中 dao 层的功能一致。</p><h4 id="_1-查询所有学生信息" tabindex="-1"><a class="header-anchor" href="#_1-查询所有学生信息"><span>（1）查询所有学生信息</span></a></h4><p>文件读取出来的是字符串，所以需要将其转换为对象。</p><p>但其中有异步和同步问题。</p><ul><li>读文件一般为异步操作，所以当还没读取完文件时，服务器就发送到客户端了。</li><li>如果读文件改为同步操作时，<strong>所有服务器里的操作都需要等待文件读取完成</strong>，性能不太高。</li><li>所以数据模块会开放一个形参，用于接收主模块的操作，然后将这个形参用在读取完文件之后的回调函数里。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// callback 用于与主模块通信</span>
exports<span class="token punctuation">.</span><span class="token function-variable function">findAllStudents</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">callback</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span>dbPath<span class="token punctuation">,</span> <span class="token string">&#39;utf-8&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> data</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        
        <span class="token keyword">if</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token comment">// 错误了，也将错误信息返回到主模块中</span>
            <span class="token comment">// 也可以写成这种 callback(err, undefined)</span>
            <span class="token function">callback</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
        
        <span class="token comment">// 成功了，将数据返回到主模块中</span>
        <span class="token function">callback</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面的两个参数——err 和 data 都是模仿原始读文件方法所传进来的参数。</p><ul><li>成功：err 为 null，data 为二进制数据。</li><li>失败：err 为 错误对象，data 为 undefined。</li></ul><h4 id="_2-插入学生信息" tabindex="-1"><a class="header-anchor" href="#_2-插入学生信息"><span>（2）插入学生信息</span></a></h4><p>插入学生信息需要三步：</p><ol><li>获取原始数据</li><li><strong>插入原始数据</strong></li><li>将改变过后的结果写入源文件中</li></ol><p>重点是第二个，需要插入数据，其步骤如下：</p><ol><li>因为读文件出来的是字符串，所以将字符串转换为数组或者对象。</li><li>将读取出来的数据，进行添加。</li><li>然后再写入文件里，写之前也需要将数据转换为字符串。</li></ol><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// 增加学生信息</span>
exports<span class="token punctuation">.</span><span class="token function-variable function">saveInfo</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">student<span class="token punctuation">,</span> callback</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span>dbPath<span class="token punctuation">,</span> <span class="token string">&#39;utf-8&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> data</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 错误了，也将错误信息返回到主模块中</span>
            <span class="token comment">// 也可以写成这种 callback(err, undefined)</span>
            <span class="token function">callback</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
        <span class="token punctuation">}</span>

        <span class="token comment">// 将字符串转换为数组或者对象</span>
        <span class="token keyword">var</span> tempData <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>

        <span class="token comment">// 现在id使用随机数</span>
        <span class="token comment">// 其实应该取已经到达过id之后</span>
        student<span class="token punctuation">.</span>id <span class="token operator">=</span> <span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toFixed</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>

        <span class="token comment">// 添加信息到临时数据里</span>
        tempData<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>student<span class="token punctuation">)</span>

        <span class="token comment">// 然后再写入文件里</span>
        fs<span class="token punctuation">.</span><span class="token function">writeFile</span><span class="token punctuation">(</span>dbPath<span class="token punctuation">,</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>tempData<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> data</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">{</span>
                <span class="token comment">// 依旧将错误返回到主模块中</span>
                <span class="token function">callback</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
            <span class="token punctuation">}</span>
            <span class="token function">callback</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-更新学生信息" tabindex="-1"><a class="header-anchor" href="#_3-更新学生信息"><span>（3）更新学生信息</span></a></h4><p>更新学生信息需要四步：</p><ol><li>获取 post 请求数据；</li><li>获取文件内学生的数据；</li><li>更新学生的数据；</li><li>再次写入文件中。</li></ol><hr><ul><li>因为页面的输入框为文本输入框，所以 post 请求所携带数据的 id 的类型为字符串，则需要先类型转换成整型。</li><li>我们想让 Student 模块更纯粹，所以一些对数据的小操作先在模块外执行完毕，再传进模块里进行处理。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>  <span class="token comment">// 获取post表单提交</span>
  <span class="token keyword">var</span> updateStu <span class="token operator">=</span> request<span class="token punctuation">.</span>body
  <span class="token comment">// 将id类型转换</span>
  updateStu<span class="token punctuation">.</span>id <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>updateStu<span class="token punctuation">.</span>id<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>对于源数据进行更新有两种方法： <ul><li><code>forEach( callbackfn:(value, index, array) =&gt; void )</code>：遍历整个数组，加判断来找出需要的数据。（仅限数据为数组类型）</li><li><code>find( predicate:(value, index, array) =&gt; boolean )</code>：根据参数里函数返回的布尔值，来找到所需要的数据，这里返回的数据是浅拷贝。也就是说你修改返回的数据，源数据也会跟着更新。</li></ul></li></ul><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>exports<span class="token punctuation">.</span><span class="token function-variable function">updateStudent</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">newData<span class="token punctuation">,</span> callback</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span>dbPath<span class="token punctuation">,</span> <span class="token string">&#39;utf8&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> data</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 文件的源数据</span>
        <span class="token keyword">var</span> tempData <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>

        <span class="token comment">// 方法一</span>
        <span class="token comment">// tempData.forEach(function(value, index) {</span>
        <span class="token comment">//   if(value.id === newData.id){</span>
        <span class="token comment">//     tempData[index] = newData</span>
        <span class="token comment">//   }</span>
        <span class="token comment">// })</span>

        <span class="token comment">// 方法二</span>
        <span class="token keyword">var</span> tempStu <span class="token operator">=</span> tempData<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> item<span class="token punctuation">.</span>id <span class="token operator">===</span> newData<span class="token punctuation">.</span>id
        <span class="token punctuation">}</span><span class="token punctuation">)</span>
        
        <span class="token comment">// 修改find()方法返回的数据</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span> <span class="token keyword">var</span> key <span class="token keyword">in</span> newData<span class="token punctuation">)</span><span class="token punctuation">{</span>
            tempStu<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> newData<span class="token punctuation">[</span>key<span class="token punctuation">]</span>
        <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>直接将源数据再次写入文件即可。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// 然后再写入文件里</span>
fs<span class="token punctuation">.</span><span class="token function">writeFile</span><span class="token punctuation">(</span>dbPath<span class="token punctuation">,</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>tempData<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> data</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 依旧将错误返回到主模块中</span>
        <span class="token function">callback</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token function">callback</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-删除学生信息" tabindex="-1"><a class="header-anchor" href="#_3-删除学生信息"><span>（3）删除学生信息</span></a></h4><p>删除学生信息有四步：</p><ol><li>先获取需要删除学生的 id；</li><li>然后读取文件的数据；</li><li>在读出来的数据里进行删除；</li><li>最后在写入文件中。</li></ol><hr><ul><li>因为是 get 请求，获取学生 id直接使用 <code>request.query.id</code>。</li><li>读文件和写文件与上面的一致。</li><li>重点是删除数据 <ul><li><code>findIndex( predicate:(value, index, array) =&gt; boolean )</code>：与 <code>find()</code> 用法一致，不过该方法执行的结果是返回元素的下标。</li><li><code>splice( start, deleteCount )</code>：删除数组的元素。将上一个方法返回的下标，作为第一个参数，然后第二个参数为 1，代表只删除该下标的元素。</li></ul></li><li>疑惑：删除数据后是否刷新页面，如果刷新了页面，滚动条会重置，用户体验不好。如果不刷新的话，解决方案我觉得是前端和后端都需要执行删除数据的操作。待解决</li></ul><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">var</span> deleteIndex <span class="token operator">=</span> objData<span class="token punctuation">.</span><span class="token function">findIndex</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> item<span class="token punctuation">.</span>id <span class="token operator">===</span> stuId
<span class="token punctuation">}</span><span class="token punctuation">)</span>

objData<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>deleteIndex<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="三、mongodb" tabindex="-1"><a class="header-anchor" href="#三、mongodb"><span>三、MongoDB</span></a></h2><h3 id="_3-1-安装" tabindex="-1"><a class="header-anchor" href="#_3-1-安装"><span>3.1 安装</span></a></h3><p>下载打开后下一步下一步。</p><h3 id="_3-2-配置" tabindex="-1"><a class="header-anchor" href="#_3-2-配置"><span>3.2 配置</span></a></h3><p>我们首先感觉一下使用命令行来操作数据库。使用命令行操作数据库需要下面几步：</p><ol><li>配置环境变量</li><li>在数据库安装位置的 <strong>根磁盘</strong> 上，新建一个文件夹【data】，进去【data】文件夹后再新建一个文件夹【db】。</li><li>打开命令行，跳转到根磁盘，然后输入 <code>mongod</code> 开启服务器，<strong>不要关闭当前命令行</strong>。去【db】文件夹可以看见已经存放东西了。</li><li>再打开一个命令行，输入 <code>mongo</code> ，将当前的命令行连接到数据库。如果成功了就会进入数据库的命令行模式。</li></ol><h3 id="_3-3-基本命令" tabindex="-1"><a class="header-anchor" href="#_3-3-基本命令"><span>3.3 基本命令</span></a></h3><p>芒果数据库里面会涉及到一些用语：</p><ul><li><code>collection</code> —— 集合，对应 <strong>普通数据库的表</strong>。</li><li><code>document</code> —— 文档，对应 <strong>普通数据库的表中数据</strong></li></ul><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td><code>show dbs</code></td><td>查询当前所有数据库</td></tr><tr><td><code>db</code></td><td>查看当前所在的数据库</td></tr><tr><td><code>use 数据库</code></td><td>切换到其他数据库</td></tr><tr><td><code>show collections</code></td><td>展示当前数据库的表</td></tr><tr><td><code>db.表名.insertOne(对象)</code></td><td>在指定的表插入数据</td></tr><tr><td><code>db.表名.find()</code></td><td>展示指定表中的所有数据</td></tr></tbody></table>`,103),k={href:"https://docs.mongodb.com/manual/crud/",target:"_blank",rel:"noopener noreferrer"},v=n("h3",{id:"_3-4-安装mongoose",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_3-4-安装mongoose"},[n("span",null,"3.4 安装mongoose")])],-1),m=n("p",null,"mongoose 是将 MongoDB 进一步封装，更容易操作 MongoDB。",-1),b={href:"https://mongoosejs.com/",target:"_blank",rel:"noopener noreferrer"},g=e(`<p>在命令行输入 <code>npm install mongoose --save</code></p><h3 id="_3-5-快速开始mongoose" tabindex="-1"><a class="header-anchor" href="#_3-5-快速开始mongoose"><span>3.5 快速开始mongoose</span></a></h3><p>最新版（v6.0.13）的 mongoose 文档使用了 ES6 语法，这里便于理解，先以 v4.x 的文档举例。</p><h4 id="_1-v4-x" tabindex="-1"><a class="header-anchor" href="#_1-v4-x"><span>（1）v4.x</span></a></h4><ul><li><p>第 2 行：引入模块并连接数据库，<code>test</code> 可以换成需要连接的数据库。<strong>如果连接的数据库不存在，则会自动创建一个</strong>，所以要小心创建了一个新的数据库。</p></li><li><p>第 6 行：使用 mongoose 生成 Schema 模式，这里生成的 Schema 不是具体的模式，而是一个构造方法。</p></li><li><p>第 9 ~ 20 行：使用 Schema 创造一个具体的博客模式，构造方法里面传入一个对象，<strong>对象的属性名为列名，属性值为类型或者选项数组</strong>。</p></li><li><p>第 23 行：利用具体的模式创建 <strong>数据库的模型</strong>。</p></li><li><p>然后就可以使用模型来任意操作数据库了。</p></li></ul><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// 引入模块并连接数据库</span>
<span class="token keyword">var</span> mongoose <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;mongoose&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
mongoose<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span><span class="token string">&#39;mongodb://localhost/test&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 生成模式</span>
<span class="token keyword">var</span> Schema <span class="token operator">=</span> mongoose<span class="token punctuation">.</span>Schema<span class="token punctuation">;</span>

<span class="token comment">// 生成具体的一个模式</span>
<span class="token keyword">var</span> blogSchema <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Schema</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">title</span><span class="token operator">:</span>  String<span class="token punctuation">,</span>
  <span class="token literal-property property">author</span><span class="token operator">:</span> String<span class="token punctuation">,</span>
  <span class="token literal-property property">body</span><span class="token operator">:</span>   String<span class="token punctuation">,</span>
  <span class="token literal-property property">comments</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span> <span class="token literal-property property">body</span><span class="token operator">:</span> String<span class="token punctuation">,</span> <span class="token literal-property property">date</span><span class="token operator">:</span> Date <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token literal-property property">date</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">type</span><span class="token operator">:</span> Date<span class="token punctuation">,</span> <span class="token keyword">default</span><span class="token operator">:</span> Date<span class="token punctuation">.</span>now <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token literal-property property">hidden</span><span class="token operator">:</span> Boolean<span class="token punctuation">,</span>
  <span class="token literal-property property">meta</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">votes</span><span class="token operator">:</span> Number<span class="token punctuation">,</span>
    <span class="token literal-property property">favs</span><span class="token operator">:</span>  Number
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 利用具体的模式创建数据库的模型</span>
<span class="token keyword">var</span> Blog <span class="token operator">=</span> mongoose<span class="token punctuation">.</span><span class="token function">model</span><span class="token punctuation">(</span><span class="token string">&#39;Blog&#39;</span><span class="token punctuation">,</span> blogSchema<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-v6-0-13" tabindex="-1"><a class="header-anchor" href="#_2-v6-0-13"><span>（2）v6.0.13</span></a></h4><ul><li>第 2 行：引入模块并用 <code>const</code> 接收。</li><li>第 4 ~ 9 行：使用了异步连接数据库</li><li>第 12 行：使用对象解构来获取模式。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// 引入模块</span>
<span class="token keyword">const</span> mongoose <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;mongoose&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 连接数据库</span>
<span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token parameter">err</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">await</span> mongoose<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span><span class="token string">&#39;mongodb://localhost:27017/test&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 获取模式</span>
<span class="token keyword">const</span> <span class="token punctuation">{</span> Schema <span class="token punctuation">}</span> <span class="token operator">=</span> mongoose<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>第 2 ~ 12 行：与 v4.x 的一致，使用 Schema 创造一个具体的博客模式。</li><li>第 16 行：与 v4.x 的一致，利用具体的模式创建 <strong>数据库的模型</strong>。使用 <code>const</code> 来接收。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// 生成具体的一个模式</span>
<span class="token keyword">const</span> blogSchema <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Schema</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">title</span><span class="token operator">:</span>  String<span class="token punctuation">,</span> <span class="token comment">// String is shorthand for {type: String}</span>
    <span class="token literal-property property">author</span><span class="token operator">:</span> String<span class="token punctuation">,</span>
    <span class="token literal-property property">body</span><span class="token operator">:</span>   String<span class="token punctuation">,</span>
    <span class="token literal-property property">comments</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span> <span class="token literal-property property">body</span><span class="token operator">:</span> String<span class="token punctuation">,</span> <span class="token literal-property property">date</span><span class="token operator">:</span> Date <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token literal-property property">date</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">type</span><span class="token operator">:</span> Date<span class="token punctuation">,</span> <span class="token keyword">default</span><span class="token operator">:</span> Date<span class="token punctuation">.</span>now <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token literal-property property">hidden</span><span class="token operator">:</span> Boolean<span class="token punctuation">,</span>
    <span class="token literal-property property">meta</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">votes</span><span class="token operator">:</span> Number<span class="token punctuation">,</span>
        <span class="token literal-property property">favs</span><span class="token operator">:</span>  Number
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 利用具体的模式创建数据库的模型</span>
<span class="token keyword">const</span> Blog <span class="token operator">=</span> mongoose<span class="token punctuation">.</span><span class="token function">model</span><span class="token punctuation">(</span><span class="token string">&#39;Blog&#39;</span><span class="token punctuation">,</span> blogSchema<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-示例" tabindex="-1"><a class="header-anchor" href="#_3-示例"><span>（3）示例</span></a></h4><p>新建一个 js 文件进行测试。我们在一个数据库中新建学生表。</p><ol><li>依然是老三样，引入模块、连接数据库和获取模式。</li></ol><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// 引入模块</span>
<span class="token keyword">const</span> mongoose <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;mongoose&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 连接数据库</span>
<span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token parameter">err</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">await</span> mongoose<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span><span class="token string">&#39;mongodb://localhost:27017/test&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 获取模式</span>
<span class="token keyword">const</span> <span class="token punctuation">{</span> Schema <span class="token punctuation">}</span> <span class="token operator">=</span> mongoose<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,15),h={start:"2"},f={href:"https://mongoosejs.com/docs/schematypes.html#schematype-options",target:"_blank",rel:"noopener noreferrer"},y=e(`<div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> studentsSchema <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Schema</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">studentId</span><span class="token operator">:</span> String<span class="token punctuation">,</span> <span class="token comment">// String is shorthand for {type: String}</span>
    <span class="token literal-property property">studentName</span><span class="token operator">:</span> String<span class="token punctuation">,</span>
    <span class="token literal-property property">studentGender</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">type</span><span class="token operator">:</span>Number<span class="token punctuation">,</span> <span class="token keyword">enum</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token literal-property property">studentAge</span><span class="token operator">:</span><span class="token punctuation">{</span> <span class="token literal-property property">type</span><span class="token operator">:</span>Number<span class="token punctuation">,</span> <span class="token literal-property property">min</span><span class="token operator">:</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token literal-property property">max</span><span class="token operator">:</span> <span class="token number">60</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li>然后使用具体的模式创建数据库的模型。如果想使用模型来创建一条数据，将模型作为一个构造函数，里面传入一个数据对象，如第 5 ~ 10 行所示。</li></ol><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// 利用具体的模式创建数据库的模型</span>
<span class="token keyword">const</span> Students <span class="token operator">=</span> mongoose<span class="token punctuation">.</span><span class="token function">model</span><span class="token punctuation">(</span><span class="token string">&#39;Students&#39;</span><span class="token punctuation">,</span> studentsSchema<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 使用模型框架新建一个学生记录</span>
<span class="token keyword">const</span> student <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Students</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token literal-property property">studentId</span><span class="token operator">:</span> <span class="token string">&quot;201815270&quot;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">studentName</span><span class="token operator">:</span> <span class="token string">&quot;张三&quot;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">studentGender</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
  <span class="token literal-property property">studentAge</span><span class="token operator">:</span> <span class="token number">21</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="4"><li>创建了一条数据，然后我们需要将其保存到数据库里，我们需要使用数据的 <code>save()</code> 方法。</li></ol><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>student<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> result</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
	<span class="token comment">// 保存到数据库后的反馈信息</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="5"><li>存储结果如下：</li></ol><figure><img src="https://raw.githubusercontent.com/hahg2000/picture/Senior-JS/mongoDB示例存储结果.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="_3-6-查询语句" tabindex="-1"><a class="header-anchor" href="#_3-6-查询语句"><span>3.6 查询语句</span></a></h3><p>查询语句与一般的数据库差不多一致。</p><h4 id="_1-查询所有" tabindex="-1"><a class="header-anchor" href="#_1-查询所有"><span>（1）查询所有</span></a></h4><p>使用 <code>find( function(err, result){} )</code> 方法。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>Students<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> result</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">throw</span> err
    <span class="token punctuation">}</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>结果如下：</p><img src="https://raw.githubusercontent.com/hahg2000/picture/Senior-JS/mongoDB查询所有.png" style="zoom:60%;"><h4 id="_2-根据指定数值查询" tabindex="-1"><a class="header-anchor" href="#_2-根据指定数值查询"><span>（2）根据指定数值查询</span></a></h4><p>如果想查找 <strong>某一列符合指定数值的所有行</strong>，使用 <code>find( { 列名: 指定数值 }, function(){} )</code></p><p>例如，可以查找所有性别为 1 的行。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>Students<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">studentGender</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> result</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">throw</span> err
    <span class="token punctuation">}</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果只想查找一行，可以使用 <code>findOne( { 列名: 指定数值 }, function(){} )</code> 方法。</p><h4 id="_3-根据条件查询" tabindex="-1"><a class="header-anchor" href="#_3-根据条件查询"><span>（3）根据条件查询</span></a></h4><p>如果想查询 <strong>特定条件的行</strong>，例如年龄小于 18 岁等。需要在 <strong>属性值</strong> 里使用特定的对象形式，例如<code>Students.find( {studentAge: { $lt: 18 }}, function(err, result){} )</code>。</p>`,21),_={href:"https://docs.mongodb.com/manual/reference/operator/query/",target:"_blank",rel:"noopener noreferrer"},j=e(`<ol><li>比较运算符</li></ol><table><thead><tr><th style="text-align:left;">代码</th><th style="text-align:left;">描述</th></tr></thead><tbody><tr><td style="text-align:left;"><code>$eq</code></td><td style="text-align:left;">查询符合某个值</td></tr><tr><td style="text-align:left;"><code>$ne</code></td><td style="text-align:left;">查询不符合某个值</td></tr><tr><td style="text-align:left;"><code>$gt</code></td><td style="text-align:left;">查询大于某个值</td></tr><tr><td style="text-align:left;"><code>$gte</code></td><td style="text-align:left;">查询大于或者等于某个值</td></tr><tr><td style="text-align:left;"><code>$in</code></td><td style="text-align:left;">查询是否在指定数组里</td></tr><tr><td style="text-align:left;"><code>$nin</code></td><td style="text-align:left;">查询是否不在指定数组里</td></tr><tr><td style="text-align:left;"><code>$lt</code></td><td style="text-align:left;">查询小于某个值</td></tr><tr><td style="text-align:left;"><code>$lte</code></td><td style="text-align:left;">查询小于或者等于某个值</td></tr></tbody></table><ol start="2"><li>逻辑运算符</li></ol><table><thead><tr><th style="text-align:left;">代码</th><th style="text-align:left;">描述</th><th>备注</th></tr></thead><tbody><tr><td style="text-align:left;"><code>$and</code></td><td style="text-align:left;">查询同时符合 <strong>多个条件</strong></td><td>其属性值为数组类型</td></tr><tr><td style="text-align:left;"><code>$not</code></td><td style="text-align:left;">查询同时不符合 <strong>某个</strong> 条件表达式</td><td></td></tr><tr><td style="text-align:left;"><code>$nor</code></td><td style="text-align:left;">查询 <strong>多个条件</strong> 同时不符合</td><td>其属性值为数组类型</td></tr><tr><td style="text-align:left;"><code>$or</code></td><td style="text-align:left;">查询在 <strong>多个条件</strong> 中符合其中一个条件</td><td>其属性值为数组类型</td></tr></tbody></table><p>例如，我需要查找年龄大于 18 但小于 22 的行。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>Students<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>
    <span class="token punctuation">{</span>
        <span class="token comment">// 使用方法</span>
        <span class="token literal-property property">$and</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span> <span class="token literal-property property">studentAge</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">$gt</span><span class="token operator">:</span> <span class="token number">18</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">studentAge</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">$lt</span><span class="token operator">:</span> <span class="token number">22</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> result</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> err
        <span class="token punctuation">}</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_4-查询后执行操作" tabindex="-1"><a class="header-anchor" href="#_4-查询后执行操作"><span>（4）查询后执行操作</span></a></h4><p>其为了方便，也提供了在查询后的操作，例如查询后删除、查询后更新等。</p><ul><li><p>Model.findOneAndDelete()：查询后删除</p><ul><li>conditions «Object»：条件</li><li>[options] «Object»：选项</li><li>[callback] «Function»：回调函数</li></ul></li><li><p>Model.findOneAndRemove()</p><ul><li>参数与用法与上面的一致</li><li>该命令基于 MongoDB 命令行专属命令 <code>findAndModify()</code> 。</li></ul></li><li><p>Model.findOneAndReplace()：查询后 <strong>替换</strong></p><ul><li>filter «Object» ：查询条件</li><li>[replacement] «Object» ：替换成的数据</li><li>[options] «Object» ：选项</li><li>[callback] «Function»：回调函数</li></ul></li><li><p>Model.findOneAndUpdate()：查询后 <strong>更新</strong></p><ul><li>[conditions] «Object»：查询条件</li><li>[update] «Object»：更新的数据。mongoose 会 <strong>自动封装</strong> 成 <code>$set: { 属性名: 属性值 }</code></li><li>[options] «Object» ：选项</li><li>[callback] «Function»：回调函数</li><li>注意：建议直接使用 <code>$set</code> ，即使防止选项中有 <code>{ overwrite: true }</code> ，而导致原数据被覆盖。</li><li>例如，将某个行的姓名改为【jason】： <code>Model.findOneAndUpdate(query, { $set: { name: &#39;jason&#39; }}, options, callback)</code></li></ul></li></ul><h3 id="_3-7-改造学生信息" tabindex="-1"><a class="header-anchor" href="#_3-7-改造学生信息"><span>3.7 改造学生信息</span></a></h3><p>我们现在使用 MongoDB 来改造之前的学生信息的案例。</p><h4 id="_1-设计student模块" tabindex="-1"><a class="header-anchor" href="#_1-设计student模块"><span>（1）设计Student模块</span></a></h4><p>Student 模块中不用再自己导出方法，直接导出模型即可，因为模型里就有我们需要用的方法。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">let</span> mongoose <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;mongoose&#39;</span><span class="token punctuation">)</span>

<span class="token comment">// 连接数据库</span>
<span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token parameter">err</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">await</span> mongoose<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span><span class="token string">&#39;mongodb://localhost:27017/test&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 获取模式</span>
<span class="token keyword">const</span> <span class="token punctuation">{</span> Schema <span class="token punctuation">}</span> <span class="token operator">=</span> mongoose<span class="token punctuation">;</span>

<span class="token comment">// 使用模式创建具体的数据库模型</span>
<span class="token keyword">const</span> studentsSchema <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Schema</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">id</span><span class="token operator">:</span> String<span class="token punctuation">,</span> <span class="token comment">// String is shorthand for {type: String}</span>
    <span class="token literal-property property">name</span><span class="token operator">:</span> String<span class="token punctuation">,</span>
    <span class="token literal-property property">gender</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">type</span><span class="token operator">:</span>Number<span class="token punctuation">,</span> <span class="token keyword">enum</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">default</span><span class="token operator">:</span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token literal-property property">age</span><span class="token operator">:</span><span class="token punctuation">{</span> <span class="token literal-property property">type</span><span class="token operator">:</span>Number <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token literal-property property">hobby</span><span class="token operator">:</span> String
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 导出数据库模型</span>
module<span class="token punctuation">.</span>exports <span class="token operator">=</span> mongoose<span class="token punctuation">.</span><span class="token function">model</span><span class="token punctuation">(</span><span class="token string">&quot;Student_info&quot;</span><span class="token punctuation">,</span> studentsSchema<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-修改查询" tabindex="-1"><a class="header-anchor" href="#_2-修改查询"><span>（2）修改查询</span></a></h4><p>修改 <code>router.js</code> 的查询功能：直接改方法名即可。这就是封装的好处，里层的逻辑代码改变，外层的引用则不需要改变很多。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>router<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;/students&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">request<span class="token punctuation">,</span> response</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 修改的部分 findAllStudents =&gt; find</span>
    Students<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> data</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            response<span class="token punctuation">.</span><span class="token function">status</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">&#39;Server error...&#39;</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
        response<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token string">&#39;展示学生信息.html&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
            <span class="token literal-property property">students_info</span><span class="token operator">:</span> data<span class="token punctuation">,</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-修改添加" tabindex="-1"><a class="header-anchor" href="#_3-修改添加"><span>（3）修改添加</span></a></h4><p>添加部分修改较多：</p><ul><li>首先使用 <code>request.body</code> 来获取表单数据；</li><li>然后再使用 <code>new Student( 具体数据 )</code> 来创建一条数据记录。</li><li>最后使用 <code>数据记录.save( function(){} )</code> 来保存数据。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>router<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">&#39;/students/new&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">request<span class="token punctuation">,</span> response</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    request<span class="token punctuation">.</span>body<span class="token punctuation">.</span>id <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toFixed</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    
	<span class="token comment">// 改变的部分</span>
    <span class="token keyword">new</span> <span class="token class-name">Students</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span>body<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            response<span class="token punctuation">.</span><span class="token function">status</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">&#39;Server error...&#39;</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
    response<span class="token punctuation">.</span><span class="token function">redirect</span><span class="token punctuation">(</span><span class="token string">&#39;/students&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_4-修改更新" tabindex="-1"><a class="header-anchor" href="#_4-修改更新"><span>（4）修改更新</span></a></h4><p>更新部分不需要太大改动：</p><ul><li>将 <code>request.body</code> 的 id 作为查找条件；</li><li>将 <code>request.body</code> 本身作为更新对象。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>router<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">&#39;/students/edit&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">request<span class="token punctuation">,</span> response</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 获取post表单提交</span>
    <span class="token keyword">var</span> updateStu <span class="token operator">=</span> request<span class="token punctuation">.</span>body
    
	<span class="token comment">// 改变的部分</span>
    Students<span class="token punctuation">.</span><span class="token function">findOneAndUpdate</span><span class="token punctuation">(</span>
        <span class="token punctuation">{</span> <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>updateStu<span class="token punctuation">.</span>id<span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token punctuation">{</span> <span class="token literal-property property">$set</span><span class="token operator">:</span> updateStu <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> data</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                response<span class="token punctuation">.</span><span class="token function">status</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">&#39;Server error...&#39;</span><span class="token punctuation">)</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">)</span>
    response<span class="token punctuation">.</span><span class="token function">redirect</span><span class="token punctuation">(</span><span class="token string">&#39;/students&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_5-修改删除" tabindex="-1"><a class="header-anchor" href="#_5-修改删除"><span>（5）修改删除</span></a></h4><ul><li>将 post 请求传进来的 id 值作为查询条件</li></ul><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>router<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;/students/delete&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">request<span class="token punctuation">,</span> response</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">var</span> deleteId <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span>query<span class="token punctuation">.</span>id<span class="token punctuation">)</span>

    <span class="token comment">// 修改的部分</span>
    Students<span class="token punctuation">.</span><span class="token function">deleteStudentById</span><span class="token punctuation">(</span>deleteId<span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            response<span class="token punctuation">.</span><span class="token function">status</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">&#39;Server error...&#39;</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
        response<span class="token punctuation">.</span><span class="token function">redirect</span><span class="token punctuation">(</span><span class="token string">&#39;/students&#39;</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="四、node连接mysql" tabindex="-1"><a class="header-anchor" href="#四、node连接mysql"><span>四、Node连接Mysql</span></a></h2><h3 id="_4-1-安装" tabindex="-1"><a class="header-anchor" href="#_4-1-安装"><span>4.1 安装</span></a></h3><p>如果想使用 Node 连接 Mysql，需要连接驱动。</p><p><code>npm install mysql --save</code></p><h3 id="_4-2-连接数据库" tabindex="-1"><a class="header-anchor" href="#_4-2-连接数据库"><span>4.2 连接数据库</span></a></h3><p>连接数据库有显式和隐式两种。</p><p>显式就需要直接写出来，如第 12 行 ~ 第 19 行：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// 导入模块</span>
<span class="token keyword">var</span> mysql      <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;mysql&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 建立连接</span>
<span class="token keyword">var</span> connection <span class="token operator">=</span> mysql<span class="token punctuation">.</span><span class="token function">createConnection</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">host</span>     <span class="token operator">:</span> <span class="token string">&#39;example.org&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">user</span>     <span class="token operator">:</span> <span class="token string">&#39;bob&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">password</span> <span class="token operator">:</span> <span class="token string">&#39;secret&#39;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 开始连接</span>
connection<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&#39;error connecting: &#39;</span> <span class="token operator">+</span> err<span class="token punctuation">.</span>stack<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
	
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;connected as id &#39;</span> <span class="token operator">+</span> connection<span class="token punctuation">.</span>threadId<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>隐式连接 <strong>直接执行查询语句</strong>，就可以自动连接。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>connection<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span><span class="token string">&#39;SELECT 1&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">error<span class="token punctuation">,</span> results<span class="token punctuation">,</span> fields</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token keyword">throw</span> error<span class="token punctuation">;</span>
    <span class="token comment">// connected!</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,38),x=n("code",null,"user",-1),w=n("code",null,"password",-1),S=n("code",null,"timezone",-1),q=n("code",null,"connectTimeout",-1),E={href:"https://github.com/mysqljs/mysql#connection-options",target:"_blank",rel:"noopener noreferrer"},N=e(`<h3 id="_4-3-使用连接池" tabindex="-1"><a class="header-anchor" href="#_4-3-使用连接池"><span>4.3 使用连接池</span></a></h3><p>我们通常写项目时，通常会使用连接池，避免经常建立连接和断开连接。使用连接池也有显式使用和隐式使用。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token comment">// 导入模块</span>
<span class="token keyword">var</span> mysql <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;mysql&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 建立连接池</span>
<span class="token keyword">var</span> pool  <span class="token operator">=</span> mysql<span class="token punctuation">.</span><span class="token function">createPool</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">connectionLimit</span> <span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span>
    <span class="token literal-property property">host</span>            <span class="token operator">:</span> <span class="token string">&#39;example.org&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">user</span>            <span class="token operator">:</span> <span class="token string">&#39;bob&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">password</span>        <span class="token operator">:</span> <span class="token string">&#39;secret&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">database</span>        <span class="token operator">:</span> <span class="token string">&#39;my_db&#39;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>显式就直接调用 <code>pool.getConnection()</code> 方法，然后在其回调函数里使用获取到的连接。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>pool<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> connection</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token keyword">throw</span> err<span class="token punctuation">;</span> <span class="token comment">// 连接失败</span>

    <span class="token comment">// 开始使用连接</span>
    connection<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span><span class="token string">&#39;SELECT something FROM sometable&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">error<span class="token punctuation">,</span> results<span class="token punctuation">,</span> fields</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        
        <span class="token comment">// 当不做事时，释放连接</span>
        connection<span class="token punctuation">.</span><span class="token function">release</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 由于释放连接也可能发生错误，所以进行处理</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token keyword">throw</span> error<span class="token punctuation">;</span>

        <span class="token comment">// 这里已经释放了连接，不能再使用连接</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>隐式直接调用 <code>pool.query()</code> 方法，里面传入 Sql 语句，就自动使用连接来执行 Sql 语句。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>pool<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span><span class="token string">&#39;SELECT 1 + 1 AS solution&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">error<span class="token punctuation">,</span> results<span class="token punctuation">,</span> fields</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token keyword">throw</span> error<span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;The solution is: &#39;</span><span class="token punctuation">,</span> results<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>solution<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>🔴 <strong>【如果需要导出到其他模块使用，则需要使用到 ES6 以上的同步异步语法，待补充内容，或者就直接使用回调函数】</strong></p>`,8),D={href:"https://www.cnblogs.com/wuyoucao/p/7478871.html",target:"_blank",rel:"noopener noreferrer"},B=e(`<h3 id="_4-4-连接池事件" tabindex="-1"><a class="header-anchor" href="#_4-4-连接池事件"><span>4.4 连接池事件</span></a></h3><p>连接池添加了一些事件监听，可以在连接池 <strong>触发了某个状态后</strong> 执行操作。</p><ul><li>当在连接池拿到连接时；</li></ul><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>pool<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;acquire&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">connection</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Connection %d acquired&#39;</span><span class="token punctuation">,</span> connection<span class="token punctuation">.</span>threadId<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>当释放连接时：</li></ul><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>pool<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;release&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">connection</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Connection %d released&#39;</span><span class="token punctuation">,</span> connection<span class="token punctuation">.</span>threadId<span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>当连接到连接池时：</li></ul><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>pool<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;connection&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">connection</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  connection<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span><span class="token string">&#39;SET SESSION auto_increment_increment=1&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-5-释放连接" tabindex="-1"><a class="header-anchor" href="#_4-5-释放连接"><span>4.5 释放连接</span></a></h3><ul><li><p>如果想将连接归还回连接池，使用这条语句，<code>connection.release();</code></p></li><li><p>如果想结束所有的连接，并执行完循环队列，可以使用下面这条语句。</p></li></ul><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>pool<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// all connections in the pool have ended</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>如果想立即结束连接，不执行循环队列里的内容，使用这条语句。<code>connection.destroy();</code></li></ul><h3 id="_4-5-查询语句" tabindex="-1"><a class="header-anchor" href="#_4-5-查询语句"><span>4.5 查询语句</span></a></h3><p>执行查询语句主要特点是可以像 MyBatis 使用占位符。</p><ul><li>使用占位符可以传递单个参数。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>connection<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span><span class="token string">&#39;SELECT * FROM \`books\` WHERE \`author\` = ?&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">&#39;David&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">error<span class="token punctuation">,</span> results<span class="token punctuation">,</span> fields</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// error ：如果查询过程出现错误</span>
    <span class="token comment">// results ：查询结果</span>
    <span class="token comment">// fields ：查询结果的所有参数</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>使用转义字符传递多个参数。该模块自带了转义功能，你在方法中传的数据会自动与第一个参数自动拼接成 Sql 语句。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">var</span> post  <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token literal-property property">title</span><span class="token operator">:</span> <span class="token string">&#39;Hello MySQL&#39;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// 第二个参数传入对象</span>
<span class="token keyword">var</span> query <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span><span class="token string">&#39;INSERT INTO posts SET ?&#39;</span><span class="token punctuation">,</span> post<span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">error<span class="token punctuation">,</span> results<span class="token punctuation">,</span> fields</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token keyword">throw</span> error<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>query<span class="token punctuation">.</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token comment">// 自动将对象转换为Sql语句</span>
<span class="token comment">// INSERT INTO posts SET \`id\` = 1, \`title\` = &#39;Hello MySQL&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,18),A={href:"https://github.com/mysqljs/mysql#escaping-query-values",target:"_blank",rel:"noopener noreferrer"},O=e(`<h2 id="五、路径问题" tabindex="-1"><a class="header-anchor" href="#五、路径问题"><span>五、路径问题</span></a></h2><h3 id="_5-1-遇到的问题" tabindex="-1"><a class="header-anchor" href="#_5-1-遇到的问题"><span>5.1 遇到的问题</span></a></h3><p>在以 Node 命令行运行 app.js 时，会遇到比较诡异的事情。</p><p>Javascript 文件中若使用相对路径来确定文件时，<strong>相对的不是当前文件</strong>，而是 <strong>当前命令行的位置</strong>。</p><p>但使用相对路径引入模块，相对的是当前文件。</p><p>（据说是使用 Node 开发命令行需要使用该特性）</p><p>例如 a.js 有如下代码：使用相对路径导入了一个 b 模块，然后在读取自己文件内容。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;fs&#39;</span><span class="token punctuation">)</span>

<span class="token comment">// 将会输出 &quot;This is b&quot;</span>
<span class="token keyword">const</span> b <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;./b&#39;</span><span class="token punctuation">)</span>

fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">&#39;./a.js&#39;</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> data</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后在命令行不加位置运行 a.js，会发现成功输出不报错。</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># 不加位置运行 a.js</span>
PS D:<span class="token punctuation">\\</span>node<span class="token punctuation">\\</span>test<span class="token operator">&gt;</span> <span class="token function">node</span> a.js
<span class="token comment"># 输出</span>
This is b
const fs <span class="token operator">=</span> require<span class="token punctuation">(</span><span class="token string">&#39;fs&#39;</span><span class="token punctuation">)</span>

// 将会输出 <span class="token string">&quot;This is b&quot;</span>
const b <span class="token operator">=</span> require<span class="token punctuation">(</span><span class="token string">&#39;./b&#39;</span><span class="token punctuation">)</span>

fs.readFile<span class="token punctuation">(</span><span class="token string">&#39;./a.js&#39;</span>,function<span class="token punctuation">(</span>err, data<span class="token punctuation">)</span><span class="token punctuation">{</span>
  if<span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">{</span>
    console.log<span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  console.log<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果加位置运行 a.js，模块导入成功，但文件读入不成功，报错原因是无法打开 <code>D:\\node\\a.js</code> ，很明显是读文件的时候以当前 Node 命令行作为基准位置。</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token comment"># 不加位置运行 a.js</span>
PS D:<span class="token punctuation">\\</span>node<span class="token operator">&gt;</span> <span class="token function">node</span> .<span class="token punctuation">\\</span>test<span class="token punctuation">\\</span>a.js
<span class="token comment"># 输出</span>
执行了b.js
<span class="token punctuation">[</span>Error: ENOENT: no such <span class="token function">file</span> or directory, <span class="token function">open</span> <span class="token string">&#39;D:\\node\\a.js&#39;</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>
  errno: -4058,
  code: <span class="token string">&#39;ENOENT&#39;</span>,
  syscall: <span class="token string">&#39;open&#39;</span>,
  path: <span class="token string">&#39;D:\\\\历史学习\\\\杰2020-06笔记\\\\笔记\\\\html5\\\\node\\\\第一天\\\\a.js&#39;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5-2-解决方案" tabindex="-1"><a class="header-anchor" href="#_5-2-解决方案"><span>5.2 解决方案</span></a></h3><p>Node 除了提供 <code>require</code> 和 <code>exports</code> 之外，还提供了两个有用的变量。</p><ul><li><code>__dirname</code> ：<strong>动态获取</strong> 到当前文件 <strong>所属目录的绝对路径</strong></li><li><code>__filename</code>：动态获取 到 <strong>当前文件的绝对路径</strong>。</li></ul><p>上面的代码改写为：</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;fs&#39;</span><span class="token punctuation">)</span>

<span class="token comment">// 这里不用改</span>
<span class="token keyword">const</span> b <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;./b&#39;</span><span class="token punctuation">)</span>

<span class="token comment">// 引用path模块</span>
<span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;path&#39;</span><span class="token punctuation">)</span>
<span class="token comment">// 使用__filename</span>
fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span>__filename<span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> data</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后开放指定目录的代码中，可以修改成</p><p><code>app.use(&#39;/public/&#39;, express.static( path.join(__dirname + &#39;./public/&#39;)) )</code></p><h2 id="六、arttemplate模板继承" tabindex="-1"><a class="header-anchor" href="#六、arttemplate模板继承"><span>六、artTemplate模板继承</span></a></h2><p>art-template 提供了模板继承和子模板。</p><ul><li><p>模板继承（Template inheritance）：简单说就是定义父模板，父模板里定义一个可以重写的内容，然后子模板选择可以重写或者直接使用父类的内容。就像 Java 里的方法重写【@Override】。</p></li><li><p>子模板：简单来说就是定义一个模块，然后其他可以包含他。例如包含头部状态栏。</p></li><li><p>两个都有相似之处，关键在于使用场景的不同。</p></li></ul><h3 id="_6-1-子模板" tabindex="-1"><a class="header-anchor" href="#_6-1-子模板"><span>6.1 子模板</span></a></h3><p>子模板是用来被包含的，与父模块一起组成一个页面，有点像机器的零件。</p><p>例如下面有两段代码，用来表示头部和尾部。</p><div class="language-html line-numbers-mode" data-ext="html" data-title="html"><pre class="language-html"><code><span class="token comment">&lt;!-- header.html --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span>这是头部<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>

<span class="token comment">&lt;!-- footer.html --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span>这是尾部<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后如果想使用这两段代码，在指定位置直接使用特定语法即可。</p><p>两个大括号，然后里面 <code>include &#39;包含的文件名&#39;</code>。</p><div class="language-html line-numbers-mode" data-ext="html" data-title="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
  {{include &#39;./header.html&#39;}}

  这是中间内容

  {{include &#39;./footer.html&#39;}}
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_6-2-模板继承" tabindex="-1"><a class="header-anchor" href="#_6-2-模板继承"><span>6.2 模板继承</span></a></h3><p>模板继承注重于在父模板上挖坑，就像 Java 里的抽象类，挖的坑越多，子类自定义特性就越强。</p><p>例如下面的代码中，挖了两个坑，一个用于填写 style 标签，一个用于填写内容部分。如果子模板没有去填坑，可以指定默认值，就像 Java 里的普通方法继承。</p><div class="language-html line-numbers-mode" data-ext="html" data-title="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
    {{ block &#39;style&#39; }}
    {{ /block}}

    {{ block &#39;content&#39; }}
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">&gt;</span></span>这是默认内容<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
	{{ /block}}
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后就开始看子模板的表演了。</p><ul><li>第 1 行【必写】：指定你继承的父模版。</li><li>后面开始填坑，这里指定了 p 标签的字体颜色和主体内容。</li></ul><div class="language-html line-numbers-mode" data-ext="html" data-title="html"><pre class="language-html"><code>{{extend &#39;./index.html&#39;}}
{{ block &#39;style&#39; }}
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">&gt;</span></span><span class="token style"><span class="token language-css">
   <span class="token selector">p</span> <span class="token punctuation">{</span>
   <span class="token property">color</span><span class="token punctuation">:</span> #bfc<span class="token punctuation">;</span>
 <span class="token punctuation">}</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span>
{{/block}}

{{ block &#39;content&#39; }}
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>这是子类内容<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
{{ /block}}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意这里 Node 渲染的是子模板，而不是 6.1 的父模板。</p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code>app<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;/&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">request<span class="token punctuation">,</span> response</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    response<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token string">&#39;children.html&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,38);function T(I,M){const a=o("ExternalLinkIcon");return c(),l("div",null,[u,n("p",null,[s("我们需要将 art-template 与 express 结合一起编程。"),n("a",r,[s("官方文档"),t(a)])]),d,n("p",null,[s("具体其他的命令可以参考 "),n("a",k,[s("官方文档"),t(a)])]),v,m,n("p",null,[s("官方网站："),n("a",b,[s("https://mongoosejs.com/"),t(a)])]),g,n("ol",h,[n("li",null,[s("设计表结构，其中我将性别的类型设成了整型，并且值只能 0 或 1。年龄设置了 3 ~ 60 岁的范围。详情可以查看 "),n("a",f,[s("官方文档"),t(a)]),s("，不同类型可以有不同的限制。")])]),y,n("p",null,[s("下面将列举部分运算符：具体的可以参看 "),n("a",_,[s("MongoDB官方文档"),t(a)])]),j,n("p",null,[s("连接可以有一些选项，除了上面所提到的 "),x,s(" 登录用户，"),w,s(" 登录密码还有 "),S,s(" 时区、"),q,s(" 连接超时时间等。。。详情可以查看 "),n("a",E,[s("Github文档"),t(a)])]),N,n("p",null,[n("a",D,[s("参考资料"),t(a)])]),B,n("p",null,[s("🔵 具体的其他查询技巧，可以查看 "),n("a",A,[s("官方文档"),t(a)])]),O])}const $=p(i,[["render",T],["__file","Node-中之框架使用.html.vue"]]),J=JSON.parse(`{"path":"/%E5%AD%A6%E4%B9%A0/%E5%89%8D%E7%AB%AF/%E6%9C%8D%E5%8A%A1%E5%99%A8/Node-%E4%B8%AD%E4%B9%8B%E6%A1%86%E6%9E%B6%E4%BD%BF%E7%94%A8.html","title":"Node-中之框架使用","lang":"zh-CN","frontmatter":{"description":"Node-中之框架使用 一、Express 原生的 http 在某些方面表现不足以应对我们的开发需求，所以我们就需要使用框架来加快我们的开发效率。 在 Node 中，有很多的 Web 开发框架，这里学习 express 为主。 1.1 安装使用 创建一个新文件夹 在文件夹目录的命令行中，创建 package.json 文件。 然后执行 npm inst...","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/%E5%AD%A6%E4%B9%A0/%E5%89%8D%E7%AB%AF/%E6%9C%8D%E5%8A%A1%E5%99%A8/Node-%E4%B8%AD%E4%B9%8B%E6%A1%86%E6%9E%B6%E4%BD%BF%E7%94%A8.html"}],["meta",{"property":"og:site_name","content":"博客演示"}],["meta",{"property":"og:title","content":"Node-中之框架使用"}],["meta",{"property":"og:description","content":"Node-中之框架使用 一、Express 原生的 http 在某些方面表现不足以应对我们的开发需求，所以我们就需要使用框架来加快我们的开发效率。 在 Node 中，有很多的 Web 开发框架，这里学习 express 为主。 1.1 安装使用 创建一个新文件夹 在文件夹目录的命令行中，创建 package.json 文件。 然后执行 npm inst..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://raw.githubusercontent.com/hahg2000/picture/Senior-JS/mongoDB%E7%A4%BA%E4%BE%8B%E5%AD%98%E5%82%A8%E7%BB%93%E6%9E%9C.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-02-24T04:33:47.000Z"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:alt","content":"Node-中之框架使用"}],["meta",{"property":"article:author","content":"hahg"}],["meta",{"property":"article:modified_time","content":"2024-02-24T04:33:47.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Node-中之框架使用\\",\\"image\\":[\\"https://raw.githubusercontent.com/hahg2000/picture/Senior-JS/mongoDB%E7%A4%BA%E4%BE%8B%E5%AD%98%E5%82%A8%E7%BB%93%E6%9E%9C.png\\"],\\"dateModified\\":\\"2024-02-24T04:33:47.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"hahg\\"}]}"]]},"headers":[{"level":2,"title":"一、Express","slug":"一、express","link":"#一、express","children":[{"level":3,"title":"1.1 安装使用","slug":"_1-1-安装使用","link":"#_1-1-安装使用","children":[]},{"level":3,"title":"1.2 入门","slug":"_1-2-入门","link":"#_1-2-入门","children":[]},{"level":3,"title":"1.3 公开指定目录","slug":"_1-3-公开指定目录","link":"#_1-3-公开指定目录","children":[]},{"level":3,"title":"1.4 文件操作路径问题","slug":"_1-4-文件操作路径问题","link":"#_1-4-文件操作路径问题","children":[]},{"level":3,"title":"1.5 与art-template结合","slug":"_1-5-与art-template结合","link":"#_1-5-与art-template结合","children":[]},{"level":3,"title":"1.6 改写留言板案例","slug":"_1-6-改写留言板案例","link":"#_1-6-改写留言板案例","children":[]},{"level":3,"title":"1.8 读取文件里的数据","slug":"_1-8-读取文件里的数据","link":"#_1-8-读取文件里的数据","children":[]}]},{"level":2,"title":"二、CURD起步","slug":"二、curd起步","link":"#二、curd起步","children":[{"level":3,"title":"2.1 起步","slug":"_2-1-起步","link":"#_2-1-起步","children":[]},{"level":3,"title":"2.2 提取路由模块","slug":"_2-2-提取路由模块","link":"#_2-2-提取路由模块","children":[]},{"level":3,"title":"2.3 封装操作数据模块","slug":"_2-3-封装操作数据模块","link":"#_2-3-封装操作数据模块","children":[]}]},{"level":2,"title":"三、MongoDB","slug":"三、mongodb","link":"#三、mongodb","children":[{"level":3,"title":"3.1 安装","slug":"_3-1-安装","link":"#_3-1-安装","children":[]},{"level":3,"title":"3.2 配置","slug":"_3-2-配置","link":"#_3-2-配置","children":[]},{"level":3,"title":"3.3 基本命令","slug":"_3-3-基本命令","link":"#_3-3-基本命令","children":[]},{"level":3,"title":"3.4 安装mongoose","slug":"_3-4-安装mongoose","link":"#_3-4-安装mongoose","children":[]},{"level":3,"title":"3.5 快速开始mongoose","slug":"_3-5-快速开始mongoose","link":"#_3-5-快速开始mongoose","children":[]},{"level":3,"title":"3.6 查询语句","slug":"_3-6-查询语句","link":"#_3-6-查询语句","children":[]},{"level":3,"title":"3.7 改造学生信息","slug":"_3-7-改造学生信息","link":"#_3-7-改造学生信息","children":[]}]},{"level":2,"title":"四、Node连接Mysql","slug":"四、node连接mysql","link":"#四、node连接mysql","children":[{"level":3,"title":"4.1 安装","slug":"_4-1-安装","link":"#_4-1-安装","children":[]},{"level":3,"title":"4.2 连接数据库","slug":"_4-2-连接数据库","link":"#_4-2-连接数据库","children":[]},{"level":3,"title":"4.3 使用连接池","slug":"_4-3-使用连接池","link":"#_4-3-使用连接池","children":[]},{"level":3,"title":"4.4 连接池事件","slug":"_4-4-连接池事件","link":"#_4-4-连接池事件","children":[]},{"level":3,"title":"4.5 释放连接","slug":"_4-5-释放连接","link":"#_4-5-释放连接","children":[]},{"level":3,"title":"4.5 查询语句","slug":"_4-5-查询语句","link":"#_4-5-查询语句","children":[]}]},{"level":2,"title":"五、路径问题","slug":"五、路径问题","link":"#五、路径问题","children":[{"level":3,"title":"5.1 遇到的问题","slug":"_5-1-遇到的问题","link":"#_5-1-遇到的问题","children":[]},{"level":3,"title":"5.2 解决方案","slug":"_5-2-解决方案","link":"#_5-2-解决方案","children":[]}]},{"level":2,"title":"六、artTemplate模板继承","slug":"六、arttemplate模板继承","link":"#六、arttemplate模板继承","children":[{"level":3,"title":"6.1 子模板","slug":"_6-1-子模板","link":"#_6-1-子模板","children":[]},{"level":3,"title":"6.2 模板继承","slug":"_6-2-模板继承","link":"#_6-2-模板继承","children":[]}]}],"git":{"createdTime":1708749227000,"updatedTime":1708749227000,"contributors":[{"name":"hahg2000","email":"61403802+hahg2000@users.noreply.github.com","commits":1}]},"readingTime":{"minutes":25.49,"words":7648},"filePathRelative":"学习/前端/服务器/Node-中之框架使用.md","localizedDate":"2024年2月24日","excerpt":"\\n<h2>一、Express</h2>\\n<p>原生的 http 在某些方面表现不足以应对我们的开发需求，所以我们就需要使用框架来加快我们的开发效率。</p>\\n<p>在 Node 中，有很多的 Web 开发框架，这里学习 express 为主。</p>\\n<h3>1.1 安装使用</h3>\\n<ol>\\n<li>创建一个新文件夹</li>\\n<li>在文件夹目录的命令行中，创建 package.json 文件。</li>\\n<li>然后执行 <code>npm install express --save</code> 命令。</li>\\n</ol>\\n<h3>1.2 入门</h3>\\n<ol>\\n<li>先创建一个 app.js ，作为当前项目的主入口。我们需要在该文件里开启服务器。</li>\\n<li>导入 express 模块。\\n<code>var express = require('express')</code></li>\\n<li>创建服务器应用程序。这里变量名从原来的 server 改为了 app。\\n现在为 <code>var app = express()</code>\\n原来为 <code>var server = http.createServer()</code></li>\\n<li>开启监听端口操作。\\n<code>app.listen(3000, ()=&gt;{ console.log('app is running...')})</code></li>\\n<li>判断请求。直接使用 <code>app.get( '请求名', function(){} )</code> 即可，不需要自己使用 if 判断。</li>\\n</ol>","autoDesc":true}`);export{$ as comp,J as data};
