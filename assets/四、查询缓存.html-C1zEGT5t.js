import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as n,c as s,f as t}from"./app-BVqESlQI.js";const e={},p=t(`<h1 id="四、查询缓存" tabindex="-1"><a class="header-anchor" href="#四、查询缓存"><span>四、查询缓存</span></a></h1><p>​ 查询缓存的使用，主要是为了 <strong>提高查询访问速度</strong>。将用户对同一数据的重复查询过程简化，不再每次均从数据库查询获取结果数据，从而提高访问速度。</p><p>​ MyBatis的查询缓存机制，根据缓存区的作用域（生命周期）可划分为两种：</p><ul><li>一级查询缓存</li><li>二级查询缓存</li></ul><h2 id="_4-1-一级查询缓存" tabindex="-1"><a class="header-anchor" href="#_4-1-一级查询缓存"><span>4.1 一级查询缓存</span></a></h2><p>​ MyBatis 一级查询缓存是基于 org.apache.ibatis.cache.impl.PerpetualCache 类的 HashMap 本地缓存，其作用域是 SqlSession。</p><p>​ 在同一个 SqlSession 中两次执行相同的sql查询语句，第一次执行完毕后，会将查询结果写入到缓存中，第二次会从缓存中直接获取数据，而不再到数据库中进行查询，从而提高查询效率。</p><p>​ 当一个 SqlSession 结束后，该 SqlSession 中的一级查询缓存也就不存在了。<span style="color:red;">myBatis 默认一级查询缓存是开启状态，且不能关闭。</span></p><p>项目：cache-sqlSession。在 dynamicMapper基础上修改。</p><h3 id="_4-1-1-一级查询缓存的存在性证明" tabindex="-1"><a class="header-anchor" href="#_4-1-1-一级查询缓存的存在性证明"><span>4.1.1 一级查询缓存的存在性证明</span></a></h3><h4 id="_1-修改测试类" tabindex="-1"><a class="header-anchor" href="#_1-修改测试类"><span>（1）修改测试类</span></a></h4><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">// 证明一级缓存是存在的</span>
	<span class="token annotation punctuation">@Test</span>
	<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token comment">// 第一次查询</span>
		<span class="token class-name">Student</span> student <span class="token operator">=</span> dao<span class="token punctuation">.</span><span class="token function">selectStudentById</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>student<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token comment">// 第二次查询</span>
		<span class="token class-name">Student</span> student2 <span class="token operator">=</span> dao<span class="token punctuation">.</span><span class="token function">selectStudentById</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>student2<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-查询控制台" tabindex="-1"><a class="header-anchor" href="#_2-查询控制台"><span>（2）查询控制台</span></a></h4><p>由图片可知，执行了两个相同的语句却只查询了一次，所以一次缓存是存在的。</p><figure><img src="https://raw.githubusercontent.com/hahg2000/SSMPic/main/证明一级缓存存在.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="_4-1-2-一级缓存读取数据的依据" tabindex="-1"><a class="header-anchor" href="#_4-1-2-一级缓存读取数据的依据"><span>4.1.2 一级缓存读取数据的依据</span></a></h3><p>​ 一级缓存缓存的是相同 Sql 映射 id 的查询结果，<span style="color:red;">而非相同 Sql 语句的查询结果。</span></p><p>​ 因为 myBatis 内部对于查询缓存，无论是一级查询缓存还是二级查询缓存，其底层均使用一个 HashMap 实现：</p><ul><li>key 为 Sql 的id相关内容；</li><li>value 为从数据库中查询出的结果。</li></ul><h4 id="_1-修改映射文件" tabindex="-1"><a class="header-anchor" href="#_1-修改映射文件"><span>（1）修改映射文件</span></a></h4><p>​ 在映射文件中对某一个 &lt;select/&gt; 标签进行完全复制，然后修改一下这个 SQL 映射的 id。也就是说，这两个 SQL 映射除了 id 不同，其它均相同，即查询结果肯定是相同的。</p><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>selectStudentById<span class="token punctuation">&quot;</span></span>  <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>Student<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
		select * from student where id=#{jjj}
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>selectStudentById2<span class="token punctuation">&quot;</span></span>  <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>Student<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
		select * from student where id=#{jjj}
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-修改-dao-接口" tabindex="-1"><a class="header-anchor" href="#_2-修改-dao-接口"><span>（2）修改 Dao 接口</span></a></h4><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">// 查询指定学生</span>
	<span class="token class-name">Student</span> <span class="token function">selectStudentById</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token class-name">Student</span> <span class="token function">selectStudentById2</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-修改测试类" tabindex="-1"><a class="header-anchor" href="#_3-修改测试类"><span>（3）修改测试类</span></a></h4><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">// 证明从缓存读取数据的依据是Sql的id</span>
	<span class="token annotation punctuation">@Test</span>
	<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token comment">// 第一次查询</span>
		<span class="token class-name">Student</span> student <span class="token operator">=</span> dao<span class="token punctuation">.</span><span class="token function">selectStudentById</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>student<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token comment">// 第二次查询</span>
		<span class="token class-name">Student</span> student2 <span class="token operator">=</span> dao<span class="token punctuation">.</span><span class="token function">selectStudentById2</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>student2<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_4-查看控制台" tabindex="-1"><a class="header-anchor" href="#_4-查看控制台"><span>（4）查看控制台</span></a></h4><p>​ 发现第二次查询结果与第一次的完全相同，但第二次查询并没有从缓存中读取数据，而是直接从 DB 中进行的查询。这是因为从缓存读取数据的依据是查询SQL的映射id，而非查询结果。</p><figure><img src="https://raw.githubusercontent.com/hahg2000/SSMPic/main/缓存读取数据的依据.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="_4-1-3-增删改对一级查询缓存的影响" tabindex="-1"><a class="header-anchor" href="#_4-1-3-增删改对一级查询缓存的影响"><span>4.1.3 增删改对一级查询缓存的影响</span></a></h3><p>​ 增、删、改操作，无论是否进行提交 sqlSession.commit()，均会清空一级查询缓存，使查询再次从 DB 中 select。</p><h4 id="_1-修改测试类-1" tabindex="-1"><a class="header-anchor" href="#_1-修改测试类-1"><span>（1）修改测试类</span></a></h4><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">// 证明增删改操作的执行，均会清空一级缓存</span>
	<span class="token annotation punctuation">@Test</span>
	<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token comment">// 第一次查询</span>
		<span class="token class-name">Student</span> student <span class="token operator">=</span> dao<span class="token punctuation">.</span><span class="token function">selectStudentById</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>student<span class="token punctuation">)</span><span class="token punctuation">;</span>
		
		dao<span class="token punctuation">.</span><span class="token function">insertStudent</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">&quot;张三&quot;</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">,</span><span class="token number">91.5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token comment">// dao.deleteStudentById(3);</span>
		<span class="token comment">// dao.updateStudent(student);</span>
		
		<span class="token comment">// 第二次查询</span>
		<span class="token class-name">Student</span> student2 <span class="token operator">=</span> dao<span class="token punctuation">.</span><span class="token function">selectStudentById</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>student2<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-查看控制台" tabindex="-1"><a class="header-anchor" href="#_2-查看控制台"><span>（2）查看控制台</span></a></h4><figure><img src="https://raw.githubusercontent.com/hahg2000/SSMPic/main/增删改清空一级缓存.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="_4-2-内置二级查询缓存" tabindex="-1"><a class="header-anchor" href="#_4-2-内置二级查询缓存"><span>4.2 内置二级查询缓存</span></a></h2><p>​ myBatis 查询缓存的作用域是根据映射文件 mapper 的 namespace 划分的，相同 namespace 的 mapper 查询数据存放在 <strong>同一个缓存区域</strong>。不同 namespace 下的数据互不干扰。无论是一级缓存还是二级缓存，都是按照 namespace 进行分别存放的。</p><p>​ 但一、二级缓存的不同之处在于，SqlSession 一旦关闭，则 SqlSession 中的数据将不存在，即一级缓存就不再存在。而二级缓存的生命周期会<strong>与整个应用同步</strong>，与 SqlSession 是否关闭无关。</p><p>​ 使用二级缓存的目的，不是共享数据，因为 MyBatis 从缓存中读取数据的依据是SQL的id，而非查询出的对象。所以，二级缓存中的数据<span style="color:red;">不是为了在多个查询之间共享</span>（所有查询中只要查询结果中存在该对象的，就直接从缓存中读取，这是对数据的共享，Hibernate 中的缓存就是为了共享，但 MyBaits 的不是），<span style="color:red;">而是为了延长该查询结果的保存时间，提高系统性能。</span>myBatis内置的二级缓存为 org.apache.ibatis.cache.impl.PerpetualCache。</p><p>项目：cache-secondLevel-buildin。在 cache-sqlSession 基础上进行修改。</p><h3 id="_4-2-1-二级缓存用法" tabindex="-1"><a class="header-anchor" href="#_4-2-1-二级缓存用法"><span>4.2.1 二级缓存用法</span></a></h3><p>​ 二级查询缓存的使用很简单，只需要完成两步即可：</p><h4 id="_1-实体序列化" tabindex="-1"><a class="header-anchor" href="#_1-实体序列化"><span>（1）实体序列化</span></a></h4><p>​ 要求查询结果所涉及到的实体类要实现 java.io.Serializable 接口。若该实体类存在父类，或其具有域属性，则父类与域属性类也要实现序列化接口。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span><span class="token punctuation">{</span>
	<span class="token keyword">public</span> <span class="token class-name">Integer</span> id<span class="token punctuation">;</span>
	<span class="token keyword">public</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>
	<span class="token keyword">public</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>
	<span class="token keyword">public</span> <span class="token keyword">double</span> score<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-mapper映射中添加-cache-标签" tabindex="-1"><a class="header-anchor" href="#_2-mapper映射中添加-cache-标签"><span>（2）mapper映射中添加 &lt;cache/&gt;标签</span></a></h4><p>在mapper映射文件的 &lt;mapper/&gt; 标签中添加 &lt;cache/&gt; 子标签。</p><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">namespace</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>com.hahg.dao.IStudentDao<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token comment">&lt;!-- 添加标签 --&gt;</span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>cache</span><span class="token punctuation">/&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>insert</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>insertStudent<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
		insert into student(name,age,score) values (#{name},#{age},#{score})
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>insert</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-二级缓存的配置" tabindex="-1"><a class="header-anchor" href="#_3-二级缓存的配置"><span>（3）二级缓存的配置</span></a></h4><p>​ 给 &lt;cache/&gt; 标签添加一些相关属性设置，可以对二级缓存的运行性能进行控制。当然，若不指定设置，则均保持默认值。</p><ul><li><p>eviction：逐出策略。当二级缓存中的对象达到最大值时，就需要通过逐出策略将缓存中的对象移出缓存。默认为LRU。常用的策略有：</p><ul><li><p>FIFO：First In First Out，先进先出；</p></li><li><p>LRU：Least Recently Used，未被使用时间最长的。</p></li></ul></li><li><p>flushInterval：刷新缓存的时间间隔，单位毫秒。这里的刷新缓存即清空缓存。一般不指定，即当执行增删改时刷新缓存。</p></li><li><p>readOnly：设置缓存中数据是否只读。只读的缓存会给所有调用者返回缓存对象的相同实例，因此这些对象不能被修改，这提供了很重要的性能优势。但读写的缓存会返回缓存对象的拷贝。这会慢一些，但是安全，因此默认是 false。</p></li><li><p>size：二级缓存中可以存放的最多对象个数。默认为 1024 个。</p></li></ul><h3 id="_4-2-2-二级查询缓存的存在性证明" tabindex="-1"><a class="header-anchor" href="#_4-2-2-二级查询缓存的存在性证明"><span>4.2.2 二级查询缓存的存在性证明</span></a></h3><p>​ 对于映射文件中的同一个查询，肯定是同一个 namespace 中的查询。在一次查询后，将 SqlSession 关闭，再进行一次相同查询，若发现没有到 DB 中进行 select查询就说明二级查询缓存是存在的。</p><h4 id="_1-修改测试类-2" tabindex="-1"><a class="header-anchor" href="#_1-修改测试类-2"><span>（1）修改测试类</span></a></h4><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">// 证明二级缓存是存在的</span>
	<span class="token annotation punctuation">@Test</span>
	<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test02</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token comment">// 第一次查询</span>
		<span class="token class-name">Student</span> student <span class="token operator">=</span> dao<span class="token punctuation">.</span><span class="token function">selectStudentById</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>student<span class="token punctuation">)</span><span class="token punctuation">;</span>

		<span class="token comment">// 关闭sqlSession</span>
		sqlSession<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token comment">// 再次打开</span>
		sqlSession <span class="token operator">=</span> <span class="token class-name">MyBatisUtils</span><span class="token punctuation">.</span><span class="token function">getSqlSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		dao <span class="token operator">=</span> sqlSession<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span><span class="token class-name">IStudentDao</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		
		<span class="token comment">// 第二次查询</span>
		<span class="token class-name">Student</span> student2 <span class="token operator">=</span> dao<span class="token punctuation">.</span><span class="token function">selectStudentById</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>student2<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-查看控制台-1" tabindex="-1"><a class="header-anchor" href="#_2-查看控制台-1"><span>（2）查看控制台</span></a></h4><p>​ Cache Hit Ratio 表示缓存命中率。开启二级缓存后，每执行一次查询，系统都会计算一次二级缓存的命中率。第一次查询也是先从缓存中查询，只不过缓存中一定是没有的。所以会再从 DB 中查询。由于二级缓存中不存在该数据，所以命中率为0。但第二次查询是从二级缓存中读取的，所以这一次的命中率为1/2 = 0.5。当然，若有第三次查询的话，则命中率会是1/3 = 0.66。</p><img src="https://raw.githubusercontent.com/hahg2000/SSMPic/main/二级缓存证明.png" style="zoom:70%;"><h3 id="_4-2-3-增删改对二级查询缓存的影响" tabindex="-1"><a class="header-anchor" href="#_4-2-3-增删改对二级查询缓存的影响"><span>4.2.3 增删改对二级查询缓存的影响</span></a></h3><h4 id="_1-默认对缓存的刷新" tabindex="-1"><a class="header-anchor" href="#_1-默认对缓存的刷新"><span>（1）默认对缓存的刷新</span></a></h4><p>​ 增删改操作，无论是否进行提交 sqlSession.commit()，均会清空一级、二级查询缓存，使查询再次从 DB 中select。</p><h4 id="_2-设置增删改操作不刷新" tabindex="-1"><a class="header-anchor" href="#_2-设置增删改操作不刷新"><span>（2）设置增删改操作不刷新</span></a></h4><p>​ 二级缓存若要使某个增、删或改操作不清空二级缓存，则需要在其 &lt;insert/&gt; 或 &lt;delete/&gt;或 &lt;update/&gt; 中设置属性【flushCache= ”false”】，默认为true。</p><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>insert</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>insertStudent<span class="token punctuation">&quot;</span></span> <span class="token attr-name">flushCache</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>false<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
	insert into student(name,age,score) values (#{name},#{age},#{score})
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>insert</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-2-4-二级缓存的关闭" tabindex="-1"><a class="header-anchor" href="#_4-2-4-二级缓存的关闭"><span>4.2.4 二级缓存的关闭</span></a></h3><p>​ 二级缓存默认为开启状态。若要将其关闭，则需要进行相关设置。根据关闭的范围大小，可以分为全局关闭与局部关闭。</p><h4 id="_1-全局关闭" tabindex="-1"><a class="header-anchor" href="#_1-全局关闭"><span>（1）全局关闭</span></a></h4><p>​ 所谓全局关闭是指，整个应用的二级缓存全部关闭，所有查询均不使用二级缓存。全局开关设置在主配置文件的全局设置 &lt;settings/&gt; 中，该属性为 cacheEnabled，设置为 false，则关闭；设置为 true，则开启，默认值为true。即二级缓存默认是开启的。</p><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>settings</span><span class="token punctuation">&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>setting</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>cacheEnabled<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>false<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>setting</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>logImpl<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>LOG4J2<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>settings</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-局部关闭" tabindex="-1"><a class="header-anchor" href="#_2-局部关闭"><span>（2）局部关闭</span></a></h4><p>​ 所谓局部关闭是指，整个应用的二级缓存是开启的，但只是针对于某个 &lt;select/&gt; 查询，不使用二级缓存。</p><p>​ 在该要关闭二级缓存的 &lt;select/&gt; 标签中，将其属性 useCache 设置为 false，即可关闭该查询的二级缓存。该属性默认为true，即每个 &lt;select/&gt;查询的二级缓存默认是开启的。</p><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>cache</span><span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>selectStudentById<span class="token punctuation">&quot;</span></span> <span class="token attr-name">useCache</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>false<span class="token punctuation">&quot;</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>Student<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    select * from student where id=#{jjj}
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-2-5-二级缓存的使用原则" tabindex="-1"><a class="header-anchor" href="#_4-2-5-二级缓存的使用原则"><span>4.2.5 二级缓存的使用原则</span></a></h3><h4 id="_1-只能在一个命名空间下使用二级缓存" tabindex="-1"><a class="header-anchor" href="#_1-只能在一个命名空间下使用二级缓存"><span>（1）只能在一个命名空间下使用二级缓存</span></a></h4><p>​ 由于二级缓存中的数据是基于 namespace 的，即 <strong>不同 namespace 中的数据互不干扰</strong>。在多个namespace中若均存在对同一个表的操作，那么这多个 namespace 中的<strong>数据可能就会出现不一致现象</strong>。</p><h4 id="_2-在单表上使用二级缓存" tabindex="-1"><a class="header-anchor" href="#_2-在单表上使用二级缓存"><span>（2）在单表上使用二级缓存</span></a></h4><p>​ 如果一个表与其它表有关联关系，那么就非常有可能存在多个 namespace 对同一数据的操作。而不同 namespace 中的数据互不干扰，所以有可能出现这多个 namespace 中的数据不一致现象。</p><h4 id="_3-查询多于修改时使用" tabindex="-1"><a class="header-anchor" href="#_3-查询多于修改时使用"><span>（3）查询多于修改时使用</span></a></h4><p>​ 二级缓存在查询操作远远多于增删改操作的情况下可以使用二级缓存。因为任何增删改操作都将刷新二级缓存，对二级缓存的频繁刷新将降低系统性能。</p><h2 id="_4-3-ehcache-二级查询缓存" tabindex="-1"><a class="header-anchor" href="#_4-3-ehcache-二级查询缓存"><span>4.3 ehcache 二级查询缓存</span></a></h2><p>​ mybatis 的特长是 SQL 操作，缓存数据管理不是其特长，为了提高缓存的性能，myBatis 允许使用第三方缓存产品。ehCache就是其中的一种。</p><p>​ 项目：cache-secondLevel-ehcache。在项目 cache-secondLevel-buildin上修改。注意，使用 ehcache 二级缓存，实体类无需实现序列化接口。</p><h3 id="_4-3-1导入jar包" tabindex="-1"><a class="header-anchor" href="#_4-3-1导入jar包"><span>4.3.1导入Jar包</span></a></h3><p>这里需要两个Jar包：一个为 ehcache 的核心Jar包，一个是 myBatis 与 ehcache 整合的插件Jar包。</p><p>它们可以从 https://github.com/mybatis/ehcache-cache/releases 下载。</p><p>解压该文件，获取到它们。其中 lib 下的是 ehcache 的核心 Jar 包。</p><h3 id="_4-3-2-添加-ehcache-xml" tabindex="-1"><a class="header-anchor" href="#_4-3-2-添加-ehcache-xml"><span>4.3.2 添加 ehcache.xml</span></a></h3><p>​ 解压 EHCache 的核心 Jar包【ehcache-core-2.6.8.jar】，将其中的一个配置文件 ehcache-failsafe.xml 直接放到项目的 src 目录下，并更名为ehcache.xml。</p><h4 id="_1-diskstore-标签" tabindex="-1"><a class="header-anchor" href="#_1-diskstore-标签"><span>（1）&lt;diskStore/&gt; 标签</span></a></h4><p>​ 指定一个文件目录，当内存空间不够，需要将二级缓存中数据写到硬盘上时，会写到这个指定目录中。其值一般为 java.io.tmpdir，表示当前系统的默认文件临时目录。</p><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code><span class="token comment">&lt;!--
The following properties are translated:
    * user.home - User&#39;s home directory
    * user.dir - User&#39;s current working directory
    * java.io.tmpdir - Default temp file path
    * ehcache.disk.store.dir - A system property you would normally specify on the command line
          e.g. java -Dehcache.disk.store.dir=/u01/myapp/diskdir ...

    Subdirectories can be specified below the property e.g. java.io.tmpdir/one

    --&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>diskStore</span> <span class="token attr-name">path</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>java.io.tmpdir<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>​ 当前系统的默认文件临时目录，可以通过 System.property() 方法查看：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">String</span> path <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">&quot;java.io.tmpdir&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-defaultcache-标签" tabindex="-1"><a class="header-anchor" href="#_2-defaultcache-标签"><span>（2）&lt;defaultCache/&gt; 标签</span></a></h4><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>defaultCache</span>
            <span class="token attr-name">maxElementsInMemory</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>10000<span class="token punctuation">&quot;</span></span>
            <span class="token attr-name">eternal</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>false<span class="token punctuation">&quot;</span></span>
            <span class="token attr-name">timeToIdleSeconds</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>120<span class="token punctuation">&quot;</span></span>
            <span class="token attr-name">timeToLiveSeconds</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>120<span class="token punctuation">&quot;</span></span>
            <span class="token attr-name">maxElementsOnDisk</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>10000000<span class="token punctuation">&quot;</span></span>
            <span class="token attr-name">diskExpiryThreadIntervalSeconds</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>120<span class="token punctuation">&quot;</span></span>
            <span class="token attr-name">memoryStoreEvictionPolicy</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>LRU<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>persistence</span> <span class="token attr-name">strategy</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>localTempSwap<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>defaultCache</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>设定缓存的默认属性数据：</p><ul><li><p>maxElementsInMemory：指定该内存缓存区可以存放缓存对象的最多个数。</p></li><li><p>eternal：设定缓存对象是否不会过期。若设为true，表示对象永远不会过期，此时会忽略 timeToIdleSeconds 与 timeToLiveSeconds 属性。默认值为 false。</p></li><li><p>timeToIdleSeconds：设定允许对象处于空闲状态的最长时间，以秒为单位。当对象自从最近一次被访问后，若处于空闲状态的时间超过了 timeToIdleSeconds 设定的值，这个对象就会过期。当对象过期，EHCache 就会将它从缓存中清除。设置值为 0，则对象可以无限期地处于空闲状态。</p></li><li><p>timeToLiveSeconds：设定对象允许存在于缓存中的最长时间，以秒为单位。当对象自从被存放到缓存后，若处于缓存中的时间超过了 timeToLiveSeconds 设定的值，这个对象就会过期。当对象过期，EHCache就会将它从缓存中清除。设置值为0，则对象可以无限期地存在于缓存中。<strong>注意，只有timeToLiveSeconds≥ timeToIdleSeconds，才有意义</strong>。</p></li><li><p>overflowToDisk：设定为 true，表示当缓存对象达到了 maxElementsInMemory 界限，会将溢出的对象写到上述 &lt;diskStore&gt; 元素指定的硬盘目录缓存中。</p></li><li><p>maxElementsOnDisk：指定硬盘缓存区可以存放缓存对象的最多个数。</p></li><li><p>diskPersistent：指定当程序结束时，硬盘缓存区中的缓存对象是否做持久化。</p></li><li><p>diskExpiryThreadIntervalSeconds：指定硬盘中缓存对象的失效时间间隔。</p></li><li><p>memoryStoreEvictionPolicy：如果内存缓存区超过限制，选择移向硬盘缓存区中的对象时使用的策略。支持三种策略：</p><ul><li>FIFO：First In First Out，先进先出；</li><li>LFU：Less Frequently Used，最少使用；</li><li>LRU：Least Recently Used，最近最少使用。</li></ul></li></ul><h3 id="_4-3-3-启用-ehcache-缓存机制" tabindex="-1"><a class="header-anchor" href="#_4-3-3-启用-ehcache-缓存机制"><span>4.3.3 启用 ehcache 缓存机制</span></a></h3><p>​ 在映射文件的 mapper 中的 &lt;cache/&gt;中通过 type 指定缓存机制为 Ehcache 缓存。默认为 myBatis 内置的二级缓存 org.apache.ibatis.cache.impl.PerpetualCache。</p><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>cache</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>org.mybatis.caches.ehcache.EhcacheCache<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_4-3-4-ehcache-个性化设置" tabindex="-1"><a class="header-anchor" href="#_4-3-4-ehcache-个性化设置"><span>4.3.4 ehcache 个性化设置</span></a></h3><p>在 ehcache.xml 中设置的属性值，会对该项目中所有使用 ehcache 缓存机制的缓存区域起作用。一个项目中可以有多个 mapper，不同的 mapper 有不同的缓存区域。</p><p>对于不同缓存区域也可进行专门针对于当前区域的个性化设置，可通过指定不同 mapper 的 &lt;cache/&gt; 属性值来设置。 &lt;cache/&gt; 属性值的优先级高于 ehcache.xml中的属性值。</p><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>cache</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>org.mybatis.caches.ehcache.EhcacheCache<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>timeToIdleSeconds<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>240<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>maxElementsInMemory<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>5000<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>cache</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,105),c=[p];function l(o,i){return n(),s("div",null,c)}const d=a(e,[["render",l],["__file","四、查询缓存.html.vue"]]),k=JSON.parse('{"path":"/%E5%AD%A6%E4%B9%A0/%E5%90%8E%E7%AB%AF/SSM%E6%A1%86%E6%9E%B6/MyBatis3/%E5%9B%9B%E3%80%81%E6%9F%A5%E8%AF%A2%E7%BC%93%E5%AD%98.html","title":"四、查询缓存","lang":"zh-CN","frontmatter":{"tags":["SSM框架","学习","MyBatis"],"readingTime":true,"autoNext":"五、Mybatis注解式开发","description":"四、查询缓存 ​ 查询缓存的使用，主要是为了 提高查询访问速度。将用户对同一数据的重复查询过程简化，不再每次均从数据库查询获取结果数据，从而提高访问速度。 ​ MyBatis的查询缓存机制，根据缓存区的作用域（生命周期）可划分为两种： 一级查询缓存 二级查询缓存 4.1 一级查询缓存 ​ MyBatis 一级查询缓存是基于 org.apache.iba...","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/%E5%AD%A6%E4%B9%A0/%E5%90%8E%E7%AB%AF/SSM%E6%A1%86%E6%9E%B6/MyBatis3/%E5%9B%9B%E3%80%81%E6%9F%A5%E8%AF%A2%E7%BC%93%E5%AD%98.html"}],["meta",{"property":"og:site_name","content":"博客演示"}],["meta",{"property":"og:title","content":"四、查询缓存"}],["meta",{"property":"og:description","content":"四、查询缓存 ​ 查询缓存的使用，主要是为了 提高查询访问速度。将用户对同一数据的重复查询过程简化，不再每次均从数据库查询获取结果数据，从而提高访问速度。 ​ MyBatis的查询缓存机制，根据缓存区的作用域（生命周期）可划分为两种： 一级查询缓存 二级查询缓存 4.1 一级查询缓存 ​ MyBatis 一级查询缓存是基于 org.apache.iba..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://raw.githubusercontent.com/hahg2000/SSMPic/main/%E8%AF%81%E6%98%8E%E4%B8%80%E7%BA%A7%E7%BC%93%E5%AD%98%E5%AD%98%E5%9C%A8.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-02-24T04:33:47.000Z"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:alt","content":"四、查询缓存"}],["meta",{"property":"article:author","content":"Mr.Hope"}],["meta",{"property":"article:tag","content":"SSM框架"}],["meta",{"property":"article:tag","content":"学习"}],["meta",{"property":"article:tag","content":"MyBatis"}],["meta",{"property":"article:modified_time","content":"2024-02-24T04:33:47.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"四、查询缓存\\",\\"image\\":[\\"https://raw.githubusercontent.com/hahg2000/SSMPic/main/%E8%AF%81%E6%98%8E%E4%B8%80%E7%BA%A7%E7%BC%93%E5%AD%98%E5%AD%98%E5%9C%A8.png\\",\\"https://raw.githubusercontent.com/hahg2000/SSMPic/main/%E7%BC%93%E5%AD%98%E8%AF%BB%E5%8F%96%E6%95%B0%E6%8D%AE%E7%9A%84%E4%BE%9D%E6%8D%AE.png\\",\\"https://raw.githubusercontent.com/hahg2000/SSMPic/main/%E5%A2%9E%E5%88%A0%E6%94%B9%E6%B8%85%E7%A9%BA%E4%B8%80%E7%BA%A7%E7%BC%93%E5%AD%98.png\\"],\\"dateModified\\":\\"2024-02-24T04:33:47.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr.Hope\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":2,"title":"4.1 一级查询缓存","slug":"_4-1-一级查询缓存","link":"#_4-1-一级查询缓存","children":[{"level":3,"title":"4.1.1 一级查询缓存的存在性证明","slug":"_4-1-1-一级查询缓存的存在性证明","link":"#_4-1-1-一级查询缓存的存在性证明","children":[]},{"level":3,"title":"4.1.2 一级缓存读取数据的依据","slug":"_4-1-2-一级缓存读取数据的依据","link":"#_4-1-2-一级缓存读取数据的依据","children":[]},{"level":3,"title":"4.1.3 增删改对一级查询缓存的影响","slug":"_4-1-3-增删改对一级查询缓存的影响","link":"#_4-1-3-增删改对一级查询缓存的影响","children":[]}]},{"level":2,"title":"4.2 内置二级查询缓存","slug":"_4-2-内置二级查询缓存","link":"#_4-2-内置二级查询缓存","children":[{"level":3,"title":"4.2.1 二级缓存用法","slug":"_4-2-1-二级缓存用法","link":"#_4-2-1-二级缓存用法","children":[]},{"level":3,"title":"4.2.2 二级查询缓存的存在性证明","slug":"_4-2-2-二级查询缓存的存在性证明","link":"#_4-2-2-二级查询缓存的存在性证明","children":[]},{"level":3,"title":"4.2.3 增删改对二级查询缓存的影响","slug":"_4-2-3-增删改对二级查询缓存的影响","link":"#_4-2-3-增删改对二级查询缓存的影响","children":[]},{"level":3,"title":"4.2.4 二级缓存的关闭","slug":"_4-2-4-二级缓存的关闭","link":"#_4-2-4-二级缓存的关闭","children":[]},{"level":3,"title":"4.2.5 二级缓存的使用原则","slug":"_4-2-5-二级缓存的使用原则","link":"#_4-2-5-二级缓存的使用原则","children":[]}]},{"level":2,"title":"4.3 ehcache 二级查询缓存","slug":"_4-3-ehcache-二级查询缓存","link":"#_4-3-ehcache-二级查询缓存","children":[{"level":3,"title":"4.3.1导入Jar包","slug":"_4-3-1导入jar包","link":"#_4-3-1导入jar包","children":[]},{"level":3,"title":"4.3.2 添加 ehcache.xml","slug":"_4-3-2-添加-ehcache-xml","link":"#_4-3-2-添加-ehcache-xml","children":[]},{"level":3,"title":"4.3.3 启用 ehcache 缓存机制","slug":"_4-3-3-启用-ehcache-缓存机制","link":"#_4-3-3-启用-ehcache-缓存机制","children":[]},{"level":3,"title":"4.3.4 ehcache 个性化设置","slug":"_4-3-4-ehcache-个性化设置","link":"#_4-3-4-ehcache-个性化设置","children":[]}]}],"git":{"createdTime":1708749227000,"updatedTime":1708749227000,"contributors":[{"name":"hahg2000","email":"61403802+hahg2000@users.noreply.github.com","commits":1}]},"readingTime":{"minutes":12.33,"words":3699},"filePathRelative":"学习/后端/SSM框架/MyBatis3/四、查询缓存.md","localizedDate":"2024年2月24日","excerpt":"\\n<p>​\\t查询缓存的使用，主要是为了 <strong>提高查询访问速度</strong>。将用户对同一数据的重复查询过程简化，不再每次均从数据库查询获取结果数据，从而提高访问速度。</p>\\n<p>​\\tMyBatis的查询缓存机制，根据缓存区的作用域（生命周期）可划分为两种：</p>\\n<ul>\\n<li>一级查询缓存</li>\\n<li>二级查询缓存</li>\\n</ul>\\n<h2>4.1 一级查询缓存</h2>\\n<p>​\\tMyBatis 一级查询缓存是基于 org.apache.ibatis.cache.impl.PerpetualCache 类的 HashMap 本地缓存，其作用域是 SqlSession。</p>","autoDesc":true}');export{d as comp,k as data};
