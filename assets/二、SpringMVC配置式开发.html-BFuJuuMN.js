import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as e,c as p,f as a,a as n,b as s}from"./app-Chw2KLnS.js";const l={},o=a(`<h1 id="二、springmvc配置式开发" tabindex="-1"><a class="header-anchor" href="#二、springmvc配置式开发"><span>二、SpringMVC配置式开发</span></a></h1><p>根据下面的图，我们一步一步配置所需内容。</p><img src="https://raw.githubusercontent.com/hahg2000/SSMPic/main/springmvc执行流程原图.png" style="zoom:70%;"><h2 id="_2-1-处理器映射器handlermapping" tabindex="-1"><a class="header-anchor" href="#_2-1-处理器映射器handlermapping"><span>2.1 处理器映射器HandlerMapping</span></a></h2><p>首先我们先配置处理器映射器 HandleMapping。</p><p>HandlerMapping 接口负责 <u>根据 request 请求</u> 找到对应的 **Handler 处理器 **及 <strong>Interceptor 拦截器</strong>，并将它们封装在 HandlerExecutionChain 对象中，返回给中央调度器。其常用的实现类有两种：</p><ul><li>BeanNameUrlHandlerMapping</li><li>SimpleUrlHandlerMapping</li></ul><h3 id="_2-1-1-beannameurlhandlermapping" tabindex="-1"><a class="header-anchor" href="#_2-1-1-beannameurlhandlermapping"><span>2.1.1 BeanNameUrlHandlerMapping</span></a></h3><p>根据【DispatcherServlet.properties】文件，可以得知我们默认的 HandlerMapping 就是 BeanNameUrlHandlerMapping。</p><div class="language-properties line-numbers-mode" data-ext="properties" data-title="properties"><pre class="language-properties"><code><span class="token key attr-name">org.springframework.web.servlet.HandlerMapping</span><span class="token punctuation">=</span><span class="token value attr-value">org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping,\\
	org.springframework.web.servlet.mvc.annotation.DefaultAnnotationHandlerMapping</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><hr><p><strong>BeanNameUrlHandlerMapping.class：</strong> 接下来我们去看下其源码，第 8 ~ 11 行，执行的是将多个 beanName 进行判断前缀是否存在 “ / ”，若存在则存放到 List 里。</p>`,12),c=n("div",{class:"language-java line-numbers-mode","data-ext":"java","data-title":"java"},[n("pre",{java:"",class:"language-java"},[n("code",null,[n("span",{class:"token keyword"},"public"),s(),n("span",{class:"token keyword"},"class"),s(),n("span",{class:"token class-name"},"BeanNameUrlHandlerMapping"),s(),n("span",{class:"token keyword"},"extends"),s(),n("span",{class:"token class-name"},"AbstractDetectingUrlHandlerMapping"),s(),n("span",{class:"token punctuation"},"{"),s(`

	`),n("span",{class:"token doc-comment comment"},`/**
	 * Checks name and aliases of the given bean for URLs, starting with "/".
	 */`),s(`
	`),n("span",{class:"token annotation punctuation"},"@Override"),s(`
	`),n("span",{class:"token keyword"},"protected"),s(),n("span",{class:"token class-name"},"String"),n("span",{class:"token punctuation"},"["),n("span",{class:"token punctuation"},"]"),s(),n("span",{class:"token function"},"determineUrlsForHandler"),n("span",{class:"token punctuation"},"("),n("span",{class:"token class-name"},"String"),s(" beanName"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
		`),n("span",{class:"token class-name"},"List"),n("span",{class:"token generics"},[n("span",{class:"token punctuation"},"<"),n("span",{class:"token class-name"},"String"),n("span",{class:"token punctuation"},">")]),s(" urls "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"new"),s(),n("span",{class:"token class-name"},"ArrayList"),n("span",{class:"token generics"},[n("span",{class:"token punctuation"},"<"),n("span",{class:"token class-name"},"String"),n("span",{class:"token punctuation"},">")]),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
		`),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s("beanName"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"startsWith"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"/"'),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
			urls`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"add"),n("span",{class:"token punctuation"},"("),s("beanName"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
		`),n("span",{class:"token punctuation"},"}"),s(`
		`),n("span",{class:"token class-name"},"String"),n("span",{class:"token punctuation"},"["),n("span",{class:"token punctuation"},"]"),s(" aliases "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token function"},"getApplicationContext"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"getAliases"),n("span",{class:"token punctuation"},"("),s("beanName"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
		`),n("span",{class:"token keyword"},"for"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token class-name"},"String"),s(" alias "),n("span",{class:"token operator"},":"),s(" aliases"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
			`),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s("alias"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"startsWith"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"/"'),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
				urls`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"add"),n("span",{class:"token punctuation"},"("),s("alias"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
			`),n("span",{class:"token punctuation"},"}"),s(`
		`),n("span",{class:"token punctuation"},"}"),s(`
		`),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token class-name"},"StringUtils"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"toStringArray"),n("span",{class:"token punctuation"},"("),s("urls"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
	`),n("span",{class:"token punctuation"},"}"),s(`

`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"highlight-lines"},[n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br")]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),i=a(`<h3 id="_2-1-2-simpleurlhandlermapping" tabindex="-1"><a class="header-anchor" href="#_2-1-2-simpleurlhandlermapping"><span>2.1.2 SimpleUrlHandlerMapping</span></a></h3><p>若使用上述类，有几个问题：</p><ul><li>处理器 Bean 的 id 为 <strong>一个 url 请求路径</strong>，而不是 Bean 的名称，有些奇特。</li><li>处理器 Bean 的定义与请求 url 绑定在了一起。若出现多个 url 请求同一个处理器的情况，就需要在 Spring 容器中配置多个该处理器类的 &lt;bean/&gt;。<strong>这将导致容器会创建多个该处理器类实例</strong>。</li></ul><p>所以可以使用 SimpleUrlHandlerMapping 处理器映射器，不仅可以将 url 与处理器的定义分离，还可以对 url 进行统一映射管理。</p><ul><li>使用 SimpleUrlHandlerMapping 类，需要配置 mappings 属性或者 urlMap 属性。</li><li>配置 mappings 属性需要使用 &lt;props/&gt; 标签；</li><li>配置 urlMap 属性需要使用 &lt;map/&gt; 标签</li></ul><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code><span class="token comment">&lt;!-- 注册处理器映射器 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>org.springframework.web.servlet.handler.SimpleUrlHandlerMapping<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
	<span class="token comment">&lt;!-- 
	&lt;property name=&quot;mappings&quot;&gt;
         &lt;props&gt;
             &lt;prop key=&quot;/hello.do&quot;&gt;myController&lt;/prop&gt;
             &lt;prop key=&quot;/my.do&quot;&gt;myController&lt;/prop&gt;
        &lt;/props&gt;
  	&lt;/property&gt; 
	--&gt;</span>
		
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>urlMap<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>map</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>entry</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>/hello.do<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>myController<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>entry</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>/my.do<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>myController<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>map</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span>	

<span class="token comment">&lt;!-- 注册处理器 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>myController<span class="token punctuation">&quot;</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>com.hahg.handlers.MyController<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>但如果不是多个路径访问一个控制器 Controller ，那就没必要用这个类，直接使用默认的 BeanNameUrlHandlerMapping 即可。</p><h3 id="_2-1-3-执行流程" tabindex="-1"><a class="header-anchor" href="#_2-1-3-执行流程"><span>2.1.3 执行流程</span></a></h3><p>接下来，我们来看处理器映射器的相关源码，打开 DispatchServlet.class 类，寻找到 doDispatch 方法。</p><p><strong>第 12 行：</strong> 调用本类即 DispatchServlet 里的 <strong>getHandler 方法</strong>来获取 handler，然后继续跟进 getHandler 方法的实现。</p>`,10),u=n("div",{class:"language-java line-numbers-mode","data-ext":"java","data-title":"java"},[n("pre",{java:"",class:"language-java"},[n("code",null,[n("span",{class:"token keyword"},"protected"),s(),n("span",{class:"token keyword"},"void"),s(),n("span",{class:"token function"},"doDispatch"),n("span",{class:"token punctuation"},"("),n("span",{class:"token class-name"},"HttpServletRequest"),s(" request"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token class-name"},"HttpServletResponse"),s(" response"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token keyword"},"throws"),s(),n("span",{class:"token class-name"},"Exception"),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token comment"},"// 。。。。。"),s(`
    `),n("span",{class:"token keyword"},"try"),s(),n("span",{class:"token punctuation"},"{"),s(`
        `),n("span",{class:"token class-name"},"ModelAndView"),s(" mv "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"null"),n("span",{class:"token punctuation"},";"),s(`
        `),n("span",{class:"token class-name"},"Exception"),s(" dispatchException "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"null"),n("span",{class:"token punctuation"},";"),s(`

        `),n("span",{class:"token keyword"},"try"),s(),n("span",{class:"token punctuation"},"{"),s(`
            processedRequest `),n("span",{class:"token operator"},"="),s(),n("span",{class:"token function"},"checkMultipart"),n("span",{class:"token punctuation"},"("),s("request"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
            multipartRequestParsed `),n("span",{class:"token operator"},"="),s(),n("span",{class:"token punctuation"},"("),s("processedRequest "),n("span",{class:"token operator"},"!="),s(" request"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`

            `),n("span",{class:"token comment"},"// Determine handler for the current request."),s(`
            mappedHandler `),n("span",{class:"token operator"},"="),s(),n("span",{class:"token function"},"getHandler"),n("span",{class:"token punctuation"},"("),s("processedRequest"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
`)])]),n("div",{class:"highlight-lines"},[n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("div",{class:"highlight-line"}," ")]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),r=n("p",null,[s("根据注释可知，其方法的作用是 "),n("u",null,"尝试所有的 HandlerMapping 种类来获取处理器 handler"),s("，但这个并不是真正的处理器，根据 "),n("strong",null,"第 13 行"),s(" 代码可知，其返回类型是 HandlerExecutionChain —— 处理器执行链。")],-1),k=n("div",{class:"language-java line-numbers-mode","data-ext":"java","data-title":"java"},[n("pre",{java:"",class:"language-java"},[n("code",null,[n("span",{class:"token doc-comment comment"},[s(`/**
* Return the HandlerExecutionChain for this request.
* `),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),s("p")]),n("span",{class:"token punctuation"},">")]),s(`Tries all handler mappings in order.
* `),n("span",{class:"token keyword"},"@param"),s(),n("span",{class:"token parameter"},"request"),s(` current HTTP request
* `),n("span",{class:"token keyword"},"@return"),s(" the HandlerExecutionChain, or "),n("span",{class:"token punctuation"},"{"),n("span",{class:"token keyword"},"@code"),s(),n("span",{class:"token code-section"},[n("span",{class:"token code language-java"},[n("span",{class:"token keyword"},"null")])]),n("span",{class:"token punctuation"},"}"),s(` if no handler could be found
*/`)]),s(`
`),n("span",{class:"token keyword"},"protected"),s(),n("span",{class:"token class-name"},"HandlerExecutionChain"),s(),n("span",{class:"token function"},"getHandler"),n("span",{class:"token punctuation"},"("),n("span",{class:"token class-name"},"HttpServletRequest"),s(" request"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token keyword"},"throws"),s(),n("span",{class:"token class-name"},"Exception"),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token keyword"},"for"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token class-name"},"HandlerMapping"),s(" hm "),n("span",{class:"token operator"},":"),s(),n("span",{class:"token keyword"},"this"),n("span",{class:"token punctuation"},"."),s("handlerMappings"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
        `),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s("logger"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"isTraceEnabled"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
            logger`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"trace"),n("span",{class:"token punctuation"},"("),s(`
                `),n("span",{class:"token string"},'"Testing handler map ["'),s(),n("span",{class:"token operator"},"+"),s(" hm "),n("span",{class:"token operator"},"+"),s(),n("span",{class:"token string"},`"] in DispatcherServlet with name '"`),s(),n("span",{class:"token operator"},"+"),s(),n("span",{class:"token function"},"getServletName"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"+"),s(),n("span",{class:"token string"},`"'"`),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
        `),n("span",{class:"token punctuation"},"}"),s(`
        `),n("span",{class:"token class-name"},"HandlerExecutionChain"),s(" handler "),n("span",{class:"token operator"},"="),s(" hm"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"getHandler"),n("span",{class:"token punctuation"},"("),s("request"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
        `),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s("handler "),n("span",{class:"token operator"},"!="),s(),n("span",{class:"token keyword"},"null"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
            `),n("span",{class:"token keyword"},"return"),s(" handler"),n("span",{class:"token punctuation"},";"),s(`
        `),n("span",{class:"token punctuation"},"}"),s(`
    `),n("span",{class:"token punctuation"},"}"),s(`
    `),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token keyword"},"null"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"highlight-lines"},[n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("div",{class:"highlight-line"}," "),n("br"),n("br"),n("br"),n("br"),n("br"),n("br")]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),d=n("h2",{id:"_2-2-处理器适配器handleradapter",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_2-2-处理器适配器handleradapter"},[n("span",null,"2.2 处理器适配器HandlerAdapter")])],-1),m=n("p",null,"适配器模式解决的问题是，使得原本由于接口不兼容而不能一起工作的那些类可以在一起工作。",-1),v=n("p",null,"所以处理器适配器所起的作用是，将多种处理器（实现了不同接口的处理器），通过处理器适配器的适配，使它们可以进行统一标准的工作，对请求进行统一方式的处理。",-1),g=n("p",null,[s("详情见 "),n("a",{href:"../SSM%E5%89%8D%E8%A8%80/%E5%9B%9B%E3%80%81SSM%E6%A1%86%E6%9E%B6%E5%89%8D%E8%A8%80-%E9%80%82%E9%85%8D%E5%99%A8%E6%A8%A1%E5%BC%8F"},"四、SSM框架前言-适配器模式")],-1),b=n("hr",null,null,-1),h=n("p",null,"继续跟进 doDispatch 方法，第 2 行代码是执行 getHandlerAdapter 方法来获取处理器适配器。",-1),w=n("div",{class:"language-java line-numbers-mode","data-ext":"java","data-title":"java"},[n("pre",{java:"",class:"language-java"},[n("code",null,[n("span",{class:"token comment"},"// Determine handler adapter for the current request."),s(`
`),n("span",{class:"token class-name"},"HandlerAdapter"),s(" ha "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token function"},"getHandlerAdapter"),n("span",{class:"token punctuation"},"("),s("mappedHandler"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"getHandler"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`

`),n("span",{class:"token comment"},"// Process last-modified header, if supported by the handler."),s(`
`),n("span",{class:"token comment"},"// 。。。"),s(`
`)])]),n("div",{class:"highlight-lines"},[n("br"),n("div",{class:"highlight-line"}," "),n("br"),n("br"),n("br")]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),q=n("p",null,[s("继续跟进 getHandlerAdapter 方法的代码，发现其也是循环 "),n("strong",null,"所有的处理器适配器"),s(" 来找我们所定义的 MyController 处理器所适合的适配器。")],-1),y=n("div",{class:"language-java line-numbers-mode","data-ext":"java","data-title":"java"},[n("pre",{java:"",class:"language-java"},[n("code",null,[n("span",{class:"token doc-comment comment"},[s(`/**
* Return the HandlerAdapter for this handler object.
* `),n("span",{class:"token keyword"},"@param"),s(),n("span",{class:"token parameter"},"handler"),s(` the handler object to find an adapter for
* `),n("span",{class:"token keyword"},"@throws"),s(),n("span",{class:"token reference"},[n("span",{class:"token class-name"},"ServletException")]),s(` if no HandlerAdapter can be found for the handler. This is a fatal error.
*/`)]),s(`
`),n("span",{class:"token keyword"},"protected"),s(),n("span",{class:"token class-name"},"HandlerAdapter"),s(),n("span",{class:"token function"},"getHandlerAdapter"),n("span",{class:"token punctuation"},"("),n("span",{class:"token class-name"},"Object"),s(" handler"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token keyword"},"throws"),s(),n("span",{class:"token class-name"},"ServletException"),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token keyword"},"for"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token class-name"},"HandlerAdapter"),s(" ha "),n("span",{class:"token operator"},":"),s(),n("span",{class:"token keyword"},"this"),n("span",{class:"token punctuation"},"."),s("handlerAdapters"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
        `),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s("logger"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"isTraceEnabled"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
            logger`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"trace"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"Testing handler adapter ["'),s(),n("span",{class:"token operator"},"+"),s(" ha "),n("span",{class:"token operator"},"+"),s(),n("span",{class:"token string"},'"]"'),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
        `),n("span",{class:"token punctuation"},"}"),s(`
        `),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s("ha"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"supports"),n("span",{class:"token punctuation"},"("),s("handler"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
            `),n("span",{class:"token keyword"},"return"),s(" ha"),n("span",{class:"token punctuation"},";"),s(`
        `),n("span",{class:"token punctuation"},"}"),s(`
    `),n("span",{class:"token punctuation"},"}"),s(`
    `),n("span",{class:"token keyword"},"throw"),s(),n("span",{class:"token keyword"},"new"),s(),n("span",{class:"token class-name"},"ServletException"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"No adapter for handler ["'),s(),n("span",{class:"token operator"},"+"),s(" handler "),n("span",{class:"token operator"},"+"),s(`
                               `),n("span",{class:"token string"},'"]: The DispatcherServlet configuration needs to include a HandlerAdapter that supports this handler"'),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"highlight-lines"},[n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("div",{class:"highlight-line"}," "),n("br"),n("br"),n("br"),n("div",{class:"highlight-line"}," "),n("br"),n("br"),n("br"),n("br"),n("br"),n("br")]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),f=a(`<p>第 11 行，其遍历出来的适配器使用了 supports 这个方法，我们回顾一下适配器模式。</p><ol><li>适配器模式有一个接口，<strong>每个适配器都会去实现这个接口</strong>。如下图所示，实现了 supports 这个方法的有很多类。</li></ol><img src="https://raw.githubusercontent.com/hahg2000/SSMPic/main/适配器support方法实现类.png" style="zoom:80%;"><ol start="2"><li>在之前的例子里，接口有两个方法：</li></ol><ul><li>一个是 support 方法，来 <strong>测试这个类是否符合这个适配器</strong>。</li><li>另外一个是工作方法，就是 <strong>执行所需操作的方法</strong>，之前的例子里是 work 方法，在本例子是 handle 方法。</li></ul><p>下面的代码可以对比下，发现极其相似：</p><ul><li>supports 这个方法里的实现都是 <strong>使用 instanceof 运算符</strong>；</li><li>在工作方法里，都需要 <strong>类型强转</strong> 后才进行操作，当然这里类型强转不会出现问题。</li></ul><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CookerAdapter</span> <span class="token keyword">implements</span> <span class="token class-name">IWorkerAdapter</span> <span class="token punctuation">{</span>

	<span class="token annotation punctuation">@Override</span>
	<span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">work</span><span class="token punctuation">(</span><span class="token class-name">Object</span> worker<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">ICooker</span><span class="token punctuation">)</span>worker<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">cook</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>

	<span class="token annotation punctuation">@Override</span>
	<span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">supports</span><span class="token punctuation">(</span><span class="token class-name">Object</span> worker<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 根据传进来的对象来判断该对象是否符合此适配器</span>
		<span class="token keyword">return</span> <span class="token punctuation">(</span>worker <span class="token keyword">instanceof</span> <span class="token class-name">ICooker</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SimpleControllerHandlerAdapter</span> <span class="token keyword">implements</span> <span class="token class-name">HandlerAdapter</span> <span class="token punctuation">{</span>

	<span class="token annotation punctuation">@Override</span>
	<span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">supports</span><span class="token punctuation">(</span><span class="token class-name">Object</span> handler<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> <span class="token punctuation">(</span>handler <span class="token keyword">instanceof</span> <span class="token class-name">Controller</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>

	<span class="token annotation punctuation">@Override</span>
	<span class="token keyword">public</span> <span class="token class-name">ModelAndView</span> <span class="token function">handle</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">,</span> <span class="token class-name">Object</span> handler<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
	<span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">Controller</span><span class="token punctuation">)</span> handler<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">handleRequest</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_2-3-处理器" tabindex="-1"><a class="header-anchor" href="#_2-3-处理器"><span>2.3 处理器</span></a></h2><p>处理器除了实现 Controller 接口外，还可以继承自一些其它的类来完成一些特殊的功能。</p><h3 id="_2-3-1-继承自-abstractcontroller-类" tabindex="-1"><a class="header-anchor" href="#_2-3-1-继承自-abstractcontroller-类"><span>2.3.1 继承自 AbstractController 类</span></a></h3><p>若处理器继承自 AbstractController 类，那么该控制器就具有了一些新的功能。</p><p>先看下 AbstractController 的源码：</p><ul><li>里面有 handleRequest 方法，这个方法是模板方法，其调用了 handleRequestInternal 方法。</li><li>而 handleRequestInternal 方法是我们需要实现的，这个就是之前的 <strong>模板方法设计模式</strong>，这个方法就是 <strong>抽象方法</strong>，是要求子类 <strong>必须</strong> 实现的方法。</li></ul><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token annotation punctuation">@Override</span>
<span class="token keyword">public</span> <span class="token class-name">ModelAndView</span> <span class="token function">handleRequest</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span>
    <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">HttpMethod</span><span class="token punctuation">.</span><span class="token constant">OPTIONS</span><span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        response<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">&quot;Allow&quot;</span><span class="token punctuation">,</span> <span class="token function">getAllowHeader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// Delegate to WebContentGenerator for checking and preparing.</span>
    <span class="token function">checkRequest</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">prepareResponse</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// Execute handleRequestInternal in synchronized block if required.</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>synchronizeOnSession<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">HttpSession</span> session <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getSession</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>session <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">Object</span> mutex <span class="token operator">=</span> <span class="token class-name">WebUtils</span><span class="token punctuation">.</span><span class="token function">getSessionMutex</span><span class="token punctuation">(</span>session<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>mutex<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span> <span class="token function">handleRequestInternal</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">return</span> <span class="token function">handleRequestInternal</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
    * Template method. Subclasses must implement this.
    * The contract is the same as for <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java">handleRequest</span></span><span class="token punctuation">}</span>.
    * <span class="token keyword">@see</span> <span class="token reference"><span class="token punctuation">#</span><span class="token field">handleRequest</span></span>
    */</span>
	<span class="token keyword">protected</span> <span class="token keyword">abstract</span> <span class="token class-name">ModelAndView</span> <span class="token function">handleRequestInternal</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>因为 AbstractController 类还继承自一个父类 WebContentGenerator。WebContentGenerator 类具有 supportedMethods属性，可以设置支持的 HTTP 数据提交方式。<strong>默认支持 GET、POST</strong>。</p><p>若处理器继承自 AbstractController 类，那么处理器就可以通过属性 supportedMethods 来限制 HTTP 请求提交方式了。例如，指定 <strong>只支持 POST 的 HTTP 请求提交方式</strong>。</p><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code><span class="token comment">&lt;!-- 注册处理器 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>/my.do<span class="token punctuation">&quot;</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>com.hahg.handlers.MyController<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>supportedMethods<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>POST<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>能提交 POST 请求的只有两个种类：<span style="color:red;">表单请求 和 AJAX 请求</span></p><h3 id="_2-3-2-继承自-multiactioncontroller-类" tabindex="-1"><a class="header-anchor" href="#_2-3-2-继承自-multiactioncontroller-类"><span>2.3.2 继承自 MultiActionController 类</span></a></h3><p>MultiActionController 类继承自 AbstractController，所以继承自 MultiActionController 类的子类也可以设置HTTP请求提交方式。但该类的最重要的作用是 <strong>执行一个 Controller 处理器里的不同方法</strong>。</p><div class="hint-container warning"><p class="hint-container-title">注意</p><p>该类在 Spring4 被标识为过时方法，在 Spring5 已被删除</p></div><h4 id="_1-在处理器执定义多个方法" tabindex="-1"><a class="header-anchor" href="#_1-在处理器执定义多个方法"><span>（1）在处理器执定义多个方法</span></a></h4><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyController</span> <span class="token keyword">extends</span> <span class="token class-name">MultiActionController</span> <span class="token punctuation">{</span>

	<span class="token keyword">public</span> <span class="token class-name">ModelAndView</span> <span class="token function">doFirst</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
		<span class="token class-name">ModelAndView</span> mv <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ModelAndView</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		mv<span class="token punctuation">.</span><span class="token function">addObject</span><span class="token punctuation">(</span><span class="token string">&quot;message1&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;first&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		mv<span class="token punctuation">.</span><span class="token function">setViewName</span><span class="token punctuation">(</span><span class="token string">&quot;/WEB-INF/jsp/welcome.jsp&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		mv<span class="token punctuation">.</span><span class="token function">setViewName</span><span class="token punctuation">(</span><span class="token string">&quot;welcome&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">return</span> mv<span class="token punctuation">;</span>
	<span class="token punctuation">}</span>

	<span class="token keyword">public</span> <span class="token class-name">ModelAndView</span> <span class="token function">doSecond</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
		<span class="token class-name">ModelAndView</span> mv <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ModelAndView</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		mv<span class="token punctuation">.</span><span class="token function">addObject</span><span class="token punctuation">(</span><span class="token string">&quot;message1&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;second&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		mv<span class="token punctuation">.</span><span class="token function">setViewName</span><span class="token punctuation">(</span><span class="token string">&quot;/WEB-INF/jsp/welcome.jsp&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		mv<span class="token punctuation">.</span><span class="token function">setViewName</span><span class="token punctuation">(</span><span class="token string">&quot;welcome&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">return</span> mv<span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-使用-internalpathmethodnameresolver-方法名解析器-默认" tabindex="-1"><a class="header-anchor" href="#_2-使用-internalpathmethodnameresolver-方法名解析器-默认"><span>（2）使用 InternalPathMethodNameResolver 方法名解析器（默认）</span></a></h4><p>MultiActionController类具有一个默认的 MethodNameResolver 解析器。</p><p>该方法名解析器要求 <strong>方法名以 URI 中资源名称的身份出现</strong>，即方法作为一种可以被请求的资源出现。例如：/ xxx / 方法名。</p><p>这里只要访问 &quot; / my / xxx.do &quot; 处理器就会在代码中寻找名字为 xxx 的方法。</p><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code><span class="token comment">&lt;!-- 注册处理器 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span>
      <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>org.springframework.web.servlet.handler.SimpleUrlHandlerMapping<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>mappings<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>props</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>prop</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>/my/*.do<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>myController<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>prop</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>props</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>myController<span class="token punctuation">&quot;</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>com.hahg.handlers.MyController<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>

<span class="token comment">&lt;!-- 配置视图解析器 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span>
      <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>org.springframework.web.servlet.view.InternalResourceViewResolver<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>prefix<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>/WEB-INF/jsp/<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>suffix<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>.jsp<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-propertiesmethodnameresolver方法名解析器" tabindex="-1"><a class="header-anchor" href="#_3-propertiesmethodnameresolver方法名解析器"><span>（3）PropertiesMethodNameResolver方法名解析器</span></a></h4><p>该方法名解析器中主要用于将不同访问链接映射到指定的方法。</p><ul><li>第 1 ~ 9 行，注册处理器代码不需要改变；</li><li>第 11 ~ 19 行，配置链接所映射的方法；</li><li>第 21 ~ 23 行，注入所需要的属性。</li></ul>`,32),x=n("div",{class:"language-xml line-numbers-mode","data-ext":"xml","data-title":"xml"},[n("pre",{xml:"",class:"language-xml"},[n("code",null,[n("span",{class:"token comment"},"<!-- 注册处理器 -->"),s(`
`),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),s("bean")]),s(`
      `),n("span",{class:"token attr-name"},"class"),n("span",{class:"token attr-value"},[n("span",{class:"token punctuation attr-equals"},"="),n("span",{class:"token punctuation"},'"'),s("org.springframework.web.servlet.handler.SimpleUrlHandlerMapping"),n("span",{class:"token punctuation"},'"')]),n("span",{class:"token punctuation"},">")]),s(`
    `),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),s("property")]),s(),n("span",{class:"token attr-name"},"name"),n("span",{class:"token attr-value"},[n("span",{class:"token punctuation attr-equals"},"="),n("span",{class:"token punctuation"},'"'),s("mappings"),n("span",{class:"token punctuation"},'"')]),n("span",{class:"token punctuation"},">")]),s(`
        `),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),s("props")]),n("span",{class:"token punctuation"},">")]),s(`
            `),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),s("prop")]),s(),n("span",{class:"token attr-name"},"key"),n("span",{class:"token attr-value"},[n("span",{class:"token punctuation attr-equals"},"="),n("span",{class:"token punctuation"},'"'),s("/my/*.do"),n("span",{class:"token punctuation"},'"')]),n("span",{class:"token punctuation"},">")]),s("myController"),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"</"),s("prop")]),n("span",{class:"token punctuation"},">")]),s(`
        `),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"</"),s("props")]),n("span",{class:"token punctuation"},">")]),s(`
    `),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"</"),s("property")]),n("span",{class:"token punctuation"},">")]),s(`
`),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"</"),s("bean")]),n("span",{class:"token punctuation"},">")]),s(`
	
`),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),s("bean")]),s(),n("span",{class:"token attr-name"},"id"),n("span",{class:"token attr-value"},[n("span",{class:"token punctuation attr-equals"},"="),n("span",{class:"token punctuation"},'"'),s("propertiesMethodNameResolver"),n("span",{class:"token punctuation"},'"')]),s(` 
      `),n("span",{class:"token attr-name"},"class"),n("span",{class:"token attr-value"},[n("span",{class:"token punctuation attr-equals"},"="),n("span",{class:"token punctuation"},'"'),s("org.springframework.web.servlet.mvc.multiaction.PropertiesMethodNameResolver"),n("span",{class:"token punctuation"},'"')]),n("span",{class:"token punctuation"},">")]),s(`
    `),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),s("property")]),s(),n("span",{class:"token attr-name"},"name"),n("span",{class:"token attr-value"},[n("span",{class:"token punctuation attr-equals"},"="),n("span",{class:"token punctuation"},'"'),s("mappings"),n("span",{class:"token punctuation"},'"')]),n("span",{class:"token punctuation"},">")]),s(`
        `),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),s("props")]),n("span",{class:"token punctuation"},">")]),s(`
            `),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),s("prop")]),s(),n("span",{class:"token attr-name"},"key"),n("span",{class:"token attr-value"},[n("span",{class:"token punctuation attr-equals"},"="),n("span",{class:"token punctuation"},'"'),s("/my/doFirst.do"),n("span",{class:"token punctuation"},'"')]),n("span",{class:"token punctuation"},">")]),s("doSecond"),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"</"),s("prop")]),n("span",{class:"token punctuation"},">")]),s(`
            `),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),s("prop")]),s(),n("span",{class:"token attr-name"},"key"),n("span",{class:"token attr-value"},[n("span",{class:"token punctuation attr-equals"},"="),n("span",{class:"token punctuation"},'"'),s("/my/doSecond.do"),n("span",{class:"token punctuation"},'"')]),n("span",{class:"token punctuation"},">")]),s("doFirst"),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"</"),s("prop")]),n("span",{class:"token punctuation"},">")]),s(`
        `),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"</"),s("props")]),n("span",{class:"token punctuation"},">")]),s(`
    `),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"</"),s("property")]),n("span",{class:"token punctuation"},">")]),s(`
`),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"</"),s("bean")]),n("span",{class:"token punctuation"},">")]),s(`
	
`),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),s("bean")]),s(),n("span",{class:"token attr-name"},"id"),n("span",{class:"token attr-value"},[n("span",{class:"token punctuation attr-equals"},"="),n("span",{class:"token punctuation"},'"'),s("myController"),n("span",{class:"token punctuation"},'"')]),s(),n("span",{class:"token attr-name"},"class"),n("span",{class:"token attr-value"},[n("span",{class:"token punctuation attr-equals"},"="),n("span",{class:"token punctuation"},'"'),s("com.hahg.handlers.MyController"),n("span",{class:"token punctuation"},'"')]),n("span",{class:"token punctuation"},">")]),s(`
    `),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),s("property")]),s(),n("span",{class:"token attr-name"},"name"),n("span",{class:"token attr-value"},[n("span",{class:"token punctuation attr-equals"},"="),n("span",{class:"token punctuation"},'"'),s("methodNameResolver"),n("span",{class:"token punctuation"},'"')]),s(),n("span",{class:"token attr-name"},"ref"),n("span",{class:"token attr-value"},[n("span",{class:"token punctuation attr-equals"},"="),n("span",{class:"token punctuation"},'"'),s("propertiesMethodNameResolver"),n("span",{class:"token punctuation"},'"')]),n("span",{class:"token punctuation"},"/>")]),s(`
`),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"</"),s("bean")]),n("span",{class:"token punctuation"},">")]),s(`
`)])]),n("div",{class:"highlight-lines"},[n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("div",{class:"highlight-line"}," "),n("div",{class:"highlight-line"}," "),n("br"),n("br"),n("br"),n("br"),n("br"),n("br"),n("div",{class:"highlight-line"}," ")]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"}),n("div",{class:"line-number"})])],-1),M=a(`<h4 id="_4-parametermethodnameresolver方法名解析器" tabindex="-1"><a class="header-anchor" href="#_4-parametermethodnameresolver方法名解析器"><span>（4）ParameterMethodNameResolver方法名解析器</span></a></h4><p>该方法名解析器中的方法名 <strong>作为请求参数的值</strong> 出现。</p><p>例如请求时可以写为 /xxx?ooo=doFirst，则会访问 xxx 所映射的处理器的 doFirst() 方法。</p><p>其中 ooo 为该请求所携带的参数名，而 doFirst 则作为其参数值出现。</p><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>parameterMethodNameResolver<span class="token punctuation">&quot;</span></span> 
      <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>org.springframework.web.servlet.mvc.multiaction.ParameterMethodNameResolver<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>paramName<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>method<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span>


<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>myController<span class="token punctuation">&quot;</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>com.hahg.handlers.MyController<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>methodNameResolver<span class="token punctuation">&quot;</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>parameterMethodNameResolver<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>若不指定</p><h2 id="_2-4-modelandview" tabindex="-1"><a class="header-anchor" href="#_2-4-modelandview"><span>2.4 ModelAndView</span></a></h2><h3 id="_2-4-1-model" tabindex="-1"><a class="header-anchor" href="#_2-4-1-model"><span>2.4.1 Model</span></a></h3><p>ModelAndView 即模型与视图，通过 addObject() 方法向模型中添加数据，通过 setViewName() 方法向模型添加视图名称。</p><p>看下 ModelAndView 的源码，发现其属性的确有视图 view 和 模型 model。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ModelAndView</span> <span class="token punctuation">{</span>

	<span class="token doc-comment comment">/** View instance or view name String */</span>
	<span class="token keyword">private</span> <span class="token class-name">Object</span> view<span class="token punctuation">;</span>

	<span class="token doc-comment comment">/** Model Map */</span>
	<span class="token keyword">private</span> <span class="token class-name">ModelMap</span> model<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>再继续看 model 的类型—— ModelMap 的源码。发现其继承自 LinkedHashMap。而 LinkedHashMap 又继承自 HashMap ，所以 ModelMap 本质上就是哈希表 HashMap 。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ModelMap</span> <span class="token keyword">extends</span> <span class="token class-name">LinkedHashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>

	<span class="token doc-comment comment">/**
	 * Construct a new, empty <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java"><span class="token class-name">ModelMap</span></span></span><span class="token punctuation">}</span>.
	 */</span>
	<span class="token keyword">public</span> <span class="token class-name">ModelMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token punctuation">}</span>
    <span class="token comment">// 。。。。</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LinkedHashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">extends</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">implements</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span>
<span class="token punctuation">{</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>而我们再来看下 HashMap 的源码：里面有一个内部类，是存放哈希表每个元素的值，里面有四个属性，分别是 <strong>哈希值</strong>、<strong>键</strong>、<strong>值</strong>、<strong>下一个节点的地址</strong>。由此可知 HashMap 本质上是一个单向链表。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code>    
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">extends</span> <span class="token class-name">AbstractMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">implements</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">,</span> <span class="token class-name">Cloneable</span><span class="token punctuation">,</span> <span class="token class-name">Serializable</span> <span class="token punctuation">{</span>
    
    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">implements</span> <span class="token class-name">Map<span class="token punctuation">.</span>Entry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
        <span class="token keyword">final</span> <span class="token keyword">int</span> hash<span class="token punctuation">;</span>
        <span class="token keyword">final</span> <span class="token class-name">K</span> key<span class="token punctuation">;</span>
        <span class="token class-name">V</span> value<span class="token punctuation">;</span>
        <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> next<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>::: warings</p><p>在 JDK 1.8 之后 HashMap 中的数组元素和链表节点都采用 Node类 实现，之前是 Entry 类实现。</p><p>:::</p><p>我们再来看下 LinkedHashMap 的源码，发现其比 HashMap 拥有多了两个属性 before 和 after，分别指向前一个结点和下一个结点。由此可知 LinkedHashMap 本质上是一个双向链表。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LinkedHashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">extends</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">implements</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span>
<span class="token punctuation">{</span>
    <span class="token doc-comment comment">/**
     * HashMap.Node subclass for normal LinkedHashMap entries.
     */</span>
    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Entry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">extends</span> <span class="token class-name">HashMap<span class="token punctuation">.</span>Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
        <span class="token class-name">Entry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> before<span class="token punctuation">,</span> after<span class="token punctuation">;</span>
        <span class="token class-name">Entry</span><span class="token punctuation">(</span><span class="token keyword">int</span> hash<span class="token punctuation">,</span> <span class="token class-name">K</span> key<span class="token punctuation">,</span> <span class="token class-name">V</span> value<span class="token punctuation">,</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> next<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">super</span><span class="token punctuation">(</span>hash<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> next<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-4-2-view" tabindex="-1"><a class="header-anchor" href="#_2-4-2-view"><span>2.4.2 View</span></a></h3><p>View 视图是用来设置跳转页面的，其里面的字符串会经过 <strong>视图解析器进行解析，最终转换为相应的页面</strong>。后续会详细讲解。</p><p>这里需要知道的是若不需要 Model 来携带数据而只使用 View 来跳转页面，则可直接使用 View 的一个构造方法即可。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ModelAndView</span> <span class="token punctuation">{</span>
	<span class="token doc-comment comment">/**
	 * Convenient constructor when there is no model data to expose.
	 * Can also be used in conjunction with <span class="token punctuation">{</span><span class="token keyword">@code</span> <span class="token code-section"><span class="token code language-java">addObject</span></span><span class="token punctuation">}</span>.
	 * <span class="token keyword">@param</span> <span class="token parameter">view</span> View object to render
	 * <span class="token keyword">@see</span> <span class="token reference"><span class="token punctuation">#</span><span class="token field">addObject</span></span>
	 */</span>
	<span class="token keyword">public</span> <span class="token class-name">ModelAndView</span><span class="token punctuation">(</span><span class="token class-name">View</span> view<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">this</span><span class="token punctuation">.</span>view <span class="token operator">=</span> view<span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_2-5-视图解析器viewresolver" tabindex="-1"><a class="header-anchor" href="#_2-5-视图解析器viewresolver"><span>2.5 视图解析器ViewResolver</span></a></h2><p>视图解析器 ViewResolver 接口负责将处理结果生成 View 视图。常用的实现类有四种。</p><h3 id="_2-5-1-internalresourceviewresolver-视图解析器" tabindex="-1"><a class="header-anchor" href="#_2-5-1-internalresourceviewresolver-视图解析器"><span>2.5.1 InternalResourceViewResolver 视图解析器</span></a></h3><p>该视图解析器用于完成对 <strong>当前 Web 应用内部资源的封装与跳转</strong>。</p><p>而对于拼接规则是：<strong>前辍+ 视图名称+ 后辍</strong>。</p><p>InternalResourceView 解析器会把处理器方法返回的模型属性都存放到对应的 request 中，然后将请求转发到目标URL。当然，若不指定前辍与后辍，直接将内部资源路径写到setViewName()中也可以。相当于前辍与后辍均为空串。</p><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code><span class="token comment">&lt;!-- 配置视图解析器 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span>
      <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>org.springframework.web.servlet.view.InternalResourceViewResolver<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>prefix<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>/WEB-INF/jsp/<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>suffix<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>.jsp<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>已知该视图解析器存在两个问题，使其使用很不灵活：</p><ul><li><strong>只可以完成将内部资源封装后的跳转</strong>。但无法转向外部资源，如外部网页。</li><li>对于内部资源的定义，也<strong>只能定义一种格式的资源</strong> ——存放于同一目录的同一文件类型的资源文件。就如同上的代码， Controller 类的提交的视图都只会到【/WEB-INF/jsp/】文件夹下查找。</li></ul><h3 id="_2-5-2-beannameviewresolver-视图解析器" tabindex="-1"><a class="header-anchor" href="#_2-5-2-beannameviewresolver-视图解析器"><span>2.5.2 BeanNameViewResolver 视图解析器</span></a></h3><p>顾名思义就是将资源封装为 &quot; Spring 容器中的 Bean 实例 &quot;。</p><p>ModelAndView 通过 <strong>设置视图名称为该 Bean 的 id 属性值来完成对该资源的访问</strong>。所以在springmvc.xml中，可以定义多个 View 视图Bean，让处理器中 ModelAndView 通过对这些 Bean 的 id 的引用来完成向View中封装资源的跳转。</p><p>需要使用到的类：</p><ul><li>RedirectView：定义外部资源视图对象；</li><li>JstlView：定义内部资源视图对象</li></ul><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code><span class="token comment">&lt;!-- 注册处理器 --&gt;</span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>/my.do<span class="token punctuation">&quot;</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>com.hahg.handlers.MyController<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>

<span class="token comment">&lt;!-- 注册视图解析器 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>org.springframework.web.servlet.view.BeanNameViewResolver<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>

<span class="token comment">&lt;!-- 定义一个内部资源View对象 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>myInternalView<span class="token punctuation">&quot;</span></span>
      <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>org.springframework.web.servlet.view.JstlView<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>url<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>/WEB-INF/jsp/welcome.jsp<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span>

<span class="token comment">&lt;!-- 定义两个外部资源View对象 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>taobao<span class="token punctuation">&quot;</span></span>
      <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>org.springframework.web.servlet.view.RedirectView<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>url<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>https://www.taobao.com/<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>jingdong<span class="token punctuation">&quot;</span></span>
      <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>org.springframework.web.servlet.view.RedirectView<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>url<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>https://www.jd.com/<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在处理器 MyController 里，将视图设置为上面代码中的 bean 的 id 值，即可访问到指定的链接。</p><div class="hint-container warning"><p class="hint-container-title">注意</p><p>在 JDK 1.8 以后，JDK 不自带服务器相关的 Jar 包，所以在使用 JstlView 类来访问内部资源时，需要手动导入【jstl.jar】</p><p>下载链接：[ http://archive.apache.org/dist/jakarta/taglibs/standard/binaries/ ]</p></div><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyController</span> <span class="token keyword">implements</span> <span class="token class-name">Controller</span> <span class="token punctuation">{</span>

	<span class="token annotation punctuation">@Override</span>
	<span class="token keyword">public</span> <span class="token class-name">ModelAndView</span> <span class="token function">handleRequest</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
		<span class="token class-name">ModelAndView</span> mv <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ModelAndView</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		mv<span class="token punctuation">.</span><span class="token function">addObject</span><span class="token punctuation">(</span><span class="token string">&quot;message1&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;first&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		mv<span class="token punctuation">.</span><span class="token function">setViewName</span><span class="token punctuation">(</span><span class="token string">&quot;myInternalView&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">return</span> mv<span class="token punctuation">;</span>
	<span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-5-3-xmlviewresolver-视图解析器" tabindex="-1"><a class="header-anchor" href="#_2-5-3-xmlviewresolver-视图解析器"><span>2.5.3 XmlViewResolver 视图解析器</span></a></h3><p>当需要定义的 View 视图对象很多时，就会使 springmvc.xml 文件变得很大，很臃肿，不便于管理。</p><p>所以可以将这些 View 视图对象 <strong>专门抽取出来，单独定义为一个xml文件</strong>。这时就需要使用 XmlViewResolver 解析器了。</p><p>先定义一个 myView.xml 文件，专门存放我们定义的 View 视图。</p><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code><span class="token comment">&lt;!-- myView.xml --&gt;</span>
<span class="token comment">&lt;!-- 定义一个内部资源View对象 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>myInternalView<span class="token punctuation">&quot;</span></span>
      <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>org.springframework.web.servlet.view.JstlView<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>url<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>/WEB-INF/jsp/welcome.jsp<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span>

<span class="token comment">&lt;!-- 定义两个外部资源View对象 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>taobao<span class="token punctuation">&quot;</span></span>
      <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>org.springframework.web.servlet.view.RedirectView<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>url<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>https://www.taobao.com/<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>jingdong<span class="token punctuation">&quot;</span></span>
      <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>org.springframework.web.servlet.view.RedirectView<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>url<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>https://www.jd.com/<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后修改 springmvc.xml 文件，将视图解析器所用到的类修改成 <strong>XmlViewResolver</strong>，并 <strong>配置 location 属性</strong> 来指定我们自定义的 xml 的位置。</p><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code><span class="token comment">&lt;!-- 注册处理器 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>/my.do<span class="token punctuation">&quot;</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>com.hahg.handlers.MyController<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>

<span class="token comment">&lt;!-- 注册视图解析器 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>org.springframework.web.servlet.view.XmlViewResolver<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>location<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>classpath:myViews.xml<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-5-4-resourcebundleviewresolver视图解析器" tabindex="-1"><a class="header-anchor" href="#_2-5-4-resourcebundleviewresolver视图解析器"><span>2.5.4 ResourceBundleViewResolver视图解析器</span></a></h3><p>对于 View 视图对象的注册，除了使用 xml 文件外，<strong>也可以在 properties 文件中进行注册</strong>。</p><p>只不过，此时的视图解析器需要更换为 <strong>ResourceBundleViewResolver 解析器</strong>。该属性文件需要定义在类路径下，即src下。</p><p>而对于属性文件的写法，是有格式要求的：</p><ul><li>资源名称.(class)=封装资源的View全限定性类名</li><li>资源名称.url=资源路径</li></ul><div class="language-properties line-numbers-mode" data-ext="properties" data-title="properties"><pre class="language-properties"><code><span class="token comment"># views.properties</span>
<span class="token key attr-name">myInternalView.(class)</span><span class="token punctuation">=</span><span class="token value attr-value">org.springframework.web.servlet.view.JstlView</span>
<span class="token key attr-name">myInternalView.url</span><span class="token punctuation">=</span><span class="token value attr-value">/WEB-INF/jsp/welcome.jsp</span>

<span class="token key attr-name">taobao.(class)</span><span class="token punctuation">=</span><span class="token value attr-value">org.springframework.web.servlet.view.RedirectView</span>
<span class="token key attr-name">taobao.url</span><span class="token punctuation">=</span><span class="token value attr-value">https://www.taobao.com/</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后需要在容器里进行配置 basename 属性，其值为 properties 文件名。</p><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code><span class="token comment">&lt;!-- 注册视图解析器 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>org.springframework.web.servlet.view.ResourceBundleViewResolver<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>basename<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>views<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-5-5-视图解析器的优先级" tabindex="-1"><a class="header-anchor" href="#_2-5-5-视图解析器的优先级"><span>2.5.5 视图解析器的优先级</span></a></h3><p>有时经常需要应用一些视图解析器策略来解析视图名称，即当同时存在多个视图解析器均可解析 ModelAndView 中的同一视图名称时，哪个视图解析器会起作用呢？</p><p>视图解析器有一个 <strong>order 属性</strong>，专门用于设置多个视图解析器的优先级。</p><p><strong>数字越小，优先级越高</strong>。<strong>数字相同，先注册的优先级高</strong>。</p><p>一般不为 InternalResourceViewResolver 解析器指定优先级，即让其优先级是最低的。</p><div class="language-xml line-numbers-mode" data-ext="xml" data-title="xml"><pre class="language-xml"><code><span class="token comment">&lt;!-- 注册视图解析器 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>org.springframework.web.servlet.view.ResourceBundleViewResolver<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>basename<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>views<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>order<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>5<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,63),_=[o,c,i,u,r,k,d,m,v,g,b,h,w,q,y,f,x,M];function V(H,j){return e(),p("div",null,_)}const A=t(l,[["render",V],["__file","二、SpringMVC配置式开发.html.vue"]]),C=JSON.parse('{"path":"/%E5%AD%A6%E4%B9%A0/%E5%90%8E%E7%AB%AF/SSM%E6%A1%86%E6%9E%B6/SpringMVC/%E4%BA%8C%E3%80%81SpringMVC%E9%85%8D%E7%BD%AE%E5%BC%8F%E5%BC%80%E5%8F%91.html","title":"二、SpringMVC配置式开发","lang":"zh-CN","frontmatter":{"description":"二、SpringMVC配置式开发 根据下面的图，我们一步一步配置所需内容。 2.1 处理器映射器HandlerMapping 首先我们先配置处理器映射器 HandleMapping。 HandlerMapping 接口负责 根据 request 请求 找到对应的 **Handler 处理器 **及 Interceptor 拦截器，并将它们封装在 Han...","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/%E5%AD%A6%E4%B9%A0/%E5%90%8E%E7%AB%AF/SSM%E6%A1%86%E6%9E%B6/SpringMVC/%E4%BA%8C%E3%80%81SpringMVC%E9%85%8D%E7%BD%AE%E5%BC%8F%E5%BC%80%E5%8F%91.html"}],["meta",{"property":"og:site_name","content":"博客演示"}],["meta",{"property":"og:title","content":"二、SpringMVC配置式开发"}],["meta",{"property":"og:description","content":"二、SpringMVC配置式开发 根据下面的图，我们一步一步配置所需内容。 2.1 处理器映射器HandlerMapping 首先我们先配置处理器映射器 HandleMapping。 HandlerMapping 接口负责 根据 request 请求 找到对应的 **Handler 处理器 **及 Interceptor 拦截器，并将它们封装在 Han..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-02-24T04:33:47.000Z"}],["meta",{"property":"article:author","content":"hahg"}],["meta",{"property":"article:modified_time","content":"2024-02-24T04:33:47.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"二、SpringMVC配置式开发\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-02-24T04:33:47.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"hahg\\"}]}"]]},"headers":[{"level":2,"title":"2.1 处理器映射器HandlerMapping","slug":"_2-1-处理器映射器handlermapping","link":"#_2-1-处理器映射器handlermapping","children":[{"level":3,"title":"2.1.1 BeanNameUrlHandlerMapping","slug":"_2-1-1-beannameurlhandlermapping","link":"#_2-1-1-beannameurlhandlermapping","children":[]},{"level":3,"title":"2.1.2 SimpleUrlHandlerMapping","slug":"_2-1-2-simpleurlhandlermapping","link":"#_2-1-2-simpleurlhandlermapping","children":[]},{"level":3,"title":"2.1.3 执行流程","slug":"_2-1-3-执行流程","link":"#_2-1-3-执行流程","children":[]}]},{"level":2,"title":"2.2 处理器适配器HandlerAdapter","slug":"_2-2-处理器适配器handleradapter","link":"#_2-2-处理器适配器handleradapter","children":[]},{"level":2,"title":"2.3 处理器","slug":"_2-3-处理器","link":"#_2-3-处理器","children":[{"level":3,"title":"2.3.1 继承自 AbstractController 类","slug":"_2-3-1-继承自-abstractcontroller-类","link":"#_2-3-1-继承自-abstractcontroller-类","children":[]},{"level":3,"title":"2.3.2 继承自 MultiActionController 类","slug":"_2-3-2-继承自-multiactioncontroller-类","link":"#_2-3-2-继承自-multiactioncontroller-类","children":[]}]},{"level":2,"title":"2.4 ModelAndView","slug":"_2-4-modelandview","link":"#_2-4-modelandview","children":[{"level":3,"title":"2.4.1 Model","slug":"_2-4-1-model","link":"#_2-4-1-model","children":[]},{"level":3,"title":"2.4.2 View","slug":"_2-4-2-view","link":"#_2-4-2-view","children":[]}]},{"level":2,"title":"2.5 视图解析器ViewResolver","slug":"_2-5-视图解析器viewresolver","link":"#_2-5-视图解析器viewresolver","children":[{"level":3,"title":"2.5.1 InternalResourceViewResolver 视图解析器","slug":"_2-5-1-internalresourceviewresolver-视图解析器","link":"#_2-5-1-internalresourceviewresolver-视图解析器","children":[]},{"level":3,"title":"2.5.2 BeanNameViewResolver 视图解析器","slug":"_2-5-2-beannameviewresolver-视图解析器","link":"#_2-5-2-beannameviewresolver-视图解析器","children":[]},{"level":3,"title":"2.5.3 XmlViewResolver 视图解析器","slug":"_2-5-3-xmlviewresolver-视图解析器","link":"#_2-5-3-xmlviewresolver-视图解析器","children":[]},{"level":3,"title":"2.5.4 ResourceBundleViewResolver视图解析器","slug":"_2-5-4-resourcebundleviewresolver视图解析器","link":"#_2-5-4-resourcebundleviewresolver视图解析器","children":[]},{"level":3,"title":"2.5.5 视图解析器的优先级","slug":"_2-5-5-视图解析器的优先级","link":"#_2-5-5-视图解析器的优先级","children":[]}]}],"git":{"createdTime":1708749227000,"updatedTime":1708749227000,"contributors":[{"name":"hahg2000","email":"61403802+hahg2000@users.noreply.github.com","commits":1}]},"readingTime":{"minutes":13.57,"words":4071},"filePathRelative":"学习/后端/SSM框架/SpringMVC/二、SpringMVC配置式开发.md","localizedDate":"2024年2月24日","excerpt":"\\n<p>根据下面的图，我们一步一步配置所需内容。</p>\\n<img src=\\"https://raw.githubusercontent.com/hahg2000/SSMPic/main/springmvc执行流程原图.png\\" style=\\"zoom:70%;\\">\\n<h2>2.1 处理器映射器HandlerMapping</h2>\\n<p>首先我们先配置处理器映射器 HandleMapping。</p>\\n<p>HandlerMapping 接口负责 <u>根据 request 请求</u> 找到对应的 **Handler 处理器 **及 <strong>Interceptor 拦截器</strong>，并将它们封装在 HandlerExecutionChain 对象中，返回给中央调度器。其常用的实现类有两种：</p>","autoDesc":true}');export{A as comp,C as data};
