import{_ as p}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as c,o,c as l,a as n,b as s,d as t,f as e}from"./app-B9MLl3uI.js";const i={},u=e(`<h1 id="三、ssm前言——代理模式" tabindex="-1"><a class="header-anchor" href="#三、ssm前言——代理模式"><span>三、SSM前言——代理模式</span></a></h1><h2 id="_3-1-代理模式" tabindex="-1"><a class="header-anchor" href="#_3-1-代理模式"><span>3.1 代理模式</span></a></h2><p>使用代理对象，是为了在不修改目标对象的基础上，增强主业务逻辑。客户类<u><strong>想要访问</strong></u>的对象是目标对象，但客户类<u><strong>真正能访问</strong></u>的对象是代理对象。 客户类对目标对象的访问是通过访问代理对象来实现的。当然，代理类与目标类要实现同一个接口。</p><p>可以用生活中的“代理律师”为例，来理解“代理模式”。根据代理关系建立的时间不同，可以将代理分为两类：</p><ol><li>静态代理 —— 法律顾问</li><li>动态代理 —— 代理律师</li></ol><h2 id="_3-2-java包的命名" tabindex="-1"><a class="header-anchor" href="#_3-2-java包的命名"><span>3.2 Java包的命名</span></a></h2><p>Java 中的包的命名一般分为4-5层： 之所以要这样命名项目中的包，是为了保证项目中所用到的类具有全球唯一性。</p><p>com.company.project.oa.xxx.ooo.jjj.service.impl</p><table><thead><tr><th>层数</th><th>层数信息</th><th>示例</th></tr></thead><tbody><tr><td>第一层</td><td>甲方公司域名的倒叙</td><td>com.company</td></tr><tr><td>第二层</td><td>项目名称</td><td>project</td></tr><tr><td>第三层</td><td>模块信息</td><td>xxx.ooo.jjj</td></tr><tr><td>第四层</td><td>功能顶层包</td><td>service、dao、beans、vo</td></tr><tr><td>第五层</td><td>实现类包</td><td>impl</td></tr></tbody></table><div class="hint-container tip"><p class="hint-container-title">提示</p><p>有些功能顶层是没有实现类层的</p></div><ol><li><p><strong>beans、entity是Persistance Object （po）持久化对象。</strong></p><p>一般具有id性，因为它们在数据库中都有相应的表</p></li><li><p>Value Object（VO）值对象。一般用于类与页面间传值。</p></li><li><p>Data Transter Object（dto）数据传输对象。一般用于类间传值。</p></li><li><p>Data Access Object（dao）数据访问对象。用于访问数据库，对数据库进行增删改查。</p></li></ol><div class="hint-container tip"><p class="hint-container-title">提示</p><p>第二和第三的类，一般是没有 id 属性的。因为它们不需要持久化到数据库，仅仅用于在代码中进行数据传递。例如，利用 session 传递的数据。</p></div><h2 id="_3-3-静态代理的实现" tabindex="-1"><a class="header-anchor" href="#_3-3-静态代理的实现"><span>3.3 静态代理的实现</span></a></h2><h3 id="_1-目标类定义" tabindex="-1"><a class="header-anchor" href="#_1-目标类定义"><span>（1）目标类定义</span></a></h3><p><strong>ISomeService.java</strong>：<u>接口类型</u>，定义要执行的目标方法</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>hahg<span class="token punctuation">.</span>service</span><span class="token punctuation">;</span>

<span class="token comment">// 主业务接口</span>
<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">ISomeService</span> <span class="token punctuation">{</span>
	<span class="token comment">// 目标方法</span>
	<span class="token class-name">String</span> <span class="token function">doFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token comment">// 目标方法</span>
	<span class="token keyword">void</span> <span class="token function">doSecond</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>SomeServiceImpl.java</strong>：<u>目标类</u>，实现了主业务接口。</p><ul><li>doFirst 方法输出 “ 执行doFisrt()方法 &quot; ，并返回 &quot; abcde &quot;。</li><li>doSecond 方法输出执行 ” doSecond()方法 &quot;。</li></ul><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SomeServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">ISomeService</span> <span class="token punctuation">{</span>

	<span class="token annotation punctuation">@Override</span>
	<span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">doFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;ִ执行doFisrt()方法&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">return</span> <span class="token string">&quot;abcde&quot;</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>

	<span class="token annotation punctuation">@Override</span>
	<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doSecond</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;ִ执行doSecond()方法&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Mytest.java</strong>：<u>测试类</u>，在测试类的主函数中，新建一个目标对象，然后分别执行里面的方法。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Mytest</span> <span class="token punctuation">{</span>

	<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token class-name">ISomeService</span> service <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SomeServiceImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token class-name">String</span> result <span class="token operator">=</span> service<span class="token punctuation">.</span><span class="token function">doFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;result = &quot;</span> <span class="token operator">+</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>
		service<span class="token punctuation">.</span><span class="token function">doSecond</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>执行结果如下图：</p><figure><img src="https://raw.githubusercontent.com/hahg2000/SSMPic/main/20210128110939.png" alt="无代理的执行结果" tabindex="0" loading="lazy"><figcaption>无代理的执行结果</figcaption></figure><div class="hint-container warning"><p class="hint-container-title">注意</p><p>如果现在在<u><strong>不改变目标对象</strong></u>的前提，需要把 result 的结果变为大写。</p></div><div class="hint-container tip"><p class="hint-container-title">提示</p><p>这时需要代理类来做这个事。</p></div><h3 id="_2-代理类的定义" tabindex="-1"><a class="header-anchor" href="#_2-代理类的定义"><span>（2）代理类的定义</span></a></h3><p><strong>SomeServiceProxy.java</strong>：<u>代理类</u>，用于增强目标对象，将目标对象的原始返回值转换成大写。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token comment">// 代理类</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SomeServiceProxy</span> <span class="token keyword">implements</span> <span class="token class-name">ISomeService</span> <span class="token punctuation">{</span>

	<span class="token class-name">ISomeService</span> target<span class="token punctuation">;</span>

	<span class="token keyword">public</span> <span class="token class-name">SomeServiceProxy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token comment">// 初始化目标对象</span>
		target <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SomeServiceImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>

	<span class="token annotation punctuation">@Override</span>
	<span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">doFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token comment">// 代理类调用目标对象的方法</span>
		<span class="token class-name">String</span> result <span class="token operator">=</span> target<span class="token punctuation">.</span><span class="token function">doFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token comment">// 增强就发生在这里</span>
		<span class="token keyword">return</span> result<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>

	<span class="token annotation punctuation">@Override</span>
	<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doSecond</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		target<span class="token punctuation">.</span><span class="token function">doSecond</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Mytest.java</strong>：<u>测试类</u>，在原来的代码基础上，改变第4行，因为这时只需要利用代理对象来执行方法</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Mytest</span> <span class="token punctuation">{</span>

	<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token comment">//		ISomeService service = new SomeServiceImpl();</span>
        <span class="token class-name">ISomeService</span> service <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SomeServiceProxy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token class-name">String</span> result <span class="token operator">=</span> service<span class="token punctuation">.</span><span class="token function">doFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;result = &quot;</span> <span class="token operator">+</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>
		service<span class="token punctuation">.</span><span class="token function">doSecond</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>执行结果如下图：输出已经变为大写了</p><figure><img src="https://raw.githubusercontent.com/hahg2000/SSMPic/main/20210129183625.png" alt="利用了代理类" tabindex="0" loading="lazy"><figcaption>利用了代理类</figcaption></figure><h2 id="_3-4-动态代理——jdk代理" tabindex="-1"><a class="header-anchor" href="#_3-4-动态代理——jdk代理"><span>3.4 动态代理——JDK代理</span></a></h2><h3 id="_1-执行java文件的过程" tabindex="-1"><a class="header-anchor" href="#_1-执行java文件的过程"><span>（1）执行Java文件的过程</span></a></h3><h4 id="a-启动java虚拟机" tabindex="-1"><a class="header-anchor" href="#a-启动java虚拟机"><span>a. 启动java虚拟机</span></a></h4><p>Java文件夹目录下的【/bin/server】里，有个名为 “ jvm.dll ” 的文件，这个就是Java虚拟机。</p><p>这个不同版本 Java 的虚拟机有客户类型和服务器类型两种类型。</p><div class="hint-container tip"><p class="hint-container-title">提示</p><p>在CMD中，输入 “ java -version &quot; 可以看到java版本和java所用的虚拟机的类型。</p></div><h4 id="b-加载相关类库" tabindex="-1"><a class="header-anchor" href="#b-加载相关类库"><span>b. 加载相关类库</span></a></h4><p>第一步：运行 <strong>”引导策略类加载器“</strong>（bootstrap class loader） 这个类 ，加载核心类库 rt.jar —— 【 /jdk1.8.0_202/jre/lib 】</p><p>其核心源码为 src.zip —— 【 /jdk1.8.0_202 】</p><p>第二步：运行 <strong>”扩展类加载器“</strong> 这个类（ext class loader），加载扩展类 —— 【 /jdk1.8.0_202/jre/lib/ext 】</p><p>第三步：运行 <strong>”应用程序类加载器“</strong> 这个类（app class loader ），加载用户自己定义的类。它执行时首先会去 <strong>class path</strong> 所填的路径找所需要的类，若没有填则在当前文件夹查找。</p><h3 id="_2-需要用到的代理方法" tabindex="-1"><a class="header-anchor" href="#_2-需要用到的代理方法"><span>（2）需要用到的代理方法</span></a></h3><p>​ 需要使用下面这个方法来获取代理类：</p><table><thead><tr><th>方法类型和返回值</th><th>方法名</th><th>形参</th></tr></thead><tbody><tr><td>static Object</td><td>newProxyInstance</td><td>（ClassLoader loader,<br> Class&lt;?&gt;[] interfaces, <br>InvocationHandler h）</td></tr></tbody></table><ul><li>ClassLoader loader——目标类的类加载器</li><li>Class&lt;?&gt;[] interfaces ——目标类所实现的所有接口</li><li>InvocationHandler h ——调用处理器；InvocationHandler 是一个接口；因为此接口只定义了一个方法，所以没必要去新建一个类去实现这个接口。而这个接口里面的方法的名字为【 <strong>invoke</strong> 】 。</li><li>注：匿名内部类没有所对应的对象名。</li></ul><p>下面这个为 invoke 方法的参数，在 invoke 方法用于指定返回的代理对象干的工作</p><table><thead><tr><th>返回值</th><th>方法名</th><th>方法形参</th></tr></thead><tbody><tr><td>Object</td><td>invoke</td><td>（Object proxy, Method method, Object[] args ）</td></tr></tbody></table><ul><li>proxy：代理示例，即把代理对象自己传递进来</li><li>method：代理对象的方法，把代理对象当前调用的方法传递进来</li><li>args：代理方法的参数列表</li></ul><p>调用 method 对象的 invoke 方法，来执行目标对象其中的方法，并获取方法的返回值；若无返回值，则会返回 null 。</p><table><thead><tr><th>返回值</th><th>方法名</th><th>方法形参</th></tr></thead><tbody><tr><td>Object</td><td>invoke</td><td>（Object obj,Object[] args）</td></tr></tbody></table><ul><li>obj ：调用底层方法的对象——目标对象</li><li>args ：用于方法调用的参数</li></ul><h3 id="_3-测试文件" tabindex="-1"><a class="header-anchor" href="#_3-测试文件"><span>（3）测试文件</span></a></h3><p><strong>Mytest.java</strong>：method.invoke() 调用的次数和目标对象的方法数目一致。</p><p>因为JDK动态代理的底层的执行原理，与静态代理的相同，所以使用 JDK 动态代理时，目标对象 <strong>必须</strong> 实现接口。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyTest</span> <span class="token punctuation">{</span>

	<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">final</span> <span class="token class-name">ISomeService</span> target <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SomeServiceImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		
		<span class="token comment">// 使用JDK的Proxy动态代理，要求目标类必须实现接口</span>
		<span class="token comment">// 因为其底层的执行原理，与静态代理的相同</span>
		<span class="token class-name">ISomeService</span> service <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">ISomeService</span><span class="token punctuation">)</span> <span class="token class-name">Proxy</span><span class="token punctuation">.</span><span class="token function">newProxyInstance</span><span class="token punctuation">(</span>
					target<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token comment">// 目标类的类加载器</span>
					target<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getInterfaces</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>     <span class="token comment">// 目标类所实现的所有接口</span>
					<span class="token keyword">new</span> <span class="token class-name">InvocationHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token comment">// 匿名内部类</span>
						<span class="token comment">// proxy：代理对象</span>
						<span class="token comment">// method：目标方法</span>
						<span class="token comment">// args：目标方法的参数列表</span>
						<span class="token annotation punctuation">@Override</span>
						<span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">invoke</span><span class="token punctuation">(</span><span class="token class-name">Object</span> proxy<span class="token punctuation">,</span> <span class="token class-name">Method</span> method<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>
								<span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">{</span>
							<span class="token comment">// 调用目标方法</span>
							<span class="token class-name">Object</span> result <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>
							<span class="token keyword">if</span> <span class="token punctuation">(</span>result <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
								result <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span> result<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
							<span class="token punctuation">}</span>
							<span class="token keyword">return</span> result<span class="token punctuation">;</span>
						<span class="token punctuation">}</span>
					<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container warning"><p class="hint-container-title">注意</p><p>在Java 1.8以后，若内部类使用但不修改外部类局部变量时，局部变量前不用加 final</p></div>`,58),r=e("<p>原理：外部类中的局部变量实际上会复制为内部类的成员变量使用</p><p>将局部变量复制为内部类的成员变量时，必须保证这两个变量是一样的。在修改内部类的成员变量时，外部类的局部变量无法被修改到，所以 就将外部类的局部变量设置为 <em>final</em>，对它初始化后，不让你再去修改这个变量，就保证了内部类的成员变量和方法的局部变量的一致性。</p><p>若变量是 <em>final</em> 时：</p><p>若是基本类型，其值是不能改变的，就保证了<em>copy</em>与原始的局部变量的值是一样的；</p><p>若是引用类型，其引用是不能改变的，保证了<em>copy</em>与原始的变量引用的是同一个对象。</p>",5),d={href:"https://blog.csdn.net/sf_climber/article/details/78326984",target:"_blank",rel:"noopener noreferrer"},k=n("h2",{id:"_3-5-动态代理——cglib代理",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_3-5-动态代理——cglib代理"},[n("span",null,"3.5 动态代理——CGLIB代理")])],-1),v=n("p",null,"思考：如何在目标类没有实现接口的情况下，对目标类进行扩展。",-1),m=n("p",null,null,-1),b=n("div",{class:"hint-container tip"},[n("p",{class:"hint-container-title"},"提示"),n("p",null,"代理类可以作为目标类的子类进行扩展。因为目标类必须能够被继承，所以目标类不能是最终类（final 修饰）")],-1),h=n("p",null,"CGLIB(Code Generation Library)是一个开源项目。",-1),g={href:"https://baike.baidu.com/item/%E5%AD%97%E8%8A%82%E7%A0%81/9953683",target:"_blank",rel:"noopener noreferrer"},y=n("p",null,"—— 《cglib》百度百科",-1),S=e(`<h3 id="_1-无接口的cglib代理的实现" tabindex="-1"><a class="header-anchor" href="#_1-无接口的cglib代理的实现"><span>（1）无接口的CGLIB代理的实现</span></a></h3><ol><li>此代理对象需要工厂类来创造，在工厂类先在类里定义一个 myCglibCreator 方法，返回值为目标类类型SomeService</li></ol><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">SomeService</span> <span class="token function">myCglibCreator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="2"><li>使用【cblig.jar】文件里的 Enhancer 类来创建增强器对象。</li></ol><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token class-name">Enhancer</span> enhancer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Enhancer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,5),j={href:"http://www.java2s.com/Code/Jar/c/Downloadcglibfull202jar.htm",target:"_blank",rel:"noopener noreferrer"},w={href:"https://github.com/cglib/cglib/releases/tag/RELEASE_3_3_0",target:"_blank",rel:"noopener noreferrer"},_=e(`<ol start="3"><li>使用 setSuperclass，来指定目标类（父类）</li></ol><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code>enhancer<span class="token punctuation">.</span><span class="token function">setSuperclass</span><span class="token punctuation">(</span><span class="token class-name">SomeService</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="4"><li>设置回调接口对象，实现 MethodInterceptor 接口来定义回调函数。</li></ol><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyCglibFactory</span> <span class="token keyword">implements</span> <span class="token class-name">MethodInterceptor</span> <span class="token punctuation">{</span>
	
	<span class="token keyword">private</span> <span class="token class-name">SomeService</span> target<span class="token punctuation">;</span>

	<span class="token keyword">public</span> <span class="token class-name">MyCglibFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		target <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SomeService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>

	<span class="token keyword">public</span> <span class="token class-name">SomeService</span> <span class="token function">myCglibCreator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token comment">// 创建增强器对象</span>
		<span class="token class-name">Enhancer</span> enhancer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Enhancer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token comment">// 指定目标类，即父类</span>
		enhancer<span class="token punctuation">.</span><span class="token function">setSuperclass</span><span class="token punctuation">(</span><span class="token class-name">SomeService</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token comment">// 设置回调接口对象</span>
		enhancer<span class="token punctuation">.</span><span class="token function">setCallback</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		
		<span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token class-name">SomeService</span><span class="token punctuation">)</span> enhancer<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>

	<span class="token comment">// 回调方法</span>
	<span class="token annotation punctuation">@Override</span>
	<span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">intercept</span><span class="token punctuation">(</span><span class="token class-name">Object</span> obj<span class="token punctuation">,</span> <span class="token class-name">Method</span> method<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">,</span>
		<span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p><strong>方法回调设计模式</strong></p><p>​ 在Java中，就是类A 调用类B 的某个方法b，然后类B 又在某个时候反过来调用类A 中的某个方法a，对于a方法便叫做回调方法。</p></blockquote><img src="https://raw.githubusercontent.com/hahg2000/SSMPic/main/QQ截图20210202121340.png" alt="回调方法的原理" style="zoom:80%;"><p>​ 在上面的例子中，我们定义的 MyCglibFactory 类相当于类 A ，而 Enhacer 类则是类 B 。A类中调用了 Enhancer 类的 setCallback(this) 方法，并将 <strong>回调对象</strong> this 作为实参传递给了 Enhancer 类。 Enhancer 类在后继执行过程中，会调用类A中的 intercept() 方法，这个 intercept() 方法就是回调方法。</p><div class="hint-container tip"><p class="hint-container-title">提示</p><p>若自动产生的方法中的形参的参数名为 arg0 、arg1……，导入源码即可显示正常的参数名。</p></div><ol start="5"><li>在回调方法里，实现所需要的功能。</li></ol><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code>	<span class="token comment">// 回调方法</span>
	<span class="token annotation punctuation">@Override</span>
	<span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">intercept</span><span class="token punctuation">(</span><span class="token class-name">Object</span> obj<span class="token punctuation">,</span> <span class="token class-name">Method</span> method<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">,</span>
			<span class="token class-name">MethodProxy</span> proxy<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">{</span>
		<span class="token comment">// 调用目标方法</span>
		<span class="token class-name">Object</span> result <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>result <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			result <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span> result<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
		<span class="token keyword">return</span> result<span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="6"><li>在测试文件中，当调用 service 的 doFirst() 方法时，会调用上面的回调方法来实现变大写的操作。</li></ol><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyTest</span> <span class="token punctuation">{</span>

	<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token class-name">SomeService</span> service <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyCglibFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">myCglibCreator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token class-name">String</span> result <span class="token operator">=</span> service<span class="token punctuation">.</span><span class="token function">doFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;result = &quot;</span> <span class="token operator">+</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>
		service<span class="token punctuation">.</span><span class="token function">doSecond</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-有接口的cglib代理的实现" tabindex="-1"><a class="header-anchor" href="#_2-有接口的cglib代理的实现"><span>（2）有接口的CGLIB代理的实现</span></a></h3><p><strong>MyCglibFactory.java</strong>：有接口的 CGLIB 代理在无接口的基础下改变工厂类即可。</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyCglibFactory</span> <span class="token keyword">implements</span> <span class="token class-name">MethodInterceptor</span> <span class="token punctuation">{</span>
	
	<span class="token keyword">private</span> <span class="token class-name">ISomeService</span> target<span class="token punctuation">;</span>

	<span class="token keyword">public</span> <span class="token class-name">MyCglibFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		target <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SomeServiceImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>

	<span class="token keyword">public</span> <span class="token class-name">ISomeService</span> <span class="token function">myCglibCreator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token comment">// 创建增强器对象</span>
		<span class="token class-name">Enhancer</span> enhancer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Enhancer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token comment">// 指定目标类，即父类</span>
		enhancer<span class="token punctuation">.</span><span class="token function">setSuperclass</span><span class="token punctuation">(</span><span class="token class-name">ISomeService</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token comment">// 设置回调接口对象</span>
		enhancer<span class="token punctuation">.</span><span class="token function">setCallback</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		
		<span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token class-name">ISomeService</span><span class="token punctuation">)</span> enhancer<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>

	<span class="token comment">// 回调方法</span>
	<span class="token annotation punctuation">@Override</span>
	<span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">intercept</span><span class="token punctuation">(</span><span class="token class-name">Object</span> obj<span class="token punctuation">,</span> <span class="token class-name">Method</span> method<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">,</span>
			<span class="token class-name">MethodProxy</span> proxy<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">{</span>
		<span class="token comment">// 调用目标方法</span>
		<span class="token class-name">Object</span> result <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>result <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			result <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span> result<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
		<span class="token keyword">return</span> result<span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="附录" tabindex="-1"><a class="header-anchor" href="#附录"><span>附录</span></a></h2><h3 id="eclipse-常用快捷键" tabindex="-1"><a class="header-anchor" href="#eclipse-常用快捷键"><span>Eclipse 常用快捷键</span></a></h3><table><thead><tr><th>按键</th><th>作用</th><th>备注</th></tr></thead><tbody><tr><td>(Alt + Shift + R) / F2</td><td>重命名</td><td></td></tr><tr><td>Alt + Shift + L</td><td>生成变量</td><td>在 new 前面自动生成变量名和数据类型</td></tr><tr><td>Alt + Shift + S</td><td>调用源码菜单</td><td>调用菜单后可以按下每个菜单项中字母中<br>有<u><strong>下划线</strong></u>的键来快速使用该菜单项</td></tr><tr><td>Alt + /</td><td>提示</td><td>可以对需要输出的代码使用，快速添加Sysout</td></tr><tr><td>Alt + ↑ / ↓</td><td>移动代码至上行/下行</td><td></td></tr><tr><td>Alt + 指定键</td><td>在窗口中切换不同的输入框</td><td>一定要在窗口中使用，指定键为提示信息中有<u><strong>下划线</strong></u>的字母相对应的键</td></tr><tr><td>Ctrl + Alt + ↑ / ↓</td><td>复制代码至上行/下行</td><td></td></tr><tr><td>Ctrl + Shift + ← / →</td><td>代码区块选择</td><td></td></tr><tr><td>Ctrl + N</td><td>创建不同类型的文件</td><td></td></tr><tr><td>Ctrl + E</td><td>选择切换的标签栏</td><td></td></tr><tr><td>Ctrl + 1</td><td>提示和辅助</td><td>在错误时可以根据提示改正，<br>也可以使用辅助功能快速将局部变量提取为成员变量</td></tr></tbody></table>`,19);function f(x,E){const a=c("ExternalLinkIcon");return o(),l("div",null,[u,n("blockquote",null,[r,n("p",null,[s("来源："),n("a",d,[s("为什么局部内部类和匿名内部类只能访问final的局部变量?(CSDN)"),t(a)])])]),k,v,m,b,n("blockquote",null,[h,n("p",null,[s("是一个强大的，高性能，高质量的Code生成类库，它可以在运行期扩展Java类与实现Java接口。Hibernate支持它来实现PO(Persistent Object 持久化对象)"),n("a",g,[s("字节码"),t(a)]),s("的动态生成。")]),y]),S,n("blockquote",null,[n("p",null,[s("【cglib-full.jar】"),n("a",j,[s("下载地址"),t(a)]),s("（运行程序用到的jar包）")]),n("p",null,[n("a",w,[s("【cglib.jar】官网（Github）"),t(a)])])]),_])}const A=p(i,[["render",f],["__file","三、SSM框架前言-代理模式.html.vue"]]),I=JSON.parse('{"path":"/%E5%AD%A6%E4%B9%A0/%E5%90%8E%E7%AB%AF/SSM%E6%A1%86%E6%9E%B6/SSM%E5%89%8D%E8%A8%80/%E4%B8%89%E3%80%81SSM%E6%A1%86%E6%9E%B6%E5%89%8D%E8%A8%80-%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F.html","title":"三、SSM前言——代理模式","lang":"zh-CN","frontmatter":{"tags":["SSM框架","学习","Java"],"readingTime":true,"autoNext":"四、SSM框架前言-适配器模式","description":"三、SSM前言——代理模式 3.1 代理模式 使用代理对象，是为了在不修改目标对象的基础上，增强主业务逻辑。客户类想要访问的对象是目标对象，但客户类真正能访问的对象是代理对象。 客户类对目标对象的访问是通过访问代理对象来实现的。当然，代理类与目标类要实现同一个接口。 可以用生活中的“代理律师”为例，来理解“代理模式”。根据代理关系建立的时间不同，可以将...","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/%E5%AD%A6%E4%B9%A0/%E5%90%8E%E7%AB%AF/SSM%E6%A1%86%E6%9E%B6/SSM%E5%89%8D%E8%A8%80/%E4%B8%89%E3%80%81SSM%E6%A1%86%E6%9E%B6%E5%89%8D%E8%A8%80-%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F.html"}],["meta",{"property":"og:site_name","content":"博客演示"}],["meta",{"property":"og:title","content":"三、SSM前言——代理模式"}],["meta",{"property":"og:description","content":"三、SSM前言——代理模式 3.1 代理模式 使用代理对象，是为了在不修改目标对象的基础上，增强主业务逻辑。客户类想要访问的对象是目标对象，但客户类真正能访问的对象是代理对象。 客户类对目标对象的访问是通过访问代理对象来实现的。当然，代理类与目标类要实现同一个接口。 可以用生活中的“代理律师”为例，来理解“代理模式”。根据代理关系建立的时间不同，可以将..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://raw.githubusercontent.com/hahg2000/SSMPic/main/20210128110939.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-02-24T04:33:47.000Z"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:alt","content":"三、SSM前言——代理模式"}],["meta",{"property":"article:author","content":"hahg"}],["meta",{"property":"article:tag","content":"SSM框架"}],["meta",{"property":"article:tag","content":"学习"}],["meta",{"property":"article:tag","content":"Java"}],["meta",{"property":"article:modified_time","content":"2024-02-24T04:33:47.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"三、SSM前言——代理模式\\",\\"image\\":[\\"https://raw.githubusercontent.com/hahg2000/SSMPic/main/20210128110939.png\\",\\"https://raw.githubusercontent.com/hahg2000/SSMPic/main/20210129183625.png\\"],\\"dateModified\\":\\"2024-02-24T04:33:47.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"hahg\\"}]}"]]},"headers":[{"level":2,"title":"3.1 代理模式","slug":"_3-1-代理模式","link":"#_3-1-代理模式","children":[]},{"level":2,"title":"3.2 Java包的命名","slug":"_3-2-java包的命名","link":"#_3-2-java包的命名","children":[]},{"level":2,"title":"3.3 静态代理的实现","slug":"_3-3-静态代理的实现","link":"#_3-3-静态代理的实现","children":[{"level":3,"title":"（1）目标类定义","slug":"_1-目标类定义","link":"#_1-目标类定义","children":[]},{"level":3,"title":"（2）代理类的定义","slug":"_2-代理类的定义","link":"#_2-代理类的定义","children":[]}]},{"level":2,"title":"3.4 动态代理——JDK代理","slug":"_3-4-动态代理——jdk代理","link":"#_3-4-动态代理——jdk代理","children":[{"level":3,"title":"（1）执行Java文件的过程","slug":"_1-执行java文件的过程","link":"#_1-执行java文件的过程","children":[]},{"level":3,"title":"（2）需要用到的代理方法","slug":"_2-需要用到的代理方法","link":"#_2-需要用到的代理方法","children":[]},{"level":3,"title":"（3）测试文件","slug":"_3-测试文件","link":"#_3-测试文件","children":[]}]},{"level":2,"title":"3.5 动态代理——CGLIB代理","slug":"_3-5-动态代理——cglib代理","link":"#_3-5-动态代理——cglib代理","children":[{"level":3,"title":"（1）无接口的CGLIB代理的实现","slug":"_1-无接口的cglib代理的实现","link":"#_1-无接口的cglib代理的实现","children":[]},{"level":3,"title":"（2）有接口的CGLIB代理的实现","slug":"_2-有接口的cglib代理的实现","link":"#_2-有接口的cglib代理的实现","children":[]}]},{"level":2,"title":"附录","slug":"附录","link":"#附录","children":[{"level":3,"title":"Eclipse 常用快捷键","slug":"eclipse-常用快捷键","link":"#eclipse-常用快捷键","children":[]}]}],"git":{"createdTime":1708749227000,"updatedTime":1708749227000,"contributors":[{"name":"hahg2000","email":"61403802+hahg2000@users.noreply.github.com","commits":1}]},"readingTime":{"minutes":10.07,"words":3021},"filePathRelative":"学习/后端/SSM框架/SSM前言/三、SSM框架前言-代理模式.md","localizedDate":"2024年2月24日","excerpt":"\\n<h2>3.1 代理模式</h2>\\n<p>使用代理对象，是为了在不修改目标对象的基础上，增强主业务逻辑。客户类<u><strong>想要访问</strong></u>的对象是目标对象，但客户类<u><strong>真正能访问</strong></u>的对象是代理对象。\\n客户类对目标对象的访问是通过访问代理对象来实现的。当然，代理类与目标类要实现同一个接口。</p>\\n<p>可以用生活中的“代理律师”为例，来理解“代理模式”。根据代理关系建立的时间不同，可以将代理分为两类：</p>\\n<ol>\\n<li>静态代理 —— 法律顾问</li>\\n<li>动态代理 —— 代理律师</li>\\n</ol>\\n<h2>3.2 Java包的命名</h2>","autoDesc":true}');export{A as comp,I as data};
