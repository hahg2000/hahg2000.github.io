import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as a,c as n,f as e}from"./app-Chw2KLnS.js";const p="/assets/ch11-hpc-round1-DtqSkVLA.png",t="/assets/ch11-coverage-screen-D2u6yh4t.png",l="/assets/ch11-hpc-round2-U0DivE0r.png",o={},c=e(`<h1 id="第-11-章-测试和质量保障" tabindex="-1"><a class="header-anchor" href="#第-11-章-测试和质量保障"><span>第 11 章：测试和质量保障</span></a></h1><p>构建真实系统意味着我们要关心系统的质量控制，健壮性和正确性。有了正确的质量保障机制，良好编写的代码才能像一架精确的机器一样，所有模块都完成它们预期的任务，并且不会有模棱两可的边界情况。最后我们得到的将是不言自明，正确无疑的代码------这样的代码往往能激发自信。</p><p>Haskell有几个工具用来构建这样精确的系统。最明显的一个，也是语言本身就内置的，是具有强大表达力的类型系统。它使得一些复杂的不变量（invariants）得到了静态保证------绝无可能写出违反这些约束条件的代码。另外，纯度和多态也促进了模块化，易重构，易测试的代码风格。这种类型的代码通常不会出错。</p><p>测试在保证代码的正确性上起到了关键作用。Haskell 主要的测试机制是传统的单元测试（通过 HUnit 库）和由它衍生而来的更强机制： 使用 Haskell 开源测试框架 QuickCheck 进行的基于类型的&quot;性质&quot;测试。基于性质的测试是一种层次较高的方法，它抽象出一些函数应该普遍满足的不变量，真正的测试数据由测试库为程序员产生。通过这种方法，我们可以用成百上千的测试来检验代码，从而发现一些用其他方法无法发现的微妙的边角情形(corner cases)，而这对于手写来说是不可能的。</p><p>在这章里，我们将会学习如何使用 QuickCheck 来建立不变量，然后重新审视之前章节开发的美观打印器，并用 QuickCheck 对它进行测试。 我们也会学习如何用 GHC 的内置代码覆盖工具 HPC 来指导测试过程。</p><h2 id="quickchecktype-based-testing" tabindex="-1"><a class="header-anchor" href="#quickchecktype-based-testing"><span>QuickCheck: 基于类型的测试</span></a></h2><p>为了大概了解基于性质的测试是如何工作的，我们从一个简单的情形开始：你写了一个排序算法，需要测试它的行为。</p><p>首先我们载入 QuickCheck 库和其它依赖模块：</p><div class="language-haskell line-numbers-mode" data-ext="haskell" data-title="haskell"><pre class="language-haskell"><code><span class="token comment">-- file: ch11/QC-basics.hs</span>
<span class="token import-statement"><span class="token keyword">import</span> Test<span class="token punctuation">.</span>QuickCheck</span>
<span class="token import-statement"><span class="token keyword">import</span> Data<span class="token punctuation">.</span>List</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后是我们想要测试的函数------一个自定义的排序过程:</p><div class="language-haskell line-numbers-mode" data-ext="haskell" data-title="haskell"><pre class="language-haskell"><code><span class="token comment">-- file: ch11/QC-basics.hs</span>
<span class="token hvariable">qsort</span> <span class="token operator">::</span> <span class="token constant">Ord</span> <span class="token hvariable">a</span> <span class="token operator">=&gt;</span> <span class="token punctuation">[</span><span class="token hvariable">a</span><span class="token punctuation">]</span> <span class="token operator">-&gt;</span> <span class="token punctuation">[</span><span class="token hvariable">a</span><span class="token punctuation">]</span>
<span class="token hvariable">qsort</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>     <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
<span class="token hvariable">qsort</span> <span class="token punctuation">(</span><span class="token hvariable">x</span><span class="token operator">:</span><span class="token hvariable">xs</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token hvariable">qsort</span> <span class="token hvariable">lhs</span> <span class="token operator">++</span> <span class="token punctuation">[</span><span class="token hvariable">x</span><span class="token punctuation">]</span> <span class="token operator">++</span> <span class="token hvariable">qsort</span> <span class="token hvariable">rhs</span>
    <span class="token keyword">where</span> <span class="token hvariable">lhs</span> <span class="token operator">=</span> <span class="token builtin">filter</span>  <span class="token punctuation">(</span><span class="token operator">&lt;</span> <span class="token hvariable">x</span><span class="token punctuation">)</span> <span class="token hvariable">xs</span>
          <span class="token hvariable">rhs</span> <span class="token operator">=</span> <span class="token builtin">filter</span> <span class="token punctuation">(</span><span class="token operator">&gt;=</span> <span class="token hvariable">x</span><span class="token punctuation">)</span> <span class="token hvariable">xs</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这是一个经典的 Haskell 排序实现：它可能不够高效（因为不是原地排序），但它至少展示了函数式编程的优雅。现在，我们来检查这个函数是否符合一个好排序算法应该符合的基本规则。很多纯函数式代码都有的一个很有用的不变量是<em>幂等</em>（idempotency）------ 应用一个函数两次和一次效果应该相同。对于我们的排序过程，一个稳定的排序算法，这当然应该满足，否则就真的出大错了！ 这个不变量可以简单地表示为如下性质：</p><div class="language-haskell line-numbers-mode" data-ext="haskell" data-title="haskell"><pre class="language-haskell"><code><span class="token comment">-- file: ch11/QC-basics.hs</span>
<span class="token hvariable">prop_idempotent</span> <span class="token hvariable">xs</span> <span class="token operator">=</span> <span class="token hvariable">qsort</span> <span class="token punctuation">(</span><span class="token hvariable">qsort</span> <span class="token hvariable">xs</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token hvariable">qsort</span> <span class="token hvariable">xs</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>依照 QuickCheck 的惯例，我们给测试性质加上 <code>prop_</code> 前缀以和普通代码区分。幂等性质可以简单地用一个 Haskell 函数表示：对于任何已排序输入，再次应用 <code>qsort</code> 结果必须相同。我们可以手动写几个例子来确保没什么问题：</p><p>[译注，运行之前需要确保自己安装了 QuickCheck 包，译者使用的版本是2.8.1。]</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>ghci<span class="token operator">&gt;</span> prop_idempotent <span class="token punctuation">[</span><span class="token punctuation">]</span>
True
ghci<span class="token operator">&gt;</span> prop_idempotent <span class="token punctuation">[</span><span class="token number">1,1</span>,1,1<span class="token punctuation">]</span>
True
ghci<span class="token operator">&gt;</span> prop_idempotent <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">..</span><span class="token number">100</span><span class="token punctuation">]</span>
True
ghci<span class="token operator">&gt;</span> prop_idempotent <span class="token punctuation">[</span><span class="token number">1,5</span>,2,1,2,0,9<span class="token punctuation">]</span>
True
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>看起来不错。但是，用手写输入数据非常无趣，并且违反了一个高效函数式程序员的道德法则：让机器干活！为了使这个过程自动化，QuickCheck 内置了一组数据生成器用来生成 Haskell 所有的基本数据类型。 QuickCheck 使用 <code>Arbitrary</code> 类型类来给（伪）随机数据生成过程提供了一个统一接口，类型系统会具体决定使用哪个生成器。QuickCheck 通常会把数据生成过程隐藏起来，但我们可以手动运行生成器来看看 QuickCheck 生成的数据呈什么分布。 例如，随机生成一组布尔值：</p><p>[译注：本例子根据最新版本的 QuickCheck 库做了改动。]</p><div class="language-haskell line-numbers-mode" data-ext="haskell" data-title="haskell"><pre class="language-haskell"><code><span class="token constant">Prelude</span> <span class="token constant">Test<span class="token punctuation">.</span>QuickCheck<span class="token punctuation">.</span>Gen</span> <span class="token constant">Test<span class="token punctuation">.</span>QuickCheck<span class="token punctuation">.</span>Arbitrary</span><span class="token operator">&gt;</span> <span class="token hvariable">sample&#39;</span> <span class="token hvariable">arbitrary</span> <span class="token operator">::</span> <span class="token constant">IO</span> <span class="token punctuation">[</span><span class="token constant">Bool</span><span class="token punctuation">]</span>
<span class="token punctuation">[</span><span class="token constant">False</span><span class="token punctuation">,</span><span class="token constant">False</span><span class="token punctuation">,</span><span class="token constant">False</span><span class="token punctuation">,</span><span class="token constant">True</span><span class="token punctuation">,</span><span class="token constant">False</span><span class="token punctuation">,</span><span class="token constant">False</span><span class="token punctuation">,</span><span class="token constant">True</span><span class="token punctuation">,</span><span class="token constant">True</span><span class="token punctuation">,</span><span class="token constant">True</span><span class="token punctuation">,</span><span class="token constant">True</span><span class="token punctuation">,</span><span class="token constant">True</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>QuickCheck 用这种方法产生测试数据，然后通过 <code>quickCheck</code> 函数把数据传给我们要测试的性质。性质本身的类型决定了它使用哪个数据生成器。<code>quickCheck</code> 确保对于所有产生的测试数据，性质仍然成立。由于幂等测试对于列表元素类型是多态的，我们需要选择一个特定的类型来产生测试数据，我们把它作为一个类型约束写在性质上。运行测试的时候，只需调用 <code>quickCheck</code> 函数，并指定我们性质函数的类型即可（否则的话，列表值将会是没什么意思的 <code>()</code> 类型）：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>*Main Test.QuickCheck<span class="token operator">&gt;</span> :type quickCheck
quickCheck :: Testable prop <span class="token operator">=</span><span class="token operator">&gt;</span> prop -<span class="token operator">&gt;</span> IO <span class="token punctuation">(</span><span class="token punctuation">)</span>
*Main Test.QuickCheck<span class="token operator">&gt;</span> quickCheck <span class="token punctuation">(</span>prop_idempotent :: <span class="token punctuation">[</span>Integer<span class="token punctuation">]</span> -<span class="token operator">&gt;</span> Bool<span class="token punctuation">)</span>
+++ OK, passed <span class="token number">100</span> tests.
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对于产生的100个不同列表，我们的性质都成立------太棒了！编写测试的时候，查看为每个测试生成的实际数据常常会很有用。我们可以把 <code>quickCheck</code> 替换为它的兄弟函数 <code>verboseCheck</code> 来查看每个测试的（完整）输出。现在，来看看我们的函数还可能满足什么更复杂的性质。</p><h3 id="testing-for-properties" tabindex="-1"><a class="header-anchor" href="#testing-for-properties"><span>性质测试</span></a></h3><p>好的库通常都会包含一组彼此正交而又关联的基本函数。我们可以使用 QuickCheck 来指定我们代码中函数之间的关系，从而通过一组通过有用性质相互关联的函数来提供一个好的库接口。从这个角度来说，QuickCheck 扮演了 API &quot;lint&quot; 工具的角色： 它确保我们的库 API 能说的通。</p><p>列表排序函数的一些有趣性质把它和其它列表操作关联起来。例如：已排序列表的第一个元素应该是输入列表的最小元素。我们可以使用 <code>List</code> 库的 <code>minimum</code> 函数来指出这个性质：</p><div class="language-haskell line-numbers-mode" data-ext="haskell" data-title="haskell"><pre class="language-haskell"><code><span class="token comment">-- file: ch11/QC-basics.hs</span>
<span class="token import-statement"><span class="token keyword">import</span> Data<span class="token punctuation">.</span>List</span>
<span class="token hvariable">prop_minimum</span> <span class="token hvariable">xs</span>         <span class="token operator">=</span> <span class="token builtin">head</span> <span class="token punctuation">(</span><span class="token hvariable">qsort</span> <span class="token hvariable">xs</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token builtin">minimum</span> <span class="token hvariable">xs</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>测试的时候出错了：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>*Main Test.QuickCheck<span class="token operator">&gt;</span> quickCheck <span class="token punctuation">(</span>prop_minimum :: <span class="token punctuation">[</span>Integer<span class="token punctuation">]</span> -<span class="token operator">&gt;</span> Bool<span class="token punctuation">)</span>
*** Failed<span class="token operator">!</span> Exception: <span class="token string">&#39;Prelude.head: empty list&#39;</span> <span class="token punctuation">(</span>after <span class="token number">1</span> <span class="token builtin class-name">test</span><span class="token punctuation">)</span>:
<span class="token punctuation">[</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当对一个空列表排序时性质不满足了：对于空列表而言，<code>head</code> 和 <code>minimum</code> 没有定义，正如它们的定义所示：</p><div class="language-haskell line-numbers-mode" data-ext="haskell" data-title="haskell"><pre class="language-haskell"><code><span class="token comment">-- file: ch11/minimum.hs</span>
<span class="token builtin">head</span>       <span class="token operator">::</span> <span class="token punctuation">[</span><span class="token hvariable">a</span><span class="token punctuation">]</span> <span class="token operator">-&gt;</span> <span class="token hvariable">a</span>
<span class="token builtin">head</span> <span class="token punctuation">(</span><span class="token hvariable">x</span><span class="token operator">:</span><span class="token hvariable">_</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token hvariable">x</span>
<span class="token builtin">head</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token operator">=</span> <span class="token builtin">error</span> <span class="token string">&quot;Prelude.head: empty list&quot;</span>

<span class="token builtin">minimum</span>    <span class="token operator">::</span> <span class="token punctuation">(</span><span class="token constant">Ord</span> <span class="token hvariable">a</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">[</span><span class="token hvariable">a</span><span class="token punctuation">]</span> <span class="token operator">-&gt;</span> <span class="token hvariable">a</span>
<span class="token builtin">minimum</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span>  <span class="token builtin">error</span> <span class="token string">&quot;Prelude.minimum: empty list&quot;</span>
<span class="token builtin">minimum</span> <span class="token hvariable">xs</span> <span class="token operator">=</span>  <span class="token builtin">foldl1</span> <span class="token builtin">min</span> <span class="token hvariable">xs</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>因此这个性质只在非空列表上满足。幸运的是，QuickCheck 内置了一套完整的性质编写语言，使我们可以更精确地表述我们的不变量，排除那些我们不予考虑的值。对于空列表这个例子，我们可以这么说：<em>如果</em>列表非空，<em>那么</em>被排序列表的第一个元素是最小值。这是通过 <code>(==&gt;)</code> 函数来实现的，它在测试性质之前将无效数据排除在外：</p><div class="language-haskell line-numbers-mode" data-ext="haskell" data-title="haskell"><pre class="language-haskell"><code><span class="token comment">-- file: ch11/QC-basics.hs</span>
<span class="token hvariable">prop_minimum&#39;</span> <span class="token hvariable">xs</span>         <span class="token operator">=</span> <span class="token builtin">not</span> <span class="token punctuation">(</span><span class="token builtin">null</span> <span class="token hvariable">xs</span><span class="token punctuation">)</span> <span class="token operator">==&gt;</span> <span class="token builtin">head</span> <span class="token punctuation">(</span><span class="token hvariable">qsort</span> <span class="token hvariable">xs</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token builtin">minimum</span> <span class="token hvariable">xs</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>结果非常清楚。通过把空列表排除在外，我们可以确定指定性质是成立的。</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>*Main Test.QuickCheck<span class="token operator">&gt;</span> quickCheck <span class="token punctuation">(</span>prop_minimum&#39; :: <span class="token punctuation">[</span>Integer<span class="token punctuation">]</span> -<span class="token operator">&gt;</span> Property<span class="token punctuation">)</span>
+++ OK, passed <span class="token number">100</span> tests.
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>注意到我们把性质的类型从 <code>Bool</code> 改成了更一般的 <code>Property</code> 类型（property 函数会在测试之前过滤出非空列表，而不仅是简单地返回一个布尔常量了）。</p><p>再加上其它一些应该满足的不变量，我们就可以完成排序函数的基本性质集了：输出应该有序（每个元素应该小于等于它的后继元素）；输出是输入的排列（我们通过列表差异函数 <code>(\\\\)</code> 来检测）；被排序列表的最后一个元素应该是最大值；对于两个不同列表的最小值，如果我们把两个列表拼接并排序，这个值应该是第一个元素。这些性质可以表述如下：</p><div class="language-haskell line-numbers-mode" data-ext="haskell" data-title="haskell"><pre class="language-haskell"><code><span class="token comment">-- file: ch11/QC-basics.hs</span>
<span class="token hvariable">prop_ordered</span> <span class="token hvariable">xs</span> <span class="token operator">=</span> <span class="token hvariable">ordered</span> <span class="token punctuation">(</span><span class="token hvariable">qsort</span> <span class="token hvariable">xs</span><span class="token punctuation">)</span>
    <span class="token keyword">where</span> <span class="token hvariable">ordered</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>       <span class="token operator">=</span> <span class="token constant">True</span>
          <span class="token hvariable">ordered</span> <span class="token punctuation">[</span><span class="token hvariable">x</span><span class="token punctuation">]</span>      <span class="token operator">=</span> <span class="token constant">True</span>
          <span class="token hvariable">ordered</span> <span class="token punctuation">(</span><span class="token hvariable">x</span><span class="token operator">:</span><span class="token hvariable">y</span><span class="token operator">:</span><span class="token hvariable">xs</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token hvariable">x</span> <span class="token operator">&lt;=</span> <span class="token hvariable">y</span> <span class="token operator">&amp;&amp;</span> <span class="token hvariable">ordered</span> <span class="token punctuation">(</span><span class="token hvariable">y</span><span class="token operator">:</span><span class="token hvariable">xs</span><span class="token punctuation">)</span>

<span class="token hvariable">prop_permutation</span> <span class="token hvariable">xs</span> <span class="token operator">=</span> <span class="token hvariable">permutation</span> <span class="token hvariable">xs</span> <span class="token punctuation">(</span><span class="token hvariable">qsort</span> <span class="token hvariable">xs</span><span class="token punctuation">)</span>
    <span class="token keyword">where</span> <span class="token hvariable">permutation</span> <span class="token hvariable">xs</span> <span class="token hvariable">ys</span> <span class="token operator">=</span> <span class="token builtin">null</span> <span class="token punctuation">(</span><span class="token hvariable">xs</span> <span class="token operator">\\\\</span> <span class="token hvariable">ys</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token builtin">null</span> <span class="token punctuation">(</span><span class="token hvariable">ys</span> <span class="token operator">\\\\</span> <span class="token hvariable">xs</span><span class="token punctuation">)</span>

<span class="token hvariable">prop_maximum</span> <span class="token hvariable">xs</span>         <span class="token operator">=</span>
    <span class="token builtin">not</span> <span class="token punctuation">(</span><span class="token builtin">null</span> <span class="token hvariable">xs</span><span class="token punctuation">)</span> <span class="token operator">==&gt;</span>
        <span class="token builtin">last</span> <span class="token punctuation">(</span><span class="token hvariable">qsort</span> <span class="token hvariable">xs</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token builtin">maximum</span> <span class="token hvariable">xs</span>

<span class="token hvariable">prop_append</span> <span class="token hvariable">xs</span> <span class="token hvariable">ys</span>       <span class="token operator">=</span>
    <span class="token builtin">not</span> <span class="token punctuation">(</span><span class="token builtin">null</span> <span class="token hvariable">xs</span><span class="token punctuation">)</span> <span class="token operator">==&gt;</span>
    <span class="token builtin">not</span> <span class="token punctuation">(</span><span class="token builtin">null</span> <span class="token hvariable">ys</span><span class="token punctuation">)</span> <span class="token operator">==&gt;</span>
        <span class="token builtin">head</span> <span class="token punctuation">(</span><span class="token hvariable">qsort</span> <span class="token punctuation">(</span><span class="token hvariable">xs</span> <span class="token operator">++</span> <span class="token hvariable">ys</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token builtin">min</span> <span class="token punctuation">(</span><span class="token builtin">minimum</span> <span class="token hvariable">xs</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token builtin">minimum</span> <span class="token hvariable">ys</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="testing-against-a-model" tabindex="-1"><a class="header-anchor" href="#testing-against-a-model"><span>利用模型进行测试</span></a></h3><p>另一种增加代码可信度的技术是利用模型实现进行测试。我们可以把我们的列表排序函数跟标准列表库中的排序实现进行对比。如果它们行为相同，我们会有更多信心我们的代码的正确的。</p><div class="language-haskell line-numbers-mode" data-ext="haskell" data-title="haskell"><pre class="language-haskell"><code><span class="token comment">-- file: ch11/QC-basics.hs</span>
<span class="token hvariable">prop_sort_model</span> <span class="token hvariable">xs</span>      <span class="token operator">=</span> <span class="token builtin">sort</span> <span class="token hvariable">xs</span> <span class="token operator">==</span> <span class="token hvariable">qsort</span> <span class="token hvariable">xs</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>这种基于模型的测试非常强大。开发人员经常会有一些正确但低效的参考实现或原型。他们可以保留这部分代码来确保优化之后的生产代码仍具有相同行为。通过构建大量这样的测试并定期运行（例如每次提交），我们可以很容易地确保代码仍然正确。大型的 Haskell 项目通常包含了跟项目本身大小可比的性质测试集，每次代码改变都会进行成千上万项不变量测试，保证了代码行为跟预期一致。</p><h2 id="testing-case-study-specifying-a-pretty-printer" tabindex="-1"><a class="header-anchor" href="#testing-case-study-specifying-a-pretty-printer"><span>测试案例学习：美观打印器</span></a></h2><p>测试单个函数的自然性质是开发大型 Haskell 系统的基石。我们现在来看一个更复杂的案例：为第五章开发的美观打印器编写测试集。</p><h3 id="generating-test-data" tabindex="-1"><a class="header-anchor" href="#generating-test-data"><span>生成测试数据</span></a></h3><p>美观打印器是围绕 <code>Doc</code> 而建的，它是一个代数数据类型，表示格式良好的文档。</p><div class="language-haskell line-numbers-mode" data-ext="haskell" data-title="haskell"><pre class="language-haskell"><code><span class="token comment">-- file: ch11/Prettify2.hs</span>

<span class="token keyword">data</span> <span class="token constant">Doc</span> <span class="token operator">=</span> <span class="token constant">Empty</span>
         <span class="token operator">|</span> <span class="token constant">Char</span> <span class="token constant">Char</span>
         <span class="token operator">|</span> <span class="token constant">Text</span> <span class="token constant">String</span>
         <span class="token operator">|</span> <span class="token constant">Line</span>
         <span class="token operator">|</span> <span class="token constant">Concat</span> <span class="token constant">Doc</span> <span class="token constant">Doc</span>
         <span class="token operator">|</span> <span class="token constant">Union</span> <span class="token constant">Doc</span> <span class="token constant">Doc</span>
         <span class="token keyword">deriving</span> <span class="token punctuation">(</span><span class="token constant">Show</span><span class="token punctuation">,</span><span class="token constant">Eq</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个库本身是由一组函数构成的，这些函数负责构建和变换 <code>Doc</code> 类型的值，最后再把它们转换成字符串。</p><p>QuickCheck 鼓励这样一种测试方式：开发人员指定一些不变量，它们对于任何代码接受的输入都成立。为了测试美观打印库，我们首先需要一个输入数据源。我们可以利用 QuickCheck 通过 <code>Arbitrary</code> 类型类提供的一套用来生成随机数据的组合子集。<code>Arbitrary</code> 类型类提供了 <code>arbitrary</code> 函数来给每种类型生成数据，我们可以利用它来给自定义数据类型写数据生成器。</p><div class="language-haskell line-numbers-mode" data-ext="haskell" data-title="haskell"><pre class="language-haskell"><code><span class="token comment">-- file: ch11/Arbitrary.hs</span>
<span class="token import-statement"><span class="token keyword">import</span> Test<span class="token punctuation">.</span>QuickCheck<span class="token punctuation">.</span>Arbitrary</span>
<span class="token import-statement"><span class="token keyword">import</span> Test<span class="token punctuation">.</span>QuickCheck<span class="token punctuation">.</span>Gen</span>
<span class="token keyword">class</span> <span class="token constant">Arbitrary</span> <span class="token hvariable">a</span> <span class="token keyword">where</span>
    <span class="token hvariable">arbitrary</span>   <span class="token operator">::</span> <span class="token constant">Gen</span> <span class="token hvariable">a</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>有一点需要注意，函数的类型签名表明生成器运行在 <code>Gen</code> 环境中。它是一个简单的状态传递 monad，用来隐藏贯穿于代码中的随机数字生成器的状态。稍后的章节会更加细致地研究 monads，现在只要知道，由于 <code>Gen</code> 被定义为一个 monad，我们可以使用 <code>do</code> 语法来定义新生成器来访问隐式的随机数字源。<code>Arbitrary</code> 类型类提供了一组可以生成随机值的函数，我们可以把它们组合起来构建出我们所关心的类型的数据结构，以便给我们的自定义类型写生成器。一些关键函数的类型如下：</p><div class="language-haskell line-numbers-mode" data-ext="haskell" data-title="haskell"><pre class="language-haskell"><code><span class="token comment">-- file: ch11/Arbitrary.hs</span>
    <span class="token hvariable">elements</span> <span class="token operator">::</span> <span class="token punctuation">[</span><span class="token hvariable">a</span><span class="token punctuation">]</span> <span class="token operator">-&gt;</span> <span class="token constant">Gen</span> <span class="token hvariable">a</span>
    <span class="token hvariable">choose</span>   <span class="token operator">::</span> <span class="token constant">Random</span> <span class="token hvariable">a</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token hvariable">a</span><span class="token punctuation">,</span> <span class="token hvariable">a</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token constant">Gen</span> <span class="token hvariable">a</span>
    <span class="token hvariable">oneof</span>    <span class="token operator">::</span> <span class="token punctuation">[</span><span class="token constant">Gen</span> <span class="token hvariable">a</span><span class="token punctuation">]</span> <span class="token operator">-&gt;</span> <span class="token constant">Gen</span> <span class="token hvariable">a</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>elements</code> 函数接受一个列表，返回这个列表的随机值生成器。我们稍后再用 <code>choose</code> 和 <code>oneof</code>。 有了 <code>elements</code>，我们就可以开始给一些简单的数据类型写生成器了。例如，如果我们给三元逻辑定义了一个新数据类型：</p><div class="language-haskell line-numbers-mode" data-ext="haskell" data-title="haskell"><pre class="language-haskell"><code><span class="token comment">-- file: ch11/Arbitrary.hs</span>
<span class="token keyword">data</span> <span class="token constant">Ternary</span>
    <span class="token operator">=</span> <span class="token constant">Yes</span>
    <span class="token operator">|</span> <span class="token constant">No</span>
    <span class="token operator">|</span> <span class="token constant">Unknown</span>
    <span class="token keyword">deriving</span> <span class="token punctuation">(</span><span class="token constant">Eq</span><span class="token punctuation">,</span><span class="token constant">Show</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们可以给 <code>Ternary</code> 类型实现 <code>Arbitrary</code> 实例：只要实现 <code>arbitrary</code> 即可，它从所有可能的 <code>Ternary</code> 类型值中随机选出一些来：</p><div class="language-haskell line-numbers-mode" data-ext="haskell" data-title="haskell"><pre class="language-haskell"><code><span class="token comment">-- file: ch11/Arbitrary.hs</span>
<span class="token keyword">instance</span> <span class="token constant">Arbitrary</span> <span class="token constant">Ternary</span> <span class="token keyword">where</span>
    <span class="token hvariable">arbitrary</span>     <span class="token operator">=</span> <span class="token hvariable">elements</span> <span class="token punctuation">[</span><span class="token constant">Yes</span><span class="token punctuation">,</span> <span class="token constant">No</span><span class="token punctuation">,</span> <span class="token constant">Unknown</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>另一种生成数据的方案是生成 Haskell 基本类型数据，然后把它们映射成我们感兴趣的类型。 在写 <code>Ternary</code> 实例的时候，我们可以用 <code>choose</code> 生成0到2的整数值，然后把它们映射为 <code>Ternary</code> 值。</p><div class="language-haskell line-numbers-mode" data-ext="haskell" data-title="haskell"><pre class="language-haskell"><code><span class="token comment">-- file: ch11/Arbitrary2.hs</span>
<span class="token keyword">instance</span> <span class="token constant">Arbitrary</span> <span class="token constant">Ternary</span> <span class="token keyword">where</span>
    <span class="token hvariable">arbitrary</span>     <span class="token operator">=</span> <span class="token keyword">do</span>
        <span class="token hvariable">n</span> <span class="token operator">&lt;-</span> <span class="token hvariable">choose</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">::</span> <span class="token constant">Gen</span> <span class="token constant">Int</span>
        <span class="token builtin">return</span> <span class="token operator">$</span> <span class="token keyword">case</span> <span class="token hvariable">n</span> <span class="token keyword">of</span>
                      <span class="token number">0</span> <span class="token operator">-&gt;</span> <span class="token constant">Yes</span>
                      <span class="token number">1</span> <span class="token operator">-&gt;</span> <span class="token constant">No</span>
                      <span class="token hvariable">_</span> <span class="token operator">-&gt;</span> <span class="token constant">Unknown</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对于简单的<em>和</em>类型，这种方法非常奏效，因为整数可以很好地映射到数据类型的构造器上。对于<em>积</em>类型(如结构体和元组)，我们首先得把积的不同部分分别生成（对于嵌套类型递归地生成），然后再把他们组合起来。例如，生成随机序对：</p><div class="language-haskell line-numbers-mode" data-ext="haskell" data-title="haskell"><pre class="language-haskell"><code><span class="token comment">-- file: ch11/Arbitrary.hs</span>
<span class="token keyword">instance</span> <span class="token punctuation">(</span><span class="token constant">Arbitrary</span> <span class="token hvariable">a</span><span class="token punctuation">,</span> <span class="token constant">Arbitrary</span> <span class="token hvariable">b</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token constant">Arbitrary</span> <span class="token punctuation">(</span><span class="token hvariable">a</span><span class="token punctuation">,</span> <span class="token hvariable">b</span><span class="token punctuation">)</span> <span class="token keyword">where</span>
    <span class="token hvariable">arbitrary</span> <span class="token operator">=</span> <span class="token keyword">do</span>
        <span class="token hvariable">x</span> <span class="token operator">&lt;-</span> <span class="token hvariable">arbitrary</span>
        <span class="token hvariable">y</span> <span class="token operator">&lt;-</span> <span class="token hvariable">arbitrary</span>
        <span class="token builtin">return</span> <span class="token punctuation">(</span><span class="token hvariable">x</span><span class="token punctuation">,</span> <span class="token hvariable">y</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现在我们写个生成器来生成 <code>Doc</code> 类型所有不同的变种。我们把问题分解，首先先随机生成一个构造器，然后根据结果再随机生成参数。最复杂的是 union 和 concatenation 这两种情形。</p><p>[译注，作者在此处解释并实现了 <code>Char</code> 的 <code>Arbitrary</code> 实例。但由于最新 <code>QuickCheck</code> 已经包含此实例，故此处略去相关内容。]</p><p>现在我们可以开始给 <code>Doc</code> 写实例了。只要枚举构造器，再把参数填进去即可。我们用一个随机整数来表示生成哪种形式的 <code>Doc</code>，然后再根据结果分派。生成 concat 和 union 的 <code>Doc</code> 值时， 我们只需要递归调用 <code>arbitrary</code> 即可，类型推导会决定使用哪个 <code>Arbitrary</code> 实例：</p><div class="language-haskell line-numbers-mode" data-ext="haskell" data-title="haskell"><pre class="language-haskell"><code><span class="token comment">-- file: ch11/QC.hs</span>
<span class="token keyword">instance</span> <span class="token constant">Arbitrary</span> <span class="token constant">Doc</span> <span class="token keyword">where</span>
    <span class="token hvariable">arbitrary</span> <span class="token operator">=</span> <span class="token keyword">do</span>
        <span class="token hvariable">n</span> <span class="token operator">&lt;-</span> <span class="token hvariable">choose</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span> <span class="token operator">::</span> <span class="token constant">Gen</span> <span class="token constant">Int</span>
        <span class="token keyword">case</span> <span class="token hvariable">n</span> <span class="token keyword">of</span>
             <span class="token number">1</span> <span class="token operator">-&gt;</span> <span class="token builtin">return</span> <span class="token constant">Empty</span>

             <span class="token number">2</span> <span class="token operator">-&gt;</span> <span class="token keyword">do</span> <span class="token hvariable">x</span> <span class="token operator">&lt;-</span> <span class="token hvariable">arbitrary</span>
                     <span class="token builtin">return</span> <span class="token punctuation">(</span><span class="token constant">Char</span> <span class="token hvariable">x</span><span class="token punctuation">)</span>

             <span class="token number">3</span> <span class="token operator">-&gt;</span> <span class="token keyword">do</span> <span class="token hvariable">x</span> <span class="token operator">&lt;-</span> <span class="token hvariable">arbitrary</span>
                     <span class="token builtin">return</span> <span class="token punctuation">(</span><span class="token constant">Text</span> <span class="token hvariable">x</span><span class="token punctuation">)</span>

             <span class="token number">4</span> <span class="token operator">-&gt;</span> <span class="token builtin">return</span> <span class="token constant">Line</span>

             <span class="token number">5</span> <span class="token operator">-&gt;</span> <span class="token keyword">do</span> <span class="token hvariable">x</span> <span class="token operator">&lt;-</span> <span class="token hvariable">arbitrary</span>
                     <span class="token hvariable">y</span> <span class="token operator">&lt;-</span> <span class="token hvariable">arbitrary</span>
                     <span class="token builtin">return</span> <span class="token punctuation">(</span><span class="token constant">Concat</span> <span class="token hvariable">x</span> <span class="token hvariable">y</span><span class="token punctuation">)</span>

             <span class="token number">6</span> <span class="token operator">-&gt;</span> <span class="token keyword">do</span> <span class="token hvariable">x</span> <span class="token operator">&lt;-</span> <span class="token hvariable">arbitrary</span>
                     <span class="token hvariable">y</span> <span class="token operator">&lt;-</span> <span class="token hvariable">arbitrary</span>
                     <span class="token builtin">return</span> <span class="token punctuation">(</span><span class="token constant">Union</span> <span class="token hvariable">x</span> <span class="token hvariable">y</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>看起来很直观。我们可以用 <code>oneof</code> 函数来化简它。我们之前见到过 <code>oneof</code> 的类型，它从列表中选择一个生成器（我们也可以用 monadic 组合子 <code>liftM</code> 来避免命名中间结果）：</p><div class="language-haskell line-numbers-mode" data-ext="haskell" data-title="haskell"><pre class="language-haskell"><code><span class="token comment">-- file: ch11/QC.hs</span>
<span class="token keyword">instance</span> <span class="token constant">Arbitrary</span> <span class="token constant">Doc</span> <span class="token keyword">where</span>
    <span class="token hvariable">arbitrary</span> <span class="token operator">=</span>
        <span class="token hvariable">oneof</span> <span class="token punctuation">[</span> <span class="token builtin">return</span> <span class="token constant">Empty</span>
              <span class="token punctuation">,</span> <span class="token hvariable">liftM</span>  <span class="token constant">Char</span>   <span class="token hvariable">arbitrary</span>
              <span class="token punctuation">,</span> <span class="token hvariable">liftM</span>  <span class="token constant">Text</span>   <span class="token hvariable">arbitrary</span>
              <span class="token punctuation">,</span> <span class="token builtin">return</span> <span class="token constant">Line</span>
              <span class="token punctuation">,</span> <span class="token hvariable">liftM2</span> <span class="token constant">Concat</span> <span class="token hvariable">arbitrary</span> <span class="token hvariable">arbitrary</span>
              <span class="token punctuation">,</span> <span class="token hvariable">liftM2</span> <span class="token constant">Union</span>  <span class="token hvariable">arbitrary</span> <span class="token hvariable">arbitrary</span> <span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>后者更简洁。我们可以试着生成一些随机文档，确保没什么问题。</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>*QC Test.QuickCheck<span class="token operator">&gt;</span> sample<span class="token string">&#39; (arbitrary::Gen Doc)
[Text &quot;&quot;,Concat (Char &#39;</span><span class="token punctuation">\\</span><span class="token number">157</span><span class="token string">&#39;) Line,Char &#39;</span><span class="token punctuation">\\</span>NAK<span class="token string">&#39;,Concat (Text &quot;A\\b&quot;) Empty,
Union Empty (Text &quot;4\\146~\\210&quot;),Line,Union Line Line,
Concat Empty (Text &quot;|m  \\DC4-\\DLE*3\\DC3\\186&quot;),Char &#39;</span>-<span class="token string">&#39;,
Union (Union Line (Text &quot;T\\141\\167\\&amp;3\\233\\163\\&amp;5\\STX\\164\\145zI&quot;)) (Char &#39;</span>~&#39;<span class="token punctuation">)</span>,Line<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>从输出的结果里，我们既看到了简单，基本的文档，也看到了相对复杂的嵌套文档。每次测试时我们都会随机生成成百上千的随机文档，他们应该可以很好地覆盖各种情形。现在我们可以开始给我们的文档函数写一些通用性质了。</p><h3 id="testing-document-construction" tabindex="-1"><a class="header-anchor" href="#testing-document-construction"><span>测试文档构建</span></a></h3><p>文档有两个基本函数：一个是空文档常量 <code>Empty</code>，另一个是拼接函数。它们的类型是：</p><div class="language-haskell line-numbers-mode" data-ext="haskell" data-title="haskell"><pre class="language-haskell"><code><span class="token comment">-- file: ch11/Prettify2.hs</span>
<span class="token hvariable">empty</span> <span class="token operator">::</span> <span class="token constant">Doc</span>
<span class="token punctuation">(</span><span class="token operator">&lt;&gt;</span><span class="token punctuation">)</span>  <span class="token operator">::</span> <span class="token constant">Doc</span> <span class="token operator">-&gt;</span> <span class="token constant">Doc</span> <span class="token operator">-&gt;</span> <span class="token constant">Doc</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>两个函数合起来有一个不错的性质：将空列表拼接在（无论是左拼接还是右拼接）另一个列表上，这个列表保持不变。我们可以将这个不变量表述为如下性质：</p><div class="language-haskell line-numbers-mode" data-ext="haskell" data-title="haskell"><pre class="language-haskell"><code><span class="token comment">-- file: ch11/QC.hs</span>
<span class="token hvariable">prop_empty_id</span> <span class="token hvariable">x</span> <span class="token operator">=</span>
    <span class="token hvariable">empty</span> <span class="token operator">&lt;&gt;</span> <span class="token hvariable">x</span> <span class="token operator">==</span> <span class="token hvariable">x</span>
  <span class="token operator">&amp;&amp;</span>
    <span class="token hvariable">x</span> <span class="token operator">&lt;&gt;</span> <span class="token hvariable">empty</span> <span class="token operator">==</span> <span class="token hvariable">x</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>运行测试，确保性质成立：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>*QC Test.QuickCheck<span class="token operator">&gt;</span> quickCheck prop_empty_id
+++ OK, passed <span class="token number">100</span> tests.
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>可以把 <code>quickCheck</code> 替换成 <code>verboseCheck</code> 来看看实际测试时用的是哪些文档。从输出可以看到，简单和复杂的情形都覆盖到了。如果需要的话，我们还可以进一步优化数据生成器来控制不同类型数据的比例。</p><p>其它 API 函数也很简单，可以用性质来完全描述它们的行为。这样做使得我们可以对函数的行为维护一个外部的，可检查的描述以确保之后的修改不会破坏这些基本不变量：</p><div class="language-haskell line-numbers-mode" data-ext="haskell" data-title="haskell"><pre class="language-haskell"><code><span class="token comment">-- file: ch11/QC.hs</span>

<span class="token hvariable">prop_char</span> <span class="token hvariable">c</span>   <span class="token operator">=</span> <span class="token hvariable">char</span> <span class="token hvariable">c</span>   <span class="token operator">==</span> <span class="token constant">Char</span> <span class="token hvariable">c</span>

<span class="token hvariable">prop_text</span> <span class="token hvariable">s</span>   <span class="token operator">=</span> <span class="token hvariable">text</span> <span class="token hvariable">s</span>   <span class="token operator">==</span> <span class="token keyword">if</span> <span class="token builtin">null</span> <span class="token hvariable">s</span> <span class="token keyword">then</span> <span class="token constant">Empty</span> <span class="token keyword">else</span> <span class="token constant">Text</span> <span class="token hvariable">s</span>

<span class="token hvariable">prop_line</span>     <span class="token operator">=</span> <span class="token hvariable">line</span>     <span class="token operator">==</span> <span class="token constant">Line</span>

<span class="token hvariable">prop_double</span> <span class="token hvariable">d</span> <span class="token operator">=</span> <span class="token hvariable">double</span> <span class="token hvariable">d</span> <span class="token operator">==</span> <span class="token hvariable">text</span> <span class="token punctuation">(</span><span class="token builtin">show</span> <span class="token hvariable">d</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这些性质足以测试基本的文档结构了。测试库的剩余部分还要更多工作。</p><h3 id="using-lists-as-a-model" tabindex="-1"><a class="header-anchor" href="#using-lists-as-a-model"><span>以列表为模型</span></a></h3><p>高阶函数是可复用编程的基本胶水，我们的美观打印库也不例外------我们自定义了 fold 函数，用来在内部实现文档拼接和在文档块之间加分隔符。 <code>fold</code> 函数接受一个文档列表，并借助一个合并方程（combining function）把它们粘合在一起。</p><div class="language-haskell line-numbers-mode" data-ext="haskell" data-title="haskell"><pre class="language-haskell"><code><span class="token comment">-- file: ch11/Prettify2.hs</span>
<span class="token hvariable">fold</span> <span class="token operator">::</span> <span class="token punctuation">(</span><span class="token constant">Doc</span> <span class="token operator">-&gt;</span> <span class="token constant">Doc</span> <span class="token operator">-&gt;</span> <span class="token constant">Doc</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">[</span><span class="token constant">Doc</span><span class="token punctuation">]</span> <span class="token operator">-&gt;</span> <span class="token constant">Doc</span>
<span class="token hvariable">fold</span> <span class="token hvariable">f</span> <span class="token operator">=</span> <span class="token builtin">foldr</span> <span class="token hvariable">f</span> <span class="token hvariable">empty</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们可以很容易地给某个特定 fold 实例写测试。例如，横向拼接（Horizontal concatenation）就可以简单地利用列表中的参考实现来测试。</p><div class="language-haskell line-numbers-mode" data-ext="haskell" data-title="haskell"><pre class="language-haskell"><code><span class="token comment">-- file: ch11/QC.hs</span>

<span class="token hvariable">prop_hcat</span> <span class="token hvariable">xs</span> <span class="token operator">=</span> <span class="token hvariable">hcat</span> <span class="token hvariable">xs</span> <span class="token operator">==</span> <span class="token hvariable">glue</span> <span class="token hvariable">xs</span>
    <span class="token keyword">where</span>
        <span class="token hvariable">glue</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>     <span class="token operator">=</span> <span class="token hvariable">empty</span>
        <span class="token hvariable">glue</span> <span class="token punctuation">(</span><span class="token hvariable">d</span><span class="token operator">:</span><span class="token hvariable">ds</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token hvariable">d</span> <span class="token operator">&lt;&gt;</span> <span class="token hvariable">glue</span> <span class="token hvariable">ds</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>punctuate</code> 也类似，插入标点类似于列表的 interspersion 操作（<code>intersperse</code> 这个函数来自于 <code>Data.List</code>，它把一个元素插在列表元素之间）：</p><div class="language-haskell line-numbers-mode" data-ext="haskell" data-title="haskell"><pre class="language-haskell"><code><span class="token comment">-- file: ch11/QC.hs</span>

<span class="token hvariable">prop_punctuate</span> <span class="token hvariable">s</span> <span class="token hvariable">xs</span> <span class="token operator">=</span> <span class="token hvariable">punctuate</span> <span class="token hvariable">s</span> <span class="token hvariable">xs</span> <span class="token operator">==</span> <span class="token hvariable">intersperse</span> <span class="token hvariable">s</span> <span class="token hvariable">xs</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>看起来不错，运行起来却出了问题：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>*QC Test.QuickCheck<span class="token operator">&gt;</span> quickCheck prop_punctuate
*** Failed<span class="token operator">!</span> Falsifiable <span class="token punctuation">(</span>after <span class="token number">5</span> tests and <span class="token number">1</span> shrink<span class="token punctuation">)</span>:
Empty
<span class="token punctuation">[</span>Text <span class="token string">&quot;&quot;</span>,Text <span class="token string">&quot;E&quot;</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>美观打印库优化了冗余的空文档，然而模型实现却没有，所以我们得让模型匹配实际情况。首先，我们可以把分隔符插入文档，然后再用一个循环去掉当中的 <code>Empty</code> 文档，就像这样：</p><div class="language-haskell line-numbers-mode" data-ext="haskell" data-title="haskell"><pre class="language-haskell"><code><span class="token comment">-- file: ch11/QC.hs</span>
<span class="token hvariable">prop_punctuate&#39;</span> <span class="token hvariable">s</span> <span class="token hvariable">xs</span> <span class="token operator">=</span> <span class="token hvariable">punctuate</span> <span class="token hvariable">s</span> <span class="token hvariable">xs</span> <span class="token operator">==</span> <span class="token hvariable">combine</span> <span class="token punctuation">(</span><span class="token hvariable">intersperse</span> <span class="token hvariable">s</span> <span class="token hvariable">xs</span><span class="token punctuation">)</span>
    <span class="token keyword">where</span>
        <span class="token hvariable">combine</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>           <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
        <span class="token hvariable">combine</span> <span class="token punctuation">[</span><span class="token hvariable">x</span><span class="token punctuation">]</span>          <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token hvariable">x</span><span class="token punctuation">]</span>

        <span class="token hvariable">combine</span> <span class="token punctuation">(</span><span class="token hvariable">x</span><span class="token operator">:</span><span class="token constant">Empty</span><span class="token operator">:</span><span class="token hvariable">ys</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token hvariable">x</span> <span class="token operator">:</span> <span class="token hvariable">combine</span> <span class="token hvariable">ys</span>
        <span class="token hvariable">combine</span> <span class="token punctuation">(</span><span class="token constant">Empty</span><span class="token operator">:</span><span class="token hvariable">y</span><span class="token operator">:</span><span class="token hvariable">ys</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token hvariable">y</span> <span class="token operator">:</span> <span class="token hvariable">combine</span> <span class="token hvariable">ys</span>
        <span class="token hvariable">combine</span> <span class="token punctuation">(</span><span class="token hvariable">x</span><span class="token operator">:</span><span class="token hvariable">y</span><span class="token operator">:</span><span class="token hvariable">ys</span><span class="token punctuation">)</span>     <span class="token operator">=</span> <span class="token hvariable">x</span> \`<span class="token constant">Concat</span>\` <span class="token hvariable">y</span> <span class="token operator">:</span> <span class="token hvariable">combine</span> <span class="token hvariable">ys</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 <strong>ghci</strong> 里运行，确保结果是正确的。测试框架发现代码中的错误让人感到欣慰------因为这正是我们追求的。</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>*QC Test.QuickCheck<span class="token operator">&gt;</span> quickCheck prop_punctuate&#39;
+++ OK, passed <span class="token number">100</span> tests.
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="putting-it-altogether" tabindex="-1"><a class="header-anchor" href="#putting-it-altogether"><span>完成测试框架</span></a></h3><p>[译注：为了匹配最新版本的 QuickCheck，本节在原文基础上做了较大改动。读者可自行参考原文，对比阅读。]</p><p>我们可以把这些测试单独放在一个文件中，然后用 QuickCheck 的驱动函数运行它们。这样的函数有很多，包括一些复杂的并行驱动函数。我们在这里使用 <code>quickCheckWithResult</code> 函数。我们只需提供一些测试参数，然后列出我们想要测试的函数即可：</p><div class="language-haskell line-numbers-mode" data-ext="haskell" data-title="haskell"><pre class="language-haskell"><code><span class="token comment">-- file: ch11/Run.hs</span>
<span class="token keyword">module</span> <span class="token constant">Main</span> <span class="token keyword">where</span>
<span class="token import-statement"><span class="token keyword">import</span> QC</span>
<span class="token import-statement"><span class="token keyword">import</span> Test<span class="token punctuation">.</span>QuickCheck</span>

<span class="token hvariable">anal</span> <span class="token operator">::</span> <span class="token constant">Args</span>
<span class="token hvariable">anal</span> <span class="token operator">=</span> <span class="token constant">Args</span>
    <span class="token punctuation">{</span> <span class="token hvariable">replay</span> <span class="token operator">=</span> <span class="token constant">Nothing</span>
    <span class="token punctuation">,</span> <span class="token hvariable">maxSuccess</span> <span class="token operator">=</span> <span class="token number">1000</span>
    <span class="token punctuation">,</span> <span class="token hvariable">maxDiscardRatio</span> <span class="token operator">=</span> <span class="token number">1</span>
    <span class="token punctuation">,</span> <span class="token hvariable">maxSize</span> <span class="token operator">=</span> <span class="token number">1000</span>
    <span class="token punctuation">,</span> <span class="token hvariable">chatty</span> <span class="token operator">=</span> <span class="token constant">True</span>
    <span class="token punctuation">}</span>

<span class="token hvariable">minimal</span> <span class="token operator">::</span> <span class="token constant">Args</span>
<span class="token hvariable">minimal</span> <span class="token operator">=</span> <span class="token constant">Args</span>
    <span class="token punctuation">{</span> <span class="token hvariable">replay</span> <span class="token operator">=</span> <span class="token constant">Nothing</span>
    <span class="token punctuation">,</span> <span class="token hvariable">maxSuccess</span> <span class="token operator">=</span> <span class="token number">200</span>
    <span class="token punctuation">,</span> <span class="token hvariable">maxDiscardRatio</span> <span class="token operator">=</span> <span class="token number">1</span>
    <span class="token punctuation">,</span> <span class="token hvariable">maxSize</span> <span class="token operator">=</span> <span class="token number">200</span>
    <span class="token punctuation">,</span> <span class="token hvariable">chatty</span> <span class="token operator">=</span> <span class="token constant">True</span>
    <span class="token punctuation">}</span>

<span class="token hvariable">runTests</span> <span class="token operator">::</span> <span class="token constant">Args</span> <span class="token operator">-&gt;</span> <span class="token constant">IO</span> <span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token hvariable">runTests</span> <span class="token hvariable">args</span> <span class="token operator">=</span> <span class="token keyword">do</span>
    <span class="token hvariable">f</span> <span class="token hvariable">prop_empty_id</span> <span class="token string">&quot;empty_id ok?&quot;</span>
    <span class="token hvariable">f</span> <span class="token hvariable">prop_char</span> <span class="token string">&quot;char ok?&quot;</span>
    <span class="token hvariable">f</span> <span class="token hvariable">prop_text</span> <span class="token string">&quot;text ok?&quot;</span>
    <span class="token hvariable">f</span> <span class="token hvariable">prop_line</span> <span class="token string">&quot;line ok?&quot;</span>
    <span class="token hvariable">f</span> <span class="token hvariable">prop_double</span> <span class="token string">&quot;double ok?&quot;</span>
    <span class="token hvariable">f</span> <span class="token hvariable">prop_hcat</span> <span class="token string">&quot;hcat ok?&quot;</span>
    <span class="token hvariable">f</span> <span class="token hvariable">prop_punctuate&#39;</span> <span class="token string">&quot;punctuate ok?&quot;</span>
    <span class="token keyword">where</span>
        <span class="token hvariable">f</span> <span class="token hvariable">prop</span> <span class="token hvariable">str</span> <span class="token operator">=</span> <span class="token keyword">do</span>
            <span class="token builtin">putStrLn</span> <span class="token hvariable">str</span>
            <span class="token hvariable">quickCheckWithResult</span> <span class="token hvariable">args</span> <span class="token hvariable">prop</span>
            <span class="token builtin">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token hvariable">main</span> <span class="token operator">::</span> <span class="token constant">IO</span> <span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token hvariable">main</span> <span class="token operator">=</span> <span class="token keyword">do</span>
    <span class="token builtin">putStrLn</span> <span class="token string">&quot;Choose test depth&quot;</span>
    <span class="token builtin">putStrLn</span> <span class="token string">&quot;1. Anal&quot;</span>
    <span class="token builtin">putStrLn</span> <span class="token string">&quot;2. Minimal&quot;</span>
    <span class="token hvariable">depth</span> <span class="token operator">&lt;-</span> <span class="token builtin">readLn</span>
    <span class="token keyword">if</span> <span class="token hvariable">depth</span> <span class="token operator">==</span> <span class="token number">1</span>
        <span class="token keyword">then</span> <span class="token hvariable">runTests</span> <span class="token hvariable">anal</span>
    <span class="token keyword">else</span> <span class="token hvariable">runTests</span> <span class="token hvariable">minimal</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>[译注：此代码出处为原文下Charlie Harvey的评论。]</p><p>我们把这些代码放在一个单独的脚本中，声明的实例和性质也有自己单独的文件，它们库的源文件完全分开。这在库项目中非常常见，通常在这些项目中测试都会和库本身分开，测试通过模块系统载入库。</p><p>这时候可以编译并运行测试脚本了：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>$ ghc <span class="token parameter variable">--make</span> Run.hs
<span class="token punctuation">[</span><span class="token number">1</span> of <span class="token number">3</span><span class="token punctuation">]</span> Compiling Prettify2        <span class="token punctuation">(</span> Prettify2.hs, Prettify2.o <span class="token punctuation">)</span>
<span class="token punctuation">[</span><span class="token number">2</span> of <span class="token number">3</span><span class="token punctuation">]</span> Compiling QC               <span class="token punctuation">(</span> QC.hs, QC.o <span class="token punctuation">)</span>
<span class="token punctuation">[</span><span class="token number">3</span> of <span class="token number">3</span><span class="token punctuation">]</span> Compiling Main             <span class="token punctuation">(</span> Run.hs, Run.o <span class="token punctuation">)</span>
Linking Run <span class="token punctuation">..</span>.
$ ./Run
Choose <span class="token builtin class-name">test</span> depth
<span class="token number">1</span>. Anal
<span class="token number">2</span>. Minimal
<span class="token number">2</span>
empty_id ok?
+++ OK, passed <span class="token number">200</span> tests.
char ok?
+++ OK, passed <span class="token number">200</span> tests.
text ok?
+++ OK, passed <span class="token number">200</span> tests.
line ok?
+++ OK, passed <span class="token number">1</span> tests.
double ok?
+++ OK, passed <span class="token number">200</span> tests.
hcat ok?
+++ OK, passed <span class="token number">200</span> tests.
punctuate ok?
+++ OK, passed <span class="token number">200</span> tests.
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>一共产生了1201个测试，很不错。增加测试深度很容易，但为了了解代码究竟被测试的怎样，我们应该使用内置的代码覆盖率工具 HPC，它可以精确地告诉我们发生了什么。</p><h2 id="measuring-test-coverage-with-hpc" tabindex="-1"><a class="header-anchor" href="#measuring-test-coverage-with-hpc"><span>用 HPC 衡量测试覆盖率</span></a></h2><p>HPC(Haskell Program Coverage) 是一个编译器扩展，用来观察程序运行时哪一部分的代码被真正执行了。这在测试时非常有用，它让我们精确地观察哪些函数，分支以及表达式被求值了。我们可以轻易得到被测试代码的百分比。HPC 的内置工具可以产生关于程序覆盖率的图表，方便我们找到测试集的缺陷。</p><p>在编译测试代码时，我们只需在命令行加上 <code>-fhpc</code> 选项，即可得到测试覆盖率数据。</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>$ ghc <span class="token parameter variable">-fhpc</span> Run.hs <span class="token parameter variable">--make</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>正常运行测试：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>$ ./Run
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>测试运行时，程序运行的细节被写入当前目录下的 .tix 和 .mix 文件。之后，命令行工具 <code>hpc</code> 用这些文件来展示各种统计数据，解释发生了什么。最基本的交互是通过文字。首先，我们可以在 <code>hpc</code> 命令中加上 <code>report</code> 选项来得到一个测试覆盖率的摘要。 我们会把测试程序排除在外（使用 <code>--exclude</code> 选项），这样就能把注意力集中在美观打印库上了。在命令行中输入以下命令：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>$ hpc report Run <span class="token parameter variable">--exclude</span><span class="token operator">=</span>Main <span class="token parameter variable">--exclude</span><span class="token operator">=</span>QC
 <span class="token number">93</span>% expressions used <span class="token punctuation">(</span><span class="token number">30</span>/32<span class="token punctuation">)</span>
<span class="token number">100</span>% boolean coverage <span class="token punctuation">(</span><span class="token number">0</span>/0<span class="token punctuation">)</span>
    <span class="token number">100</span>% guards <span class="token punctuation">(</span><span class="token number">0</span>/0<span class="token punctuation">)</span>
    <span class="token number">100</span>% <span class="token string">&#39;if&#39;</span> conditions <span class="token punctuation">(</span><span class="token number">0</span>/0<span class="token punctuation">)</span>
    <span class="token number">100</span>% qualifiers <span class="token punctuation">(</span><span class="token number">0</span>/0<span class="token punctuation">)</span>
<span class="token number">100</span>% alternatives used <span class="token punctuation">(</span><span class="token number">8</span>/8<span class="token punctuation">)</span>
<span class="token number">100</span>% <span class="token builtin class-name">local</span> declarations used <span class="token punctuation">(</span><span class="token number">0</span>/0<span class="token punctuation">)</span>
 <span class="token number">66</span>% top-level declarations used <span class="token punctuation">(</span><span class="token number">10</span>/15<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>[译注：报告结果可能因人而异。]</p><p>在最后一行我们看到，测试时有66%的顶层定义被求值。对于第一次尝试来说，已经是很不错的结果了。随着被测试函数的增加，这个数字还会提升。对于快速了解结果来说文字版本的结果还不错，但为了真正了解发生了什么，最好还是看看被标记后的结果（marked up output）。用 <code>markup</code> 选项可以生成：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="token variable">$hpc</span> markup Run <span class="token parameter variable">--exclude</span><span class="token operator">=</span>Main <span class="token parameter variable">--exclude</span><span class="token operator">=</span>QC
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>它会对每一个 Haskell 源文件产生一个 html 文件，再加上一些索引文件。在浏览器中打开 <code>hpc_index.html</code>，我们可以看到一些非常漂亮的代码覆盖率图表：</p><figure><img src="`+p+'" alt="image" tabindex="0" loading="lazy"><figcaption>image</figcaption></figure><p>还不错。打开 <code>Prettify2.hs.html</code> 可以看到程序的源代码，其中未被测试的代码用黄色粗体标记，被执行的代码用粗体标记。</p><figure><img src="'+t+`" alt="image" tabindex="0" loading="lazy"><figcaption>image</figcaption></figure><p>我们没测 <code>Monoid</code> 实例，还有一些复杂函数也没测。HPC 不会说谎。我们来给 <code>Monoid</code> 类型类实例加个测试， 这个类型类支持拼接元素和返回空元素：</p><div class="language-haskell line-numbers-mode" data-ext="haskell" data-title="haskell"><pre class="language-haskell"><code><span class="token comment">-- file: ch11/QC.hs</span>
<span class="token hvariable">prop_mempty_id</span> <span class="token hvariable">x</span> <span class="token operator">=</span>
    <span class="token hvariable">mempty</span> <span class="token operator">\`mappend\`</span> <span class="token hvariable">x</span> <span class="token operator">==</span> <span class="token hvariable">x</span>
  <span class="token operator">&amp;&amp;</span>
    <span class="token hvariable">x</span> <span class="token operator">\`mappend\`</span> <span class="token hvariable">mempty</span> <span class="token operator">==</span> <span class="token punctuation">(</span><span class="token hvariable">x</span> <span class="token operator">::</span> <span class="token constant">Doc</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 <strong>ghci</strong> 里检查确保正确：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>*QC Test.QuickCheck<span class="token operator">&gt;</span> quickCheck prop_mempty_id
+++ OK, passed <span class="token number">100</span> tests.
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>我们现在可以重新编译并运行测试了。确保旧的 .tix 被删除，否则当 HPC 试图合并两次测试数据时会报错：</p><div class="language-bash line-numbers-mode" data-ext="sh" data-title="sh"><pre class="language-bash"><code>$ ghc <span class="token parameter variable">-fhpc</span> Run.hs <span class="token parameter variable">--make</span> -fforce-recomp
<span class="token punctuation">[</span><span class="token number">1</span> of <span class="token number">3</span><span class="token punctuation">]</span> Compiling Prettify2        <span class="token punctuation">(</span> Prettify2.hs, Prettify2.o <span class="token punctuation">)</span>
<span class="token punctuation">[</span><span class="token number">2</span> of <span class="token number">3</span><span class="token punctuation">]</span> Compiling QC               <span class="token punctuation">(</span> QC.hs, QC.o <span class="token punctuation">)</span>
<span class="token punctuation">[</span><span class="token number">3</span> of <span class="token number">3</span><span class="token punctuation">]</span> Compiling Main             <span class="token punctuation">(</span> Run.hs, Run.o <span class="token punctuation">)</span>
Linking Run <span class="token punctuation">..</span>.
$ ./Run
<span class="token keyword">in</span> module <span class="token string">&#39;Main&#39;</span>
Hpc failure: module mismatch with .tix/.mix <span class="token function">file</span> <span class="token builtin class-name">hash</span> number
<span class="token punctuation">(</span>perhaps remove Run.tix file?<span class="token punctuation">)</span>
<span class="token variable">$rm</span> Run.tix
$./Run
Choose <span class="token builtin class-name">test</span> depth
<span class="token number">1</span>. Anal
<span class="token number">2</span>. Minimal
<span class="token number">2</span>
empty_id ok?
+++ OK, passed <span class="token number">200</span> tests.
char ok?
+++ OK, passed <span class="token number">200</span> tests.
text ok?
+++ OK, passed <span class="token number">200</span> tests.
line ok?
+++ OK, passed <span class="token number">1</span> tests.
double ok?
+++ OK, passed <span class="token number">200</span> tests.
hcat ok?
+++ OK, passed <span class="token number">200</span> tests.
punctuate ok?
+++ OK, passed <span class="token number">200</span> tests.
prop_mempty_id ok?
+++ OK, passed <span class="token number">200</span> tests.
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>测试用例又多了两百个，我们的代码覆盖率也提高到了80%：</p><figure><img src="`+l+'" alt="image" tabindex="0" loading="lazy"><figcaption>image</figcaption></figure><p>HPC 确保我们在测试时诚实，因为任何没有被覆盖到的代码都会被标记出来。特别地，它确保程序员考虑到各种错误情形，状况不明朗的复杂分支，以及各式各样的代码。有了 QuickCheck 这样全面的测试生成系统，测试变得非常有意义，也成了Haskell 开发的核心。</p>',125),i=[c];function r(d,u){return a(),n("div",null,i)}const b=s(o,[["render",r],["__file","11.html.vue"]]),m=JSON.parse('{"path":"/%E5%AD%A6%E4%B9%A0/Haskell%E4%B8%AD%E6%96%87%E6%96%87%E6%A1%A3/11.html","title":"第 11 章：测试和质量保障","lang":"zh-CN","frontmatter":{"description":"第 11 章：测试和质量保障 构建真实系统意味着我们要关心系统的质量控制，健壮性和正确性。有了正确的质量保障机制，良好编写的代码才能像一架精确的机器一样，所有模块都完成它们预期的任务，并且不会有模棱两可的边界情况。最后我们得到的将是不言自明，正确无疑的代码------这样的代码往往能激发自信。 Haskell有几个工具用来构建这样精确的系统。最明显的一...","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/%E5%AD%A6%E4%B9%A0/Haskell%E4%B8%AD%E6%96%87%E6%96%87%E6%A1%A3/11.html"}],["meta",{"property":"og:site_name","content":"博客演示"}],["meta",{"property":"og:title","content":"第 11 章：测试和质量保障"}],["meta",{"property":"og:description","content":"第 11 章：测试和质量保障 构建真实系统意味着我们要关心系统的质量控制，健壮性和正确性。有了正确的质量保障机制，良好编写的代码才能像一架精确的机器一样，所有模块都完成它们预期的任务，并且不会有模棱两可的边界情况。最后我们得到的将是不言自明，正确无疑的代码------这样的代码往往能激发自信。 Haskell有几个工具用来构建这样精确的系统。最明显的一..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-02-24T05:35:58.000Z"}],["meta",{"property":"article:author","content":"hahg"}],["meta",{"property":"article:modified_time","content":"2024-02-24T05:35:58.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"第 11 章：测试和质量保障\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-02-24T05:35:58.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"hahg\\"}]}"]]},"headers":[{"level":2,"title":"QuickCheck: 基于类型的测试","slug":"quickchecktype-based-testing","link":"#quickchecktype-based-testing","children":[{"level":3,"title":"性质测试","slug":"testing-for-properties","link":"#testing-for-properties","children":[]},{"level":3,"title":"利用模型进行测试","slug":"testing-against-a-model","link":"#testing-against-a-model","children":[]}]},{"level":2,"title":"测试案例学习：美观打印器","slug":"testing-case-study-specifying-a-pretty-printer","link":"#testing-case-study-specifying-a-pretty-printer","children":[{"level":3,"title":"生成测试数据","slug":"generating-test-data","link":"#generating-test-data","children":[]},{"level":3,"title":"测试文档构建","slug":"testing-document-construction","link":"#testing-document-construction","children":[]},{"level":3,"title":"以列表为模型","slug":"using-lists-as-a-model","link":"#using-lists-as-a-model","children":[]},{"level":3,"title":"完成测试框架","slug":"putting-it-altogether","link":"#putting-it-altogether","children":[]}]},{"level":2,"title":"用 HPC 衡量测试覆盖率","slug":"measuring-test-coverage-with-hpc","link":"#measuring-test-coverage-with-hpc","children":[]}],"git":{"createdTime":1708749227000,"updatedTime":1708752958000,"contributors":[{"name":"hahg2000","email":"61403802+hahg2000@users.noreply.github.com","commits":2}]},"readingTime":{"minutes":20.32,"words":6096},"filePathRelative":"学习/Haskell中文文档/11.md","localizedDate":"2024年2月24日","excerpt":"\\n<p>构建真实系统意味着我们要关心系统的质量控制，健壮性和正确性。有了正确的质量保障机制，良好编写的代码才能像一架精确的机器一样，所有模块都完成它们预期的任务，并且不会有模棱两可的边界情况。最后我们得到的将是不言自明，正确无疑的代码------这样的代码往往能激发自信。</p>\\n<p>Haskell有几个工具用来构建这样精确的系统。最明显的一个，也是语言本身就内置的，是具有强大表达力的类型系统。它使得一些复杂的不变量（invariants）得到了静态保证------绝无可能写出违反这些约束条件的代码。另外，纯度和多态也促进了模块化，易重构，易测试的代码风格。这种类型的代码通常不会出错。</p>","autoDesc":true}');export{b as comp,m as data};
